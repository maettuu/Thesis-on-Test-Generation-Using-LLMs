it("should delete selected annotation when pressing Delete key", async () => {
  const { AnnotationEditorUIManager, Annotation } = await import("../../src/display/editor/tools.js");
  const { AnnotationFactory } = await import("../../src/core/annotation.js");

  const pdfDocument = {
    annotationStorage: new Map(),
    filterFactory: {},
  };

  const annotation = AnnotationFactory.create(AnnotationType.UNDERLINE, {
    color: [1, 0, 0],
    page: 1,
    quads: [[0, 0, 10, 10]],
  });

  pdfDocument.annotationStorage.setValue(annotation.id, annotation);

  const manager = new AnnotationEditorUIManager({}, {}, pdfDocument, {});

  manager.updateMode(AnnotationEditorType.UNDERLINE);

  const editor = manager.getEditor(annotation.id);
  manager.setSelected(editor);

  // Test non-mac Delete
  {
    const event = new KeyboardEvent('keydown', {
      key: 'Delete',
      bubbles: true,
      cancelable: true,
    });
    FeatureTest.platform.isMac = false;
    manager.keydown(event);
    expect(pdfDocument.annotationStorage.has(annotation.id)).toBe(false);
  }

  // Test mac Delete
  {
    const event = new KeyboardEvent('keydown', {
      key: 'Delete',
      metaKey: true,
      bubbles: true,
      cancelable: true,
    });
    FeatureTest.platform.isMac = true;
    manager.keydown(event);
    expect(pdfDocument.annotationStorage.has(annotation.id)).toBe(false);
  }
});
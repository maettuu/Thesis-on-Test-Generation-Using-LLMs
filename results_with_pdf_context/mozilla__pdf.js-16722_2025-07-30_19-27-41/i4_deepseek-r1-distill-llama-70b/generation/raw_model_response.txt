<think>
Okay, I need to write a test that checks if the patch provided resolves the issue where Firefox is slow to render poster PDFs. The patch is in the canvas.js file, specifically around resetting the context's filter property. 

First, I should understand what the patch does. The original code set ctx.filter to "none" unconditionally. The patch modifies this by checking if the filter is already "none" or empty before setting it. This should prevent unnecessary operations, which might be causing the slowdown.

To test this, I need to simulate the scenario where the filter is set and then reset. The test should measure the performance before and after the patch. If the patch works, the rendering time should improve.

I'll create a test that creates a canvas, applies a filter, and then resets it using resetCtxToDefault. I'll measure the time it takes before and after the reset. The test should pass if the reset doesn't cause a significant delay, which would indicate the patch is effective.

I'll import the necessary modules, set up a canvas context, define the reset function, and measure the time taken. Since this is a performance test, I'll run it in a headless browser environment to avoid any UI interference.

Finally, I'll write the test using Jest syntax, ensuring it's self-contained and only uses the provided imports. The test should fail before the patch because the reset is slow and pass after the patch because the reset becomes efficient.
</think>

```javascript
it("should render poster PDFs quickly by avoiding unnecessary filter resets", async () => {
  const { resetCtxToDefault } = await import("../../src/display/canvas.js");
  const canvas = new (await import("canvas")).Canvas(1, 1);
  const ctx = canvas.getContext("2d");

  // Simulate a filter being set
  ctx.filter = "blur(5px)";

  // Measure the time to reset the context
  const startTime = Date.now();
  resetCtxToDefault(ctx);
  const endTime = Date.now();

  // The time should be under a reasonable threshold
  expect(endTime - startTime).toBeLessThan(100);
});
```
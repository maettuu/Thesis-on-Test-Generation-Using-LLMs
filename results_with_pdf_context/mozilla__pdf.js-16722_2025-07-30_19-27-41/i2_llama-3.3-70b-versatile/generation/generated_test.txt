it("should not change the filter when its already none", async () => {
  const { CanvasGraphics } = await import("../../src/display/canvas.js");
  const { Util } = await import("../../src/shared/util.js");
  const canvas = {
    getContext: () => ({
      filter: "none",
      setLineDash: () => {},
      lineDashOffset: 0,
      fillStyle: "#000000",
      strokeStyle: "#000000",
      fillRule: "nonzero",
      globalAlpha: 1,
      lineWidth: 1,
      lineCap: "butt",
      lineJoin: "miter",
      miterLimit: 10,
      globalCompositeOperation: "source-over",
      font: "10px sans-serif",
      scale: () => {},
      imageSmoothingEnabled: true,
      drawImage: () => {},
      restore: () => {},
      save: () => {},
    }),
  };
  const ctx = canvas.getContext();
  const graphics = new CanvasGraphics(
    ctx,
    {},
    {},
    () => canvas,
    () => {},
    {},
    {},
    {}
  );
  graphics.paintInlineImageXObject({ width: 10, height: 10 });
  const expectedFilter = "none";
  const actualFilter = ctx.filter;
  Util.assert(actualFilter === expectedFilter, `Expected filter to be ${expectedFilter}, but got ${actualFilter}`);
});
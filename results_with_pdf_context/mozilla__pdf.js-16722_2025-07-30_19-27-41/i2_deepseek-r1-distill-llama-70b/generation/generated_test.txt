it("should not set filter unnecessarily", async () => {
  const { Util } = await import("../../src/shared/util.js");
  const { CanvasGraphics } = await import("../../src/display/canvas.js");

  class MockCanvasContext {
    constructor() {
      this.filter = "none";
      this.setFilterCalls = 0;
    }

    setFilter(value) {
      this.setFilterCalls++;
      this.filter = value;
    }

    save() {}
    restore() {}
    scale() {}
    imageSmoothingEnabled = false;
    fillText() {}
    drawImage() {}
    compose() {}
  }

  // Test setup
  const ctx = new MockCanvasContext();
  const canvasGraphics = new CanvasGraphics(
    ctx,
    {},
    {},
    () => ctx,
    () => {},
    {},
    {},
    {}
  );

  // Test resetCtxToDefault behavior
  ctx.filter = "none";
  Util.isNodeJS = false;
  resetCtxToDefault(ctx);
  expect(ctx.setFilterCalls).toBe(0);

  // Test paintInlineImageXObject behavior
  ctx.filter = "blur(5px)";
  const imgData = { width: 10, height: 10 };
  canvasGraphics.paintInlineImageXObject(imgData);
  expect(ctx.setFilterCalls).toBe(1);

  ctx.filter = "none";
  canvasGraphics.paintInlineImageXObject(imgData);
  expect(ctx.setFilterCalls).toBe(1);
});
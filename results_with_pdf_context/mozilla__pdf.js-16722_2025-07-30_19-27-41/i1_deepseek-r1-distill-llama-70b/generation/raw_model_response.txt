<think>
Okay, I need to write a regression test for the issue where Firefox is slow to render poster PDFs. The patch provided modifies the canvas.js file, specifically the resetCtxToDefault function and the paintInlineImageXObject method. The changes prevent resetting the context's filter property unless necessary, which should improve performance.

First, I'll examine the existing test file, test/unit/api_spec.js. It imports several modules, including getDocument and PDFWorkerUtil. I can use these to set up the test.

The test should measure the rendering time before and after the patch. Since the patch is applied, the test should now pass, meaning the rendering is faster.

I'll create a test case that loads a PDF, renders it, and checks if the time taken is within an acceptable range. I'll use a sample PDF from the TEST_PDFS_PATH, maybe hello.pdf.

I'll set up a PDF document, get the first page, and render it. I'll measure the time before and after rendering. Then, I'll compare the time taken to a threshold, say 500ms, to ensure it's within the expected range.

I'll need to import the necessary modules and set up the PDF document and page. Using PDFWorkerUtil to render the page will help measure the rendering time accurately.

I should also handle any potential errors and ensure the test cleans up properly after rendering.

So, the test will:

1. Import required modules.
2. Load the PDF document.
3. Get the first page and its viewport.
4. Render the page and measure the time.
5. Assert that the rendering time is within the expected limit.

This should verify that the patch improves rendering speed as intended.
</think>

```javascript
it("should render poster PDFs more efficiently", async () => {
  const { getDocument } = await import("../../src/display/api.js");
  const { PDFWorkerUtil } = await import("../../src/display/worker_utils.js");
  const { buildGetDocumentParams } = await import("./test_utils.js");

  // Load a sample PDF with poster-like content
  const pdfPath = buildGetDocumentParams("hello.pdf");
  const pdfDoc = await getDocument(pdfPath);
  const page = await pdfDoc.getPage(1);
  const viewport = page.getViewport({ scale: 1 });

  // Measure rendering performance
  const startTime = Date.now();
  await PDFWorkerUtil.renderPage(page);
  const renderTime = Date.now() - startTime;

  // Verify that rendering is efficient (threshold can be adjusted)
  expect(renderTime).toBeLessThan(500);
});
```
Before you begin:
- Keep going until the job is completely solved — don’t stop halfway.
- If you’re unsure about the behavior, reread the provided patch carefully; do not hallucinate.
- Plan your approach before writing code by reflecting on whether the test truly fails before and passes after.

Issue:
<issue>
Special character € does not appear
Attach (recommended) or Link to PDF file here: 
[d403d5d5-f3e1-411d-b289-9b497069b80e.pdf](https://github.com/user-attachments/files/15587595/d403d5d5-f3e1-411d-b289-9b497069b80e.pdf)

Configuration:
- Web browser and its version: 
    - Chromium-based: 125.0.6422.147
    - Mozilla Firefox 126.0.1
- Operating system and its version:
    - Windows Pro 11 Version: 10.0.22631 Build: 22631
- PDF.js version:
    - 4.4.14 -> [https://mozilla.github.io/pdf.js/web/viewer.html](https://mozilla.github.io/pdf.js/web/viewer.html)
    - 3.11.174
- Is a browser extension: No

Steps to reproduce the problem:
- Open attach document in pdf.js viewer

What is the expected behavior? (add screenshot)
- Open the document containing all special characters

![image](https://github.com/mozilla/pdf.js/assets/146735311/b09decd2-2dd3-413c-84ff-f68c6351dd58)

What went wrong? (add screenshot)
- The special character ﻿`€` does not appear

![image](https://github.com/mozilla/pdf.js/assets/146735311/84f0ee43-a037-4714-bbc3-16b1cd47350d)

Link to a viewer (if hosted on a site other than mozilla.github.io/pdf.js or as Firefox/Chrome extension):
- [https://mozilla.github.io/pdf.js/web/viewer.html](https://mozilla.github.io/pdf.js/web/viewer.html)

</issue>

PDF File:
<pdf>
issue18208.pdf
</pdf>

Patch:
<patch>
diff --git a/src/core/fonts.js b/src/core/fonts.js
--- a/src/core/fonts.js
+++ b/src/core/fonts.js
@@ -1244,7 +1244,7 @@ class Font {
         getDingbatsGlyphsUnicode(),
         this.differences
       );
-    } else if (isStandardFont) {
+    } else if (isStandardFont || isMappedToStandardFont) {
       const map = buildToFontChar(
         this.defaultEncoding,
         getGlyphsUnicode(),


</patch>

Imports:
<imports>
Available Packages
Dev Dependencies:
- @babel/core: ^7.25.2
- @babel/preset-env: ^7.25.3
- @babel/runtime: ^7.25.0
- @fluent/bundle: ^0.18.0
- @fluent/dom: ^0.10.0
- @jazzer.js/core: ^2.1.0
- @metalsmith/layouts: ^2.7.0
- @metalsmith/markdown: ^1.10.0
- autoprefixer: ^10.4.20
- babel-loader: ^9.1.3
- caniuse-lite: ^1.0.30001651
- canvas: ^2.11.2
- core-js: ^3.38.0
- cross-env: ^7.0.3
- eslint: ^8.57.0
- eslint-config-prettier: ^9.1.0
- eslint-plugin-fetch-options: ^0.0.5
- eslint-plugin-html: ^8.1.1
- eslint-plugin-import: ^2.29.1
- eslint-plugin-jasmine: ^4.2.0
- eslint-plugin-json: ^3.1.0
- eslint-plugin-no-unsanitized: ^4.0.2
- eslint-plugin-prettier: ^5.2.1
- eslint-plugin-sort-exports: ^0.9.1
- eslint-plugin-unicorn: ^55.0.0
- gulp: ^5.0.0
- gulp-cli: ^3.0.0
- gulp-postcss: ^10.0.0
- gulp-rename: ^2.0.0
- gulp-replace: ^1.1.4
- gulp-zip: ^6.0.0
- highlight.js: ^11.10.0
- jasmine: ^5.2.0
- jsdoc: ^4.0.3
- jstransformer-nunjucks: ^1.2.0
- metalsmith: ^2.6.3
- metalsmith-html-relative: ^2.0.1
- ordered-read-streams: ^2.0.0
- path2d: ^0.2.1
- pngjs: ^7.0.0
- postcss: ^8.4.41
- postcss-dark-theme-class: ^1.3.0
- postcss-dir-pseudo-class: ^9.0.0
- postcss-discard-comments: ^7.0.2
- postcss-nesting: ^13.0.0
- prettier: ^3.3.3
- puppeteer: ^22.15.0
- stylelint: ^16.8.2
- stylelint-prettier: ^5.0.2
- terser-webpack-plugin: ^5.3.10
- tsc-alias: ^1.8.10
- ttest: ^4.0.0
- typescript: ^5.5.4
- vinyl: ^3.0.0
- webpack: ^5.93.0
- webpack-stream: ^7.0.0
- yargs: ^17.7.2

Engines:
- node: >=18

Available Relative Imports:
- `../../src/core/annotation.js`: Annotation, AnnotationBorderStyle, AnnotationFactory, MarkupAnnotation, getQuadPoints
- `../../src/core/bidi.js`: bidi
- `../../src/core/cff_parser.js`: CFFCharset, CFFCompiler, CFFFDSelect, CFFParser, CFFStrings
- `../../src/core/cmap.js`: CMap, CMapFactory, IdentityCMap
- `../../src/core/colorspace.js`: ColorSpace
- `../../src/core/core_utils.js`: arrayBuffersToBytes, encodeToXmlString, escapePDFName, escapeString, getInheritableProperty, getSizeInBytes, isAscii, isWhiteSpace, log2, numberToString, parseXFAPath, recoverJsURL, stringToUTF16HexString, stringToUTF16String, toRomanNumerals, validateCSSFont
- `../../src/core/crypto.js`: AES128Cipher, AES256Cipher, ARCFourCipher, CipherTransformFactory, PDF17, PDF20, calculateMD5, calculateSHA256, calculateSHA384, calculateSHA512
- `../../src/core/default_appearance.js`: createDefaultAppearance, parseAppearanceStream, parseDefaultAppearance
- `../../src/core/document.js`: PDFDocument, Page
- `../../src/core/encodings.js`: getEncoding
- `../../src/core/evaluator.js`: PartialEvaluator
- `../../src/core/flate_stream.js`: FlateStream
- `../../src/core/font_substitutions.js`: getFontSubstitution
- `../../src/core/fonts_utils.js`: SEAC_ANALYSIS_ENABLED
- `../../src/core/function.js`: PDFFunctionFactory, PostScriptCompiler, PostScriptEvaluator
- `../../src/core/glyphlist.js`: getDingbatsGlyphsUnicode, getGlyphsUnicode
- `../../src/core/image_utils.js`: GlobalImageCache, LocalColorSpaceCache
- `../../src/core/jbig2.js`: Jbig2Error, Jbig2Image
- `../../src/core/jpg.js`: JpegError, JpegImage
- `../../src/core/jpx.js`: JpxError, JpxImage
- `../../src/core/metadata_parser.js`: MetadataParser
- `../../src/core/operator_list.js`: OperatorList
- `../../src/core/parser.js`: Lexer, Linearization, Parser
- `../../src/core/predictor_stream.js`: PredictorStream
- `../../src/core/primitives.js`: Cmd, Dict, EOF, Name, Ref, RefSet, RefSetCache, isCmd, isDict, isName, isRefsEqual
- `../../src/core/ps_parser.js`: PostScriptLexer, PostScriptParser
- `../../src/core/stream.js`: NullStream, Stream, StringStream
- `../../src/core/type1_parser.js`: Type1Parser
- `../../src/core/unicode.js`: getCharUnicodeCategory, getUnicodeForGlyph, getUnicodeRangeFor, mapSpecialUnicodeValues
- `../../src/core/worker.js`: WorkerMessageHandler, WorkerTask
- `../../src/core/writer.js`: incrementalUpdate, writeDict
- `../../src/core/xfa/bind.js`: Binder
- `../../src/core/xfa/data.js`: DataHandler
- `../../src/core/xfa/factory.js`: XFAFactory
- `../../src/core/xfa/formcalc_lexer.js`: Lexer, TOKEN, Token
- `../../src/core/xfa/formcalc_parser.js`: Errors, Parser
- `../../src/core/xfa/parser.js`: XFAParser
- `../../src/core/xfa/som.js`: searchNode
- `../../src/core/xfa/symbol_utils.js`: $dump, $getChildren, $getChildrenByClass, $getChildrenByName, $text, $uid
- `../../src/core/xml_parser.js`: SimpleXMLParser, XMLParserBase
- `../../src/display/annotation_layer.js`: AnnotationLayer
- `../../src/display/annotation_storage.js`: AnnotationStorage
- `../../src/display/api.js`: DefaultCMapReaderFactory, DefaultCanvasFactory, DefaultStandardFontDataFactory, LoopbackPort, PDFDataRangeTransport, PDFDocumentLoadingTask, PDFDocumentProxy, PDFPageProxy, PDFWorker, RenderTask, build, getDocument, version
- `../../src/display/display_utils.js`: DOMCanvasFactory, DOMSVGFactory, PDFDateString, PageViewport, PixelsPerInch, RenderingCancelledException, StatTimer, fetchData, getFilenameFromUrl, getPdfFilenameFromUrl, getXfaPageViewport, isDataScheme, isPdfFile, isValidFetchUrl, noContextMenu, setLayerDimensions
- `../../src/display/draw_layer.js`: DrawLayer
- `../../src/display/editor/annotation_editor_layer.js`: AnnotationEditorLayer
- `../../src/display/editor/color_picker.js`: ColorPicker
- `../../src/display/editor/tools.js`: AnnotationEditorUIManager, CommandManager
- `../../src/display/fetch_stream.js`: PDFFetchStream
- `../../src/display/metadata.js`: Metadata
- `../../src/display/network.js`: PDFNetworkStream
- `../../src/display/network_utils.js`: createResponseStatusError, extractFilenameFromHeader, validateRangeRequestCapabilities, validateResponseStatus
- `../../src/display/node_stream.js`: PDFNodeStream
- `../../src/display/node_utils.js`: NodePackages
- `../../src/display/text_layer.js`: TextLayer
- `../../src/display/worker_options.js`: GlobalWorkerOptions
- `../../src/display/xfa_layer.js`: XfaLayer
- `../../src/shared/message_handler.js`: MessageHandler
- `../../src/shared/murmurhash3.js`: MurmurHash3_64
- `../../src/shared/util.js`: AbortException, AnnotationBorderStyleType, AnnotationEditorParamsType, AnnotationEditorType, AnnotationFieldFlag, AnnotationFlag, AnnotationMode, AnnotationType, BaseException, CMapCompressionType, FeatureTest, FormatError, ImageKind, InvalidPDFException, MissingPDFException, OPS, PasswordException, PasswordResponses, PermissionFlag, RenderingIntentFlag, UnexpectedResponseException, UnknownErrorException, Util, VerbosityLevel, assert, bytesToString, createValidAbsoluteUrl, getModificationDate, getVerbosityLevel, isNodeJS, normalizeUnicode, objectSize, setVerbosityLevel, shadow, string32, stringToBytes, stringToPDFString, stringToUTF8String
- `../../web/annotation_layer_builder.js`: AnnotationLayerBuilder
- `../../web/app_options.js`: AppOptions, OptionKind
- `../../web/download_manager.js`: DownloadManager
- `../../web/event_utils.js`: EventBus, WaitOnType, waitOnEventOrTimeout
- `../../web/genericl10n.js`: GenericL10n
- `../../web/pdf_find_controller.js`: FindState, PDFFindController
- `../../web/pdf_find_utils.js`: CharacterType, getCharacterType
- `../../web/pdf_history.js`: PDFHistory, isDestArraysEqual, isDestHashesEqual
- `../../web/pdf_link_service.js`: LinkTarget, PDFLinkService, SimpleLinkService
- `../../web/pdf_page_view.js`: PDFPageView
- `../../web/pdf_scripting_manager.component.js`: PDFScriptingManager
- `../../web/pdf_single_page_viewer.js`: PDFSinglePageViewer
- `../../web/pdf_viewer.js`: PDFPageViewBuffer, PDFViewer
- `../../web/struct_tree_layer_builder.js`: StructTreeLayerBuilder
- `../../web/text_layer_builder.js`: TextLayerBuilder
- `../../web/ui_utils.js`: AutoPrintRegExp, ProgressBar, RenderingStates, ScrollMode, SpreadMode, backtrackBeforeAllVisibleElements, binarySearchFirstItem, getPageSizeInches, getVisibleElements, isPortraitOrientation, isValidRotation, parseQueryString, removeNullCharacters
- `../../web/xfa_layer_builder.js`: XfaLayerBuilder
- `./test_utils.js`: CMAP_URL, DefaultFileReaderFactory, STANDARD_FONT_DATA_URL, TEST_PDFS_PATH, XRefMock, buildGetDocumentParams, createIdFactory, createTemporaryNodeServer
- `./testreporter.js`: TestReporter
</imports>

Code:
<code>
File:
src/core/fonts.js
1 /* Copyright 2012 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 import {
17   assert,
18   bytesToString,
19   FONT_IDENTITY_MATRIX,
20   FormatError,
21   info,
22   shadow,
23   string32,
24   warn,
25 } from "../shared/util.js";
26 import { CFFCompiler, CFFParser } from "./cff_parser.js";
27 import {
28   FontFlags,
29   getVerticalPresentationForm,
30   MacStandardGlyphOrdering,
31   normalizeFontName,
32   recoverGlyphName,
33   SEAC_ANALYSIS_ENABLED,
34 } from "./fonts_utils.js";
35 import {
36   getCharUnicodeCategory,
37   getUnicodeForGlyph,
38   getUnicodeRangeFor,
39   mapSpecialUnicodeValues,
40 } from "./unicode.js";
41 import { getDingbatsGlyphsUnicode, getGlyphsUnicode } from "./glyphlist.js";
42 import {
43   getEncoding,
44   MacRomanEncoding,
45   StandardEncoding,
46   SymbolSetEncoding,
47   WinAnsiEncoding,
48   ZapfDingbatsEncoding,
49 } from "./encodings.js";
50 import {
51   getGlyphMapForStandardFonts,
52   getNonStdFontMap,
53   getSerifFonts,
54   getStdFontMap,
55   getSupplementalGlyphMapForArialBlack,
56   getSupplementalGlyphMapForCalibri,
57 } from "./standard_fonts.js";
58 import { IdentityToUnicodeMap, ToUnicodeMap } from "./to_unicode_map.js";
59 import { CFFFont } from "./cff_font.js";
60 import { FontRendererFactory } from "./font_renderer.js";
61 import { getFontBasicMetrics } from "./metrics.js";
62 import { GlyfTable } from "./glyf.js";
63 import { IdentityCMap } from "./cmap.js";
64 import { OpenTypeFileBuilder } from "./opentype_file_builder.js";
65 import { readUint32 } from "./core_utils.js";
66 import { Stream } from "./stream.js";
67 import { Type1Font } from "./type1_font.js";
68 
69 // Unicode Private Use Areas:
70 const PRIVATE_USE_AREAS = [
71   [0xe000, 0xf8ff], // BMP (0)
72   [0x100000, 0x10fffd], // PUP (16)
73 ];
74 
75 // PDF Glyph Space Units are one Thousandth of a TextSpace Unit
76 // except for Type 3 fonts
77 const PDF_GLYPH_SPACE_UNITS = 1000;
78 
79 const EXPORT_DATA_PROPERTIES = [
80   "ascent",
81   "bbox",
82   "black",
83   "bold",
84   "charProcOperatorList",
85   "composite",
86   "cssFontInfo",
87   "data",
88   "defaultVMetrics",
89   "defaultWidth",
90   "descent",
91   "fallbackName",
92   "fontMatrix",
93   "isInvalidPDFjsFont",
94   "isType3Font",
95   "italic",
96   "loadedName",
97   "mimetype",
98   "missingFile",
99   "name",
100   "remeasure",
101   "subtype",
102   "systemFontInfo",
103   "type",
104   "vertical",
105 ];
106 
107 const EXPORT_DATA_EXTRA_PROPERTIES = [
108   "cMap",
109   "defaultEncoding",
110   "differences",
111   "isMonospace",
112   "isSerifFont",
113   "isSymbolicFont",
114   "seacMap",
115   "toFontChar",
116   "toUnicode",
117   "vmetrics",
118   "widths",
119 ];
120 
437 // Please refer to:
438 //  - https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6name.html
442 
443 // Please refer to:
444 //  - https://developer.apple.com/fonts/TrueType-Reference-Manual/RM06/Chap6name.html
445 //  - https://learn.microsoft.com/en-us/typography/opentype/spec/name#windows-language-ids
449 
950 /**
951  * 'Font' is the class the outside world should use, it encapsulate all the font
952  * decoding logics whatever type it is (assuming the font type is supported).
953  */
954 class Font {
955   constructor(name, file, properties) {
956     this.name = name;
957     this.psName = null;
958     this.mimetype = null;
959     this.disableFontFace = false;
960 
961     this.loadedName = properties.loadedName;
962     this.isType3Font = properties.isType3Font;
963     this.missingFile = false;
964     this.cssFontInfo = properties.cssFontInfo;
965 
966     this._charsCache = Object.create(null);
967     this._glyphCache = Object.create(null);
968 
969     let isSerifFont = !!(properties.flags & FontFlags.Serif);
970     // Fallback to checking the font name, in order to improve text-selection,
971     // since the /Flags-entry is often wrong (fixes issue13845.pdf).
972     if (!isSerifFont && !properties.isSimulatedFlags) {
973       const baseName = name.replaceAll(/[,_]/g, "-").split("-", 1)[0],
974         serifFonts = getSerifFonts();
975       for (const namePart of baseName.split("+")) {
976         if (serifFonts[namePart]) {
977           isSerifFont = true;
978           break;
979         }
980       }
981     }
982     this.isSerifFont = isSerifFont;
983 
984     this.isSymbolicFont = !!(properties.flags & FontFlags.Symbolic);
985     this.isMonospace = !!(properties.flags & FontFlags.FixedPitch);
986 
987     let { type, subtype } = properties;
988     this.type = type;
989     this.subtype = subtype;
990     this.systemFontInfo = properties.systemFontInfo;
991 
992     const matches = name.match(/^InvalidPDFjsFont_(.*)_\d+$/);
993     this.isInvalidPDFjsFont = !!matches;
994     if (this.isInvalidPDFjsFont) {
995       this.fallbackName = matches[1];
996     } else if (this.isMonospace) {
997       this.fallbackName = "monospace";
998     } else if (this.isSerifFont) {
999       this.fallbackName = "serif";
1000     } else {
1001       this.fallbackName = "sans-serif";
1002     }
1003 
1004     if (this.systemFontInfo?.guessFallback) {
1005       // Once the fallback name is guessed, we don't want to guess it again.
1006       this.systemFontInfo.guessFallback = false;
1007       this.systemFontInfo.css += `,${this.fallbackName}`;
1008     }
1009 
1010     this.differences = properties.differences;
1011     this.widths = properties.widths;
1012     this.defaultWidth = properties.defaultWidth;
1013     this.composite = properties.composite;
1014     this.cMap = properties.cMap;
1015     this.capHeight = properties.capHeight / PDF_GLYPH_SPACE_UNITS;
1016     this.ascent = properties.ascent / PDF_GLYPH_SPACE_UNITS;
1017     this.descent = properties.descent / PDF_GLYPH_SPACE_UNITS;
1018     this.lineHeight = this.ascent - this.descent;
1019     this.fontMatrix = properties.fontMatrix;
1020     this.bbox = properties.bbox;
1021     this.defaultEncoding = properties.defaultEncoding;
1022 
1023     this.toUnicode = properties.toUnicode;
1024     this.toFontChar = [];
1025 
1026     if (properties.type === "Type3") {
1027       for (let charCode = 0; charCode < 256; charCode++) {
1028         this.toFontChar[charCode] =
1029           this.differences[charCode] || properties.defaultEncoding[charCode];
1030       }
1031       return;
1032     }
1033 
1034     this.cidEncoding = properties.cidEncoding || "";
1035     this.vertical = !!properties.vertical;
1036     if (this.vertical) {
1037       this.vmetrics = properties.vmetrics;
1038       this.defaultVMetrics = properties.defaultVMetrics;
1039     }
1040 
1041     if (!file || file.isEmpty) {
1042       if (file) {
1043         // Some bad PDF generators will include empty font files,
1044         // attempting to recover by assuming that no file exists.
1045         warn('Font file is empty in "' + name + '" (' + this.loadedName + ")");
1046       }
1047       this.fallbackToSystemFont(properties);
1048       return;
1049     }
1050 
1051     // Parse the font file to determine the correct type/subtype, rather than
1052     // relying on the (often incorrect) data in the font dictionary; (see e.g.
1053     //  issue6782.pdf, issue7598.pdf, and issue9949.pdf).
1054     [type, subtype] = getFontFileType(file, properties);
1055 
1056     if (type !== this.type || subtype !== this.subtype) {
1057       info(
1058         "Inconsistent font file Type/SubType, expected: " +
1059           `${this.type}/${this.subtype} but found: ${type}/${subtype}.`
1060       );
1061     }
1062 
1063     let data;
1064     try {
1065       switch (type) {
1066         case "MMType1":
1067           info("MMType1 font (" + name + "), falling back to Type1.");
1068         /* falls through */
1069         case "Type1":
1070         case "CIDFontType0":
1071           this.mimetype = "font/opentype";
1072 
1073           const cff =
1074             subtype === "Type1C" || subtype === "CIDFontType0C"
1075               ? new CFFFont(file, properties)
1076               : new Type1Font(name, file, properties);
1077 
1078           adjustWidths(properties);
1079 
1080           // Wrap the CFF data inside an OTF font file
1081           data = this.convert(name, cff, properties);
1082           break;
1083 
1084         case "OpenType":
1085         case "TrueType":
1086         case "CIDFontType2":
1087           this.mimetype = "font/opentype";
1088 
1089           // Repair the TrueType file. It is can be damaged in the point of
1090           // view of the sanitizer
1091           data = this.checkAndRepair(name, file, properties);
1092           if (this.isOpenType) {
1093             adjustWidths(properties);
1094 
1095             type = "OpenType";
1096           }
1097           break;
1098 
1099         default:
1100           throw new FormatError(`Font ${type} is not supported`);
1101       }
1102     } catch (e) {
1103       warn(e);
1104       this.fallbackToSystemFont(properties);
1105       return;
1106     }
1107 
1108     amendFallbackToUnicode(properties);
1109     this.data = data;
1110 
1111     // Transfer some properties again that could change during font conversion
1112     this.type = type;
1113     this.subtype = subtype;
1114     this.fontMatrix = properties.fontMatrix;
1115     this.widths = properties.widths;
1116     this.defaultWidth = properties.defaultWidth;
1117     this.toUnicode = properties.toUnicode;
1118     this.seacMap = properties.seacMap;
1119   }
1120 
1143   fallbackToSystemFont(properties) {
1144     this.missingFile = true;
1145     // The file data is not specified. Trying to fix the font name
1146     // to be used with the canvas.font.
1147     const { name, type } = this;
1148     let fontName = normalizeFontName(name);
1149     const stdFontMap = getStdFontMap(),
1150       nonStdFontMap = getNonStdFontMap();
1151     const isStandardFont = !!stdFontMap[fontName];
1152     const isMappedToStandardFont = !!(
1153       nonStdFontMap[fontName] && stdFontMap[nonStdFontMap[fontName]]
1154     );
1155 
1156     fontName = stdFontMap[fontName] || nonStdFontMap[fontName] || fontName;
1157 
1158     const fontBasicMetricsMap = getFontBasicMetrics();
1159     const metrics = fontBasicMetricsMap[fontName];
1160     if (metrics) {
1161       if (isNaN(this.ascent)) {
1162         this.ascent = metrics.ascent / PDF_GLYPH_SPACE_UNITS;
1163       }
1164       if (isNaN(this.descent)) {
1165         this.descent = metrics.descent / PDF_GLYPH_SPACE_UNITS;
1166       }
1167       if (isNaN(this.capHeight)) {
1168         this.capHeight = metrics.capHeight / PDF_GLYPH_SPACE_UNITS;
1169       }
1170     }
1171 
1172     this.bold = /bold/gi.test(fontName);
1173     this.italic = /oblique|italic/gi.test(fontName);
1174 
1175     // Use 'name' instead of 'fontName' here because the original
1176     // name ArialBlack for example will be replaced by Helvetica.
1177     this.black = /Black/g.test(name);
1178 
1179     // Use 'name' instead of 'fontName' here because the original
1180     // name ArialNarrow for example will be replaced by Helvetica.
1181     const isNarrow = /Narrow/g.test(name);
1182 
1183     // if at least one width is present, remeasure all chars when exists
1184     this.remeasure =
1185       (!isStandardFont || isNarrow) && Object.keys(this.widths).length > 0;
1186     if (
1187       (isStandardFont || isMappedToStandardFont) &&
1188       type === "CIDFontType2" &&
1189       this.cidEncoding.startsWith("Identity-")
1190     ) {
1191       const cidToGidMap = properties.cidToGidMap;
1192       // Standard fonts might be embedded as CID font without glyph mapping.
1193       // Building one based on GlyphMapForStandardFonts.
1194       const map = [];
1195       applyStandardFontGlyphMap(map, getGlyphMapForStandardFonts());
1196 
1197       if (/Arial-?Black/i.test(name)) {
1198         applyStandardFontGlyphMap(map, getSupplementalGlyphMapForArialBlack());
1199       } else if (/Calibri/i.test(name)) {
1200         applyStandardFontGlyphMap(map, getSupplementalGlyphMapForCalibri());
1201       }
1202 
1203       // Always update the glyph mapping with the `cidToGidMap` when it exists
1204       // (fixes issue12418_reduced.pdf).
1205       if (cidToGidMap) {
1206         for (const charCode in map) {
1207           const cid = map[charCode];
1208           if (cidToGidMap[cid] !== undefined) {
1209             map[+charCode] = cidToGidMap[cid];
1210           }
1211         }
1212         // When the /CIDToGIDMap is "incomplete", fallback to the included
1213         // /ToUnicode-map regardless of its encoding (fixes issue11915.pdf).
1214         if (
1215           cidToGidMap.length !== this.toUnicode.length &&
1216           properties.hasIncludedToUnicodeMap &&
1217           this.toUnicode instanceof IdentityToUnicodeMap
1218         ) {
1219           this.toUnicode.forEach(function (charCode, unicodeCharCode) {
1220             const cid = map[charCode];
1221             if (cidToGidMap[cid] === undefined) {
1222               map[+charCode] = unicodeCharCode;
1223             }
1224           });
1225         }
1226       }
1227 
1228       if (!(this.toUnicode instanceof IdentityToUnicodeMap)) {
1229         this.toUnicode.forEach(function (charCode, unicodeCharCode) {
1230           map[+charCode] = unicodeCharCode;
1231         });
1232       }
1233       this.toFontChar = map;
1234       this.toUnicode = new ToUnicodeMap(map);
1235     } else if (/Symbol/i.test(fontName)) {
1236       this.toFontChar = buildToFontChar(
1237         SymbolSetEncoding,
1238         getGlyphsUnicode(),
1239         this.differences
1240       );
1241     } else if (/Dingbats/i.test(fontName)) {
1242       this.toFontChar = buildToFontChar(
1243         ZapfDingbatsEncoding,
1244         getDingbatsGlyphsUnicode(),
1245         this.differences
1246       );
1247     } else if (isStandardFont) {
1248       const map = buildToFontChar(
1249         this.defaultEncoding,
1250         getGlyphsUnicode(),
1251         this.differences
1252       );
1253 
1254       if (
1255         type === "CIDFontType2" &&
1256         !this.cidEncoding.startsWith("Identity-") &&
1257         !(this.toUnicode instanceof IdentityToUnicodeMap)
1258       ) {
1259         this.toUnicode.forEach(function (charCode, unicodeCharCode) {
1260           map[+charCode] = unicodeCharCode;
1261         });
1262       }
1263       this.toFontChar = map;
1264     } else {
1265       const glyphsUnicodeMap = getGlyphsUnicode();
1266       const map = [];
1267       this.toUnicode.forEach((charCode, unicodeCharCode) => {
1268         if (!this.composite) {
1269           const glyphName =
1270             this.differences[charCode] || this.defaultEncoding[charCode];
1271           const unicode = getUnicodeForGlyph(glyphName, glyphsUnicodeMap);
1272           if (unicode !== -1) {
1273             unicodeCharCode = unicode;
1274           }
1275         }
1276         map[+charCode] = unicodeCharCode;
1277       });
1278 
1279       // Attempt to improve the glyph mapping for (some) composite fonts that
1280       // appear to lack meaningful ToUnicode data.
1281       if (this.composite && this.toUnicode instanceof IdentityToUnicodeMap) {
1282         if (/Tahoma|Verdana/i.test(name)) {
1283           // Fixes issue15719.pdf and issue11242_reduced.pdf.
1284           applyStandardFontGlyphMap(map, getGlyphMapForStandardFonts());
1285         }
1286       }
1287       this.toFontChar = map;
1288     }
1289 
1290     amendFallbackToUnicode(properties);
1291     this.loadedName = fontName.split("-", 1)[0];
1292   }
1293 
3565 }
3566 
3586 
</code>

Test file:
<test_file>
File:
test/unit/api_spec.js
/* Copyright 2017 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import {
  AnnotationEditorType,
  AnnotationMode,
  AnnotationType,
  ImageKind,
  InvalidPDFException,
  isNodeJS,
  MissingPDFException,
  objectSize,
  OPS,
  PasswordException,
  PasswordResponses,
  PermissionFlag,
  UnknownErrorException,
} from "../../src/shared/util.js";
import {
  buildGetDocumentParams,
  CMAP_URL,
  createTemporaryNodeServer,
  DefaultFileReaderFactory,
  TEST_PDFS_PATH,
} from "./test_utils.js";
import {
  DefaultCanvasFactory,
  getDocument,
  PDFDataRangeTransport,
  PDFDocumentLoadingTask,
  PDFDocumentProxy,
  PDFPageProxy,
  PDFWorker,
  RenderTask,
} from "../../src/display/api.js";
import {
  PageViewport,
  RenderingCancelledException,
  StatTimer,
} from "../../src/display/display_utils.js";
import { AutoPrintRegExp } from "../../web/ui_utils.js";
import { GlobalImageCache } from "../../src/core/image_utils.js";
import { GlobalWorkerOptions } from "../../src/display/worker_options.js";
import { Metadata } from "../../src/display/metadata.js";
const WORKER_SRC = "../../build/generic/build/pdf.worker.mjs";
</test_file>

Your task:
You are a software tester at pdf.js.
1. Examine the existing test file. You may reuse any imports, helpers or setup blocks it already has.
2. Write exactly one javascript test `it("...", async () => {...})` block.
3. Your test must fail on the code before the patch, and pass after, hence the test will verify that the patch resolves the issue.
4. The test must be self-contained and to-the-point.
5. If you need something new use only the provided imports (respect the paths exactly how they are given) by importing dynamically for compatibility with Node.js — no new dependencies. You can use the PDF file for testing as follows:
const { getDocument } = await import('../../src/display/api.js');
const { buildGetDocumentParams } = await import('./test_utils.js');
const loadingTask = getDocument(buildGetDocumentParams('issue18208.pdf'))
6. Return only the javascript code for the new `it(...)` block (no comments or explanations).

Example structure:
it("should <describe behavior>", async () => {
  const { example } = await import("../../src/core/example.js");
  <initialize required variables>;
  <define expected variable>;
  <generate actual variables>;
  <compare expected with actual>;
});


Before you begin:
- Keep going until the job is completely solved — don’t stop halfway.
- If you’re unsure about the behavior, reread the provided patch carefully; do not hallucinate.
- Plan your approach before writing code by reflecting on whether the test truly fails before and passes after.

Issue:
<issue>
[Bug]: The images embedded in the PDF do not display.
### Attach (recommended) or Link to PDF file

[test.pdf](https://github.com/user-attachments/files/19102190/test.pdf)

### Web browser and its version

Firefox 133.0.3

### Operating system and its version

Windows 10

### PDF.js version

5.0.299

### Is the bug present in the latest PDF.js version?

Yes

### Is a browser extension

No

### Steps to reproduce the problem

Open the test.pdf in https://mozilla.github.io/pdf.js/web/viewer.html

### What is the expected behavior?

The images embedded in the PDF do not display. 
After testing, the images can be correctly rendered in Adobe Online, Chrome, and Edge.

![Image](https://github.com/user-attachments/assets/d90e6b5c-47ef-4a10-a434-f28e7fc83e16)

### What went wrong?

There are some errors when parsing the image.

![Image](https://github.com/user-attachments/assets/8fe48f55-daa8-409f-95c9-a50af2167092)

### Link to a viewer

_No response_

### Additional context

_No response_
</issue>

PDF File:
<pdf>
issue19611.pdf
</pdf>

Patch:
<patch>
diff --git a/src/core/image.js b/src/core/image.js
--- a/src/core/image.js
+++ b/src/core/image.js
@@ -140,11 +140,26 @@ class PDFImage {
       );
       width = image.width;
       height = image.height;
-    }
-    if (width < 1 || height < 1) {
-      throw new FormatError(
-        `Invalid image width: ${width} or height: ${height}`
-      );
+    } else {
+      const validWidth = typeof width === "number" && width > 0,
+        validHeight = typeof height === "number" && height > 0;
+
+      if (!validWidth || !validHeight) {
+        if (!image.fallbackDims) {
+          throw new FormatError(
+            `Invalid image width: ${width} or height: ${height}`
+          );
+        }
+        warn(
+          "PDFImage - using the Width/Height of the parent image, for SMask/Mask data."
+        );
+        if (!validWidth) {
+          width = image.fallbackDims.width;
+        }
+        if (!validHeight) {
+          height = image.fallbackDims.height;
+        }
+      }
     }
     this.width = width;
     this.height = height;
@@ -244,6 +259,10 @@ class PDFImage {
     }
 
     if (smask) {
+      // Provide fallback width/height values for corrupt SMask images
+      // (see issue19611.pdf).
+      smask.fallbackDims ??= { width, height };
+
       this.smask = new PDFImage({
         xref,
         res,
@@ -260,6 +279,10 @@ class PDFImage {
         if (!imageMask) {
           warn("Ignoring /Mask in image without /ImageMask.");
         } else {
+          // Provide fallback width/height values for corrupt Mask images
+          // (see issue19611.pdf).
+          mask.fallbackDims ??= { width, height };
+
           this.mask = new PDFImage({
             xref,
             res,


</patch>

Imports:
<imports>
Available Packages
Dev Dependencies:
- @babel/core: ^7.26.9
- @babel/preset-env: ^7.26.9
- @babel/runtime: ^7.26.9
- @fluent/bundle: ^0.18.0
- @fluent/dom: ^0.10.0
- @metalsmith/layouts: ^2.7.0
- @metalsmith/markdown: ^1.10.0
- @napi-rs/canvas: ^0.1.67
- @types/node: ^22.13.5
- autoprefixer: ^10.4.20
- babel-loader: ^9.2.1
- caniuse-lite: ^1.0.30001700
- core-js: ^3.40.0
- eslint: ^9.21.0
- eslint-plugin-import: ^2.31.0
- eslint-plugin-jasmine: ^4.2.2
- eslint-plugin-json: ^4.0.1
- eslint-plugin-no-unsanitized: ^4.1.2
- eslint-plugin-perfectionist: ^4.9.0
- eslint-plugin-prettier: ^5.2.3
- eslint-plugin-unicorn: ^57.0.0
- globals: ^16.0.0
- gulp: ^5.0.0
- gulp-cli: ^3.0.0
- gulp-postcss: ^10.0.0
- gulp-rename: ^2.0.0
- gulp-replace: ^1.1.4
- gulp-zip: ^6.1.0
- highlight.js: ^11.11.1
- jasmine: ^5.6.0
- jsdoc: ^4.0.4
- jstransformer-nunjucks: ^1.2.0
- metalsmith: ^2.6.3
- metalsmith-html-relative: ^2.0.6
- ordered-read-streams: ^2.0.0
- pngjs: ^7.0.0
- postcss: ^8.5.3
- postcss-dark-theme-class: ^1.3.0
- postcss-dir-pseudo-class: ^9.0.1
- postcss-discard-comments: ^7.0.3
- postcss-nesting: ^13.0.1
- prettier: ^3.5.2
- puppeteer: ^24.2.1
- stylelint: ^16.14.1
- stylelint-prettier: ^5.0.3
- svglint: ^3.1.0
- terser-webpack-plugin: ^5.3.11
- tsc-alias: ^1.8.10
- ttest: ^4.0.0
- typescript: ^5.7.3
- vinyl: ^3.0.0
- webpack: ^5.98.0
- webpack-stream: ^7.0.0
- yargs: ^17.7.2

Engines:
- node: >=20

Available Relative Imports:
- `../../src/core/annotation.js`: Annotation, AnnotationBorderStyle, AnnotationFactory, MarkupAnnotation, getQuadPoints
- `../../src/core/bidi.js`: bidi
- `../../src/core/calculate_md5.js`: calculateMD5
- `../../src/core/calculate_sha256.js`: calculateSHA256
- `../../src/core/calculate_sha_other.js`: calculateSHA384, calculateSHA512
- `../../src/core/cff_parser.js`: CFFCharset, CFFCompiler, CFFFDSelect, CFFParser, CFFStrings
- `../../src/core/cmap.js`: CMap, CMapFactory, IdentityCMap
- `../../src/core/colorspace.js`: ColorSpace
- `../../src/core/colorspace_utils.js`: ColorSpaceUtils
- `../../src/core/core_utils.js`: arrayBuffersToBytes, encodeToXmlString, escapePDFName, escapeString, getInheritableProperty, getSizeInBytes, isAscii, isWhiteSpace, log2, numberToString, parseXFAPath, recoverJsURL, stringToUTF16HexString, stringToUTF16String, toRomanNumerals, validateCSSFont
- `../../src/core/crypto.js`: AES128Cipher, AES256Cipher, ARCFourCipher, CipherTransformFactory, PDF17, PDF20
- `../../src/core/default_appearance.js`: createDefaultAppearance, parseAppearanceStream, parseDefaultAppearance
- `../../src/core/document.js`: PDFDocument, Page
- `../../src/core/encodings.js`: getEncoding
- `../../src/core/evaluator.js`: PartialEvaluator
- `../../src/core/flate_stream.js`: FlateStream
- `../../src/core/font_substitutions.js`: getFontSubstitution
- `../../src/core/fonts_utils.js`: SEAC_ANALYSIS_ENABLED
- `../../src/core/function.js`: PDFFunctionFactory, PostScriptCompiler, PostScriptEvaluator
- `../../src/core/glyphlist.js`: getDingbatsGlyphsUnicode, getGlyphsUnicode
- `../../src/core/image_utils.js`: GlobalColorSpaceCache, GlobalImageCache, LocalColorSpaceCache
- `../../src/core/jbig2.js`: Jbig2Error, Jbig2Image
- `../../src/core/jpg.js`: JpegError, JpegImage
- `../../src/core/jpx.js`: JpxError, JpxImage
- `../../src/core/metadata_parser.js`: MetadataParser
- `../../src/core/operator_list.js`: OperatorList
- `../../src/core/parser.js`: Lexer, Linearization, Parser
- `../../src/core/predictor_stream.js`: PredictorStream
- `../../src/core/primitives.js`: Cmd, Dict, EOF, Name, Ref, RefSet, RefSetCache, isCmd, isDict, isName, isRefsEqual
- `../../src/core/ps_parser.js`: PostScriptLexer, PostScriptParser
- `../../src/core/stream.js`: NullStream, Stream, StringStream
- `../../src/core/type1_parser.js`: Type1Parser
- `../../src/core/unicode.js`: getCharUnicodeCategory, getUnicodeForGlyph, getUnicodeRangeFor, mapSpecialUnicodeValues
- `../../src/core/worker.js`: WorkerMessageHandler, WorkerTask
- `../../src/core/writer.js`: incrementalUpdate, writeChanges, writeDict
- `../../src/core/xfa/bind.js`: Binder
- `../../src/core/xfa/data.js`: DataHandler
- `../../src/core/xfa/factory.js`: XFAFactory
- `../../src/core/xfa/formcalc_lexer.js`: Lexer, TOKEN, Token
- `../../src/core/xfa/formcalc_parser.js`: Errors, Parser
- `../../src/core/xfa/parser.js`: XFAParser
- `../../src/core/xfa/som.js`: searchNode
- `../../src/core/xfa/symbol_utils.js`: $dump, $getChildren, $getChildrenByClass, $getChildrenByName, $text, $uid
- `../../src/core/xml_parser.js`: SimpleXMLParser, XMLParserBase
- `../../src/display/annotation_layer.js`: AnnotationLayer
- `../../src/display/annotation_storage.js`: AnnotationStorage
- `../../src/display/api.js`: LoopbackPort, PDFDataRangeTransport, PDFDocumentLoadingTask, PDFDocumentProxy, PDFPageProxy, PDFWorker, RenderTask, build, getDocument, isValidExplicitDest, version
- `../../src/display/canvas_factory.js`: DOMCanvasFactory
- `../../src/display/cmap_reader_factory.js`: DOMCMapReaderFactory
- `../../src/display/display_utils.js`: OutputScale, PDFDateString, PageViewport, PixelsPerInch, RenderingCancelledException, StatTimer, SupportedImageMimeTypes, fetchData, getFilenameFromUrl, getPdfFilenameFromUrl, getXfaPageViewport, isDataScheme, isPdfFile, isValidFetchUrl, noContextMenu, setLayerDimensions, stopEvent
- `../../src/display/draw_layer.js`: DrawLayer
- `../../src/display/editor/annotation_editor_layer.js`: AnnotationEditorLayer
- `../../src/display/editor/color_picker.js`: ColorPicker
- `../../src/display/editor/drawers/signaturedraw.js`: SignatureExtractor
- `../../src/display/editor/tools.js`: AnnotationEditorUIManager, CommandManager
- `../../src/display/fetch_stream.js`: PDFFetchStream
- `../../src/display/metadata.js`: Metadata
- `../../src/display/network.js`: PDFNetworkStream
- `../../src/display/network_utils.js`: createHeaders, createResponseError, extractFilenameFromHeader, validateRangeRequestCapabilities, validateResponseStatus
- `../../src/display/node_stream.js`: PDFNodeStream
- `../../src/display/node_utils.js`: NodeCMapReaderFactory, NodeStandardFontDataFactory, fetchData
- `../../src/display/standard_fontdata_factory.js`: DOMStandardFontDataFactory
- `../../src/display/svg_factory.js`: DOMSVGFactory
- `../../src/display/text_layer.js`: TextLayer
- `../../src/display/touch_manager.js`: TouchManager
- `../../src/display/worker_options.js`: GlobalWorkerOptions
- `../../src/display/xfa_layer.js`: XfaLayer
- `../../src/shared/message_handler.js`: MessageHandler
- `../../src/shared/murmurhash3.js`: MurmurHash3_64
- `../../src/shared/util.js`: AbortException, AnnotationBorderStyleType, AnnotationEditorParamsType, AnnotationEditorType, AnnotationFieldFlag, AnnotationFlag, AnnotationMode, AnnotationType, BaseException, FeatureTest, FormatError, ImageKind, InvalidPDFException, MathClamp, OPS, PasswordException, PasswordResponses, PermissionFlag, RenderingIntentFlag, ResponseException, UnknownErrorException, Util, VerbosityLevel, assert, bytesToString, createValidAbsoluteUrl, getModificationDate, getUuid, getVerbosityLevel, isNodeJS, normalizeUnicode, objectSize, setVerbosityLevel, shadow, string32, stringToBytes, stringToPDFString, stringToUTF8String, toBase64Util
- `../../web/annotation_layer_builder.js`: AnnotationLayerBuilder
- `../../web/app_options.js`: AppOptions, OptionKind
- `../../web/autolinker.js`: Autolinker
- `../../web/download_manager.js`: DownloadManager
- `../../web/event_utils.js`: EventBus, WaitOnType, waitOnEventOrTimeout
- `../../web/genericl10n.js`: GenericL10n
- `../../web/pdf_find_controller.js`: FindState, PDFFindController
- `../../web/pdf_find_utils.js`: CharacterType, getCharacterType
- `../../web/pdf_history.js`: PDFHistory, isDestArraysEqual, isDestHashesEqual
- `../../web/pdf_link_service.js`: LinkTarget, PDFLinkService, SimpleLinkService
- `../../web/pdf_page_view.js`: PDFPageView
- `../../web/pdf_scripting_manager.component.js`: PDFScriptingManager
- `../../web/pdf_single_page_viewer.js`: PDFSinglePageViewer
- `../../web/pdf_viewer.js`: PDFPageViewBuffer, PDFViewer
- `../../web/struct_tree_layer_builder.js`: StructTreeLayerBuilder
- `../../web/text_layer_builder.js`: TextLayerBuilder
- `../../web/ui_utils.js`: AutoPrintRegExp, ProgressBar, RenderingStates, ScrollMode, SpreadMode, backtrackBeforeAllVisibleElements, binarySearchFirstItem, calcRound, getPageSizeInches, getVisibleElements, isPortraitOrientation, isValidRotation, parseQueryString, removeNullCharacters
- `../../web/xfa_layer_builder.js`: XfaLayerBuilder
- `../reporter.js`: TestReporter
- `./common_pdfstream_tests.js`: testCrossOriginRedirects
- `./test_utils.js`: CMAP_URL, DefaultCMapReaderFactory, DefaultFileReaderFactory, DefaultStandardFontDataFactory, STANDARD_FONT_DATA_URL, TEST_PDFS_PATH, TestPdfsServer, XRefMock, buildGetDocumentParams, createIdFactory, getCrossOriginHostname
</imports>

Code:
<code>
File:
src/core/image.js
1 /* Copyright 2012 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 import {
17   assert,
18   FeatureTest,
19   FormatError,
20   ImageKind,
21   MathClamp,
22   warn,
23 } from "../shared/util.js";
24 import {
25   convertBlackAndWhiteToRGBA,
26   convertToRGBA,
27 } from "../shared/image_utils.js";
28 import { BaseStream } from "./base_stream.js";
29 import { ColorSpace } from "./colorspace.js";
30 import { ColorSpaceUtils } from "./colorspace_utils.js";
31 import { DecodeStream } from "./decode_stream.js";
32 import { ImageResizer } from "./image_resizer.js";
33 import { JpegStream } from "./jpeg_stream.js";
34 import { JpxImage } from "./jpx.js";
35 import { Name } from "./primitives.js";
36 
80 class PDFImage {
81   constructor({
82     xref,
83     res,
84     image,
85     isInline = false,
86     smask = null,
87     mask = null,
88     isMask = false,
89     pdfFunctionFactory,
90     globalColorSpaceCache,
91     localColorSpaceCache,
92   }) {
93     this.image = image;
94     const dict = image.dict;
95 
96     const filter = dict.get("F", "Filter");
97     let filterName;
98     if (filter instanceof Name) {
99       filterName = filter.name;
100     } else if (Array.isArray(filter)) {
101       const filterZero = xref.fetchIfRef(filter[0]);
102       if (filterZero instanceof Name) {
103         filterName = filterZero.name;
104       }
105     }
106     switch (filterName) {
107       case "JPXDecode":
108         ({
109           width: image.width,
110           height: image.height,
111           componentsCount: image.numComps,
112           bitsPerComponent: image.bitsPerComponent,
113         } = JpxImage.parseImageProperties(image.stream));
114         image.stream.reset();
115         this.jpxDecoderOptions = {
116           numComponents: 0,
117           isIndexedColormap: false,
118           smaskInData: dict.has("SMaskInData"),
119         };
120         break;
121       case "JBIG2Decode":
122         image.bitsPerComponent = 1;
123         image.numComps = 1;
124         break;
125     }
126 
127     let width = dict.get("W", "Width");
128     let height = dict.get("H", "Height");
129 
130     if (
131       Number.isInteger(image.width) &&
132       image.width > 0 &&
133       Number.isInteger(image.height) &&
134       image.height > 0 &&
135       (image.width !== width || image.height !== height)
136     ) {
137       warn(
138         "PDFImage - using the Width/Height of the image data, " +
139           "rather than the image dictionary."
140       );
141       width = image.width;
142       height = image.height;
143     }
144     if (width < 1 || height < 1) {
145       throw new FormatError(
146         `Invalid image width: ${width} or height: ${height}`
147       );
148     }
149     this.width = width;
150     this.height = height;
151 
152     this.interpolate = dict.get("I", "Interpolate");
153     this.imageMask = dict.get("IM", "ImageMask") || false;
154     this.matte = dict.get("Matte") || false;
155 
156     let bitsPerComponent = image.bitsPerComponent;
157     if (!bitsPerComponent) {
158       bitsPerComponent = dict.get("BPC", "BitsPerComponent");
159       if (!bitsPerComponent) {
160         if (this.imageMask) {
161           bitsPerComponent = 1;
162         } else {
163           throw new FormatError(
164             `Bits per component missing in image: ${this.imageMask}`
165           );
166         }
167       }
168     }
169     this.bpc = bitsPerComponent;
170 
171     if (!this.imageMask) {
172       let colorSpace = dict.getRaw("CS") || dict.getRaw("ColorSpace");
173       const hasColorSpace = !!colorSpace;
174       if (!hasColorSpace) {
175         if (this.jpxDecoderOptions) {
176           colorSpace = Name.get("DeviceRGBA");
177         } else {
178           switch (image.numComps) {
179             case 1:
180               colorSpace = Name.get("DeviceGray");
181               break;
182             case 3:
183               colorSpace = Name.get("DeviceRGB");
184               break;
185             case 4:
186               colorSpace = Name.get("DeviceCMYK");
187               break;
188             default:
189               throw new Error(
190                 `Images with ${image.numComps} color components not supported.`
191               );
192           }
193         }
194       } else if (this.jpxDecoderOptions?.smaskInData) {
195         // If the jpx image has a color space then it mustn't be used in order
196         // to be able to use the color space that comes from the pdf.
197         colorSpace = Name.get("DeviceRGBA");
198       }
199 
200       this.colorSpace = ColorSpaceUtils.parse({
201         cs: colorSpace,
202         xref,
203         resources: isInline ? res : null,
204         pdfFunctionFactory,
205         globalColorSpaceCache,
206         localColorSpaceCache,
207       });
208       this.numComps = this.colorSpace.numComps;
209 
210       if (this.jpxDecoderOptions) {
211         this.jpxDecoderOptions.numComponents = hasColorSpace
212           ? this.numComps
213           : 0;
214         // If the jpx image has a color space then it musn't be used in order to
215         // be able to use the color space that comes from the pdf.
216         this.jpxDecoderOptions.isIndexedColormap =
217           this.colorSpace.name === "Indexed";
218       }
219     }
220 
221     this.decode = dict.getArray("D", "Decode");
222     this.needsDecode = false;
223     if (
224       this.decode &&
225       ((this.colorSpace &&
226         !this.colorSpace.isDefaultDecode(this.decode, bitsPerComponent)) ||
227         (isMask &&
228           !ColorSpace.isDefaultDecode(this.decode, /* numComps = */ 1)))
229     ) {
230       this.needsDecode = true;
231       // Do some preprocessing to avoid more math.
232       const max = (1 << bitsPerComponent) - 1;
233       this.decodeCoefficients = [];
234       this.decodeAddends = [];
235       const isIndexed = this.colorSpace?.name === "Indexed";
236       for (let i = 0, j = 0; i < this.decode.length; i += 2, ++j) {
237         const dmin = this.decode[i];
238         const dmax = this.decode[i + 1];
239         this.decodeCoefficients[j] = isIndexed
240           ? (dmax - dmin) / max
241           : dmax - dmin;
242         this.decodeAddends[j] = isIndexed ? dmin : max * dmin;
243       }
244     }
245 
246     if (smask) {
247       this.smask = new PDFImage({
248         xref,
249         res,
250         image: smask,
251         isInline,
252         pdfFunctionFactory,
253         globalColorSpaceCache,
254         localColorSpaceCache,
255       });
256     } else if (mask) {
257       if (mask instanceof BaseStream) {
258         const maskDict = mask.dict,
259           imageMask = maskDict.get("IM", "ImageMask");
260         if (!imageMask) {
261           warn("Ignoring /Mask in image without /ImageMask.");
262         } else {
263           this.mask = new PDFImage({
264             xref,
265             res,
266             image: mask,
267             isInline,
268             isMask: true,
269             pdfFunctionFactory,
270             globalColorSpaceCache,
271             localColorSpaceCache,
272           });
273         }
274       } else {
275         // Color key mask (just an array).
276         this.mask = mask;
277       }
278     }
279   }
280 
1068 }
1069 
</code>

Test file:
<test_file>
File:
test/unit/colorspace_spec.js
/* Copyright 2017 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Dict, Name, Ref } from "../../src/core/primitives.js";
import {
  GlobalColorSpaceCache,
  LocalColorSpaceCache,
} from "../../src/core/image_utils.js";
import { Stream, StringStream } from "../../src/core/stream.js";
import { ColorSpace } from "../../src/core/colorspace.js";
import { ColorSpaceUtils } from "../../src/core/colorspace_utils.js";
import { PDFFunctionFactory } from "../../src/core/function.js";
import { XRefMock } from "./test_utils.js";
</test_file>

Your task:
You are a software tester at pdf.js.
1. Examine the existing test file. You may reuse any imports, helpers or setup blocks it already has.
2. Write exactly one javascript test `it("...", async () => {...})` block.
3. Your test must fail on the code before the patch, and pass after, hence the test will verify that the patch resolves the issue.
4. The test must be self-contained and to-the-point.
5. If you need something new use only the provided imports (respect the paths exactly how they are given) by importing dynamically for compatibility with Node.js — no new dependencies. You can use the PDF file for testing as follows:
const { getDocument } = await import('../../src/display/api.js');
const { buildGetDocumentParams } = await import('./test_utils.js');
const loadingTask = getDocument(buildGetDocumentParams('issue19611.pdf'))
6. Return only the javascript code for the new `it(...)` block (no comments or explanations).

Example structure:
it("should <describe behavior>", async () => {
  const { example } = await import("../../src/core/example.js");
  <initialize required variables>;
  <define expected variable>;
  <generate actual variables>;
  <compare expected with actual>;
});


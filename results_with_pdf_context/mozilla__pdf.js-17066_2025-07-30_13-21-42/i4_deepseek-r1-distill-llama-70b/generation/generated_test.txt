it("should render readonly text fields when AnnotationMode is ENABLED", async () => {
  const { getDocument } = await import("../../src/display/api.js");
  const { buildGetDocumentParams } = await import("./test_utils.js");
  const loadingTask = getDocument(buildGetDocumentParams('issue17064_readonly.pdf'));

  const { numPages, page } = await loadingTask;
  const pdfPage = await page(0);

  const annotationLayer = {
    div: document.createElement("div"),
    viewport: pdfPage.viewport,
    renderForms: false,
    annotationStorage: new (await import("../../src/shared/util.js")).AnnotationStorage(),
    linkService: {},
    enableScripting: false,
  };

  const AnnotationLayer = (await import("../../src/display/annotation_layer.js")).AnnotationLayer;
  const annotationLayerInstance = new AnnotationLayer({
    div: annotationLayer.div,
    page: pdfPage,
    viewport: annotationLayer.viewport,
    linkService: annotationLayer.linkService,
    annotationStorage: annotationLayer.annotationStorage,
    renderForms: annotationLayer.renderForms,
    enableScripting: annotationLayer.enableScripting,
  });

  await annotationLayerInstance.render({
    annotations: await pdfPage.getAnnotations(),
    div: annotationLayer.div,
    page: pdfPage,
    viewport: annotationLayer.viewport,
    linkService: annotationLayer.linkService,
    downloadManager: {},
    annotationStorage: annotationLayer.annotationStorage,
    renderForms: annotationLayer.renderForms,
    enableScripting: annotationLayer.enableScripting,
  });

  const textWidget = annotationLayer.div.querySelector(".textWidgetAnnotation");

  expect(textWidget).toBeTruthy();
});
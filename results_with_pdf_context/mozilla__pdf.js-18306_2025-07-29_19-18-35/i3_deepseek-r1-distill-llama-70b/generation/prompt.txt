Before you begin:
- Keep going until the job is completely solved — don’t stop halfway.
- If you’re unsure about the behavior, reread the provided patch carefully; do not hallucinate.
- Plan your approach before writing code by reflecting on whether the test truly fails before and passes after.

Issue:
<issue>
PDF with non-integer DW is not rendered correctly
</issue>

PDF File:
<pdf>
bug1903731.pdf
</pdf>

Patch:
<patch>
diff --git a/src/core/evaluator.js b/src/core/evaluator.js
--- a/src/core/evaluator.js
+++ b/src/core/evaluator.js
@@ -3905,7 +3905,7 @@ class PartialEvaluator {
     let defaultVMetrics;
     if (properties.composite) {
       const dw = dict.get("DW");
-      defaultWidth = Number.isInteger(dw) ? dw : 1000;
+      defaultWidth = typeof dw === "number" ? Math.ceil(dw) : 1000;
 
       const widths = dict.get("W");
       if (Array.isArray(widths)) {


</patch>

Imports:
<imports>
Available Packages
Dev Dependencies:
- @babel/core: ^7.24.7
- @babel/preset-env: ^7.24.7
- @babel/runtime: ^7.24.7
- @fluent/bundle: ^0.18.0
- @fluent/dom: ^0.9.0
- @jazzer.js/core: ^2.1.0
- @metalsmith/layouts: ^2.7.0
- @metalsmith/markdown: ^1.10.0
- autoprefixer: ^10.4.19
- babel-loader: ^9.1.3
- caniuse-lite: ^1.0.30001636
- canvas: ^2.11.2
- core-js: ^3.37.1
- cross-env: ^7.0.3
- eslint: ^8.57.0
- eslint-config-prettier: ^9.1.0
- eslint-plugin-fetch-options: ^0.0.5
- eslint-plugin-html: ^8.1.1
- eslint-plugin-import: ^2.29.1
- eslint-plugin-jasmine: ^4.2.0
- eslint-plugin-json: ^3.1.0
- eslint-plugin-mozilla: ^3.7.4
- eslint-plugin-no-unsanitized: ^4.0.2
- eslint-plugin-prettier: ^5.1.3
- eslint-plugin-sort-exports: ^0.9.1
- eslint-plugin-unicorn: ^54.0.0
- globals: ^15.6.0
- gulp: ^5.0.0
- gulp-cli: ^3.0.0
- gulp-postcss: ^10.0.0
- gulp-rename: ^2.0.0
- gulp-replace: ^1.1.4
- gulp-zip: ^6.0.0
- highlight.js: ^11.9.0
- jasmine: ^5.1.0
- jsdoc: ^4.0.3
- jstransformer-nunjucks: ^1.2.0
- metalsmith: ^2.6.3
- metalsmith-html-relative: ^2.0.1
- ordered-read-streams: ^2.0.0
- path2d: ^0.2.0
- pngjs: ^7.0.0
- postcss: ^8.4.38
- postcss-dark-theme-class: ^1.3.0
- postcss-dir-pseudo-class: ^8.0.1
- postcss-discard-comments: ^7.0.0
- postcss-nesting: ^12.1.5
- prettier: ^3.3.2
- puppeteer: ^22.11.2
- streamqueue: ^1.1.2
- stylelint: ^16.6.1
- stylelint-prettier: ^5.0.0
- terser-webpack-plugin: ^5.3.10
- tsc-alias: ^1.8.10
- ttest: ^4.0.0
- typescript: ^5.4.5
- vinyl: ^3.0.0
- webpack: ^5.92.0
- webpack-stream: ^7.0.0
- yargs: ^17.7.2

Engines:
- node: >=18

Available Relative Imports:
- `../../src/core/annotation.js`: Annotation, AnnotationBorderStyle, AnnotationFactory, MarkupAnnotation, getQuadPoints
- `../../src/core/bidi.js`: bidi
- `../../src/core/cff_parser.js`: CFFCharset, CFFCompiler, CFFFDSelect, CFFParser, CFFStrings
- `../../src/core/cmap.js`: CMap, CMapFactory, IdentityCMap
- `../../src/core/colorspace.js`: ColorSpace
- `../../src/core/core_utils.js`: arrayBuffersToBytes, encodeToXmlString, escapePDFName, escapeString, getInheritableProperty, getSizeInBytes, isAscii, isWhiteSpace, log2, numberToString, parseXFAPath, recoverJsURL, stringToUTF16HexString, stringToUTF16String, toRomanNumerals, validateCSSFont
- `../../src/core/crypto.js`: AES128Cipher, AES256Cipher, ARCFourCipher, CipherTransformFactory, PDF17, PDF20, calculateMD5, calculateSHA256, calculateSHA384, calculateSHA512
- `../../src/core/default_appearance.js`: createDefaultAppearance, parseAppearanceStream, parseDefaultAppearance
- `../../src/core/document.js`: PDFDocument, Page
- `../../src/core/encodings.js`: getEncoding
- `../../src/core/evaluator.js`: PartialEvaluator
- `../../src/core/flate_stream.js`: FlateStream
- `../../src/core/font_substitutions.js`: getFontSubstitution
- `../../src/core/fonts_utils.js`: SEAC_ANALYSIS_ENABLED
- `../../src/core/function.js`: PDFFunctionFactory, PostScriptCompiler, PostScriptEvaluator
- `../../src/core/glyphlist.js`: getDingbatsGlyphsUnicode, getGlyphsUnicode
- `../../src/core/image_utils.js`: GlobalImageCache, LocalColorSpaceCache
- `../../src/core/jbig2.js`: Jbig2Error, Jbig2Image
- `../../src/core/jpg.js`: JpegError, JpegImage
- `../../src/core/jpx.js`: JpxError, JpxImage
- `../../src/core/metadata_parser.js`: MetadataParser
- `../../src/core/operator_list.js`: OperatorList
- `../../src/core/parser.js`: Lexer, Linearization, Parser
- `../../src/core/predictor_stream.js`: PredictorStream
- `../../src/core/primitives.js`: Cmd, Dict, EOF, Name, Ref, RefSet, RefSetCache, isCmd, isDict, isName, isRefsEqual
- `../../src/core/ps_parser.js`: PostScriptLexer, PostScriptParser
- `../../src/core/stream.js`: NullStream, Stream, StringStream
- `../../src/core/type1_parser.js`: Type1Parser
- `../../src/core/unicode.js`: getCharUnicodeCategory, getUnicodeForGlyph, getUnicodeRangeFor, mapSpecialUnicodeValues
- `../../src/core/worker.js`: WorkerMessageHandler, WorkerTask
- `../../src/core/writer.js`: incrementalUpdate, writeDict
- `../../src/core/xfa/bind.js`: Binder
- `../../src/core/xfa/data.js`: DataHandler
- `../../src/core/xfa/factory.js`: XFAFactory
- `../../src/core/xfa/formcalc_lexer.js`: Lexer, TOKEN, Token
- `../../src/core/xfa/formcalc_parser.js`: Errors, Parser
- `../../src/core/xfa/parser.js`: XFAParser
- `../../src/core/xfa/som.js`: searchNode
- `../../src/core/xfa/symbol_utils.js`: $dump, $getChildren, $getChildrenByClass, $getChildrenByName, $text, $uid
- `../../src/core/xml_parser.js`: SimpleXMLParser, XMLParserBase
- `../../src/display/annotation_layer.js`: AnnotationLayer
- `../../src/display/annotation_storage.js`: AnnotationStorage
- `../../src/display/api.js`: DefaultCMapReaderFactory, DefaultCanvasFactory, DefaultStandardFontDataFactory, LoopbackPort, PDFDataRangeTransport, PDFDocumentLoadingTask, PDFDocumentProxy, PDFPageProxy, PDFWorker, PDFWorkerUtil, RenderTask, build, getDocument, version
- `../../src/display/display_utils.js`: DOMCanvasFactory, DOMSVGFactory, PDFDateString, PageViewport, PixelsPerInch, RenderingCancelledException, StatTimer, fetchData, getFilenameFromUrl, getPdfFilenameFromUrl, getXfaPageViewport, isDataScheme, isPdfFile, isValidFetchUrl, noContextMenu, setLayerDimensions
- `../../src/display/draw_layer.js`: DrawLayer
- `../../src/display/editor/annotation_editor_layer.js`: AnnotationEditorLayer
- `../../src/display/editor/color_picker.js`: ColorPicker
- `../../src/display/editor/outliner.js`: Outliner
- `../../src/display/editor/tools.js`: AnnotationEditorUIManager, CommandManager
- `../../src/display/fetch_stream.js`: PDFFetchStream
- `../../src/display/metadata.js`: Metadata
- `../../src/display/network.js`: PDFNetworkStream
- `../../src/display/network_utils.js`: createResponseStatusError, extractFilenameFromHeader, validateRangeRequestCapabilities, validateResponseStatus
- `../../src/display/node_stream.js`: PDFNodeStream
- `../../src/display/node_utils.js`: NodePackages
- `../../src/display/text_layer.js`: TextLayer, renderTextLayer, updateTextLayer
- `../../src/display/worker_options.js`: GlobalWorkerOptions
- `../../src/display/xfa_layer.js`: XfaLayer
- `../../src/shared/message_handler.js`: MessageHandler
- `../../src/shared/murmurhash3.js`: MurmurHash3_64
- `../../src/shared/util.js`: AbortException, AnnotationBorderStyleType, AnnotationEditorParamsType, AnnotationEditorType, AnnotationFieldFlag, AnnotationFlag, AnnotationMode, AnnotationType, BaseException, CMapCompressionType, FeatureTest, FormatError, ImageKind, InvalidPDFException, MissingPDFException, OPS, PasswordException, PasswordResponses, PermissionFlag, RenderingIntentFlag, UnexpectedResponseException, UnknownErrorException, Util, VerbosityLevel, assert, bytesToString, createValidAbsoluteUrl, getModificationDate, getVerbosityLevel, isNodeJS, normalizeUnicode, objectSize, setVerbosityLevel, shadow, string32, stringToBytes, stringToPDFString, stringToUTF8String
- `../../web/annotation_layer_builder.js`: AnnotationLayerBuilder
- `../../web/app_options.js`: AppOptions, OptionKind
- `../../web/download_manager.js`: DownloadManager
- `../../web/event_utils.js`: EventBus, WaitOnType, waitOnEventOrTimeout
- `../../web/genericl10n.js`: GenericL10n
- `../../web/pdf_find_controller.js`: FindState, PDFFindController
- `../../web/pdf_find_utils.js`: CharacterType, getCharacterType
- `../../web/pdf_history.js`: PDFHistory, isDestArraysEqual, isDestHashesEqual
- `../../web/pdf_link_service.js`: LinkTarget, PDFLinkService, SimpleLinkService
- `../../web/pdf_page_view.js`: PDFPageView
- `../../web/pdf_scripting_manager.component.js`: PDFScriptingManager
- `../../web/pdf_single_page_viewer.js`: PDFSinglePageViewer
- `../../web/pdf_viewer.js`: PDFPageViewBuffer, PDFViewer
- `../../web/struct_tree_layer_builder.js`: StructTreeLayerBuilder
- `../../web/text_layer_builder.js`: TextLayerBuilder
- `../../web/ui_utils.js`: AutoPrintRegExp, ProgressBar, RenderingStates, ScrollMode, SpreadMode, backtrackBeforeAllVisibleElements, binarySearchFirstItem, getPageSizeInches, getVisibleElements, isPortraitOrientation, isValidRotation, parseQueryString, removeNullCharacters
- `../../web/xfa_layer_builder.js`: XfaLayerBuilder
- `./test_utils.js`: CMAP_URL, DefaultFileReaderFactory, STANDARD_FONT_DATA_URL, TEST_PDFS_PATH, XRefMock, buildGetDocumentParams, createIdFactory, createTemporaryNodeServer
- `./testreporter.js`: TestReporter
</imports>

Code:
<code>
File:
src/core/evaluator.js
1 /* Copyright 2012 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 /* eslint-disable no-var */
16 
17 import {
18   AbortException,
19   assert,
20   CMapCompressionType,
21   FONT_IDENTITY_MATRIX,
22   FormatError,
23   IDENTITY_MATRIX,
24   info,
25   isArrayEqual,
26   normalizeUnicode,
27   OPS,
28   shadow,
29   stringToPDFString,
30   TextRenderingMode,
31   Util,
32   warn,
33 } from "../shared/util.js";
34 import { CMapFactory, IdentityCMap } from "./cmap.js";
35 import { Cmd, Dict, EOF, isName, Name, Ref, RefSet } from "./primitives.js";
36 import { ErrorFont, Font } from "./fonts.js";
37 import {
38   getEncoding,
39   MacRomanEncoding,
40   StandardEncoding,
41   SymbolSetEncoding,
42   WinAnsiEncoding,
43   ZapfDingbatsEncoding,
44 } from "./encodings.js";
45 import {
46   getFontNameToFileMap,
47   getSerifFonts,
48   getStandardFontName,
49   getStdFontMap,
50   getSymbolsFonts,
51   isKnownFontName,
52 } from "./standard_fonts.js";
53 import { getTilingPatternIR, Pattern } from "./pattern.js";
54 import { getXfaFontDict, getXfaFontName } from "./xfa_fonts.js";
55 import { IdentityToUnicodeMap, ToUnicodeMap } from "./to_unicode_map.js";
56 import { isNumberArray, lookupMatrix, lookupNormalRect } from "./core_utils.js";
57 import { isPDFFunction, PDFFunctionFactory } from "./function.js";
58 import { Lexer, Parser } from "./parser.js";
59 import {
60   LocalColorSpaceCache,
61   LocalGStateCache,
62   LocalImageCache,
63   LocalTilingPatternCache,
64   RegionalImageCache,
65 } from "./image_utils.js";
66 import { NullStream, Stream } from "./stream.js";
67 import { BaseStream } from "./base_stream.js";
68 import { bidi } from "./bidi.js";
69 import { ColorSpace } from "./colorspace.js";
70 import { DecodeStream } from "./decode_stream.js";
71 import { FontFlags } from "./fonts_utils.js";
72 import { getFontSubstitution } from "./font_substitutions.js";
73 import { getGlyphsUnicode } from "./glyphlist.js";
74 import { getMetrics } from "./metrics.js";
75 import { getUnicodeForGlyph } from "./unicode.js";
76 import { ImageResizer } from "./image_resizer.js";
77 import { MurmurHash3_64 } from "../shared/murmurhash3.js";
78 import { OperatorList } from "./operator_list.js";
79 import { PDFImage } from "./image.js";
80 
81 const DefaultPartialEvaluatorOptions = Object.freeze({
82   maxImageSize: -1,
83   disableFontFace: false,
84   ignoreErrors: false,
85   isEvalSupported: true,
86   isOffscreenCanvasSupported: false,
87   canvasMaxAreaInBytes: -1,
88   fontExtraProperties: false,
89   useSystemFonts: true,
90   cMapUrl: null,
91   standardFontDataUrl: null,
92 });
93 
94 const PatternType = {
95   TILING: 1,
96   SHADING: 2,
97 };
98 
99 // Optionally avoid sending individual, or very few, text chunks to reduce
100 // `postMessage` overhead with ReadableStream (see issue 13962).
101 //
102 // PLEASE NOTE: This value should *not* be too large (it's used as a lower limit
103 // in `enqueueChunk`), since that would cause streaming of textContent to become
104 // essentially useless in practice by sending all (or most) chunks at once.
105 // Also, a too large value would (indirectly) affect the main-thread `textLayer`
106 // building negatively by forcing all textContent to be handled at once, which
107 // could easily end up hurting *overall* performance (e.g. rendering as well).
108 const TEXT_CHUNK_BATCH_SIZE = 10;
109 
110 const deferred = Promise.resolve();
111 
112 // Convert PDF blend mode names to HTML5 blend mode names.
113 function normalizeBlendMode(value, parsingArray = false) {
114   if (Array.isArray(value)) {
115     // Use the first *supported* BM value in the Array (fixes issue11279.pdf).
116     for (const val of value) {
117       const maybeBM = normalizeBlendMode(val, /* parsingArray = */ true);
118       if (maybeBM) {
119         return maybeBM;
120       }
121     }
122     warn(`Unsupported blend mode Array: ${value}`);
123     return "source-over";
124   }
125 
126   if (!(value instanceof Name)) {
127     if (parsingArray) {
128       return null;
129     }
130     return "source-over";
131   }
132   switch (value.name) {
133     case "Normal":
134     case "Compatible":
135       return "source-over";
136     case "Multiply":
137       return "multiply";
138     case "Screen":
139       return "screen";
140     case "Overlay":
141       return "overlay";
142     case "Darken":
143       return "darken";
144     case "Lighten":
145       return "lighten";
146     case "ColorDodge":
147       return "color-dodge";
148     case "ColorBurn":
149       return "color-burn";
150     case "HardLight":
151       return "hard-light";
152     case "SoftLight":
153       return "soft-light";
154     case "Difference":
155       return "difference";
156     case "Exclusion":
157       return "exclusion";
158     case "Hue":
159       return "hue";
160     case "Saturation":
161       return "saturation";
162     case "Color":
163       return "color";
164     case "Luminosity":
165       return "luminosity";
166   }
167   if (parsingArray) {
168     return null;
169   }
170   warn(`Unsupported blend mode: ${value.name}`);
171   return "source-over";
172 }
173 
174 function addLocallyCachedImageOps(opList, data) {
175   if (data.objId) {
176     opList.addDependency(data.objId);
177   }
178   opList.addImageOps(data.fn, data.args, data.optionalContent);
179 
180   if (data.fn === OPS.paintImageMaskXObject && data.args[0]?.count > 0) {
181     data.args[0].count++;
182   }
183 }
184 
185 // Trying to minimize Date.now() usage and check every 100 time.
186 class TimeSlotManager {
187   static TIME_SLOT_DURATION_MS = 20;
188 
189   static CHECK_TIME_EVERY = 100;
190 
191   constructor() {
192     this.reset();
193   }
194 
195   check() {
196     if (++this.checked < TimeSlotManager.CHECK_TIME_EVERY) {
197       return false;
198     }
199     this.checked = 0;
200     return this.endTime <= Date.now();
201   }
202 
203   reset() {
204     this.endTime = Date.now() + TimeSlotManager.TIME_SLOT_DURATION_MS;
205     this.checked = 0;
206   }
207 }
208 
209 class PartialEvaluator {
210   constructor({
211     xref,
212     handler,
213     pageIndex,
214     idFactory,
215     fontCache,
216     builtInCMapCache,
217     standardFontDataCache,
218     globalImageCache,
219     systemFontCache,
220     options = null,
221   }) {
222     this.xref = xref;
223     this.handler = handler;
224     this.pageIndex = pageIndex;
225     this.idFactory = idFactory;
226     this.fontCache = fontCache;
227     this.builtInCMapCache = builtInCMapCache;
228     this.standardFontDataCache = standardFontDataCache;
229     this.globalImageCache = globalImageCache;
230     this.systemFontCache = systemFontCache;
231     this.options = options || DefaultPartialEvaluatorOptions;
232     this.type3FontRefs = null;
233 
234     this._regionalImageCache = new RegionalImageCache();
235     this._fetchBuiltInCMapBound = this.fetchBuiltInCMap.bind(this);
236     ImageResizer.setMaxArea(this.options.canvasMaxAreaInBytes);
237   }
238 
239   /**
240    * Since Functions are only cached (locally) by reference, we can share one
241    * `PDFFunctionFactory` instance within this `PartialEvaluator` instance.
242    */
243   get _pdfFunctionFactory() {
244     const pdfFunctionFactory = new PDFFunctionFactory({
245       xref: this.xref,
246       isEvalSupported: this.options.isEvalSupported,
247     });
248     return shadow(this, "_pdfFunctionFactory", pdfFunctionFactory);
249   }
250 
251   get parsingType3Font() {
252     return !!this.type3FontRefs;
253   }
254 
255   clone(newOptions = null) {
256     const newEvaluator = Object.create(this);
257     newEvaluator.options = Object.assign(
258       Object.create(null),
259       this.options,
260       newOptions
261     );
262     return newEvaluator;
263   }
264 
265   hasBlendModes(resources, nonBlendModesSet) {
266     if (!(resources instanceof Dict)) {
267       return false;
268     }
269     if (resources.objId && nonBlendModesSet.has(resources.objId)) {
270       return false;
271     }
272 
273     const processed = new RefSet(nonBlendModesSet);
274     if (resources.objId) {
275       processed.put(resources.objId);
276     }
277 
278     const nodes = [resources],
279       xref = this.xref;
280     while (nodes.length) {
281       const node = nodes.shift();
282       // First check the current resources for blend modes.
283       const graphicStates = node.get("ExtGState");
284       if (graphicStates instanceof Dict) {
285         for (let graphicState of graphicStates.getRawValues()) {
286           if (graphicState instanceof Ref) {
287             if (processed.has(graphicState)) {
288               continue; // The ExtGState has already been processed.
289             }
290             try {
291               graphicState = xref.fetch(graphicState);
292             } catch (ex) {
293               // Avoid parsing a corrupt ExtGState more than once.
294               processed.put(graphicState);
295 
296               info(`hasBlendModes - ignoring ExtGState: "${ex}".`);
297               continue;
298             }
299           }
300           if (!(graphicState instanceof Dict)) {
301             continue;
302           }
303           if (graphicState.objId) {
304             processed.put(graphicState.objId);
305           }
306 
307           const bm = graphicState.get("BM");
308           if (bm instanceof Name) {
309             if (bm.name !== "Normal") {
310               return true;
311             }
312             continue;
313           }
314           if (bm !== undefined && Array.isArray(bm)) {
315             for (const element of bm) {
316               if (element instanceof Name && element.name !== "Normal") {
317                 return true;
318               }
319             }
320           }
321         }
322       }
323       // Descend into the XObjects to look for more resources and blend modes.
324       const xObjects = node.get("XObject");
325       if (!(xObjects instanceof Dict)) {
326         continue;
327       }
328       for (let xObject of xObjects.getRawValues()) {
329         if (xObject instanceof Ref) {
330           if (processed.has(xObject)) {
331             // The XObject has already been processed, and by avoiding a
332             // redundant `xref.fetch` we can *significantly* reduce the load
333             // time for badly generated PDF files (fixes issue6961.pdf).
334             continue;
335           }
336           try {
337             xObject = xref.fetch(xObject);
338           } catch (ex) {
339             // Avoid parsing a corrupt XObject more than once.
340             processed.put(xObject);
341 
342             info(`hasBlendModes - ignoring XObject: "${ex}".`);
343             continue;
344           }
345         }
346         if (!(xObject instanceof BaseStream)) {
347           continue;
348         }
349         if (xObject.dict.objId) {
350           processed.put(xObject.dict.objId);
351         }
352         const xResources = xObject.dict.get("Resources");
353         if (!(xResources instanceof Dict)) {
354           continue;
355         }
356         // Checking objId to detect an infinite loop.
357         if (xResources.objId && processed.has(xResources.objId)) {
358           continue;
359         }
360 
361         nodes.push(xResources);
362         if (xResources.objId) {
363           processed.put(xResources.objId);
364         }
365       }
366     }
367 
368     // When no blend modes exist, there's no need re-fetch/re-parse any of the
369     // processed `Ref`s again for subsequent pages. This helps reduce redundant
370     // `XRef.fetch` calls for some documents (e.g. issue6961.pdf).
371     for (const ref of processed) {
372       nonBlendModesSet.put(ref);
373     }
374     return false;
375   }
376 
377   async fetchBuiltInCMap(name) {
378     const cachedData = this.builtInCMapCache.get(name);
379     if (cachedData) {
380       return cachedData;
381     }
382     let data;
383 
384     if (this.options.cMapUrl !== null) {
385       // Only compressed CMaps are (currently) supported here.
386       const url = `${this.options.cMapUrl}${name}.bcmap`;
387       const response = await fetch(url);
388       if (!response.ok) {
389         throw new Error(
390           `fetchBuiltInCMap: failed to fetch file "${url}" with "${response.statusText}".`
391         );
392       }
393       data = {
394         cMapData: new Uint8Array(await response.arrayBuffer()),
395         compressionType: CMapCompressionType.BINARY,
396       };
397     } else {
398       // Get the data on the main-thread instead.
399       data = await this.handler.sendWithPromise("FetchBuiltInCMap", { name });
400     }
401 
402     if (data.compressionType !== CMapCompressionType.NONE) {
403       // Given the size of uncompressed CMaps, only cache compressed ones.
404       this.builtInCMapCache.set(name, data);
405     }
406     return data;
407   }
408 
409   async fetchStandardFontData(name) {
410     const cachedData = this.standardFontDataCache.get(name);
411     if (cachedData) {
412       return new Stream(cachedData);
413     }
414 
415     // The symbol fonts are not consistent across platforms, always load the
416     // standard font data for them.
417     if (
418       this.options.useSystemFonts &&
419       name !== "Symbol" &&
420       name !== "ZapfDingbats"
421     ) {
422       return null;
423     }
424 
425     const standardFontNameToFileName = getFontNameToFileMap(),
426       filename = standardFontNameToFileName[name];
427     let data;
428 
429     if (this.options.standardFontDataUrl !== null) {
430       const url = `${this.options.standardFontDataUrl}${filename}`;
431       const response = await fetch(url);
432       if (!response.ok) {
433         warn(
434           `fetchStandardFontData: failed to fetch file "${url}" with "${response.statusText}".`
435         );
436       } else {
437         data = new Uint8Array(await response.arrayBuffer());
438       }
439     } else {
440       // Get the data on the main-thread instead.
441       try {
442         data = await this.handler.sendWithPromise("FetchStandardFontData", {
443           filename,
444         });
445       } catch (e) {
446         warn(
447           `fetchStandardFontData: failed to fetch file "${filename}" with "${e}".`
448         );
449       }
450     }
451 
452     if (!data) {
453       return null;
454     }
455     // Cache the "raw" standard font data, to avoid fetching it repeatedly
456     // (see e.g. issue 11399).
457     this.standardFontDataCache.set(name, data);
458 
459     return new Stream(data);
460   }
461 
462   async buildFormXObject(
463     resources,
464     xobj,
465     smask,
466     operatorList,
467     task,
468     initialState,
469     localColorSpaceCache
470   ) {
471     const dict = xobj.dict;
472     const matrix = lookupMatrix(dict.getArray("Matrix"), null);
473     const bbox = lookupNormalRect(dict.getArray("BBox"), null);
474 
475     let optionalContent, groupOptions;
476     if (dict.has("OC")) {
477       optionalContent = await this.parseMarkedContentProps(
478         dict.get("OC"),
479         resources
480       );
481     }
482     if (optionalContent !== undefined) {
483       operatorList.addOp(OPS.beginMarkedContentProps, ["OC", optionalContent]);
484     }
485     const group = dict.get("Group");
486     if (group) {
487       groupOptions = {
488         matrix,
489         bbox,
490         smask,
491         isolated: false,
492         knockout: false,
493       };
494 
495       const groupSubtype = group.get("S");
496       let colorSpace = null;
497       if (isName(groupSubtype, "Transparency")) {
498         groupOptions.isolated = group.get("I") || false;
499         groupOptions.knockout = group.get("K") || false;
500         if (group.has("CS")) {
501           const cs = group.getRaw("CS");
502 
503           const cachedColorSpace = ColorSpace.getCached(
504             cs,
505             this.xref,
506             localColorSpaceCache
507           );
508           if (cachedColorSpace) {
509             colorSpace = cachedColorSpace;
510           } else {
511             colorSpace = await this.parseColorSpace({
512               cs,
513               resources,
514               localColorSpaceCache,
515             });
516           }
517         }
518       }
519 
520       if (smask?.backdrop) {
521         colorSpace ||= ColorSpace.singletons.rgb;
522         smask.backdrop = colorSpace.getRgb(smask.backdrop, 0);
523       }
524 
525       operatorList.addOp(OPS.beginGroup, [groupOptions]);
526     }
527 
528     // If it's a group, a new canvas will be created that is the size of the
529     // bounding box and translated to the correct position so we don't need to
530     // apply the bounding box to it.
531     const args = group ? [matrix, null] : [matrix, bbox];
532     operatorList.addOp(OPS.paintFormXObjectBegin, args);
533 
534     await this.getOperatorList({
535       stream: xobj,
536       task,
537       resources: dict.get("Resources") || resources,
538       operatorList,
539       initialState,
540     });
541     operatorList.addOp(OPS.paintFormXObjectEnd, []);
542 
543     if (group) {
544       operatorList.addOp(OPS.endGroup, [groupOptions]);
545     }
546 
547     if (optionalContent !== undefined) {
548       operatorList.addOp(OPS.endMarkedContent, []);
549     }
550   }
551 
552   _sendImgData(objId, imgData, cacheGlobally = false) {
553     if (
554       (typeof PDFJSDev === "undefined" || PDFJSDev.test("TESTING")) &&
555       imgData
556     ) {
557       assert(Number.isInteger(imgData.dataLen), "Expected dataLen to be set.");
558     }
559     const transfers = imgData ? [imgData.bitmap || imgData.data.buffer] : null;
560 
561     if (this.parsingType3Font || cacheGlobally) {
562       return this.handler.send(
563         "commonobj",
564         [objId, "Image", imgData],
565         transfers
566       );
567     }
568     return this.handler.send(
569       "obj",
570       [objId, this.pageIndex, "Image", imgData],
571       transfers
572     );
573   }
574 
575   async buildPaintImageXObject({
576     resources,
577     image,
578     isInline = false,
579     operatorList,
580     cacheKey,
581     localImageCache,
582     localColorSpaceCache,
583   }) {
584     const dict = image.dict;
585     const imageRef = dict.objId;
586     const w = dict.get("W", "Width");
587     const h = dict.get("H", "Height");
588 
589     if (!(w && typeof w === "number") || !(h && typeof h === "number")) {
590       warn("Image dimensions are missing, or not numbers.");
591       return;
592     }
593     const maxImageSize = this.options.maxImageSize;
594     if (maxImageSize !== -1 && w * h > maxImageSize) {
595       const msg = "Image exceeded maximum allowed size and was removed.";
596 
597       if (this.options.ignoreErrors) {
598         warn(msg);
599         return;
600       }
601       throw new Error(msg);
602     }
603 
604     let optionalContent;
605     if (dict.has("OC")) {
606       optionalContent = await this.parseMarkedContentProps(
607         dict.get("OC"),
608         resources
609       );
610     }
611 
612     const imageMask = dict.get("IM", "ImageMask") || false;
613     let imgData, args;
614     if (imageMask) {
615       // This depends on a tmpCanvas being filled with the
616       // current fillStyle, such that processing the pixel
617       // data can't be done here. Instead of creating a
618       // complete PDFImage, only read the information needed
619       // for later.
620       const interpolate = dict.get("I", "Interpolate");
621       const bitStrideLength = (w + 7) >> 3;
622       const imgArray = image.getBytes(bitStrideLength * h);
623       const decode = dict.getArray("D", "Decode");
624 
625       if (this.parsingType3Font) {
626         imgData = PDFImage.createRawMask({
627           imgArray,
628           width: w,
629           height: h,
630           imageIsFromDecodeStream: image instanceof DecodeStream,
631           inverseDecode: decode?.[0] > 0,
632           interpolate,
633         });
634 
635         imgData.cached = !!cacheKey;
636         args = [imgData];
637 
638         operatorList.addImageOps(
639           OPS.paintImageMaskXObject,
640           args,
641           optionalContent
642         );
643 
644         if (cacheKey) {
645           const cacheData = {
646             fn: OPS.paintImageMaskXObject,
647             args,
648             optionalContent,
649           };
650           localImageCache.set(cacheKey, imageRef, cacheData);
651 
652           if (imageRef) {
653             this._regionalImageCache.set(
654               /* name = */ null,
655               imageRef,
656               cacheData
657             );
658           }
659         }
660         return;
661       }
662 
663       imgData = await PDFImage.createMask({
664         imgArray,
665         width: w,
666         height: h,
667         imageIsFromDecodeStream: image instanceof DecodeStream,
668         inverseDecode: decode?.[0] > 0,
669         interpolate,
670         isOffscreenCanvasSupported: this.options.isOffscreenCanvasSupported,
671       });
672 
673       if (imgData.isSingleOpaquePixel) {
674         // Handles special case of mainly LaTeX documents which use image
675         // masks to draw lines with the current fill style.
676         operatorList.addImageOps(
677           OPS.paintSolidColorImageMask,
678           [],
679           optionalContent
680         );
681 
682         if (cacheKey) {
683           const cacheData = {
684             fn: OPS.paintSolidColorImageMask,
685             args: [],
686             optionalContent,
687           };
688           localImageCache.set(cacheKey, imageRef, cacheData);
689 
690           if (imageRef) {
691             this._regionalImageCache.set(
692               /* name = */ null,
693               imageRef,
694               cacheData
695             );
696           }
697         }
698         return;
699       }
700 
701       const objId = `mask_${this.idFactory.createObjId()}`;
702       operatorList.addDependency(objId);
703 
704       imgData.dataLen = imgData.bitmap
705         ? imgData.width * imgData.height * 4
706         : imgData.data.length;
707       this._sendImgData(objId, imgData);
708 
709       args = [
710         {
711           data: objId,
712           width: imgData.width,
713           height: imgData.height,
714           interpolate: imgData.interpolate,
715           count: 1,
716         },
717       ];
718       operatorList.addImageOps(
719         OPS.paintImageMaskXObject,
720         args,
721         optionalContent
722       );
723 
724       if (cacheKey) {
725         const cacheData = {
726           objId,
727           fn: OPS.paintImageMaskXObject,
728           args,
729           optionalContent,
730         };
731         localImageCache.set(cacheKey, imageRef, cacheData);
732 
733         if (imageRef) {
734           this._regionalImageCache.set(/* name = */ null, imageRef, cacheData);
735         }
736       }
737       return;
738     }
739 
740     const SMALL_IMAGE_DIMENSIONS = 200;
741     // Inlining small images into the queue as RGB data
742     if (
743       isInline &&
744       w + h < SMALL_IMAGE_DIMENSIONS &&
745       !dict.has("SMask") &&
746       !dict.has("Mask")
747     ) {
748       try {
749         const imageObj = new PDFImage({
750           xref: this.xref,
751           res: resources,
752           image,
753           isInline,
754           pdfFunctionFactory: this._pdfFunctionFactory,
755           localColorSpaceCache,
756         });
757         // We force the use of RGBA_32BPP images here, because we can't handle
758         // any other kind.
759         imgData = await imageObj.createImageData(
760           /* forceRGBA = */ true,
761           /* isOffscreenCanvasSupported = */ false
762         );
763         operatorList.isOffscreenCanvasSupported =
764           this.options.isOffscreenCanvasSupported;
765         operatorList.addImageOps(
766           OPS.paintInlineImageXObject,
767           [imgData],
768           optionalContent
769         );
770       } catch (reason) {
771         const msg = `Unable to decode inline image: "${reason}".`;
772 
773         if (!this.options.ignoreErrors) {
774           throw new Error(msg);
775         }
776         warn(msg);
777       }
778       return;
779     }
780 
781     // If there is no imageMask, create the PDFImage and a lot
782     // of image processing can be done here.
783     let objId = `img_${this.idFactory.createObjId()}`,
784       cacheGlobally = false;
785 
786     if (this.parsingType3Font) {
787       objId = `${this.idFactory.getDocId()}_type3_${objId}`;
788     } else if (cacheKey && imageRef) {
789       cacheGlobally = this.globalImageCache.shouldCache(
790         imageRef,
791         this.pageIndex
792       );
793 
794       if (cacheGlobally) {
795         assert(!isInline, "Cannot cache an inline image globally.");
796 
797         objId = `${this.idFactory.getDocId()}_${objId}`;
798       }
799     }
800 
801     // Ensure that the dependency is added before the image is decoded.
802     operatorList.addDependency(objId);
803     args = [objId, w, h];
804     operatorList.addImageOps(OPS.paintImageXObject, args, optionalContent);
805 
806     if (cacheGlobally) {
807       if (this.globalImageCache.hasDecodeFailed(imageRef)) {
808         this.globalImageCache.setData(imageRef, {
809           objId,
810           fn: OPS.paintImageXObject,
811           args,
812           optionalContent,
813           byteSize: 0, // Data is `null`, since decoding failed previously.
814         });
815 
816         this._sendImgData(objId, /* imgData = */ null, cacheGlobally);
817         return;
818       }
819 
820       // For large (at least 500x500) or more complex images that we'll cache
821       // globally, check if the image is still cached locally on the main-thread
822       // to avoid having to re-parse the image (since that can be slow).
823       if (w * h > 250000 || dict.has("SMask") || dict.has("Mask")) {
824         const localLength = await this.handler.sendWithPromise("commonobj", [
825           objId,
826           "CopyLocalImage",
827           { imageRef },
828         ]);
829 
830         if (localLength) {
831           this.globalImageCache.setData(imageRef, {
832             objId,
833             fn: OPS.paintImageXObject,
834             args,
835             optionalContent,
836             byteSize: 0, // Temporary entry, to avoid `setData` returning early.
837           });
838           this.globalImageCache.addByteSize(imageRef, localLength);
839           return;
840         }
841       }
842     }
843 
844     PDFImage.buildImage({
845       xref: this.xref,
846       res: resources,
847       image,
848       isInline,
849       pdfFunctionFactory: this._pdfFunctionFactory,
850       localColorSpaceCache,
851     })
852       .then(async imageObj => {
853         imgData = await imageObj.createImageData(
854           /* forceRGBA = */ false,
855           /* isOffscreenCanvasSupported = */ this.options
856             .isOffscreenCanvasSupported
857         );
858         imgData.dataLen = imgData.bitmap
859           ? imgData.width * imgData.height * 4
860           : imgData.data.length;
861         imgData.ref = imageRef;
862 
863         if (cacheGlobally) {
864           this.globalImageCache.addByteSize(imageRef, imgData.dataLen);
865         }
866         return this._sendImgData(objId, imgData, cacheGlobally);
867       })
868       .catch(reason => {
869         warn(`Unable to decode image "${objId}": "${reason}".`);
870 
871         if (imageRef) {
872           this.globalImageCache.addDecodeFailed(imageRef);
873         }
874         return this._sendImgData(objId, /* imgData = */ null, cacheGlobally);
875       });
876 
877     if (cacheKey) {
878       const cacheData = {
879         objId,
880         fn: OPS.paintImageXObject,
881         args,
882         optionalContent,
883       };
884       localImageCache.set(cacheKey, imageRef, cacheData);
885 
886       if (imageRef) {
887         this._regionalImageCache.set(/* name = */ null, imageRef, cacheData);
888 
889         if (cacheGlobally) {
890           this.globalImageCache.setData(imageRef, {
891             objId,
892             fn: OPS.paintImageXObject,
893             args,
894             optionalContent,
895             byteSize: 0, // Temporary entry, note `addByteSize` above.
896           });
897         }
898       }
899     }
900   }
901 
902   handleSMask(
903     smask,
904     resources,
905     operatorList,
906     task,
907     stateManager,
908     localColorSpaceCache
909   ) {
910     const smaskContent = smask.get("G");
911     const smaskOptions = {
912       subtype: smask.get("S").name,
913       backdrop: smask.get("BC"),
914     };
915 
916     // The SMask might have a alpha/luminosity value transfer function --
917     // we will build a map of integer values in range 0..255 to be fast.
918     const transferObj = smask.get("TR");
919     if (isPDFFunction(transferObj)) {
920       const transferFn = this._pdfFunctionFactory.create(transferObj);
921       const transferMap = new Uint8Array(256);
922       const tmp = new Float32Array(1);
923       for (let i = 0; i < 256; i++) {
924         tmp[0] = i / 255;
925         transferFn(tmp, 0, tmp, 0);
926         transferMap[i] = (tmp[0] * 255) | 0;
927       }
928       smaskOptions.transferMap = transferMap;
929     }
930 
931     return this.buildFormXObject(
932       resources,
933       smaskContent,
934       smaskOptions,
935       operatorList,
936       task,
937       stateManager.state.clone(),
938       localColorSpaceCache
939     );
940   }
941 
942   handleTransferFunction(tr) {
943     let transferArray;
944     if (Array.isArray(tr)) {
945       transferArray = tr;
946     } else if (isPDFFunction(tr)) {
947       transferArray = [tr];
948     } else {
949       return null; // Not a valid transfer function entry.
950     }
951 
952     const transferMaps = [];
953     let numFns = 0,
954       numEffectfulFns = 0;
955     for (const entry of transferArray) {
956       const transferObj = this.xref.fetchIfRef(entry);
957       numFns++;
958 
959       if (isName(transferObj, "Identity")) {
960         transferMaps.push(null);
961         continue;
962       } else if (!isPDFFunction(transferObj)) {
963         return null; // Not a valid transfer function object.
964       }
965 
966       const transferFn = this._pdfFunctionFactory.create(transferObj);
967       const transferMap = new Uint8Array(256),
968         tmp = new Float32Array(1);
969       for (let j = 0; j < 256; j++) {
970         tmp[0] = j / 255;
971         transferFn(tmp, 0, tmp, 0);
972         transferMap[j] = (tmp[0] * 255) | 0;
973       }
974       transferMaps.push(transferMap);
975       numEffectfulFns++;
976     }
977 
978     if (!(numFns === 1 || numFns === 4)) {
979       return null; // Only 1 or 4 functions are supported, by the specification.
980     }
981     if (numEffectfulFns === 0) {
982       return null; // Only /Identity transfer functions found, which are no-ops.
983     }
984     return transferMaps;
985   }
986 
987   handleTilingType(
988     fn,
989     color,
990     resources,
991     pattern,
992     patternDict,
993     operatorList,
994     task,
995     localTilingPatternCache
996   ) {
997     // Create an IR of the pattern code.
998     const tilingOpList = new OperatorList();
999     // Merge the available resources, to prevent issues when the patternDict
1000     // is missing some /Resources entries (fixes issue6541.pdf).
1001     const patternResources = Dict.merge({
1002       xref: this.xref,
1003       dictArray: [patternDict.get("Resources"), resources],
1004     });
1005 
1006     return this.getOperatorList({
1007       stream: pattern,
1008       task,
1009       resources: patternResources,
1010       operatorList: tilingOpList,
1011     })
1012       .then(function () {
1013         const operatorListIR = tilingOpList.getIR();
1014         const tilingPatternIR = getTilingPatternIR(
1015           operatorListIR,
1016           patternDict,
1017           color
1018         );
1019         // Add the dependencies to the parent operator list so they are
1020         // resolved before the sub operator list is executed synchronously.
1021         operatorList.addDependencies(tilingOpList.dependencies);
1022         operatorList.addOp(fn, tilingPatternIR);
1023 
1024         if (patternDict.objId) {
1025           localTilingPatternCache.set(/* name = */ null, patternDict.objId, {
1026             operatorListIR,
1027             dict: patternDict,
1028           });
1029         }
1030       })
1031       .catch(reason => {
1032         if (reason instanceof AbortException) {
1033           return;
1034         }
1035         if (this.options.ignoreErrors) {
1036           warn(`handleTilingType - ignoring pattern: "${reason}".`);
1037           return;
1038         }
1039         throw reason;
1040       });
1041   }
1042 
1043   async handleSetFont(
1044     resources,
1045     fontArgs,
1046     fontRef,
1047     operatorList,
1048     task,
1049     state,
1050     fallbackFontDict = null,
1051     cssFontInfo = null
1052   ) {
1053     const fontName = fontArgs?.[0] instanceof Name ? fontArgs[0].name : null;
1054 
1055     let translated = await this.loadFont(
1056       fontName,
1057       fontRef,
1058       resources,
1059       fallbackFontDict,
1060       cssFontInfo
1061     );
1062 
1063     if (translated.font.isType3Font) {
1064       try {
1065         await translated.loadType3Data(this, resources, task);
1066         // Add the dependencies to the parent operatorList so they are
1067         // resolved before Type3 operatorLists are executed synchronously.
1068         operatorList.addDependencies(translated.type3Dependencies);
1069       } catch (reason) {
1070         translated = new TranslatedFont({
1071           loadedName: "g_font_error",
1072           font: new ErrorFont(`Type3 font load error: ${reason}`),
1073           dict: translated.font,
1074           evaluatorOptions: this.options,
1075         });
1076       }
1077     }
1078 
1079     state.font = translated.font;
1080     translated.send(this.handler);
1081     return translated.loadedName;
1082   }
1083 
1084   handleText(chars, state) {
1085     const font = state.font;
1086     const glyphs = font.charsToGlyphs(chars);
1087 
1088     if (font.data) {
1089       const isAddToPathSet = !!(
1090         state.textRenderingMode & TextRenderingMode.ADD_TO_PATH_FLAG
1091       );
1092       if (
1093         isAddToPathSet ||
1094         state.fillColorSpace.name === "Pattern" ||
1095         font.disableFontFace ||
1096         this.options.disableFontFace
1097       ) {
1098         PartialEvaluator.buildFontPaths(
1099           font,
1100           glyphs,
1101           this.handler,
1102           this.options
1103         );
1104       }
1105     }
1106     return glyphs;
1107   }
1108 
1109   ensureStateFont(state) {
1110     if (state.font) {
1111       return;
1112     }
1113     const reason = new FormatError(
1114       "Missing setFont (Tf) operator before text rendering operator."
1115     );
1116 
1117     if (this.options.ignoreErrors) {
1118       warn(`ensureStateFont: "${reason}".`);
1119       return;
1120     }
1121     throw reason;
1122   }
1123 
1124   async setGState({
1125     resources,
1126     gState,
1127     operatorList,
1128     cacheKey,
1129     task,
1130     stateManager,
1131     localGStateCache,
1132     localColorSpaceCache,
1133   }) {
1134     const gStateRef = gState.objId;
1135     let isSimpleGState = true;
1136     // This array holds the converted/processed state data.
1137     const gStateObj = [];
1138     let promise = Promise.resolve();
1139     for (const key of gState.getKeys()) {
1140       const value = gState.get(key);
1141       switch (key) {
1142         case "Type":
1143           break;
1144         case "LW":
1145         case "LC":
1146         case "LJ":
1147         case "ML":
1148         case "D":
1149         case "RI":
1150         case "FL":
1151         case "CA":
1152         case "ca":
1153           gStateObj.push([key, value]);
1154           break;
1155         case "Font":
1156           isSimpleGState = false;
1157 
1158           promise = promise.then(() =>
1159             this.handleSetFont(
1160               resources,
1161               null,
1162               value[0],
1163               operatorList,
1164               task,
1165               stateManager.state
1166             ).then(function (loadedName) {
1167               operatorList.addDependency(loadedName);
1168               gStateObj.push([key, [loadedName, value[1]]]);
1169             })
1170           );
1171           break;
1172         case "BM":
1173           gStateObj.push([key, normalizeBlendMode(value)]);
1174           break;
1175         case "SMask":
1176           if (isName(value, "None")) {
1177             gStateObj.push([key, false]);
1178             break;
1179           }
1180           if (value instanceof Dict) {
1181             isSimpleGState = false;
1182 
1183             promise = promise.then(() =>
1184               this.handleSMask(
1185                 value,
1186                 resources,
1187                 operatorList,
1188                 task,
1189                 stateManager,
1190                 localColorSpaceCache
1191               )
1192             );
1193             gStateObj.push([key, true]);
1194           } else {
1195             warn("Unsupported SMask type");
1196           }
1197           break;
1198         case "TR":
1199           const transferMaps = this.handleTransferFunction(value);
1200           gStateObj.push([key, transferMaps]);
1201           break;
1202         // Only generate info log messages for the following since
1203         // they are unlikely to have a big impact on the rendering.
1204         case "OP":
1205         case "op":
1206         case "OPM":
1207         case "BG":
1208         case "BG2":
1209         case "UCR":
1210         case "UCR2":
1211         case "TR2":
1212         case "HT":
1213         case "SM":
1214         case "SA":
1215         case "AIS":
1216         case "TK":
1217           // TODO implement these operators.
1218           info("graphic state operator " + key);
1219           break;
1220         default:
1221           info("Unknown graphic state operator " + key);
1222           break;
1223       }
1224     }
1225     await promise;
1226 
1227     if (gStateObj.length > 0) {
1228       operatorList.addOp(OPS.setGState, [gStateObj]);
1229     }
1230 
1231     if (isSimpleGState) {
1232       localGStateCache.set(cacheKey, gStateRef, gStateObj);
1233     }
1234   }
1235 
1236   loadFont(
1237     fontName,
1238     font,
1239     resources,
1240     fallbackFontDict = null,
1241     cssFontInfo = null
1242   ) {
1243     // eslint-disable-next-line arrow-body-style
1244     const errorFont = async () => {
1245       return new TranslatedFont({
1246         loadedName: "g_font_error",
1247         font: new ErrorFont(`Font "${fontName}" is not available.`),
1248         dict: font,
1249         evaluatorOptions: this.options,
1250       });
1251     };
1252 
1253     let fontRef;
1254     if (font) {
1255       // Loading by ref.
1256       if (font instanceof Ref) {
1257         fontRef = font;
1258       }
1259     } else {
1260       // Loading by name.
1261       const fontRes = resources.get("Font");
1262       if (fontRes) {
1263         fontRef = fontRes.getRaw(fontName);
1264       }
1265     }
1266     if (fontRef) {
1267       if (this.type3FontRefs?.has(fontRef)) {
1268         return errorFont();
1269       }
1270 
1271       if (this.fontCache.has(fontRef)) {
1272         return this.fontCache.get(fontRef);
1273       }
1274 
1275       try {
1276         font = this.xref.fetchIfRef(fontRef);
1277       } catch (ex) {
1278         warn(`loadFont - lookup failed: "${ex}".`);
1279       }
1280     }
1281 
1282     if (!(font instanceof Dict)) {
1283       if (!this.options.ignoreErrors && !this.parsingType3Font) {
1284         warn(`Font "${fontName}" is not available.`);
1285         return errorFont();
1286       }
1287       warn(
1288         `Font "${fontName}" is not available -- attempting to fallback to a default font.`
1289       );
1290 
1291       // Falling back to a default font to avoid completely broken rendering,
1292       // but note that there're no guarantees that things will look "correct".
1293       font = fallbackFontDict || PartialEvaluator.fallbackFontDict;
1294     }
1295 
1296     // We are holding `font.cacheKey` references only for `fontRef`s that
1297     // are not actually `Ref`s, but rather `Dict`s. See explanation below.
1298     if (font.cacheKey && this.fontCache.has(font.cacheKey)) {
1299       return this.fontCache.get(font.cacheKey);
1300     }
1301 
1302     const { promise, resolve } = Promise.withResolvers();
1303 
1304     let preEvaluatedFont;
1305     try {
1306       preEvaluatedFont = this.preEvaluateFont(font);
1307       preEvaluatedFont.cssFontInfo = cssFontInfo;
1308     } catch (reason) {
1309       warn(`loadFont - preEvaluateFont failed: "${reason}".`);
1310       return errorFont();
1311     }
1312     const { descriptor, hash } = preEvaluatedFont;
1313 
1314     const fontRefIsRef = fontRef instanceof Ref;
1315     let fontID;
1316 
1317     if (hash && descriptor instanceof Dict) {
1318       const fontAliases = (descriptor.fontAliases ||= Object.create(null));
1319 
1320       if (fontAliases[hash]) {
1321         const aliasFontRef = fontAliases[hash].aliasRef;
1322         if (fontRefIsRef && aliasFontRef && this.fontCache.has(aliasFontRef)) {
1323           this.fontCache.putAlias(fontRef, aliasFontRef);
1324           return this.fontCache.get(fontRef);
1325         }
1326       } else {
1327         fontAliases[hash] = {
1328           fontID: this.idFactory.createFontId(),
1329         };
1330       }
1331 
1332       if (fontRefIsRef) {
1333         fontAliases[hash].aliasRef = fontRef;
1334       }
1335       fontID = fontAliases[hash].fontID;
1336     } else {
1337       fontID = this.idFactory.createFontId();
1338     }
1339     assert(
1340       fontID?.startsWith("f"),
1341       'The "fontID" must be (correctly) defined.'
1342     );
1343 
1344     // Workaround for bad PDF generators that reference fonts incorrectly,
1345     // where `fontRef` is a `Dict` rather than a `Ref` (fixes bug946506.pdf).
1346     // In this case we cannot put the font into `this.fontCache` (which is
1347     // a `RefSetCache`), since it's not possible to use a `Dict` as a key.
1348     //
1349     // However, if we don't cache the font it's not possible to remove it
1350     // when `cleanup` is triggered from the API, which causes issues on
1351     // subsequent rendering operations (see issue7403.pdf) and would force us
1352     // to unnecessarily load the same fonts over and over.
1353     //
1354     // Instead, we cheat a bit by using a modified `fontID` as a key in
1355     // `this.fontCache`, to allow the font to be cached.
1356     // NOTE: This works because `RefSetCache` calls `toString()` on provided
1357     //       keys. Also, since `fontRef` is used when getting cached fonts,
1358     //       we'll not accidentally match fonts cached with the `fontID`.
1359     if (fontRefIsRef) {
1360       this.fontCache.put(fontRef, promise);
1361     } else {
1362       font.cacheKey = `cacheKey_${fontID}`;
1363       this.fontCache.put(font.cacheKey, promise);
1364     }
1365 
1366     // Keep track of each font we translated so the caller can
1367     // load them asynchronously before calling display on a page.
1368     font.loadedName = `${this.idFactory.getDocId()}_${fontID}`;
1369 
1370     this.translateFont(preEvaluatedFont)
1371       .then(translatedFont => {
1372         resolve(
1373           new TranslatedFont({
1374             loadedName: font.loadedName,
1375             font: translatedFont,
1376             dict: font,
1377             evaluatorOptions: this.options,
1378           })
1379         );
1380       })
1381       .catch(reason => {
1382         // TODO reject?
1383         warn(`loadFont - translateFont failed: "${reason}".`);
1384 
1385         resolve(
1386           new TranslatedFont({
1387             loadedName: font.loadedName,
1388             font: new ErrorFont(
1389               reason instanceof Error ? reason.message : reason
1390             ),
1391             dict: font,
1392             evaluatorOptions: this.options,
1393           })
1394         );
1395       });
1396     return promise;
1397   }
1398 
1399   buildPath(operatorList, fn, args, parsingText = false) {
1400     const lastIndex = operatorList.length - 1;
1401     if (!args) {
1402       args = [];
1403     }
1404     if (
1405       lastIndex < 0 ||
1406       operatorList.fnArray[lastIndex] !== OPS.constructPath
1407     ) {
1408       // Handle corrupt PDF documents that contains path operators inside of
1409       // text objects, which may shift subsequent text, by enclosing the path
1410       // operator in save/restore operators (fixes issue10542_reduced.pdf).
1411       //
1412       // Note that this will effectively disable the optimization in the
1413       // `else` branch below, but given that this type of corruption is
1414       // *extremely* rare that shouldn't really matter much in practice.
1415       if (parsingText) {
1416         warn(`Encountered path operator "${fn}" inside of a text object.`);
1417         operatorList.addOp(OPS.save, null);
1418       }
1419 
1420       let minMax;
1421       switch (fn) {
1422         case OPS.rectangle:
1423           const x = args[0] + args[2];
1424           const y = args[1] + args[3];
1425           minMax = [
1426             Math.min(args[0], x),
1427             Math.min(args[1], y),
1428             Math.max(args[0], x),
1429             Math.max(args[1], y),
1430           ];
1431           break;
1432         case OPS.moveTo:
1433         case OPS.lineTo:
1434           minMax = [args[0], args[1], args[0], args[1]];
1435           break;
1436         default:
1437           minMax = [Infinity, Infinity, -Infinity, -Infinity];
1438           break;
1439       }
1440       operatorList.addOp(OPS.constructPath, [[fn], args, minMax]);
1441 
1442       if (parsingText) {
1443         operatorList.addOp(OPS.restore, null);
1444       }
1445     } else {
1446       const opArgs = operatorList.argsArray[lastIndex];
1447       opArgs[0].push(fn);
1448       opArgs[1].push(...args);
1449       const minMax = opArgs[2];
1450 
1451       // Compute min/max in the worker instead of the main thread.
1452       // If the current matrix (when drawing) is a scaling one
1453       // then min/max can be easily computed in using those values.
1454       // Only rectangle, lineTo and moveTo are handled here since
1455       // Bezier stuff requires to have the starting point.
1456       switch (fn) {
1457         case OPS.rectangle:
1458           const x = args[0] + args[2];
1459           const y = args[1] + args[3];
1460           minMax[0] = Math.min(minMax[0], args[0], x);
1461           minMax[1] = Math.min(minMax[1], args[1], y);
1462           minMax[2] = Math.max(minMax[2], args[0], x);
1463           minMax[3] = Math.max(minMax[3], args[1], y);
1464           break;
1465         case OPS.moveTo:
1466         case OPS.lineTo:
1467           minMax[0] = Math.min(minMax[0], args[0]);
1468           minMax[1] = Math.min(minMax[1], args[1]);
1469           minMax[2] = Math.max(minMax[2], args[0]);
1470           minMax[3] = Math.max(minMax[3], args[1]);
1471           break;
1472       }
1473     }
1474   }
1475 
1476   parseColorSpace({ cs, resources, localColorSpaceCache }) {
1477     return ColorSpace.parseAsync({
1478       cs,
1479       xref: this.xref,
1480       resources,
1481       pdfFunctionFactory: this._pdfFunctionFactory,
1482       localColorSpaceCache,
1483     }).catch(reason => {
1484       if (reason instanceof AbortException) {
1485         return null;
1486       }
1487       if (this.options.ignoreErrors) {
1488         warn(`parseColorSpace - ignoring ColorSpace: "${reason}".`);
1489         return null;
1490       }
1491       throw reason;
1492     });
1493   }
1494 
1495   parseShading({
1496     shading,
1497     resources,
1498     localColorSpaceCache,
1499     localShadingPatternCache,
1500   }) {
1501     // Shadings and patterns may be referenced by the same name but the resource
1502     // dictionary could be different so we can't use the name for the cache key.
1503     let id = localShadingPatternCache.get(shading);
1504     if (id) {
1505       return id;
1506     }
1507     let patternIR;
1508 
1509     try {
1510       const shadingFill = Pattern.parseShading(
1511         shading,
1512         this.xref,
1513         resources,
1514         this._pdfFunctionFactory,
1515         localColorSpaceCache
1516       );
1517       patternIR = shadingFill.getIR();
1518     } catch (reason) {
1519       if (reason instanceof AbortException) {
1520         return null;
1521       }
1522       if (this.options.ignoreErrors) {
1523         warn(`parseShading - ignoring shading: "${reason}".`);
1524 
1525         localShadingPatternCache.set(shading, null);
1526         return null;
1527       }
1528       throw reason;
1529     }
1530 
1531     id = `pattern_${this.idFactory.createObjId()}`;
1532     if (this.parsingType3Font) {
1533       id = `${this.idFactory.getDocId()}_type3_${id}`;
1534     }
1535     localShadingPatternCache.set(shading, id);
1536 
1537     if (this.parsingType3Font) {
1538       this.handler.send("commonobj", [id, "Pattern", patternIR]);
1539     } else {
1540       this.handler.send("obj", [id, this.pageIndex, "Pattern", patternIR]);
1541     }
1542     return id;
1543   }
1544 
1545   handleColorN(
1546     operatorList,
1547     fn,
1548     args,
1549     cs,
1550     patterns,
1551     resources,
1552     task,
1553     localColorSpaceCache,
1554     localTilingPatternCache,
1555     localShadingPatternCache
1556   ) {
1557     // compile tiling patterns
1558     const patternName = args.pop();
1559     // SCN/scn applies patterns along with normal colors
1560     if (patternName instanceof Name) {
1561       const rawPattern = patterns.getRaw(patternName.name);
1562 
1563       const localTilingPattern =
1564         rawPattern instanceof Ref &&
1565         localTilingPatternCache.getByRef(rawPattern);
1566       if (localTilingPattern) {
1567         try {
1568           const color = cs.base ? cs.base.getRgb(args, 0) : null;
1569           const tilingPatternIR = getTilingPatternIR(
1570             localTilingPattern.operatorListIR,
1571             localTilingPattern.dict,
1572             color
1573           );
1574           operatorList.addOp(fn, tilingPatternIR);
1575           return undefined;
1576         } catch {
1577           // Handle any errors during normal TilingPattern parsing.
1578         }
1579       }
1580 
1581       const pattern = this.xref.fetchIfRef(rawPattern);
1582       if (pattern) {
1583         const dict = pattern instanceof BaseStream ? pattern.dict : pattern;
1584         const typeNum = dict.get("PatternType");
1585 
1586         if (typeNum === PatternType.TILING) {
1587           const color = cs.base ? cs.base.getRgb(args, 0) : null;
1588           return this.handleTilingType(
1589             fn,
1590             color,
1591             resources,
1592             pattern,
1593             dict,
1594             operatorList,
1595             task,
1596             localTilingPatternCache
1597           );
1598         } else if (typeNum === PatternType.SHADING) {
1599           const shading = dict.get("Shading");
1600           const objId = this.parseShading({
1601             shading,
1602             resources,
1603             localColorSpaceCache,
1604             localShadingPatternCache,
1605           });
1606           if (objId) {
1607             const matrix = lookupMatrix(dict.getArray("Matrix"), null);
1608             operatorList.addOp(fn, ["Shading", objId, matrix]);
1609           }
1610           return undefined;
1611         }
1612         throw new FormatError(`Unknown PatternType: ${typeNum}`);
1613       }
1614     }
1615     throw new FormatError(`Unknown PatternName: ${patternName}`);
1616   }
1617 
1618   _parseVisibilityExpression(array, nestingCounter, currentResult) {
1619     const MAX_NESTING = 10;
1620     if (++nestingCounter > MAX_NESTING) {
1621       warn("Visibility expression is too deeply nested");
1622       return;
1623     }
1624     const length = array.length;
1625     const operator = this.xref.fetchIfRef(array[0]);
1626     if (length < 2 || !(operator instanceof Name)) {
1627       warn("Invalid visibility expression");
1628       return;
1629     }
1630     switch (operator.name) {
1631       case "And":
1632       case "Or":
1633       case "Not":
1634         currentResult.push(operator.name);
1635         break;
1636       default:
1637         warn(`Invalid operator ${operator.name} in visibility expression`);
1638         return;
1639     }
1640     for (let i = 1; i < length; i++) {
1641       const raw = array[i];
1642       const object = this.xref.fetchIfRef(raw);
1643       if (Array.isArray(object)) {
1644         const nestedResult = [];
1645         currentResult.push(nestedResult);
1646         // Recursively parse a subarray.
1647         this._parseVisibilityExpression(object, nestingCounter, nestedResult);
1648       } else if (raw instanceof Ref) {
1649         // Reference to an OCG dictionary.
1650         currentResult.push(raw.toString());
1651       }
1652     }
1653   }
1654 
1655   async parseMarkedContentProps(contentProperties, resources) {
1656     let optionalContent;
1657     if (contentProperties instanceof Name) {
1658       const properties = resources.get("Properties");
1659       optionalContent = properties.get(contentProperties.name);
1660     } else if (contentProperties instanceof Dict) {
1661       optionalContent = contentProperties;
1662     } else {
1663       throw new FormatError("Optional content properties malformed.");
1664     }
1665 
1666     const optionalContentType = optionalContent.get("Type")?.name;
1667     if (optionalContentType === "OCG") {
1668       return {
1669         type: optionalContentType,
1670         id: optionalContent.objId,
1671       };
1672     } else if (optionalContentType === "OCMD") {
1673       const expression = optionalContent.get("VE");
1674       if (Array.isArray(expression)) {
1675         const result = [];
1676         this._parseVisibilityExpression(expression, 0, result);
1677         if (result.length > 0) {
1678           return {
1679             type: "OCMD",
1680             expression: result,
1681           };
1682         }
1683       }
1684 
1685       const optionalContentGroups = optionalContent.get("OCGs");
1686       if (
1687         Array.isArray(optionalContentGroups) ||
1688         optionalContentGroups instanceof Dict
1689       ) {
1690         const groupIds = [];
1691         if (Array.isArray(optionalContentGroups)) {
1692           for (const ocg of optionalContentGroups) {
1693             groupIds.push(ocg.toString());
1694           }
1695         } else {
1696           // Dictionary, just use the obj id.
1697           groupIds.push(optionalContentGroups.objId);
1698         }
1699 
1700         return {
1701           type: optionalContentType,
1702           ids: groupIds,
1703           policy:
1704             optionalContent.get("P") instanceof Name
1705               ? optionalContent.get("P").name
1706               : null,
1707           expression: null,
1708         };
1709       } else if (optionalContentGroups instanceof Ref) {
1710         return {
1711           type: optionalContentType,
1712           id: optionalContentGroups.toString(),
1713         };
1714       }
1715     }
1716     return null;
1717   }
1718 
1719   getOperatorList({
1720     stream,
1721     task,
1722     resources,
1723     operatorList,
1724     initialState = null,
1725     fallbackFontDict = null,
1726   }) {
1727     // Ensure that `resources`/`initialState` is correctly initialized,
1728     // even if the provided parameter is e.g. `null`.
1729     resources ||= Dict.empty;
1730     initialState ||= new EvalState();
1731 
1732     if (!operatorList) {
1733       throw new Error('getOperatorList: missing "operatorList" parameter');
1734     }
1735 
1736     const self = this;
1737     const xref = this.xref;
1738     let parsingText = false;
1739     const localImageCache = new LocalImageCache();
1740     const localColorSpaceCache = new LocalColorSpaceCache();
1741     const localGStateCache = new LocalGStateCache();
1742     const localTilingPatternCache = new LocalTilingPatternCache();
1743     const localShadingPatternCache = new Map();
1744 
1745     const xobjs = resources.get("XObject") || Dict.empty;
1746     const patterns = resources.get("Pattern") || Dict.empty;
1747     const stateManager = new StateManager(initialState);
1748     const preprocessor = new EvaluatorPreprocessor(stream, xref, stateManager);
1749     const timeSlotManager = new TimeSlotManager();
1750 
1751     function closePendingRestoreOPS(argument) {
1752       for (let i = 0, ii = preprocessor.savedStatesDepth; i < ii; i++) {
1753         operatorList.addOp(OPS.restore, []);
1754       }
1755     }
1756 
1757     return new Promise(function promiseBody(resolve, reject) {
1758       const next = function (promise) {
1759         Promise.all([promise, operatorList.ready]).then(function () {
1760           try {
1761             promiseBody(resolve, reject);
1762           } catch (ex) {
1763             reject(ex);
1764           }
1765         }, reject);
1766       };
1767       task.ensureNotTerminated();
1768       timeSlotManager.reset();
1769 
1770       const operation = {};
1771       let stop, i, ii, cs, name, isValidName;
1772       while (!(stop = timeSlotManager.check())) {
1773         // The arguments parsed by read() are used beyond this loop, so we
1774         // cannot reuse the same array on each iteration. Therefore we pass
1775         // in |null| as the initial value (see the comment on
1776         // EvaluatorPreprocessor_read() for why).
1777         operation.args = null;
1778         if (!preprocessor.read(operation)) {
1779           break;
1780         }
1781         let args = operation.args;
1782         let fn = operation.fn;
1783 
1784         switch (fn | 0) {
1785           case OPS.paintXObject:
1786             // eagerly compile XForm objects
1787             isValidName = args[0] instanceof Name;
1788             name = args[0].name;
1789 
1790             if (isValidName) {
1791               const localImage = localImageCache.getByName(name);
1792               if (localImage) {
1793                 addLocallyCachedImageOps(operatorList, localImage);
1794                 args = null;
1795                 continue;
1796               }
1797             }
1798 
1799             next(
1800               new Promise(function (resolveXObject, rejectXObject) {
1801                 if (!isValidName) {
1802                   throw new FormatError("XObject must be referred to by name.");
1803                 }
1804 
1805                 let xobj = xobjs.getRaw(name);
1806                 if (xobj instanceof Ref) {
1807                   const localImage =
1808                     localImageCache.getByRef(xobj) ||
1809                     self._regionalImageCache.getByRef(xobj);
1810                   if (localImage) {
1811                     addLocallyCachedImageOps(operatorList, localImage);
1812                     resolveXObject();
1813                     return;
1814                   }
1815 
1816                   const globalImage = self.globalImageCache.getData(
1817                     xobj,
1818                     self.pageIndex
1819                   );
1820                   if (globalImage) {
1821                     operatorList.addDependency(globalImage.objId);
1822                     operatorList.addImageOps(
1823                       globalImage.fn,
1824                       globalImage.args,
1825                       globalImage.optionalContent
1826                     );
1827 
1828                     resolveXObject();
1829                     return;
1830                   }
1831 
1832                   xobj = xref.fetch(xobj);
1833                 }
1834 
1835                 if (!(xobj instanceof BaseStream)) {
1836                   throw new FormatError("XObject should be a stream");
1837                 }
1838 
1839                 const type = xobj.dict.get("Subtype");
1840                 if (!(type instanceof Name)) {
1841                   throw new FormatError("XObject should have a Name subtype");
1842                 }
1843 
1844                 if (type.name === "Form") {
1845                   stateManager.save();
1846                   self
1847                     .buildFormXObject(
1848                       resources,
1849                       xobj,
1850                       null,
1851                       operatorList,
1852                       task,
1853                       stateManager.state.clone(),
1854                       localColorSpaceCache
1855                     )
1856                     .then(function () {
1857                       stateManager.restore();
1858                       resolveXObject();
1859                     }, rejectXObject);
1860                   return;
1861                 } else if (type.name === "Image") {
1862                   self
1863                     .buildPaintImageXObject({
1864                       resources,
1865                       image: xobj,
1866                       operatorList,
1867                       cacheKey: name,
1868                       localImageCache,
1869                       localColorSpaceCache,
1870                     })
1871                     .then(resolveXObject, rejectXObject);
1872                   return;
1873                 } else if (type.name === "PS") {
1874                   // PostScript XObjects are unused when viewing documents.
1875                   // See section 4.7.1 of Adobe's PDF reference.
1876                   info("Ignored XObject subtype PS");
1877                 } else {
1878                   throw new FormatError(
1879                     `Unhandled XObject subtype ${type.name}`
1880                   );
1881                 }
1882                 resolveXObject();
1883               }).catch(function (reason) {
1884                 if (reason instanceof AbortException) {
1885                   return;
1886                 }
1887                 if (self.options.ignoreErrors) {
1888                   warn(`getOperatorList - ignoring XObject: "${reason}".`);
1889                   return;
1890                 }
1891                 throw reason;
1892               })
1893             );
1894             return;
1895           case OPS.setFont:
1896             var fontSize = args[1];
1897             // eagerly collect all fonts
1898             next(
1899               self
1900                 .handleSetFont(
1901                   resources,
1902                   args,
1903                   null,
1904                   operatorList,
1905                   task,
1906                   stateManager.state,
1907                   fallbackFontDict
1908                 )
1909                 .then(function (loadedName) {
1910                   operatorList.addDependency(loadedName);
1911                   operatorList.addOp(OPS.setFont, [loadedName, fontSize]);
1912                 })
1913             );
1914             return;
1915           case OPS.beginText:
1916             parsingText = true;
1917             break;
1918           case OPS.endText:
1919             parsingText = false;
1920             break;
1921           case OPS.endInlineImage:
1922             var cacheKey = args[0].cacheKey;
1923             if (cacheKey) {
1924               const localImage = localImageCache.getByName(cacheKey);
1925               if (localImage) {
1926                 addLocallyCachedImageOps(operatorList, localImage);
1927                 args = null;
1928                 continue;
1929               }
1930             }
1931             next(
1932               self.buildPaintImageXObject({
1933                 resources,
1934                 image: args[0],
1935                 isInline: true,
1936                 operatorList,
1937                 cacheKey,
1938                 localImageCache,
1939                 localColorSpaceCache,
1940               })
1941             );
1942             return;
1943           case OPS.showText:
1944             if (!stateManager.state.font) {
1945               self.ensureStateFont(stateManager.state);
1946               continue;
1947             }
1948             args[0] = self.handleText(args[0], stateManager.state);
1949             break;
1950           case OPS.showSpacedText:
1951             if (!stateManager.state.font) {
1952               self.ensureStateFont(stateManager.state);
1953               continue;
1954             }
1955             var combinedGlyphs = [];
1956             var state = stateManager.state;
1957             for (const arrItem of args[0]) {
1958               if (typeof arrItem === "string") {
1959                 combinedGlyphs.push(...self.handleText(arrItem, state));
1960               } else if (typeof arrItem === "number") {
1961                 combinedGlyphs.push(arrItem);
1962               }
1963             }
1964             args[0] = combinedGlyphs;
1965             fn = OPS.showText;
1966             break;
1967           case OPS.nextLineShowText:
1968             if (!stateManager.state.font) {
1969               self.ensureStateFont(stateManager.state);
1970               continue;
1971             }
1972             operatorList.addOp(OPS.nextLine);
1973             args[0] = self.handleText(args[0], stateManager.state);
1974             fn = OPS.showText;
1975             break;
1976           case OPS.nextLineSetSpacingShowText:
1977             if (!stateManager.state.font) {
1978               self.ensureStateFont(stateManager.state);
1979               continue;
1980             }
1981             operatorList.addOp(OPS.nextLine);
1982             operatorList.addOp(OPS.setWordSpacing, [args.shift()]);
1983             operatorList.addOp(OPS.setCharSpacing, [args.shift()]);
1984             args[0] = self.handleText(args[0], stateManager.state);
1985             fn = OPS.showText;
1986             break;
1987           case OPS.setTextRenderingMode:
1988             stateManager.state.textRenderingMode = args[0];
1989             break;
1990 
1991           case OPS.setFillColorSpace: {
1992             const cachedColorSpace = ColorSpace.getCached(
1993               args[0],
1994               xref,
1995               localColorSpaceCache
1996             );
1997             if (cachedColorSpace) {
1998               stateManager.state.fillColorSpace = cachedColorSpace;
1999               continue;
2000             }
2001 
2002             next(
2003               self
2004                 .parseColorSpace({
2005                   cs: args[0],
2006                   resources,
2007                   localColorSpaceCache,
2008                 })
2009                 .then(function (colorSpace) {
2010                   if (colorSpace) {
2011                     stateManager.state.fillColorSpace = colorSpace;
2012                   }
2013                 })
2014             );
2015             return;
2016           }
2017           case OPS.setStrokeColorSpace: {
2018             const cachedColorSpace = ColorSpace.getCached(
2019               args[0],
2020               xref,
2021               localColorSpaceCache
2022             );
2023             if (cachedColorSpace) {
2024               stateManager.state.strokeColorSpace = cachedColorSpace;
2025               continue;
2026             }
2027 
2028             next(
2029               self
2030                 .parseColorSpace({
2031                   cs: args[0],
2032                   resources,
2033                   localColorSpaceCache,
2034                 })
2035                 .then(function (colorSpace) {
2036                   if (colorSpace) {
2037                     stateManager.state.strokeColorSpace = colorSpace;
2038                   }
2039                 })
2040             );
2041             return;
2042           }
2043           case OPS.setFillColor:
2044             cs = stateManager.state.fillColorSpace;
2045             args = cs.getRgb(args, 0);
2046             fn = OPS.setFillRGBColor;
2047             break;
2048           case OPS.setStrokeColor:
2049             cs = stateManager.state.strokeColorSpace;
2050             args = cs.getRgb(args, 0);
2051             fn = OPS.setStrokeRGBColor;
2052             break;
2053           case OPS.setFillGray:
2054             stateManager.state.fillColorSpace = ColorSpace.singletons.gray;
2055             args = ColorSpace.singletons.gray.getRgb(args, 0);
2056             fn = OPS.setFillRGBColor;
2057             break;
2058           case OPS.setStrokeGray:
2059             stateManager.state.strokeColorSpace = ColorSpace.singletons.gray;
2060             args = ColorSpace.singletons.gray.getRgb(args, 0);
2061             fn = OPS.setStrokeRGBColor;
2062             break;
2063           case OPS.setFillCMYKColor:
2064             stateManager.state.fillColorSpace = ColorSpace.singletons.cmyk;
2065             args = ColorSpace.singletons.cmyk.getRgb(args, 0);
2066             fn = OPS.setFillRGBColor;
2067             break;
2068           case OPS.setStrokeCMYKColor:
2069             stateManager.state.strokeColorSpace = ColorSpace.singletons.cmyk;
2070             args = ColorSpace.singletons.cmyk.getRgb(args, 0);
2071             fn = OPS.setStrokeRGBColor;
2072             break;
2073           case OPS.setFillRGBColor:
2074             stateManager.state.fillColorSpace = ColorSpace.singletons.rgb;
2075             args = ColorSpace.singletons.rgb.getRgb(args, 0);
2076             break;
2077           case OPS.setStrokeRGBColor:
2078             stateManager.state.strokeColorSpace = ColorSpace.singletons.rgb;
2079             args = ColorSpace.singletons.rgb.getRgb(args, 0);
2080             break;
2081           case OPS.setFillColorN:
2082             cs = stateManager.state.fillColorSpace;
2083             if (cs.name === "Pattern") {
2084               next(
2085                 self.handleColorN(
2086                   operatorList,
2087                   OPS.setFillColorN,
2088                   args,
2089                   cs,
2090                   patterns,
2091                   resources,
2092                   task,
2093                   localColorSpaceCache,
2094                   localTilingPatternCache,
2095                   localShadingPatternCache
2096                 )
2097               );
2098               return;
2099             }
2100             args = cs.getRgb(args, 0);
2101             fn = OPS.setFillRGBColor;
2102             break;
2103           case OPS.setStrokeColorN:
2104             cs = stateManager.state.strokeColorSpace;
2105             if (cs.name === "Pattern") {
2106               next(
2107                 self.handleColorN(
2108                   operatorList,
2109                   OPS.setStrokeColorN,
2110                   args,
2111                   cs,
2112                   patterns,
2113                   resources,
2114                   task,
2115                   localColorSpaceCache,
2116                   localTilingPatternCache,
2117                   localShadingPatternCache
2118                 )
2119               );
2120               return;
2121             }
2122             args = cs.getRgb(args, 0);
2123             fn = OPS.setStrokeRGBColor;
2124             break;
2125 
2126           case OPS.shadingFill:
2127             var shadingRes = resources.get("Shading");
2128             if (!shadingRes) {
2129               throw new FormatError("No shading resource found");
2130             }
2131 
2132             var shading = shadingRes.get(args[0].name);
2133             if (!shading) {
2134               throw new FormatError("No shading object found");
2135             }
2136             const patternId = self.parseShading({
2137               shading,
2138               resources,
2139               localColorSpaceCache,
2140               localShadingPatternCache,
2141             });
2142             if (!patternId) {
2143               continue;
2144             }
2145             args = [patternId];
2146             fn = OPS.shadingFill;
2147             break;
2148           case OPS.setGState:
2149             isValidName = args[0] instanceof Name;
2150             name = args[0].name;
2151 
2152             if (isValidName) {
2153               const localGStateObj = localGStateCache.getByName(name);
2154               if (localGStateObj) {
2155                 if (localGStateObj.length > 0) {
2156                   operatorList.addOp(OPS.setGState, [localGStateObj]);
2157                 }
2158                 args = null;
2159                 continue;
2160               }
2161             }
2162 
2163             next(
2164               new Promise(function (resolveGState, rejectGState) {
2165                 if (!isValidName) {
2166                   throw new FormatError("GState must be referred to by name.");
2167                 }
2168 
2169                 const extGState = resources.get("ExtGState");
2170                 if (!(extGState instanceof Dict)) {
2171                   throw new FormatError("ExtGState should be a dictionary.");
2172                 }
2173 
2174                 const gState = extGState.get(name);
2175                 // TODO: Attempt to lookup cached GStates by reference as well,
2176                 //       if and only if there are PDF documents where doing so
2177                 //       would significantly improve performance.
2178                 if (!(gState instanceof Dict)) {
2179                   throw new FormatError("GState should be a dictionary.");
2180                 }
2181 
2182                 self
2183                   .setGState({
2184                     resources,
2185                     gState,
2186                     operatorList,
2187                     cacheKey: name,
2188                     task,
2189                     stateManager,
2190                     localGStateCache,
2191                     localColorSpaceCache,
2192                   })
2193                   .then(resolveGState, rejectGState);
2194               }).catch(function (reason) {
2195                 if (reason instanceof AbortException) {
2196                   return;
2197                 }
2198                 if (self.options.ignoreErrors) {
2199                   warn(`getOperatorList - ignoring ExtGState: "${reason}".`);
2200                   return;
2201                 }
2202                 throw reason;
2203               })
2204             );
2205             return;
2206           case OPS.moveTo:
2207           case OPS.lineTo:
2208           case OPS.curveTo:
2209           case OPS.curveTo2:
2210           case OPS.curveTo3:
2211           case OPS.closePath:
2212           case OPS.rectangle:
2213             self.buildPath(operatorList, fn, args, parsingText);
2214             continue;
2215           case OPS.markPoint:
2216           case OPS.markPointProps:
2217           case OPS.beginCompat:
2218           case OPS.endCompat:
2219             // Ignore operators where the corresponding handlers are known to
2220             // be no-op in CanvasGraphics (display/canvas.js). This prevents
2221             // serialization errors and is also a bit more efficient.
2222             // We could also try to serialize all objects in a general way,
2223             // e.g. as done in https://github.com/mozilla/pdf.js/pull/6266,
2224             // but doing so is meaningless without knowing the semantics.
2225             continue;
2226           case OPS.beginMarkedContentProps:
2227             if (!(args[0] instanceof Name)) {
2228               warn(`Expected name for beginMarkedContentProps arg0=${args[0]}`);
2229               operatorList.addOp(OPS.beginMarkedContentProps, ["OC", null]);
2230               continue;
2231             }
2232             if (args[0].name === "OC") {
2233               next(
2234                 self
2235                   .parseMarkedContentProps(args[1], resources)
2236                   .then(data => {
2237                     operatorList.addOp(OPS.beginMarkedContentProps, [
2238                       "OC",
2239                       data,
2240                     ]);
2241                   })
2242                   .catch(reason => {
2243                     if (reason instanceof AbortException) {
2244                       return;
2245                     }
2246                     if (self.options.ignoreErrors) {
2247                       warn(
2248                         `getOperatorList - ignoring beginMarkedContentProps: "${reason}".`
2249                       );
2250                       operatorList.addOp(OPS.beginMarkedContentProps, [
2251                         "OC",
2252                         null,
2253                       ]);
2254                       return;
2255                     }
2256                     throw reason;
2257                   })
2258               );
2259               return;
2260             }
2261             // Other marked content types aren't supported yet.
2262             args = [
2263               args[0].name,
2264               args[1] instanceof Dict ? args[1].get("MCID") : null,
2265             ];
2266 
2267             break;
2268           case OPS.beginMarkedContent:
2269           case OPS.endMarkedContent:
2270           default:
2271             // Note: Ignore the operator if it has `Dict` arguments, since
2272             // those are non-serializable, otherwise postMessage will throw
2273             // "An object could not be cloned.".
2274             if (args !== null) {
2275               for (i = 0, ii = args.length; i < ii; i++) {
2276                 if (args[i] instanceof Dict) {
2277                   break;
2278                 }
2279               }
2280               if (i < ii) {
2281                 warn("getOperatorList - ignoring operator: " + fn);
2282                 continue;
2283               }
2284             }
2285         }
2286         operatorList.addOp(fn, args);
2287       }
2288       if (stop) {
2289         next(deferred);
2290         return;
2291       }
2292       // Some PDFs don't close all restores inside object/form.
2293       // Closing those for them.
2294       closePendingRestoreOPS();
2295       resolve();
2296     }).catch(reason => {
2297       if (reason instanceof AbortException) {
2298         return;
2299       }
2300       if (this.options.ignoreErrors) {
2301         warn(
2302           `getOperatorList - ignoring errors during "${task.name}" ` +
2303             `task: "${reason}".`
2304         );
2305 
2306         closePendingRestoreOPS();
2307         return;
2308       }
2309       throw reason;
2310     });
2311   }
2312 
2313   getTextContent({
2314     stream,
2315     task,
2316     resources,
2317     stateManager = null,
2318     includeMarkedContent = false,
2319     sink,
2320     seenStyles = new Set(),
2321     viewBox,
2322     lang = null,
2323     markedContentData = null,
2324     disableNormalization = false,
2325     keepWhiteSpace = false,
2326   }) {
2327     // Ensure that `resources`/`stateManager` is correctly initialized,
2328     // even if the provided parameter is e.g. `null`.
2329     resources ||= Dict.empty;
2330     stateManager ||= new StateManager(new TextState());
2331 
2332     if (includeMarkedContent) {
2333       markedContentData ||= { level: 0 };
2334     }
2335 
2336     const textContent = {
2337       items: [],
2338       styles: Object.create(null),
2339       lang,
2340     };
2341     const textContentItem = {
2342       initialized: false,
2343       str: [],
2344       totalWidth: 0,
2345       totalHeight: 0,
2346       width: 0,
2347       height: 0,
2348       vertical: false,
2349       prevTransform: null,
2350       textAdvanceScale: 0,
2351       spaceInFlowMin: 0,
2352       spaceInFlowMax: 0,
2353       trackingSpaceMin: Infinity,
2354       negativeSpaceMax: -Infinity,
2355       notASpace: -Infinity,
2356       transform: null,
2357       fontName: null,
2358       hasEOL: false,
2359     };
2360 
2361     // Use a circular buffer (length === 2) to save the last chars in the
2362     // text stream.
2363     // This implementation of the circular buffer is using a fixed array
2364     // and the position of the next element:
2365     // function addElement(x) {
2366     //   buffer[pos] = x;
2367     //   pos = (pos + 1) % buffer.length;
2368     // }
2369     // It's a way faster than:
2370     // function addElement(x) {
2371     //   buffer.push(x);
2372     //   buffer.shift();
2373     // }
2374     //
2375     // It's useful to know when we need to add a whitespace in the
2376     // text chunk.
2377     const twoLastChars = [" ", " "];
2378     let twoLastCharsPos = 0;
2379 
2380     /**
2381      * Save the last char.
2382      * @param {string} char
2383      * @returns {boolean} true when the two last chars before adding the new one
2384      * are a non-whitespace followed by a whitespace.
2385      */
2386     function saveLastChar(char) {
2387       const nextPos = (twoLastCharsPos + 1) % 2;
2388       const ret =
2389         twoLastChars[twoLastCharsPos] !== " " && twoLastChars[nextPos] === " ";
2390       twoLastChars[twoLastCharsPos] = char;
2391       twoLastCharsPos = nextPos;
2392 
2393       return !keepWhiteSpace && ret;
2394     }
2395 
2396     function shouldAddWhitepsace() {
2397       return (
2398         !keepWhiteSpace &&
2399         twoLastChars[twoLastCharsPos] !== " " &&
2400         twoLastChars[(twoLastCharsPos + 1) % 2] === " "
2401       );
2402     }
2403 
2404     function resetLastChars() {
2405       twoLastChars[0] = twoLastChars[1] = " ";
2406       twoLastCharsPos = 0;
2407     }
2408 
2409     // Used in addFakeSpaces.
2410 
2411     // A white <= fontSize * TRACKING_SPACE_FACTOR is a tracking space
2412     // so it doesn't count as a space.
2413     const TRACKING_SPACE_FACTOR = 0.102;
2414 
2415     // When a white <= fontSize * NOT_A_SPACE_FACTOR, there is no space
2416     // even if one is present in the text stream.
2417     const NOT_A_SPACE_FACTOR = 0.03;
2418 
2419     // A negative white < fontSize * NEGATIVE_SPACE_FACTOR induces
2420     // a break (a new chunk of text is created).
2421     // It doesn't change anything when the text is copied but
2422     // it improves potential mismatch between text layer and canvas.
2423     const NEGATIVE_SPACE_FACTOR = -0.2;
2424 
2425     // A white with a width in [fontSize * MIN_FACTOR; fontSize * MAX_FACTOR]
2426     // is a space which will be inserted in the current flow of words.
2427     // If the width is outside of this range then the flow is broken
2428     // (which means a new span in the text layer).
2429     // It's useful to adjust the best as possible the span in the layer
2430     // to what is displayed in the canvas.
2431     const SPACE_IN_FLOW_MIN_FACTOR = 0.102;
2432     const SPACE_IN_FLOW_MAX_FACTOR = 0.6;
2433 
2434     // If a char is too high/too low compared to the previous we just create
2435     // a new chunk.
2436     // If the advance isn't in the +/-VERTICAL_SHIFT_RATIO * height range then
2437     // a new chunk is created.
2438     const VERTICAL_SHIFT_RATIO = 0.25;
2439 
2440     const self = this;
2441     const xref = this.xref;
2442     const showSpacedTextBuffer = [];
2443 
2444     // The xobj is parsed iff it's needed, e.g. if there is a `DO` cmd.
2445     let xobjs = null;
2446     const emptyXObjectCache = new LocalImageCache();
2447     const emptyGStateCache = new LocalGStateCache();
2448 
2449     const preprocessor = new EvaluatorPreprocessor(stream, xref, stateManager);
2450 
2451     let textState;
2452 
2453     function pushWhitespace({
2454       width = 0,
2455       height = 0,
2456       transform = textContentItem.prevTransform,
2457       fontName = textContentItem.fontName,
2458     }) {
2459       textContent.items.push({
2460         str: " ",
2461         dir: "ltr",
2462         width,
2463         height,
2464         transform,
2465         fontName,
2466         hasEOL: false,
2467       });
2468     }
2469 
2470     function getCurrentTextTransform() {
2471       // 9.4.4 Text Space Details
2472       const font = textState.font;
2473       const tsm = [
2474         textState.fontSize * textState.textHScale,
2475         0,
2476         0,
2477         textState.fontSize,
2478         0,
2479         textState.textRise,
2480       ];
2481 
2482       if (
2483         font.isType3Font &&
2484         (textState.fontSize <= 1 || font.isCharBBox) &&
2485         !isArrayEqual(textState.fontMatrix, FONT_IDENTITY_MATRIX)
2486       ) {
2487         const glyphHeight = font.bbox[3] - font.bbox[1];
2488         if (glyphHeight > 0) {
2489           tsm[3] *= glyphHeight * textState.fontMatrix[3];
2490         }
2491       }
2492 
2493       return Util.transform(
2494         textState.ctm,
2495         Util.transform(textState.textMatrix, tsm)
2496       );
2497     }
2498 
2499     function ensureTextContentItem() {
2500       if (textContentItem.initialized) {
2501         return textContentItem;
2502       }
2503       const { font, loadedName } = textState;
2504       if (!seenStyles.has(loadedName)) {
2505         seenStyles.add(loadedName);
2506         textContent.styles[loadedName] = {
2507           fontFamily: font.fallbackName,
2508           ascent: font.ascent,
2509           descent: font.descent,
2510           vertical: font.vertical,
2511         };
2512         if (self.options.fontExtraProperties && font.systemFontInfo) {
2513           const style = textContent.styles[loadedName];
2514           style.fontSubstitution = font.systemFontInfo.css;
2515           style.fontSubstitutionLoadedName = font.systemFontInfo.loadedName;
2516         }
2517       }
2518       textContentItem.fontName = loadedName;
2519 
2520       const trm = (textContentItem.transform = getCurrentTextTransform());
2521       if (!font.vertical) {
2522         textContentItem.width = textContentItem.totalWidth = 0;
2523         textContentItem.height = textContentItem.totalHeight = Math.hypot(
2524           trm[2],
2525           trm[3]
2526         );
2527         textContentItem.vertical = false;
2528       } else {
2529         textContentItem.width = textContentItem.totalWidth = Math.hypot(
2530           trm[0],
2531           trm[1]
2532         );
2533         textContentItem.height = textContentItem.totalHeight = 0;
2534         textContentItem.vertical = true;
2535       }
2536 
2537       const scaleLineX = Math.hypot(
2538         textState.textLineMatrix[0],
2539         textState.textLineMatrix[1]
2540       );
2541       const scaleCtmX = Math.hypot(textState.ctm[0], textState.ctm[1]);
2542       textContentItem.textAdvanceScale = scaleCtmX * scaleLineX;
2543 
2544       const { fontSize } = textState;
2545       textContentItem.trackingSpaceMin = fontSize * TRACKING_SPACE_FACTOR;
2546       textContentItem.notASpace = fontSize * NOT_A_SPACE_FACTOR;
2547       textContentItem.negativeSpaceMax = fontSize * NEGATIVE_SPACE_FACTOR;
2548       textContentItem.spaceInFlowMin = fontSize * SPACE_IN_FLOW_MIN_FACTOR;
2549       textContentItem.spaceInFlowMax = fontSize * SPACE_IN_FLOW_MAX_FACTOR;
2550       textContentItem.hasEOL = false;
2551 
2552       textContentItem.initialized = true;
2553       return textContentItem;
2554     }
2555 
2556     function updateAdvanceScale() {
2557       if (!textContentItem.initialized) {
2558         return;
2559       }
2560 
2561       const scaleLineX = Math.hypot(
2562         textState.textLineMatrix[0],
2563         textState.textLineMatrix[1]
2564       );
2565       const scaleCtmX = Math.hypot(textState.ctm[0], textState.ctm[1]);
2566       const scaleFactor = scaleCtmX * scaleLineX;
2567       if (scaleFactor === textContentItem.textAdvanceScale) {
2568         return;
2569       }
2570 
2571       if (!textContentItem.vertical) {
2572         textContentItem.totalWidth +=
2573           textContentItem.width * textContentItem.textAdvanceScale;
2574         textContentItem.width = 0;
2575       } else {
2576         textContentItem.totalHeight +=
2577           textContentItem.height * textContentItem.textAdvanceScale;
2578         textContentItem.height = 0;
2579       }
2580 
2581       textContentItem.textAdvanceScale = scaleFactor;
2582     }
2583 
2584     function runBidiTransform(textChunk) {
2585       let text = textChunk.str.join("");
2586       if (!disableNormalization) {
2587         text = normalizeUnicode(text);
2588       }
2589       const bidiResult = bidi(text, -1, textChunk.vertical);
2590       return {
2591         str: bidiResult.str,
2592         dir: bidiResult.dir,
2593         width: Math.abs(textChunk.totalWidth),
2594         height: Math.abs(textChunk.totalHeight),
2595         transform: textChunk.transform,
2596         fontName: textChunk.fontName,
2597         hasEOL: textChunk.hasEOL,
2598       };
2599     }
2600 
2601     async function handleSetFont(fontName, fontRef) {
2602       const translated = await self.loadFont(fontName, fontRef, resources);
2603 
2604       if (translated.font.isType3Font) {
2605         try {
2606           await translated.loadType3Data(self, resources, task);
2607         } catch {
2608           // Ignore Type3-parsing errors, since we only use `loadType3Data`
2609           // here to ensure that we'll always obtain a useful /FontBBox.
2610         }
2611       }
2612 
2613       textState.loadedName = translated.loadedName;
2614       textState.font = translated.font;
2615       textState.fontMatrix = translated.font.fontMatrix || FONT_IDENTITY_MATRIX;
2616     }
2617 
2618     function applyInverseRotation(x, y, matrix) {
2619       const scale = Math.hypot(matrix[0], matrix[1]);
2620       return [
2621         (matrix[0] * x + matrix[1] * y) / scale,
2622         (matrix[2] * x + matrix[3] * y) / scale,
2623       ];
2624     }
2625 
2626     function compareWithLastPosition(glyphWidth) {
2627       const currentTransform = getCurrentTextTransform();
2628       let posX = currentTransform[4];
2629       let posY = currentTransform[5];
2630 
2631       // Check if the glyph is in the viewbox.
2632       if (textState.font?.vertical) {
2633         if (
2634           posX < viewBox[0] ||
2635           posX > viewBox[2] ||
2636           posY + glyphWidth < viewBox[1] ||
2637           posY > viewBox[3]
2638         ) {
2639           return false;
2640         }
2641       } else if (
2642         posX + glyphWidth < viewBox[0] ||
2643         posX > viewBox[2] ||
2644         posY < viewBox[1] ||
2645         posY > viewBox[3]
2646       ) {
2647         return false;
2648       }
2649 
2650       if (!textState.font || !textContentItem.prevTransform) {
2651         return true;
2652       }
2653 
2654       let lastPosX = textContentItem.prevTransform[4];
2655       let lastPosY = textContentItem.prevTransform[5];
2656 
2657       if (lastPosX === posX && lastPosY === posY) {
2658         return true;
2659       }
2660 
2661       let rotate = -1;
2662       // Take into account the rotation is the current transform.
2663       if (
2664         currentTransform[0] &&
2665         currentTransform[1] === 0 &&
2666         currentTransform[2] === 0
2667       ) {
2668         rotate = currentTransform[0] > 0 ? 0 : 180;
2669       } else if (
2670         currentTransform[1] &&
2671         currentTransform[0] === 0 &&
2672         currentTransform[3] === 0
2673       ) {
2674         rotate = currentTransform[1] > 0 ? 90 : 270;
2675       }
2676 
2677       switch (rotate) {
2678         case 0:
2679           break;
2680         case 90:
2681           [posX, posY] = [posY, posX];
2682           [lastPosX, lastPosY] = [lastPosY, lastPosX];
2683           break;
2684         case 180:
2685           [posX, posY, lastPosX, lastPosY] = [
2686             -posX,
2687             -posY,
2688             -lastPosX,
2689             -lastPosY,
2690           ];
2691           break;
2692         case 270:
2693           [posX, posY] = [-posY, -posX];
2694           [lastPosX, lastPosY] = [-lastPosY, -lastPosX];
2695           break;
2696         default:
2697           // This is not a 0, 90, 180, 270 rotation so:
2698           //  - remove the scale factor from the matrix to get a rotation matrix
2699           //  - apply the inverse (which is the transposed) to the positions
2700           // and we can then compare positions of the glyphes to detect
2701           // a whitespace.
2702           [posX, posY] = applyInverseRotation(posX, posY, currentTransform);
2703           [lastPosX, lastPosY] = applyInverseRotation(
2704             lastPosX,
2705             lastPosY,
2706             textContentItem.prevTransform
2707           );
2708       }
2709 
2710       if (textState.font.vertical) {
2711         const advanceY = (lastPosY - posY) / textContentItem.textAdvanceScale;
2712         const advanceX = posX - lastPosX;
2713 
2714         // When the total height of the current chunk is negative
2715         // then we're writing from bottom to top.
2716         const textOrientation = Math.sign(textContentItem.height);
2717         if (advanceY < textOrientation * textContentItem.negativeSpaceMax) {
2718           if (
2719             Math.abs(advanceX) >
2720             0.5 * textContentItem.width /* not the same column */
2721           ) {
2722             appendEOL();
2723             return true;
2724           }
2725 
2726           resetLastChars();
2727           flushTextContentItem();
2728           return true;
2729         }
2730 
2731         if (Math.abs(advanceX) > textContentItem.width) {
2732           appendEOL();
2733           return true;
2734         }
2735 
2736         if (advanceY <= textOrientation * textContentItem.notASpace) {
2737           // The real spacing between 2 consecutive chars is thin enough to be
2738           // considered a non-space.
2739           resetLastChars();
2740         }
2741 
2742         if (advanceY <= textOrientation * textContentItem.trackingSpaceMin) {
2743           if (shouldAddWhitepsace()) {
2744             // The space is very thin, hence it deserves to have its own span in
2745             // order to avoid too much shift between the canvas and the text
2746             // layer.
2747             resetLastChars();
2748             flushTextContentItem();
2749             pushWhitespace({ height: Math.abs(advanceY) });
2750           } else {
2751             textContentItem.height += advanceY;
2752           }
2753         } else if (
2754           !addFakeSpaces(
2755             advanceY,
2756             textContentItem.prevTransform,
2757             textOrientation
2758           )
2759         ) {
2760           if (textContentItem.str.length === 0) {
2761             resetLastChars();
2762             pushWhitespace({ height: Math.abs(advanceY) });
2763           } else {
2764             textContentItem.height += advanceY;
2765           }
2766         }
2767 
2768         if (Math.abs(advanceX) > textContentItem.width * VERTICAL_SHIFT_RATIO) {
2769           flushTextContentItem();
2770         }
2771 
2772         return true;
2773       }
2774 
2775       const advanceX = (posX - lastPosX) / textContentItem.textAdvanceScale;
2776       const advanceY = posY - lastPosY;
2777 
2778       // When the total width of the current chunk is negative
2779       // then we're writing from right to left.
2780       const textOrientation = Math.sign(textContentItem.width);
2781       if (advanceX < textOrientation * textContentItem.negativeSpaceMax) {
2782         if (
2783           Math.abs(advanceY) >
2784           0.5 * textContentItem.height /* not the same line */
2785         ) {
2786           appendEOL();
2787           return true;
2788         }
2789 
2790         // We're moving back so in case the last char was a whitespace
2791         // we cancel it: it doesn't make sense to insert it.
2792         resetLastChars();
2793         flushTextContentItem();
2794         return true;
2795       }
2796 
2797       if (Math.abs(advanceY) > textContentItem.height) {
2798         appendEOL();
2799         return true;
2800       }
2801 
2802       if (advanceX <= textOrientation * textContentItem.notASpace) {
2803         // The real spacing between 2 consecutive chars is thin enough to be
2804         // considered a non-space.
2805         resetLastChars();
2806       }
2807 
2808       if (advanceX <= textOrientation * textContentItem.trackingSpaceMin) {
2809         if (shouldAddWhitepsace()) {
2810           // The space is very thin, hence it deserves to have its own span in
2811           // order to avoid too much shift between the canvas and the text
2812           // layer.
2813           resetLastChars();
2814           flushTextContentItem();
2815           pushWhitespace({ width: Math.abs(advanceX) });
2816         } else {
2817           textContentItem.width += advanceX;
2818         }
2819       } else if (
2820         !addFakeSpaces(advanceX, textContentItem.prevTransform, textOrientation)
2821       ) {
2822         if (textContentItem.str.length === 0) {
2823           resetLastChars();
2824           pushWhitespace({ width: Math.abs(advanceX) });
2825         } else {
2826           textContentItem.width += advanceX;
2827         }
2828       }
2829 
2830       if (Math.abs(advanceY) > textContentItem.height * VERTICAL_SHIFT_RATIO) {
2831         flushTextContentItem();
2832       }
2833 
2834       return true;
2835     }
2836 
2837     function buildTextContentItem({ chars, extraSpacing }) {
2838       const font = textState.font;
2839       if (!chars) {
2840         // Just move according to the space we have.
2841         const charSpacing = textState.charSpacing + extraSpacing;
2842         if (charSpacing) {
2843           if (!font.vertical) {
2844             textState.translateTextMatrix(
2845               charSpacing * textState.textHScale,
2846               0
2847             );
2848           } else {
2849             textState.translateTextMatrix(0, -charSpacing);
2850           }
2851         }
2852 
2853         if (keepWhiteSpace) {
2854           compareWithLastPosition(0);
2855         }
2856 
2857         return;
2858       }
2859 
2860       const glyphs = font.charsToGlyphs(chars);
2861       const scale = textState.fontMatrix[0] * textState.fontSize;
2862 
2863       for (let i = 0, ii = glyphs.length; i < ii; i++) {
2864         const glyph = glyphs[i];
2865         const { category } = glyph;
2866 
2867         if (category.isInvisibleFormatMark) {
2868           continue;
2869         }
2870         let charSpacing =
2871           textState.charSpacing + (i + 1 === ii ? extraSpacing : 0);
2872 
2873         let glyphWidth = glyph.width;
2874         if (font.vertical) {
2875           glyphWidth = glyph.vmetric ? glyph.vmetric[0] : -glyphWidth;
2876         }
2877         let scaledDim = glyphWidth * scale;
2878 
2879         if (!keepWhiteSpace && category.isWhitespace) {
2880           // Don't push a " " in the textContentItem
2881           // (except when it's between two non-spaces chars),
2882           // it will be done (if required) in next call to
2883           // compareWithLastPosition.
2884           // This way we can merge real spaces and spaces due to cursor moves.
2885           if (!font.vertical) {
2886             charSpacing += scaledDim + textState.wordSpacing;
2887             textState.translateTextMatrix(
2888               charSpacing * textState.textHScale,
2889               0
2890             );
2891           } else {
2892             charSpacing += -scaledDim + textState.wordSpacing;
2893             textState.translateTextMatrix(0, -charSpacing);
2894           }
2895           saveLastChar(" ");
2896           continue;
2897         }
2898 
2899         if (
2900           !category.isZeroWidthDiacritic &&
2901           !compareWithLastPosition(scaledDim)
2902         ) {
2903           // The glyph is not in page so just skip it but move the cursor.
2904           if (!font.vertical) {
2905             textState.translateTextMatrix(scaledDim * textState.textHScale, 0);
2906           } else {
2907             textState.translateTextMatrix(0, scaledDim);
2908           }
2909           continue;
2910         }
2911 
2912         // Must be called after compareWithLastPosition because
2913         // the textContentItem could have been flushed.
2914         const textChunk = ensureTextContentItem();
2915         if (category.isZeroWidthDiacritic) {
2916           scaledDim = 0;
2917         }
2918 
2919         if (!font.vertical) {
2920           scaledDim *= textState.textHScale;
2921           textState.translateTextMatrix(scaledDim, 0);
2922           textChunk.width += scaledDim;
2923         } else {
2924           textState.translateTextMatrix(0, scaledDim);
2925           scaledDim = Math.abs(scaledDim);
2926           textChunk.height += scaledDim;
2927         }
2928 
2929         if (scaledDim) {
2930           // Save the position of the last visible character.
2931           textChunk.prevTransform = getCurrentTextTransform();
2932         }
2933 
2934         const glyphUnicode = glyph.unicode;
2935         if (saveLastChar(glyphUnicode)) {
2936           // The two last chars are a non-whitespace followed by a whitespace
2937           // and then this non-whitespace, so we insert a whitespace here.
2938           // Replaces all whitespaces with standard spaces (0x20), to avoid
2939           // alignment issues between the textLayer and the canvas if the text
2940           // contains e.g. tabs (fixes issue6612.pdf).
2941           textChunk.str.push(" ");
2942         }
2943         textChunk.str.push(glyphUnicode);
2944 
2945         if (charSpacing) {
2946           if (!font.vertical) {
2947             textState.translateTextMatrix(
2948               charSpacing * textState.textHScale,
2949               0
2950             );
2951           } else {
2952             textState.translateTextMatrix(0, -charSpacing);
2953           }
2954         }
2955       }
2956     }
2957 
2958     function appendEOL() {
2959       resetLastChars();
2960       if (textContentItem.initialized) {
2961         textContentItem.hasEOL = true;
2962         flushTextContentItem();
2963       } else {
2964         textContent.items.push({
2965           str: "",
2966           dir: "ltr",
2967           width: 0,
2968           height: 0,
2969           transform: getCurrentTextTransform(),
2970           fontName: textState.loadedName,
2971           hasEOL: true,
2972         });
2973       }
2974     }
2975 
2976     function addFakeSpaces(width, transf, textOrientation) {
2977       if (
2978         textOrientation * textContentItem.spaceInFlowMin <= width &&
2979         width <= textOrientation * textContentItem.spaceInFlowMax
2980       ) {
2981         if (textContentItem.initialized) {
2982           resetLastChars();
2983           textContentItem.str.push(" ");
2984         }
2985         return false;
2986       }
2987 
2988       const fontName = textContentItem.fontName;
2989 
2990       let height = 0;
2991       if (textContentItem.vertical) {
2992         height = width;
2993         width = 0;
2994       }
2995 
2996       flushTextContentItem();
2997       resetLastChars();
2998       pushWhitespace({
2999         width: Math.abs(width),
3000         height: Math.abs(height),
3001         transform: transf || getCurrentTextTransform(),
3002         fontName,
3003       });
3004 
3005       return true;
3006     }
3007 
3008     function flushTextContentItem() {
3009       if (!textContentItem.initialized || !textContentItem.str) {
3010         return;
3011       }
3012 
3013       // Do final text scaling.
3014       if (!textContentItem.vertical) {
3015         textContentItem.totalWidth +=
3016           textContentItem.width * textContentItem.textAdvanceScale;
3017       } else {
3018         textContentItem.totalHeight +=
3019           textContentItem.height * textContentItem.textAdvanceScale;
3020       }
3021 
3022       textContent.items.push(runBidiTransform(textContentItem));
3023       textContentItem.initialized = false;
3024       textContentItem.str.length = 0;
3025     }
3026 
3027     function enqueueChunk(batch = false) {
3028       const length = textContent.items.length;
3029       if (length === 0) {
3030         return;
3031       }
3032       if (batch && length < TEXT_CHUNK_BATCH_SIZE) {
3033         return;
3034       }
3035       sink.enqueue(textContent, length);
3036       textContent.items = [];
3037       textContent.styles = Object.create(null);
3038     }
3039 
3040     const timeSlotManager = new TimeSlotManager();
3041 
3042     return new Promise(function promiseBody(resolve, reject) {
3043       const next = function (promise) {
3044         enqueueChunk(/* batch = */ true);
3045         Promise.all([promise, sink.ready]).then(function () {
3046           try {
3047             promiseBody(resolve, reject);
3048           } catch (ex) {
3049             reject(ex);
3050           }
3051         }, reject);
3052       };
3053       task.ensureNotTerminated();
3054       timeSlotManager.reset();
3055 
3056       const operation = {};
3057       let stop,
3058         args = [];
3059       while (!(stop = timeSlotManager.check())) {
3060         // The arguments parsed by read() are not used beyond this loop, so
3061         // we can reuse the same array on every iteration, thus avoiding
3062         // unnecessary allocations.
3063         args.length = 0;
3064         operation.args = args;
3065         if (!preprocessor.read(operation)) {
3066           break;
3067         }
3068 
3069         const previousState = textState;
3070         textState = stateManager.state;
3071         const fn = operation.fn;
3072         args = operation.args;
3073 
3074         switch (fn | 0) {
3075           case OPS.setFont:
3076             // Optimization to ignore multiple identical Tf commands.
3077             var fontNameArg = args[0].name,
3078               fontSizeArg = args[1];
3079             if (
3080               textState.font &&
3081               fontNameArg === textState.fontName &&
3082               fontSizeArg === textState.fontSize
3083             ) {
3084               break;
3085             }
3086 
3087             flushTextContentItem();
3088             textState.fontName = fontNameArg;
3089             textState.fontSize = fontSizeArg;
3090             next(handleSetFont(fontNameArg, null));
3091             return;
3092           case OPS.setTextRise:
3093             textState.textRise = args[0];
3094             break;
3095           case OPS.setHScale:
3096             textState.textHScale = args[0] / 100;
3097             break;
3098           case OPS.setLeading:
3099             textState.leading = args[0];
3100             break;
3101           case OPS.moveText:
3102             textState.translateTextLineMatrix(args[0], args[1]);
3103             textState.textMatrix = textState.textLineMatrix.slice();
3104             break;
3105           case OPS.setLeadingMoveText:
3106             textState.leading = -args[1];
3107             textState.translateTextLineMatrix(args[0], args[1]);
3108             textState.textMatrix = textState.textLineMatrix.slice();
3109             break;
3110           case OPS.nextLine:
3111             textState.carriageReturn();
3112             break;
3113           case OPS.setTextMatrix:
3114             textState.setTextMatrix(
3115               args[0],
3116               args[1],
3117               args[2],
3118               args[3],
3119               args[4],
3120               args[5]
3121             );
3122             textState.setTextLineMatrix(
3123               args[0],
3124               args[1],
3125               args[2],
3126               args[3],
3127               args[4],
3128               args[5]
3129             );
3130             updateAdvanceScale();
3131             break;
3132           case OPS.setCharSpacing:
3133             textState.charSpacing = args[0];
3134             break;
3135           case OPS.setWordSpacing:
3136             textState.wordSpacing = args[0];
3137             break;
3138           case OPS.beginText:
3139             textState.textMatrix = IDENTITY_MATRIX.slice();
3140             textState.textLineMatrix = IDENTITY_MATRIX.slice();
3141             break;
3142           case OPS.showSpacedText:
3143             if (!stateManager.state.font) {
3144               self.ensureStateFont(stateManager.state);
3145               continue;
3146             }
3147 
3148             const spaceFactor =
3149               ((textState.font.vertical ? 1 : -1) * textState.fontSize) / 1000;
3150             const elements = args[0];
3151             for (let i = 0, ii = elements.length; i < ii; i++) {
3152               const item = elements[i];
3153               if (typeof item === "string") {
3154                 showSpacedTextBuffer.push(item);
3155               } else if (typeof item === "number" && item !== 0) {
3156                 // PDF Specification 5.3.2 states:
3157                 // The number is expressed in thousandths of a unit of text
3158                 // space.
3159                 // This amount is subtracted from the current horizontal or
3160                 // vertical coordinate, depending on the writing mode.
3161                 // In the default coordinate system, a positive adjustment
3162                 // has the effect of moving the next glyph painted either to
3163                 // the left or down by the given amount.
3164                 const str = showSpacedTextBuffer.join("");
3165                 showSpacedTextBuffer.length = 0;
3166                 buildTextContentItem({
3167                   chars: str,
3168                   extraSpacing: item * spaceFactor,
3169                 });
3170               }
3171             }
3172 
3173             if (showSpacedTextBuffer.length > 0) {
3174               const str = showSpacedTextBuffer.join("");
3175               showSpacedTextBuffer.length = 0;
3176               buildTextContentItem({
3177                 chars: str,
3178                 extraSpacing: 0,
3179               });
3180             }
3181             break;
3182           case OPS.showText:
3183             if (!stateManager.state.font) {
3184               self.ensureStateFont(stateManager.state);
3185               continue;
3186             }
3187             buildTextContentItem({
3188               chars: args[0],
3189               extraSpacing: 0,
3190             });
3191             break;
3192           case OPS.nextLineShowText:
3193             if (!stateManager.state.font) {
3194               self.ensureStateFont(stateManager.state);
3195               continue;
3196             }
3197             textState.carriageReturn();
3198             buildTextContentItem({
3199               chars: args[0],
3200               extraSpacing: 0,
3201             });
3202             break;
3203           case OPS.nextLineSetSpacingShowText:
3204             if (!stateManager.state.font) {
3205               self.ensureStateFont(stateManager.state);
3206               continue;
3207             }
3208             textState.wordSpacing = args[0];
3209             textState.charSpacing = args[1];
3210             textState.carriageReturn();
3211             buildTextContentItem({
3212               chars: args[2],
3213               extraSpacing: 0,
3214             });
3215             break;
3216           case OPS.paintXObject:
3217             flushTextContentItem();
3218             if (!xobjs) {
3219               xobjs = resources.get("XObject") || Dict.empty;
3220             }
3221 
3222             var isValidName = args[0] instanceof Name;
3223             var name = args[0].name;
3224 
3225             if (isValidName && emptyXObjectCache.getByName(name)) {
3226               break;
3227             }
3228 
3229             next(
3230               new Promise(function (resolveXObject, rejectXObject) {
3231                 if (!isValidName) {
3232                   throw new FormatError("XObject must be referred to by name.");
3233                 }
3234 
3235                 let xobj = xobjs.getRaw(name);
3236                 if (xobj instanceof Ref) {
3237                   if (emptyXObjectCache.getByRef(xobj)) {
3238                     resolveXObject();
3239                     return;
3240                   }
3241 
3242                   const globalImage = self.globalImageCache.getData(
3243                     xobj,
3244                     self.pageIndex
3245                   );
3246                   if (globalImage) {
3247                     resolveXObject();
3248                     return;
3249                   }
3250 
3251                   xobj = xref.fetch(xobj);
3252                 }
3253 
3254                 if (!(xobj instanceof BaseStream)) {
3255                   throw new FormatError("XObject should be a stream");
3256                 }
3257 
3258                 const type = xobj.dict.get("Subtype");
3259                 if (!(type instanceof Name)) {
3260                   throw new FormatError("XObject should have a Name subtype");
3261                 }
3262 
3263                 if (type.name !== "Form") {
3264                   emptyXObjectCache.set(name, xobj.dict.objId, true);
3265 
3266                   resolveXObject();
3267                   return;
3268                 }
3269 
3270                 // Use a new `StateManager` to prevent incorrect positioning
3271                 // of textItems *after* the Form XObject, since errors in the
3272                 // data can otherwise prevent `restore` operators from
3273                 // executing.
3274                 // NOTE: Only an issue when `options.ignoreErrors === true`.
3275                 const currentState = stateManager.state.clone();
3276                 const xObjStateManager = new StateManager(currentState);
3277 
3278                 const matrix = lookupMatrix(xobj.dict.getArray("Matrix"), null);
3279                 if (matrix) {
3280                   xObjStateManager.transform(matrix);
3281                 }
3282 
3283                 // Enqueue the `textContent` chunk before parsing the /Form
3284                 // XObject.
3285                 enqueueChunk();
3286                 const sinkWrapper = {
3287                   enqueueInvoked: false,
3288 
3289                   enqueue(chunk, size) {
3290                     this.enqueueInvoked = true;
3291                     sink.enqueue(chunk, size);
3292                   },
3293 
3294                   get desiredSize() {
3295                     return sink.desiredSize;
3296                   },
3297 
3298                   get ready() {
3299                     return sink.ready;
3300                   },
3301                 };
3302 
3303                 self
3304                   .getTextContent({
3305                     stream: xobj,
3306                     task,
3307                     resources: xobj.dict.get("Resources") || resources,
3308                     stateManager: xObjStateManager,
3309                     includeMarkedContent,
3310                     sink: sinkWrapper,
3311                     seenStyles,
3312                     viewBox,
3313                     lang,
3314                     markedContentData,
3315                     disableNormalization,
3316                     keepWhiteSpace,
3317                   })
3318                   .then(function () {
3319                     if (!sinkWrapper.enqueueInvoked) {
3320                       emptyXObjectCache.set(name, xobj.dict.objId, true);
3321                     }
3322                     resolveXObject();
3323                   }, rejectXObject);
3324               }).catch(function (reason) {
3325                 if (reason instanceof AbortException) {
3326                   return;
3327                 }
3328                 if (self.options.ignoreErrors) {
3329                   // Error(s) in the XObject -- allow text-extraction to
3330                   // continue.
3331                   warn(`getTextContent - ignoring XObject: "${reason}".`);
3332                   return;
3333                 }
3334                 throw reason;
3335               })
3336             );
3337             return;
3338           case OPS.setGState:
3339             isValidName = args[0] instanceof Name;
3340             name = args[0].name;
3341 
3342             if (isValidName && emptyGStateCache.getByName(name)) {
3343               break;
3344             }
3345 
3346             next(
3347               new Promise(function (resolveGState, rejectGState) {
3348                 if (!isValidName) {
3349                   throw new FormatError("GState must be referred to by name.");
3350                 }
3351 
3352                 const extGState = resources.get("ExtGState");
3353                 if (!(extGState instanceof Dict)) {
3354                   throw new FormatError("ExtGState should be a dictionary.");
3355                 }
3356 
3357                 const gState = extGState.get(name);
3358                 // TODO: Attempt to lookup cached GStates by reference as well,
3359                 //       if and only if there are PDF documents where doing so
3360                 //       would significantly improve performance.
3361                 if (!(gState instanceof Dict)) {
3362                   throw new FormatError("GState should be a dictionary.");
3363                 }
3364 
3365                 const gStateFont = gState.get("Font");
3366                 if (!gStateFont) {
3367                   emptyGStateCache.set(name, gState.objId, true);
3368 
3369                   resolveGState();
3370                   return;
3371                 }
3372                 flushTextContentItem();
3373 
3374                 textState.fontName = null;
3375                 textState.fontSize = gStateFont[1];
3376                 handleSetFont(null, gStateFont[0]).then(
3377                   resolveGState,
3378                   rejectGState
3379                 );
3380               }).catch(function (reason) {
3381                 if (reason instanceof AbortException) {
3382                   return;
3383                 }
3384                 if (self.options.ignoreErrors) {
3385                   // Error(s) in the ExtGState -- allow text-extraction to
3386                   // continue.
3387                   warn(`getTextContent - ignoring ExtGState: "${reason}".`);
3388                   return;
3389                 }
3390                 throw reason;
3391               })
3392             );
3393             return;
3394           case OPS.beginMarkedContent:
3395             flushTextContentItem();
3396             if (includeMarkedContent) {
3397               markedContentData.level++;
3398 
3399               textContent.items.push({
3400                 type: "beginMarkedContent",
3401                 tag: args[0] instanceof Name ? args[0].name : null,
3402               });
3403             }
3404             break;
3405           case OPS.beginMarkedContentProps:
3406             flushTextContentItem();
3407             if (includeMarkedContent) {
3408               markedContentData.level++;
3409 
3410               let mcid = null;
3411               if (args[1] instanceof Dict) {
3412                 mcid = args[1].get("MCID");
3413               }
3414               textContent.items.push({
3415                 type: "beginMarkedContentProps",
3416                 id: Number.isInteger(mcid)
3417                   ? `${self.idFactory.getPageObjId()}_mc${mcid}`
3418                   : null,
3419                 tag: args[0] instanceof Name ? args[0].name : null,
3420               });
3421             }
3422             break;
3423           case OPS.endMarkedContent:
3424             flushTextContentItem();
3425             if (includeMarkedContent) {
3426               if (markedContentData.level === 0) {
3427                 // Handle unbalanced beginMarkedContent/endMarkedContent
3428                 // operators (fixes issue15629.pdf).
3429                 break;
3430               }
3431               markedContentData.level--;
3432 
3433               textContent.items.push({
3434                 type: "endMarkedContent",
3435               });
3436             }
3437             break;
3438           case OPS.restore:
3439             if (
3440               previousState &&
3441               (previousState.font !== textState.font ||
3442                 previousState.fontSize !== textState.fontSize ||
3443                 previousState.fontName !== textState.fontName)
3444             ) {
3445               flushTextContentItem();
3446             }
3447             break;
3448         } // switch
3449         if (textContent.items.length >= sink.desiredSize) {
3450           // Wait for ready, if we reach highWaterMark.
3451           stop = true;
3452           break;
3453         }
3454       } // while
3455       if (stop) {
3456         next(deferred);
3457         return;
3458       }
3459       flushTextContentItem();
3460       enqueueChunk();
3461       resolve();
3462     }).catch(reason => {
3463       if (reason instanceof AbortException) {
3464         return;
3465       }
3466       if (this.options.ignoreErrors) {
3467         // Error(s) in the TextContent -- allow text-extraction to continue.
3468         warn(
3469           `getTextContent - ignoring errors during "${task.name}" ` +
3470             `task: "${reason}".`
3471         );
3472 
3473         flushTextContentItem();
3474         enqueueChunk();
3475         return;
3476       }
3477       throw reason;
3478     });
3479   }
3480 
3481   async extractDataStructures(dict, properties) {
3482     const xref = this.xref;
3483     let cidToGidBytes;
3484     // 9.10.2
3485     const toUnicodePromise = this.readToUnicode(properties.toUnicode);
3486 
3487     if (properties.composite) {
3488       // CIDSystemInfo helps to match CID to glyphs
3489       const cidSystemInfo = dict.get("CIDSystemInfo");
3490       if (cidSystemInfo instanceof Dict) {
3491         properties.cidSystemInfo = {
3492           registry: stringToPDFString(cidSystemInfo.get("Registry")),
3493           ordering: stringToPDFString(cidSystemInfo.get("Ordering")),
3494           supplement: cidSystemInfo.get("Supplement"),
3495         };
3496       }
3497 
3498       try {
3499         const cidToGidMap = dict.get("CIDToGIDMap");
3500         if (cidToGidMap instanceof BaseStream) {
3501           cidToGidBytes = cidToGidMap.getBytes();
3502         }
3503       } catch (ex) {
3504         if (!this.options.ignoreErrors) {
3505           throw ex;
3506         }
3507         warn(`extractDataStructures - ignoring CIDToGIDMap data: "${ex}".`);
3508       }
3509     }
3510 
3511     // Based on 9.6.6 of the spec the encoding can come from multiple places
3512     // and depends on the font type. The base encoding and differences are
3513     // read here, but the encoding that is actually used is chosen during
3514     // glyph mapping in the font.
3515     // TODO: Loading the built in encoding in the font would allow the
3516     // differences to be merged in here not require us to hold on to it.
3517     const differences = [];
3518     let baseEncodingName = null;
3519     let encoding;
3520     if (dict.has("Encoding")) {
3521       encoding = dict.get("Encoding");
3522       if (encoding instanceof Dict) {
3523         baseEncodingName = encoding.get("BaseEncoding");
3524         baseEncodingName =
3525           baseEncodingName instanceof Name ? baseEncodingName.name : null;
3526         // Load the differences between the base and original
3527         if (encoding.has("Differences")) {
3528           const diffEncoding = encoding.get("Differences");
3529           let index = 0;
3530           for (const entry of diffEncoding) {
3531             const data = xref.fetchIfRef(entry);
3532             if (typeof data === "number") {
3533               index = data;
3534             } else if (data instanceof Name) {
3535               differences[index++] = data.name;
3536             } else {
3537               throw new FormatError(
3538                 `Invalid entry in 'Differences' array: ${data}`
3539               );
3540             }
3541           }
3542         }
3543       } else if (encoding instanceof Name) {
3544         baseEncodingName = encoding.name;
3545       } else {
3546         const msg = "Encoding is not a Name nor a Dict";
3547 
3548         if (!this.options.ignoreErrors) {
3549           throw new FormatError(msg);
3550         }
3551         warn(msg);
3552       }
3553       // According to table 114 if the encoding is a named encoding it must be
3554       // one of these predefined encodings.
3555       if (
3556         baseEncodingName !== "MacRomanEncoding" &&
3557         baseEncodingName !== "MacExpertEncoding" &&
3558         baseEncodingName !== "WinAnsiEncoding"
3559       ) {
3560         baseEncodingName = null;
3561       }
3562     }
3563 
3564     const nonEmbeddedFont = !properties.file || properties.isInternalFont,
3565       isSymbolsFontName = getSymbolsFonts()[properties.name];
3566     // Ignore an incorrectly specified named encoding for non-embedded
3567     // symbol fonts (fixes issue16464.pdf).
3568     if (baseEncodingName && nonEmbeddedFont && isSymbolsFontName) {
3569       baseEncodingName = null;
3570     }
3571 
3572     if (baseEncodingName) {
3573       properties.defaultEncoding = getEncoding(baseEncodingName);
3574     } else {
3575       const isSymbolicFont = !!(properties.flags & FontFlags.Symbolic);
3576       const isNonsymbolicFont = !!(properties.flags & FontFlags.Nonsymbolic);
3577       // According to "Table 114" in section "9.6.6.1 General" (under
3578       // "9.6.6 Character Encoding") of the PDF specification, a Nonsymbolic
3579       // font should use the `StandardEncoding` if no encoding is specified.
3580       encoding = StandardEncoding;
3581       if (properties.type === "TrueType" && !isNonsymbolicFont) {
3582         encoding = WinAnsiEncoding;
3583       }
3584       // The Symbolic attribute can be misused for regular fonts
3585       // Heuristic: we have to check if the font is a standard one also
3586       if (isSymbolicFont || isSymbolsFontName) {
3587         encoding = MacRomanEncoding;
3588         if (nonEmbeddedFont) {
3589           if (/Symbol/i.test(properties.name)) {
3590             encoding = SymbolSetEncoding;
3591           } else if (/Dingbats/i.test(properties.name)) {
3592             encoding = ZapfDingbatsEncoding;
3593           } else if (/Wingdings/i.test(properties.name)) {
3594             encoding = WinAnsiEncoding;
3595           }
3596         }
3597       }
3598       properties.defaultEncoding = encoding;
3599     }
3600 
3601     properties.differences = differences;
3602     properties.baseEncodingName = baseEncodingName;
3603     properties.hasEncoding = !!baseEncodingName || differences.length > 0;
3604     properties.dict = dict;
3605 
3606     properties.toUnicode = await toUnicodePromise;
3607 
3608     const builtToUnicode = await this.buildToUnicode(properties);
3609     properties.toUnicode = builtToUnicode;
3610 
3611     if (cidToGidBytes) {
3612       properties.cidToGidMap = this.readCidToGidMap(
3613         cidToGidBytes,
3614         builtToUnicode
3615       );
3616     }
3617     return properties;
3618   }
3619 
3620   /**
3621    * @returns {Array}
3622    * @private
3623    */
3624   _simpleFontToUnicode(properties, forceGlyphs = false) {
3625     assert(!properties.composite, "Must be a simple font.");
3626 
3627     const toUnicode = [];
3628     const encoding = properties.defaultEncoding.slice();
3629     const baseEncodingName = properties.baseEncodingName;
3630     // Merge in the differences array.
3631     const differences = properties.differences;
3632     for (const charcode in differences) {
3633       const glyphName = differences[charcode];
3634       if (glyphName === ".notdef") {
3635         // Skip .notdef to prevent rendering errors, e.g. boxes appearing
3636         // where there should be spaces (fixes issue5256.pdf).
3637         continue;
3638       }
3639       encoding[charcode] = glyphName;
3640     }
3641     const glyphsUnicodeMap = getGlyphsUnicode();
3642     for (const charcode in encoding) {
3643       // a) Map the character code to a character name.
3644       let glyphName = encoding[charcode];
3645       if (glyphName === "") {
3646         continue;
3647       }
3648       // b) Look up the character name in the Adobe Glyph List (see the
3649       //    Bibliography) to obtain the corresponding Unicode value.
3650       let unicode = glyphsUnicodeMap[glyphName];
3651       if (unicode !== undefined) {
3652         toUnicode[charcode] = String.fromCharCode(unicode);
3653         continue;
3654       }
3655       // (undocumented) c) Few heuristics to recognize unknown glyphs
3656       // NOTE: Adobe Reader does not do this step, but OSX Preview does
3657       let code = 0;
3658       switch (glyphName[0]) {
3659         case "G": // Gxx glyph
3660           if (glyphName.length === 3) {
3661             code = parseInt(glyphName.substring(1), 16);
3662           }
3663           break;
3664         case "g": // g00xx glyph
3665           if (glyphName.length === 5) {
3666             code = parseInt(glyphName.substring(1), 16);
3667           }
3668           break;
3669         case "C": // Cdd{d} glyph
3670         case "c": // cdd{d} glyph
3671           if (glyphName.length >= 3 && glyphName.length <= 4) {
3672             const codeStr = glyphName.substring(1);
3673 
3674             if (forceGlyphs) {
3675               code = parseInt(codeStr, 16);
3676               break;
3677             }
3678             // Normally the Cdd{d}/cdd{d} glyphName format will contain
3679             // regular, i.e. base 10, charCodes (see issue4550.pdf)...
3680             code = +codeStr;
3681 
3682             // ... however some PDF generators violate that assumption by
3683             // containing glyph, i.e. base 16, codes instead.
3684             // In that case we need to re-parse the *entire* encoding to
3685             // prevent broken text-selection (fixes issue9655_reduced.pdf).
3686             if (Number.isNaN(code) && Number.isInteger(parseInt(codeStr, 16))) {
3687               return this._simpleFontToUnicode(
3688                 properties,
3689                 /* forceGlyphs */ true
3690               );
3691             }
3692           }
3693           break;
3694         case "u": // 'uniXXXX'/'uXXXX{XX}' glyphs
3695           unicode = getUnicodeForGlyph(glyphName, glyphsUnicodeMap);
3696           if (unicode !== -1) {
3697             code = unicode;
3698           }
3699           break;
3700         default:
3701           // Support (some) non-standard ligatures.
3702           switch (glyphName) {
3703             case "f_h":
3704             case "f_t":
3705             case "T_h":
3706               toUnicode[charcode] = glyphName.replaceAll("_", "");
3707               continue;
3708           }
3709           break;
3710       }
3711       if (code > 0 && code <= 0x10ffff && Number.isInteger(code)) {
3712         // If `baseEncodingName` is one the predefined encodings, and `code`
3713         // equals `charcode`, using the glyph defined in the baseEncoding
3714         // seems to yield a better `toUnicode` mapping (fixes issue 5070).
3715         if (baseEncodingName && code === +charcode) {
3716           const baseEncoding = getEncoding(baseEncodingName);
3717           if (baseEncoding && (glyphName = baseEncoding[charcode])) {
3718             toUnicode[charcode] = String.fromCharCode(
3719               glyphsUnicodeMap[glyphName]
3720             );
3721             continue;
3722           }
3723         }
3724         toUnicode[charcode] = String.fromCodePoint(code);
3725       }
3726     }
3727     return toUnicode;
3728   }
3729 
3730   /**
3731    * Builds a char code to unicode map based on section 9.10 of the spec.
3732    * @param {Object} properties Font properties object.
3733    * @returns {Promise} A Promise that is resolved with a
3734    *   {ToUnicodeMap|IdentityToUnicodeMap} object.
3735    */
3736   async buildToUnicode(properties) {
3737     properties.hasIncludedToUnicodeMap = properties.toUnicode?.length > 0;
3738 
3739     // Section 9.10.2 Mapping Character Codes to Unicode Values
3740     if (properties.hasIncludedToUnicodeMap) {
3741       // Some fonts contain incomplete ToUnicode data, causing issues with
3742       // text-extraction. For simple fonts, containing encoding information,
3743       // use a fallback ToUnicode map to improve this (fixes issue8229.pdf).
3744       if (!properties.composite && properties.hasEncoding) {
3745         properties.fallbackToUnicode = this._simpleFontToUnicode(properties);
3746       }
3747       return properties.toUnicode;
3748     }
3749 
3750     // According to the spec if the font is a simple font we should only map
3751     // to unicode if the base encoding is MacRoman, MacExpert, or WinAnsi or
3752     // the differences array only contains adobe standard or symbol set names,
3753     // in pratice it seems better to always try to create a toUnicode map
3754     // based of the default encoding.
3755     if (!properties.composite /* is simple font */) {
3756       return new ToUnicodeMap(this._simpleFontToUnicode(properties));
3757     }
3758 
3759     // If the font is a composite font that uses one of the predefined CMaps
3760     // listed in Table 118 (except Identity–H and Identity–V) or whose
3761     // descendant CIDFont uses the Adobe-GB1, Adobe-CNS1, Adobe-Japan1, or
3762     // Adobe-Korea1 character collection:
3763     if (
3764       properties.composite &&
3765       ((properties.cMap.builtInCMap &&
3766         !(properties.cMap instanceof IdentityCMap)) ||
3767         // The font is supposed to have a CIDSystemInfo dictionary, but some
3768         // PDFs don't include it (fixes issue 17689), hence the `?'.
3769         (properties.cidSystemInfo?.registry === "Adobe" &&
3770           (properties.cidSystemInfo.ordering === "GB1" ||
3771             properties.cidSystemInfo.ordering === "CNS1" ||
3772             properties.cidSystemInfo.ordering === "Japan1" ||
3773             properties.cidSystemInfo.ordering === "Korea1")))
3774     ) {
3775       // Then:
3776       // a) Map the character code to a character identifier (CID) according
3777       // to the font’s CMap.
3778       // b) Obtain the registry and ordering of the character collection used
3779       // by the font’s CMap (for example, Adobe and Japan1) from its
3780       // CIDSystemInfo dictionary.
3781       const { registry, ordering } = properties.cidSystemInfo;
3782       // c) Construct a second CMap name by concatenating the registry and
3783       // ordering obtained in step (b) in the format registry–ordering–UCS2
3784       // (for example, Adobe–Japan1–UCS2).
3785       const ucs2CMapName = Name.get(`${registry}-${ordering}-UCS2`);
3786       // d) Obtain the CMap with the name constructed in step (c) (available
3787       // from the ASN Web site; see the Bibliography).
3788       const ucs2CMap = await CMapFactory.create({
3789         encoding: ucs2CMapName,
3790         fetchBuiltInCMap: this._fetchBuiltInCMapBound,
3791         useCMap: null,
3792       });
3793       const toUnicode = [],
3794         buf = [];
3795       properties.cMap.forEach(function (charcode, cid) {
3796         if (cid > 0xffff) {
3797           throw new FormatError("Max size of CID is 65,535");
3798         }
3799         // e) Map the CID obtained in step (a) according to the CMap
3800         // obtained in step (d), producing a Unicode value.
3801         const ucs2 = ucs2CMap.lookup(cid);
3802         if (ucs2) {
3803           buf.length = 0;
3804           // Support multi-byte entries (fixes issue16176.pdf).
3805           for (let i = 0, ii = ucs2.length; i < ii; i += 2) {
3806             buf.push((ucs2.charCodeAt(i) << 8) + ucs2.charCodeAt(i + 1));
3807           }
3808           toUnicode[charcode] = String.fromCharCode(...buf);
3809         }
3810       });
3811       return new ToUnicodeMap(toUnicode);
3812     }
3813 
3814     // The viewer's choice, just use an identity map.
3815     return new IdentityToUnicodeMap(properties.firstChar, properties.lastChar);
3816   }
3817 
3818   async readToUnicode(cmapObj) {
3819     if (!cmapObj) {
3820       return null;
3821     }
3822     if (cmapObj instanceof Name) {
3823       const cmap = await CMapFactory.create({
3824         encoding: cmapObj,
3825         fetchBuiltInCMap: this._fetchBuiltInCMapBound,
3826         useCMap: null,
3827       });
3828 
3829       if (cmap instanceof IdentityCMap) {
3830         return new IdentityToUnicodeMap(0, 0xffff);
3831       }
3832       return new ToUnicodeMap(cmap.getMap());
3833     }
3834     if (cmapObj instanceof BaseStream) {
3835       try {
3836         const cmap = await CMapFactory.create({
3837           encoding: cmapObj,
3838           fetchBuiltInCMap: this._fetchBuiltInCMapBound,
3839           useCMap: null,
3840         });
3841 
3842         if (cmap instanceof IdentityCMap) {
3843           return new IdentityToUnicodeMap(0, 0xffff);
3844         }
3845         const map = new Array(cmap.length);
3846         // Convert UTF-16BE
3847         // NOTE: cmap can be a sparse array, so use forEach instead of
3848         // `for(;;)` to iterate over all keys.
3849         cmap.forEach(function (charCode, token) {
3850           // Some cmaps contain *only* CID characters (fixes issue9367.pdf).
3851           if (typeof token === "number") {
3852             map[charCode] = String.fromCodePoint(token);
3853             return;
3854           }
3855           const str = [];
3856           for (let k = 0; k < token.length; k += 2) {
3857             const w1 = (token.charCodeAt(k) << 8) | token.charCodeAt(k + 1);
3858             if ((w1 & 0xf800) !== 0xd800) {
3859               // w1 < 0xD800 || w1 > 0xDFFF
3860               str.push(w1);
3861               continue;
3862             }
3863             k += 2;
3864             const w2 = (token.charCodeAt(k) << 8) | token.charCodeAt(k + 1);
3865             str.push(((w1 & 0x3ff) << 10) + (w2 & 0x3ff) + 0x10000);
3866           }
3867           map[charCode] = String.fromCodePoint(...str);
3868         });
3869         return new ToUnicodeMap(map);
3870       } catch (reason) {
3871         if (reason instanceof AbortException) {
3872           return null;
3873         }
3874         if (this.options.ignoreErrors) {
3875           warn(`readToUnicode - ignoring ToUnicode data: "${reason}".`);
3876           return null;
3877         }
3878         throw reason;
3879       }
3880     }
3881     return null;
3882   }
3883 
3884   readCidToGidMap(glyphsData, toUnicode) {
3885     // Extract the encoding from the CIDToGIDMap
3886 
3887     // Set encoding 0 to later verify the font has an encoding
3888     const result = [];
3889     for (let j = 0, jj = glyphsData.length; j < jj; j++) {
3890       const glyphID = (glyphsData[j++] << 8) | glyphsData[j];
3891       const code = j >> 1;
3892       if (glyphID === 0 && !toUnicode.has(code)) {
3893         continue;
3894       }
3895       result[code] = glyphID;
3896     }
3897     return result;
3898   }
3899 
3900   extractWidths(dict, descriptor, properties) {
3901     const xref = this.xref;
3902     let glyphsWidths = [];
3903     let defaultWidth = 0;
3904     const glyphsVMetrics = [];
3905     let defaultVMetrics;
3906     if (properties.composite) {
3907       const dw = dict.get("DW");
3908       defaultWidth = Number.isInteger(dw) ? dw : 1000;
3909 
3910       const widths = dict.get("W");
3911       if (Array.isArray(widths)) {
3912         for (let i = 0, ii = widths.length; i < ii; i++) {
3913           let start = xref.fetchIfRef(widths[i++]);
3914           if (!Number.isInteger(start)) {
3915             break; // Invalid /W data.
3916           }
3917           const code = xref.fetchIfRef(widths[i]);
3918 
3919           if (Array.isArray(code)) {
3920             for (const c of code) {
3921               const width = xref.fetchIfRef(c);
3922               if (typeof width === "number") {
3923                 glyphsWidths[start] = width;
3924               }
3925               start++;
3926             }
3927           } else if (Number.isInteger(code)) {
3928             const width = xref.fetchIfRef(widths[++i]);
3929             if (typeof width !== "number") {
3930               continue;
3931             }
3932             for (let j = start; j <= code; j++) {
3933               glyphsWidths[j] = width;
3934             }
3935           } else {
3936             break; // Invalid /W data.
3937           }
3938         }
3939       }
3940 
3941       if (properties.vertical) {
3942         const dw2 = dict.getArray("DW2");
3943         let vmetrics = isNumberArray(dw2, 2) ? dw2 : [880, -1000];
3944         defaultVMetrics = [vmetrics[1], defaultWidth * 0.5, vmetrics[0]];
3945         vmetrics = dict.get("W2");
3946         if (Array.isArray(vmetrics)) {
3947           for (let i = 0, ii = vmetrics.length; i < ii; i++) {
3948             let start = xref.fetchIfRef(vmetrics[i++]);
3949             if (!Number.isInteger(start)) {
3950               break; // Invalid /W2 data.
3951             }
3952             const code = xref.fetchIfRef(vmetrics[i]);
3953 
3954             if (Array.isArray(code)) {
3955               for (let j = 0, jj = code.length; j < jj; j++) {
3956                 const vmetric = [
3957                   xref.fetchIfRef(code[j++]),
3958                   xref.fetchIfRef(code[j++]),
3959                   xref.fetchIfRef(code[j]),
3960                 ];
3961                 if (isNumberArray(vmetric, null)) {
3962                   glyphsVMetrics[start] = vmetric;
3963                 }
3964                 start++;
3965               }
3966             } else if (Number.isInteger(code)) {
3967               const vmetric = [
3968                 xref.fetchIfRef(vmetrics[++i]),
3969                 xref.fetchIfRef(vmetrics[++i]),
3970                 xref.fetchIfRef(vmetrics[++i]),
3971               ];
3972               if (!isNumberArray(vmetric, null)) {
3973                 continue;
3974               }
3975               for (let j = start; j <= code; j++) {
3976                 glyphsVMetrics[j] = vmetric;
3977               }
3978             } else {
3979               break; // Invalid /W2 data.
3980             }
3981           }
3982         }
3983       }
3984     } else {
3985       const widths = dict.get("Widths");
3986       if (Array.isArray(widths)) {
3987         let j = properties.firstChar;
3988         for (const w of widths) {
3989           const width = xref.fetchIfRef(w);
3990           if (typeof width === "number") {
3991             glyphsWidths[j] = width;
3992           }
3993           j++;
3994         }
3995         const missingWidth = descriptor.get("MissingWidth");
3996         defaultWidth = typeof missingWidth === "number" ? missingWidth : 0;
3997       } else {
3998         // Trying get the BaseFont metrics (see comment above).
3999         const baseFontName = dict.get("BaseFont");
4000         if (baseFontName instanceof Name) {
4001           const metrics = this.getBaseFontMetrics(baseFontName.name);
4002 
4003           glyphsWidths = this.buildCharCodeToWidth(metrics.widths, properties);
4004           defaultWidth = metrics.defaultWidth;
4005         }
4006       }
4007     }
4008 
4009     // Heuristic: detection of monospace font by checking all non-zero widths
4010     let isMonospace = true;
4011     let firstWidth = defaultWidth;
4012     for (const glyph in glyphsWidths) {
4013       const glyphWidth = glyphsWidths[glyph];
4014       if (!glyphWidth) {
4015         continue;
4016       }
4017       if (!firstWidth) {
4018         firstWidth = glyphWidth;
4019         continue;
4020       }
4021       if (firstWidth !== glyphWidth) {
4022         isMonospace = false;
4023         break;
4024       }
4025     }
4026     if (isMonospace) {
4027       properties.flags |= FontFlags.FixedPitch;
4028     } else {
4029       // Clear the flag.
4030       properties.flags &= ~FontFlags.FixedPitch;
4031     }
4032 
4033     properties.defaultWidth = defaultWidth;
4034     properties.widths = glyphsWidths;
4035     properties.defaultVMetrics = defaultVMetrics;
4036     properties.vmetrics = glyphsVMetrics;
4037   }
4038 
4039   isSerifFont(baseFontName) {
4040     // Simulating descriptor flags attribute
4041     const fontNameWoStyle = baseFontName.split("-", 1)[0];
4042     return (
4043       fontNameWoStyle in getSerifFonts() || /serif/gi.test(fontNameWoStyle)
4044     );
4045   }
4046 
4047   getBaseFontMetrics(name) {
4048     let defaultWidth = 0;
4049     let widths = Object.create(null);
4050     let monospace = false;
4051     const stdFontMap = getStdFontMap();
4052     let lookupName = stdFontMap[name] || name;
4053     const Metrics = getMetrics();
4054 
4055     if (!(lookupName in Metrics)) {
4056       // Use default fonts for looking up font metrics if the passed
4057       // font is not a base font
4058       lookupName = this.isSerifFont(name) ? "Times-Roman" : "Helvetica";
4059     }
4060     const glyphWidths = Metrics[lookupName];
4061 
4062     if (typeof glyphWidths === "number") {
4063       defaultWidth = glyphWidths;
4064       monospace = true;
4065     } else {
4066       widths = glyphWidths(); // expand lazy widths array
4067     }
4068 
4069     return {
4070       defaultWidth,
4071       monospace,
4072       widths,
4073     };
4074   }
4075 
4076   buildCharCodeToWidth(widthsByGlyphName, properties) {
4077     const widths = Object.create(null);
4078     const differences = properties.differences;
4079     const encoding = properties.defaultEncoding;
4080     for (let charCode = 0; charCode < 256; charCode++) {
4081       if (charCode in differences && widthsByGlyphName[differences[charCode]]) {
4082         widths[charCode] = widthsByGlyphName[differences[charCode]];
4083         continue;
4084       }
4085       if (charCode in encoding && widthsByGlyphName[encoding[charCode]]) {
4086         widths[charCode] = widthsByGlyphName[encoding[charCode]];
4087         continue;
4088       }
4089     }
4090     return widths;
4091   }
4092 
4093   preEvaluateFont(dict) {
4094     const baseDict = dict;
4095     let type = dict.get("Subtype");
4096     if (!(type instanceof Name)) {
4097       throw new FormatError("invalid font Subtype");
4098     }
4099 
4100     let composite = false;
4101     let hash;
4102     if (type.name === "Type0") {
4103       // If font is a composite
4104       //  - get the descendant font
4105       //  - set the type according to the descendant font
4106       //  - get the FontDescriptor from the descendant font
4107       const df = dict.get("DescendantFonts");
4108       if (!df) {
4109         throw new FormatError("Descendant fonts are not specified");
4110       }
4111       dict = Array.isArray(df) ? this.xref.fetchIfRef(df[0]) : df;
4112 
4113       if (!(dict instanceof Dict)) {
4114         throw new FormatError("Descendant font is not a dictionary.");
4115       }
4116       type = dict.get("Subtype");
4117       if (!(type instanceof Name)) {
4118         throw new FormatError("invalid font Subtype");
4119       }
4120       composite = true;
4121     }
4122 
4123     let firstChar = dict.get("FirstChar");
4124     if (!Number.isInteger(firstChar)) {
4125       firstChar = 0;
4126     }
4127     let lastChar = dict.get("LastChar");
4128     if (!Number.isInteger(lastChar)) {
4129       lastChar = composite ? 0xffff : 0xff;
4130     }
4131     const descriptor = dict.get("FontDescriptor");
4132     const toUnicode = dict.get("ToUnicode") || baseDict.get("ToUnicode");
4133 
4134     if (descriptor) {
4135       hash = new MurmurHash3_64();
4136 
4137       const encoding = baseDict.getRaw("Encoding");
4138       if (encoding instanceof Name) {
4139         hash.update(encoding.name);
4140       } else if (encoding instanceof Ref) {
4141         hash.update(encoding.toString());
4142       } else if (encoding instanceof Dict) {
4143         for (const entry of encoding.getRawValues()) {
4144           if (entry instanceof Name) {
4145             hash.update(entry.name);
4146           } else if (entry instanceof Ref) {
4147             hash.update(entry.toString());
4148           } else if (Array.isArray(entry)) {
4149             // 'Differences' array (fixes bug1157493.pdf).
4150             const diffLength = entry.length,
4151               diffBuf = new Array(diffLength);
4152 
4153             for (let j = 0; j < diffLength; j++) {
4154               const diffEntry = entry[j];
4155               if (diffEntry instanceof Name) {
4156                 diffBuf[j] = diffEntry.name;
4157               } else if (
4158                 typeof diffEntry === "number" ||
4159                 diffEntry instanceof Ref
4160               ) {
4161                 diffBuf[j] = diffEntry.toString();
4162               }
4163             }
4164             hash.update(diffBuf.join());
4165           }
4166         }
4167       }
4168 
4169       hash.update(`${firstChar}-${lastChar}`); // Fixes issue10665_reduced.pdf
4170 
4171       if (toUnicode instanceof BaseStream) {
4172         const stream = toUnicode.str || toUnicode;
4173         const uint8array = stream.buffer
4174           ? new Uint8Array(stream.buffer.buffer, 0, stream.bufferLength)
4175           : new Uint8Array(
4176               stream.bytes.buffer,
4177               stream.start,
4178               stream.end - stream.start
4179             );
4180         hash.update(uint8array);
4181       } else if (toUnicode instanceof Name) {
4182         hash.update(toUnicode.name);
4183       }
4184 
4185       const widths = dict.get("Widths") || baseDict.get("Widths");
4186       if (Array.isArray(widths)) {
4187         const widthsBuf = [];
4188         for (const entry of widths) {
4189           if (typeof entry === "number" || entry instanceof Ref) {
4190             widthsBuf.push(entry.toString());
4191           }
4192         }
4193         hash.update(widthsBuf.join());
4194       }
4195 
4196       if (composite) {
4197         hash.update("compositeFont");
4198 
4199         const compositeWidths = dict.get("W") || baseDict.get("W");
4200         if (Array.isArray(compositeWidths)) {
4201           const widthsBuf = [];
4202           for (const entry of compositeWidths) {
4203             if (typeof entry === "number" || entry instanceof Ref) {
4204               widthsBuf.push(entry.toString());
4205             } else if (Array.isArray(entry)) {
4206               const subWidthsBuf = [];
4207               for (const element of entry) {
4208                 if (typeof element === "number" || element instanceof Ref) {
4209                   subWidthsBuf.push(element.toString());
4210                 }
4211               }
4212               widthsBuf.push(`[${subWidthsBuf.join()}]`);
4213             }
4214           }
4215           hash.update(widthsBuf.join());
4216         }
4217 
4218         const cidToGidMap =
4219           dict.getRaw("CIDToGIDMap") || baseDict.getRaw("CIDToGIDMap");
4220         if (cidToGidMap instanceof Name) {
4221           hash.update(cidToGidMap.name);
4222         } else if (cidToGidMap instanceof Ref) {
4223           hash.update(cidToGidMap.toString());
4224         } else if (cidToGidMap instanceof BaseStream) {
4225           hash.update(cidToGidMap.peekBytes());
4226         }
4227       }
4228     }
4229 
4230     return {
4231       descriptor,
4232       dict,
4233       baseDict,
4234       composite,
4235       type: type.name,
4236       firstChar,
4237       lastChar,
4238       toUnicode,
4239       hash: hash ? hash.hexdigest() : "",
4240     };
4241   }
4242 
4243   async translateFont({
4244     descriptor,
4245     dict,
4246     baseDict,
4247     composite,
4248     type,
4249     firstChar,
4250     lastChar,
4251     toUnicode,
4252     cssFontInfo,
4253   }) {
4254     const isType3Font = type === "Type3";
4255 
4256     if (!descriptor) {
4257       if (isType3Font) {
4258         const bbox = lookupNormalRect(dict.getArray("FontBBox"), [0, 0, 0, 0]);
4259         // FontDescriptor is only required for Type3 fonts when the document
4260         // is a tagged pdf. Create a barbebones one to get by.
4261         descriptor = new Dict(null);
4262         descriptor.set("FontName", Name.get(type));
4263         descriptor.set("FontBBox", bbox);
4264       } else {
4265         // Before PDF 1.5 if the font was one of the base 14 fonts, having a
4266         // FontDescriptor was not required.
4267         // This case is here for compatibility.
4268         let baseFontName = dict.get("BaseFont");
4269         if (!(baseFontName instanceof Name)) {
4270           throw new FormatError("Base font is not specified");
4271         }
4272 
4273         // Using base font name as a font name.
4274         baseFontName = baseFontName.name.replaceAll(/[,_]/g, "-");
4275         const metrics = this.getBaseFontMetrics(baseFontName);
4276 
4277         // Simulating descriptor flags attribute
4278         const fontNameWoStyle = baseFontName.split("-", 1)[0];
4279         const flags =
4280           (this.isSerifFont(fontNameWoStyle) ? FontFlags.Serif : 0) |
4281           (metrics.monospace ? FontFlags.FixedPitch : 0) |
4282           (getSymbolsFonts()[fontNameWoStyle]
4283             ? FontFlags.Symbolic
4284             : FontFlags.Nonsymbolic);
4285 
4286         const properties = {
4287           type,
4288           name: baseFontName,
4289           loadedName: baseDict.loadedName,
4290           systemFontInfo: null,
4291           widths: metrics.widths,
4292           defaultWidth: metrics.defaultWidth,
4293           isSimulatedFlags: true,
4294           flags,
4295           firstChar,
4296           lastChar,
4297           toUnicode,
4298           xHeight: 0,
4299           capHeight: 0,
4300           italicAngle: 0,
4301           isType3Font,
4302         };
4303         const widths = dict.get("Widths");
4304 
4305         const standardFontName = getStandardFontName(baseFontName);
4306         let file = null;
4307         if (standardFontName) {
4308           file = await this.fetchStandardFontData(standardFontName);
4309           properties.isInternalFont = !!file;
4310         }
4311         if (!properties.isInternalFont && this.options.useSystemFonts) {
4312           properties.systemFontInfo = getFontSubstitution(
4313             this.systemFontCache,
4314             this.idFactory,
4315             this.options.standardFontDataUrl,
4316             baseFontName,
4317             standardFontName,
4318             type
4319           );
4320         }
4321 
4322         const newProperties = await this.extractDataStructures(
4323           dict,
4324           properties
4325         );
4326         if (Array.isArray(widths)) {
4327           const glyphWidths = [];
4328           let j = firstChar;
4329           for (const w of widths) {
4330             const width = this.xref.fetchIfRef(w);
4331             if (typeof width === "number") {
4332               glyphWidths[j] = width;
4333             }
4334             j++;
4335           }
4336           newProperties.widths = glyphWidths;
4337         } else {
4338           newProperties.widths = this.buildCharCodeToWidth(
4339             metrics.widths,
4340             newProperties
4341           );
4342         }
4343         return new Font(baseFontName, file, newProperties);
4344       }
4345     }
4346 
4347     // According to the spec if 'FontDescriptor' is declared, 'FirstChar',
4348     // 'LastChar' and 'Widths' should exist too, but some PDF encoders seem
4349     // to ignore this rule when a variant of a standard font is used.
4350     // TODO Fill the width array depending on which of the base font this is
4351     // a variant.
4352 
4353     let fontName = descriptor.get("FontName");
4354     let baseFont = dict.get("BaseFont");
4355     // Some bad PDFs have a string as the font name.
4356     if (typeof fontName === "string") {
4357       fontName = Name.get(fontName);
4358     }
4359     if (typeof baseFont === "string") {
4360       baseFont = Name.get(baseFont);
4361     }
4362 
4363     const fontNameStr = fontName?.name;
4364     const baseFontStr = baseFont?.name;
4365     if (!isType3Font && fontNameStr !== baseFontStr) {
4366       info(
4367         `The FontDescriptor's FontName is "${fontNameStr}" but ` +
4368           `should be the same as the Font's BaseFont "${baseFontStr}".`
4369       );
4370       // - Workaround for cases where e.g. fontNameStr = 'Arial' and
4371       //   baseFontStr = 'Arial,Bold' (needed when no font file is embedded).
4372       //
4373       // - Workaround for cases where e.g. fontNameStr = 'wg09np' and
4374       //   baseFontStr = 'Wingdings-Regular' (fixes issue7454.pdf).
4375       if (
4376         fontNameStr &&
4377         baseFontStr &&
4378         (baseFontStr.startsWith(fontNameStr) ||
4379           (!isKnownFontName(fontNameStr) && isKnownFontName(baseFontStr)))
4380       ) {
4381         fontName = null;
4382       }
4383     }
4384     fontName ||= baseFont;
4385 
4386     if (!(fontName instanceof Name)) {
4387       throw new FormatError("invalid font name");
4388     }
4389 
4390     let fontFile, subtype, length1, length2, length3;
4391     try {
4392       fontFile = descriptor.get("FontFile", "FontFile2", "FontFile3");
4393     } catch (ex) {
4394       if (!this.options.ignoreErrors) {
4395         throw ex;
4396       }
4397       warn(`translateFont - fetching "${fontName.name}" font file: "${ex}".`);
4398       fontFile = new NullStream();
4399     }
4400     let isInternalFont = false;
4401     let glyphScaleFactors = null;
4402     let systemFontInfo = null;
4403     if (fontFile) {
4404       if (fontFile.dict) {
4405         const subtypeEntry = fontFile.dict.get("Subtype");
4406         if (subtypeEntry instanceof Name) {
4407           subtype = subtypeEntry.name;
4408         }
4409         length1 = fontFile.dict.get("Length1");
4410         length2 = fontFile.dict.get("Length2");
4411         length3 = fontFile.dict.get("Length3");
4412       }
4413     } else if (cssFontInfo) {
4414       // We've a missing XFA font.
4415       const standardFontName = getXfaFontName(fontName.name);
4416       if (standardFontName) {
4417         cssFontInfo.fontFamily = `${cssFontInfo.fontFamily}-PdfJS-XFA`;
4418         cssFontInfo.metrics = standardFontName.metrics || null;
4419         glyphScaleFactors = standardFontName.factors || null;
4420         fontFile = await this.fetchStandardFontData(standardFontName.name);
4421         isInternalFont = !!fontFile;
4422 
4423         // We're using a substitution font but for example widths (if any)
4424         // are related to the glyph positions in the font.
4425         // So we overwrite everything here to be sure that widths are
4426         // correct.
4427         baseDict = dict = getXfaFontDict(fontName.name);
4428         composite = true;
4429       }
4430     } else if (!isType3Font) {
4431       const standardFontName = getStandardFontName(fontName.name);
4432       if (standardFontName) {
4433         fontFile = await this.fetchStandardFontData(standardFontName);
4434         isInternalFont = !!fontFile;
4435       }
4436       if (!isInternalFont && this.options.useSystemFonts) {
4437         systemFontInfo = getFontSubstitution(
4438           this.systemFontCache,
4439           this.idFactory,
4440           this.options.standardFontDataUrl,
4441           fontName.name,
4442           standardFontName,
4443           type
4444         );
4445       }
4446     }
4447 
4448     const fontMatrix = lookupMatrix(
4449       dict.getArray("FontMatrix"),
4450       FONT_IDENTITY_MATRIX
4451     );
4452     const bbox = lookupNormalRect(
4453       descriptor.getArray("FontBBox") || dict.getArray("FontBBox"),
4454       undefined
4455     );
4456     let ascent = descriptor.get("Ascent");
4457     if (typeof ascent !== "number") {
4458       ascent = undefined;
4459     }
4460     let descent = descriptor.get("Descent");
4461     if (typeof descent !== "number") {
4462       descent = undefined;
4463     }
4464     let xHeight = descriptor.get("XHeight");
4465     if (typeof xHeight !== "number") {
4466       xHeight = 0;
4467     }
4468     let capHeight = descriptor.get("CapHeight");
4469     if (typeof capHeight !== "number") {
4470       capHeight = 0;
4471     }
4472     let flags = descriptor.get("Flags");
4473     if (!Number.isInteger(flags)) {
4474       flags = 0;
4475     }
4476     let italicAngle = descriptor.get("ItalicAngle");
4477     if (typeof italicAngle !== "number") {
4478       italicAngle = 0;
4479     }
4480 
4481     const properties = {
4482       type,
4483       name: fontName.name,
4484       subtype,
4485       file: fontFile,
4486       length1,
4487       length2,
4488       length3,
4489       isInternalFont,
4490       loadedName: baseDict.loadedName,
4491       composite,
4492       fixedPitch: false,
4493       fontMatrix,
4494       firstChar,
4495       lastChar,
4496       toUnicode,
4497       bbox,
4498       ascent,
4499       descent,
4500       xHeight,
4501       capHeight,
4502       flags,
4503       italicAngle,
4504       isType3Font,
4505       cssFontInfo,
4506       scaleFactors: glyphScaleFactors,
4507       systemFontInfo,
4508     };
4509 
4510     if (composite) {
4511       const cidEncoding = baseDict.get("Encoding");
4512       if (cidEncoding instanceof Name) {
4513         properties.cidEncoding = cidEncoding.name;
4514       }
4515       const cMap = await CMapFactory.create({
4516         encoding: cidEncoding,
4517         fetchBuiltInCMap: this._fetchBuiltInCMapBound,
4518         useCMap: null,
4519       });
4520       properties.cMap = cMap;
4521       properties.vertical = properties.cMap.vertical;
4522     }
4523 
4524     const newProperties = await this.extractDataStructures(dict, properties);
4525     this.extractWidths(dict, descriptor, newProperties);
4526 
4527     return new Font(fontName.name, fontFile, newProperties);
4528   }
4529 
4530   static buildFontPaths(font, glyphs, handler, evaluatorOptions) {
4531     function buildPath(fontChar) {
4532       const glyphName = `${font.loadedName}_path_${fontChar}`;
4533       try {
4534         if (font.renderer.hasBuiltPath(fontChar)) {
4535           return;
4536         }
4537         handler.send("commonobj", [
4538           glyphName,
4539           "FontPath",
4540           font.renderer.getPathJs(fontChar),
4541         ]);
4542       } catch (reason) {
4543         if (evaluatorOptions.ignoreErrors) {
4544           warn(`buildFontPaths - ignoring ${glyphName} glyph: "${reason}".`);
4545           return;
4546         }
4547         throw reason;
4548       }
4549     }
4550 
4551     for (const glyph of glyphs) {
4552       buildPath(glyph.fontChar);
4553 
4554       // If the glyph has an accent we need to build a path for its
4555       // fontChar too, otherwise CanvasGraphics_paintChar will fail.
4556       const accent = glyph.accent;
4557       if (accent?.fontChar) {
4558         buildPath(accent.fontChar);
4559       }
4560     }
4561   }
4562 
4563   static get fallbackFontDict() {
4564     const dict = new Dict();
4565     dict.set("BaseFont", Name.get("Helvetica"));
4566     dict.set("Type", Name.get("FallbackType"));
4567     dict.set("Subtype", Name.get("FallbackType"));
4568     dict.set("Encoding", Name.get("WinAnsiEncoding"));
4569 
4570     return shadow(this, "fallbackFontDict", dict);
4571   }
4572 }
4573 
4574 class TranslatedFont {
4575   constructor({ loadedName, font, dict, evaluatorOptions }) {
4576     this.loadedName = loadedName;
4577     this.font = font;
4578     this.dict = dict;
4579     this._evaluatorOptions = evaluatorOptions || DefaultPartialEvaluatorOptions;
4580     this.type3Loaded = null;
4581     this.type3Dependencies = font.isType3Font ? new Set() : null;
4582     this.sent = false;
4583   }
4584 
4585   send(handler) {
4586     if (this.sent) {
4587       return;
4588     }
4589     this.sent = true;
4590 
4591     handler.send("commonobj", [
4592       this.loadedName,
4593       "Font",
4594       this.font.exportData(this._evaluatorOptions.fontExtraProperties),
4595     ]);
4596   }
4597 
4598   fallback(handler) {
4599     if (!this.font.data) {
4600       return;
4601     }
4602     // When font loading failed, fall back to the built-in font renderer.
4603     this.font.disableFontFace = true;
4604     // An arbitrary number of text rendering operators could have been
4605     // encountered between the point in time when the 'Font' message was sent
4606     // to the main-thread, and the point in time when the 'FontFallback'
4607     // message was received on the worker-thread.
4608     // To ensure that all 'FontPath's are available on the main-thread, when
4609     // font loading failed, attempt to resend *all* previously parsed glyphs.
4610     PartialEvaluator.buildFontPaths(
4611       this.font,
4612       /* glyphs = */ this.font.glyphCacheValues,
4613       handler,
4614       this._evaluatorOptions
4615     );
4616   }
4617 
4618   loadType3Data(evaluator, resources, task) {
4619     if (this.type3Loaded) {
4620       return this.type3Loaded;
4621     }
4622     if (!this.font.isType3Font) {
4623       throw new Error("Must be a Type3 font.");
4624     }
4625     // When parsing Type3 glyphs, always ignore them if there are errors.
4626     // Compared to the parsing of e.g. an entire page, it doesn't really
4627     // make sense to only be able to render a Type3 glyph partially.
4628     const type3Evaluator = evaluator.clone({ ignoreErrors: false });
4629     // Prevent circular references in Type3 fonts.
4630     const type3FontRefs = new RefSet(evaluator.type3FontRefs);
4631     if (this.dict.objId && !type3FontRefs.has(this.dict.objId)) {
4632       type3FontRefs.put(this.dict.objId);
4633     }
4634     type3Evaluator.type3FontRefs = type3FontRefs;
4635 
4636     const translatedFont = this.font,
4637       type3Dependencies = this.type3Dependencies;
4638     let loadCharProcsPromise = Promise.resolve();
4639     const charProcs = this.dict.get("CharProcs");
4640     const fontResources = this.dict.get("Resources") || resources;
4641     const charProcOperatorList = Object.create(null);
4642 
4643     const fontBBox = Util.normalizeRect(translatedFont.bbox || [0, 0, 0, 0]),
4644       width = fontBBox[2] - fontBBox[0],
4645       height = fontBBox[3] - fontBBox[1];
4646     const fontBBoxSize = Math.hypot(width, height);
4647 
4648     for (const key of charProcs.getKeys()) {
4649       loadCharProcsPromise = loadCharProcsPromise.then(() => {
4650         const glyphStream = charProcs.get(key);
4651         const operatorList = new OperatorList();
4652         return type3Evaluator
4653           .getOperatorList({
4654             stream: glyphStream,
4655             task,
4656             resources: fontResources,
4657             operatorList,
4658           })
4659           .then(() => {
4660             // According to the PDF specification, section "9.6.5 Type 3 Fonts"
4661             // and "Table 113":
4662             //  "A glyph description that begins with the d1 operator should
4663             //   not execute any operators that set the colour (or other
4664             //   colour-related parameters) in the graphics state;
4665             //   any use of such operators shall be ignored."
4666             if (operatorList.fnArray[0] === OPS.setCharWidthAndBounds) {
4667               this._removeType3ColorOperators(operatorList, fontBBoxSize);
4668             }
4669             charProcOperatorList[key] = operatorList.getIR();
4670 
4671             for (const dependency of operatorList.dependencies) {
4672               type3Dependencies.add(dependency);
4673             }
4674           })
4675           .catch(function (reason) {
4676             warn(`Type3 font resource "${key}" is not available.`);
4677             const dummyOperatorList = new OperatorList();
4678             charProcOperatorList[key] = dummyOperatorList.getIR();
4679           });
4680       });
4681     }
4682     this.type3Loaded = loadCharProcsPromise.then(() => {
4683       translatedFont.charProcOperatorList = charProcOperatorList;
4684       if (this._bbox) {
4685         translatedFont.isCharBBox = true;
4686         translatedFont.bbox = this._bbox;
4687       }
4688     });
4689     return this.type3Loaded;
4690   }
4691 
4692   /**
4693    * @private
4694    */
4695   _removeType3ColorOperators(operatorList, fontBBoxSize = NaN) {
4696     if (typeof PDFJSDev === "undefined" || PDFJSDev.test("TESTING")) {
4697       assert(
4698         operatorList.fnArray[0] === OPS.setCharWidthAndBounds,
4699         "Type3 glyph shall start with the d1 operator."
4700       );
4701     }
4702     const charBBox = Util.normalizeRect(operatorList.argsArray[0].slice(2)),
4703       width = charBBox[2] - charBBox[0],
4704       height = charBBox[3] - charBBox[1];
4705     const charBBoxSize = Math.hypot(width, height);
4706 
4707     if (width === 0 || height === 0) {
4708       // Skip the d1 operator when its bounds are bogus (fixes issue14953.pdf).
4709       operatorList.fnArray.splice(0, 1);
4710       operatorList.argsArray.splice(0, 1);
4711     } else if (
4712       fontBBoxSize === 0 ||
4713       Math.round(charBBoxSize / fontBBoxSize) >= 10
4714     ) {
4715       // Override the fontBBox when it's undefined/empty, or when it's at least
4716       // (approximately) one order of magnitude smaller than the charBBox
4717       // (fixes issue14999_reduced.pdf).
4718       if (!this._bbox) {
4719         this._bbox = [Infinity, Infinity, -Infinity, -Infinity];
4720       }
4721       this._bbox[0] = Math.min(this._bbox[0], charBBox[0]);
4722       this._bbox[1] = Math.min(this._bbox[1], charBBox[1]);
4723       this._bbox[2] = Math.max(this._bbox[2], charBBox[2]);
4724       this._bbox[3] = Math.max(this._bbox[3], charBBox[3]);
4725     }
4726 
4727     let i = 0,
4728       ii = operatorList.length;
4729     while (i < ii) {
4730       switch (operatorList.fnArray[i]) {
4731         case OPS.setCharWidthAndBounds:
4732           break; // Handled above.
4733         case OPS.setStrokeColorSpace:
4734         case OPS.setFillColorSpace:
4735         case OPS.setStrokeColor:
4736         case OPS.setStrokeColorN:
4737         case OPS.setFillColor:
4738         case OPS.setFillColorN:
4739         case OPS.setStrokeGray:
4740         case OPS.setFillGray:
4741         case OPS.setStrokeRGBColor:
4742         case OPS.setFillRGBColor:
4743         case OPS.setStrokeCMYKColor:
4744         case OPS.setFillCMYKColor:
4745         case OPS.shadingFill:
4746         case OPS.setRenderingIntent:
4747           operatorList.fnArray.splice(i, 1);
4748           operatorList.argsArray.splice(i, 1);
4749           ii--;
4750           continue;
4751 
4752         case OPS.setGState:
4753           const [gStateObj] = operatorList.argsArray[i];
4754           let j = 0,
4755             jj = gStateObj.length;
4756           while (j < jj) {
4757             const [gStateKey] = gStateObj[j];
4758             switch (gStateKey) {
4759               case "TR":
4760               case "TR2":
4761               case "HT":
4762               case "BG":
4763               case "BG2":
4764               case "UCR":
4765               case "UCR2":
4766                 gStateObj.splice(j, 1);
4767                 jj--;
4768                 continue;
4769             }
4770             j++;
4771           }
4772           break;
4773       }
4774       i++;
4775     }
4776   }
4777 }
4778 
4779 class StateManager {
4780   constructor(initialState = new EvalState()) {
4781     this.state = initialState;
4782     this.stateStack = [];
4783   }
4784 
4785   save() {
4786     const old = this.state;
4787     this.stateStack.push(this.state);
4788     this.state = old.clone();
4789   }
4790 
4791   restore() {
4792     const prev = this.stateStack.pop();
4793     if (prev) {
4794       this.state = prev;
4795     }
4796   }
4797 
4798   transform(args) {
4799     this.state.ctm = Util.transform(this.state.ctm, args);
4800   }
4801 }
4802 
4803 class TextState {
4804   constructor() {
4805     this.ctm = new Float32Array(IDENTITY_MATRIX);
4806     this.fontName = null;
4807     this.fontSize = 0;
4808     this.loadedName = null;
4809     this.font = null;
4810     this.fontMatrix = FONT_IDENTITY_MATRIX;
4811     this.textMatrix = IDENTITY_MATRIX.slice();
4812     this.textLineMatrix = IDENTITY_MATRIX.slice();
4813     this.charSpacing = 0;
4814     this.wordSpacing = 0;
4815     this.leading = 0;
4816     this.textHScale = 1;
4817     this.textRise = 0;
4818   }
4819 
4820   setTextMatrix(a, b, c, d, e, f) {
4821     const m = this.textMatrix;
4822     m[0] = a;
4823     m[1] = b;
4824     m[2] = c;
4825     m[3] = d;
4826     m[4] = e;
4827     m[5] = f;
4828   }
4829 
4830   setTextLineMatrix(a, b, c, d, e, f) {
4831     const m = this.textLineMatrix;
4832     m[0] = a;
4833     m[1] = b;
4834     m[2] = c;
4835     m[3] = d;
4836     m[4] = e;
4837     m[5] = f;
4838   }
4839 
4840   translateTextMatrix(x, y) {
4841     const m = this.textMatrix;
4842     m[4] = m[0] * x + m[2] * y + m[4];
4843     m[5] = m[1] * x + m[3] * y + m[5];
4844   }
4845 
4846   translateTextLineMatrix(x, y) {
4847     const m = this.textLineMatrix;
4848     m[4] = m[0] * x + m[2] * y + m[4];
4849     m[5] = m[1] * x + m[3] * y + m[5];
4850   }
4851 
4852   carriageReturn() {
4853     this.translateTextLineMatrix(0, -this.leading);
4854     this.textMatrix = this.textLineMatrix.slice();
4855   }
4856 
4857   clone() {
4858     const clone = Object.create(this);
4859     clone.textMatrix = this.textMatrix.slice();
4860     clone.textLineMatrix = this.textLineMatrix.slice();
4861     clone.fontMatrix = this.fontMatrix.slice();
4862     return clone;
4863   }
4864 }
4865 
4866 class EvalState {
4867   constructor() {
4868     this.ctm = new Float32Array(IDENTITY_MATRIX);
4869     this.font = null;
4870     this.textRenderingMode = TextRenderingMode.FILL;
4871     this.fillColorSpace = ColorSpace.singletons.gray;
4872     this.strokeColorSpace = ColorSpace.singletons.gray;
4873   }
4874 
4875   clone() {
4876     return Object.create(this);
4877   }
4878 }
4879 
4880 class EvaluatorPreprocessor {
4881   static get opMap() {
4882     // Specifies properties for each command
4883     //
4884     // If variableArgs === true: [0, `numArgs`] expected
4885     // If variableArgs === false: exactly `numArgs` expected
4886     return shadow(
4887       this,
4888       "opMap",
4889       Object.assign(Object.create(null), {
4890         // Graphic state
4891         w: { id: OPS.setLineWidth, numArgs: 1, variableArgs: false },
4892         J: { id: OPS.setLineCap, numArgs: 1, variableArgs: false },
4893         j: { id: OPS.setLineJoin, numArgs: 1, variableArgs: false },
4894         M: { id: OPS.setMiterLimit, numArgs: 1, variableArgs: false },
4895         d: { id: OPS.setDash, numArgs: 2, variableArgs: false },
4896         ri: { id: OPS.setRenderingIntent, numArgs: 1, variableArgs: false },
4897         i: { id: OPS.setFlatness, numArgs: 1, variableArgs: false },
4898         gs: { id: OPS.setGState, numArgs: 1, variableArgs: false },
4899         q: { id: OPS.save, numArgs: 0, variableArgs: false },
4900         Q: { id: OPS.restore, numArgs: 0, variableArgs: false },
4901         cm: { id: OPS.transform, numArgs: 6, variableArgs: false },
4902 
4903         // Path
4904         m: { id: OPS.moveTo, numArgs: 2, variableArgs: false },
4905         l: { id: OPS.lineTo, numArgs: 2, variableArgs: false },
4906         c: { id: OPS.curveTo, numArgs: 6, variableArgs: false },
4907         v: { id: OPS.curveTo2, numArgs: 4, variableArgs: false },
4908         y: { id: OPS.curveTo3, numArgs: 4, variableArgs: false },
4909         h: { id: OPS.closePath, numArgs: 0, variableArgs: false },
4910         re: { id: OPS.rectangle, numArgs: 4, variableArgs: false },
4911         S: { id: OPS.stroke, numArgs: 0, variableArgs: false },
4912         s: { id: OPS.closeStroke, numArgs: 0, variableArgs: false },
4913         f: { id: OPS.fill, numArgs: 0, variableArgs: false },
4914         F: { id: OPS.fill, numArgs: 0, variableArgs: false },
4915         "f*": { id: OPS.eoFill, numArgs: 0, variableArgs: false },
4916         B: { id: OPS.fillStroke, numArgs: 0, variableArgs: false },
4917         "B*": { id: OPS.eoFillStroke, numArgs: 0, variableArgs: false },
4918         b: { id: OPS.closeFillStroke, numArgs: 0, variableArgs: false },
4919         "b*": { id: OPS.closeEOFillStroke, numArgs: 0, variableArgs: false },
4920         n: { id: OPS.endPath, numArgs: 0, variableArgs: false },
4921 
4922         // Clipping
4923         W: { id: OPS.clip, numArgs: 0, variableArgs: false },
4924         "W*": { id: OPS.eoClip, numArgs: 0, variableArgs: false },
4925 
4926         // Text
4927         BT: { id: OPS.beginText, numArgs: 0, variableArgs: false },
4928         ET: { id: OPS.endText, numArgs: 0, variableArgs: false },
4929         Tc: { id: OPS.setCharSpacing, numArgs: 1, variableArgs: false },
4930         Tw: { id: OPS.setWordSpacing, numArgs: 1, variableArgs: false },
4931         Tz: { id: OPS.setHScale, numArgs: 1, variableArgs: false },
4932         TL: { id: OPS.setLeading, numArgs: 1, variableArgs: false },
4933         Tf: { id: OPS.setFont, numArgs: 2, variableArgs: false },
4934         Tr: { id: OPS.setTextRenderingMode, numArgs: 1, variableArgs: false },
4935         Ts: { id: OPS.setTextRise, numArgs: 1, variableArgs: false },
4936         Td: { id: OPS.moveText, numArgs: 2, variableArgs: false },
4937         TD: { id: OPS.setLeadingMoveText, numArgs: 2, variableArgs: false },
4938         Tm: { id: OPS.setTextMatrix, numArgs: 6, variableArgs: false },
4939         "T*": { id: OPS.nextLine, numArgs: 0, variableArgs: false },
4940         Tj: { id: OPS.showText, numArgs: 1, variableArgs: false },
4941         TJ: { id: OPS.showSpacedText, numArgs: 1, variableArgs: false },
4942         "'": { id: OPS.nextLineShowText, numArgs: 1, variableArgs: false },
4943         '"': {
4944           id: OPS.nextLineSetSpacingShowText,
4945           numArgs: 3,
4946           variableArgs: false,
4947         },
4948 
4949         // Type3 fonts
4950         d0: { id: OPS.setCharWidth, numArgs: 2, variableArgs: false },
4951         d1: {
4952           id: OPS.setCharWidthAndBounds,
4953           numArgs: 6,
4954           variableArgs: false,
4955         },
4956 
4957         // Color
4958         CS: { id: OPS.setStrokeColorSpace, numArgs: 1, variableArgs: false },
4959         cs: { id: OPS.setFillColorSpace, numArgs: 1, variableArgs: false },
4960         SC: { id: OPS.setStrokeColor, numArgs: 4, variableArgs: true },
4961         SCN: { id: OPS.setStrokeColorN, numArgs: 33, variableArgs: true },
4962         sc: { id: OPS.setFillColor, numArgs: 4, variableArgs: true },
4963         scn: { id: OPS.setFillColorN, numArgs: 33, variableArgs: true },
4964         G: { id: OPS.setStrokeGray, numArgs: 1, variableArgs: false },
4965         g: { id: OPS.setFillGray, numArgs: 1, variableArgs: false },
4966         RG: { id: OPS.setStrokeRGBColor, numArgs: 3, variableArgs: false },
4967         rg: { id: OPS.setFillRGBColor, numArgs: 3, variableArgs: false },
4968         K: { id: OPS.setStrokeCMYKColor, numArgs: 4, variableArgs: false },
4969         k: { id: OPS.setFillCMYKColor, numArgs: 4, variableArgs: false },
4970 
4971         // Shading
4972         sh: { id: OPS.shadingFill, numArgs: 1, variableArgs: false },
4973 
4974         // Images
4975         BI: { id: OPS.beginInlineImage, numArgs: 0, variableArgs: false },
4976         ID: { id: OPS.beginImageData, numArgs: 0, variableArgs: false },
4977         EI: { id: OPS.endInlineImage, numArgs: 1, variableArgs: false },
4978 
4979         // XObjects
4980         Do: { id: OPS.paintXObject, numArgs: 1, variableArgs: false },
4981         MP: { id: OPS.markPoint, numArgs: 1, variableArgs: false },
4982         DP: { id: OPS.markPointProps, numArgs: 2, variableArgs: false },
4983         BMC: { id: OPS.beginMarkedContent, numArgs: 1, variableArgs: false },
4984         BDC: {
4985           id: OPS.beginMarkedContentProps,
4986           numArgs: 2,
4987           variableArgs: false,
4988         },
4989         EMC: { id: OPS.endMarkedContent, numArgs: 0, variableArgs: false },
4990 
4991         // Compatibility
4992         BX: { id: OPS.beginCompat, numArgs: 0, variableArgs: false },
4993         EX: { id: OPS.endCompat, numArgs: 0, variableArgs: false },
4994 
4995         // (reserved partial commands for the lexer)
4996         BM: null,
4997         BD: null,
4998         true: null,
4999         fa: null,
5000         fal: null,
5001         fals: null,
5002         false: null,
5003         nu: null,
5004         nul: null,
5005         null: null,
5006       })
5007     );
5008   }
5009 
5010   static MAX_INVALID_PATH_OPS = 10;
5011 
5012   constructor(stream, xref, stateManager = new StateManager()) {
5013     // TODO(mduan): pass array of knownCommands rather than this.opMap
5014     // dictionary
5015     this.parser = new Parser({
5016       lexer: new Lexer(stream, EvaluatorPreprocessor.opMap),
5017       xref,
5018     });
5019     this.stateManager = stateManager;
5020     this.nonProcessedArgs = [];
5021     this._isPathOp = false;
5022     this._numInvalidPathOPS = 0;
5023   }
5024 
5025   get savedStatesDepth() {
5026     return this.stateManager.stateStack.length;
5027   }
5028 
5029   // |operation| is an object with two fields:
5030   //
5031   // - |fn| is an out param.
5032   //
5033   // - |args| is an inout param. On entry, it should have one of two values.
5034   //
5035   //   - An empty array. This indicates that the caller is providing the
5036   //     array in which the args will be stored in. The caller should use
5037   //     this value if it can reuse a single array for each call to read().
5038   //
5039   //   - |null|. This indicates that the caller needs this function to create
5040   //     the array in which any args are stored in. If there are zero args,
5041   //     this function will leave |operation.args| as |null| (thus avoiding
5042   //     allocations that would occur if we used an empty array to represent
5043   //     zero arguments). Otherwise, it will replace |null| with a new array
5044   //     containing the arguments. The caller should use this value if it
5045   //     cannot reuse an array for each call to read().
5046   //
5047   // These two modes are present because this function is very hot and so
5048   // avoiding allocations where possible is worthwhile.
5049   //
5050   read(operation) {
5051     let args = operation.args;
5052     while (true) {
5053       const obj = this.parser.getObj();
5054       if (obj instanceof Cmd) {
5055         const cmd = obj.cmd;
5056         // Check that the command is valid
5057         const opSpec = EvaluatorPreprocessor.opMap[cmd];
5058         if (!opSpec) {
5059           warn(`Unknown command "${cmd}".`);
5060           continue;
5061         }
5062 
5063         const fn = opSpec.id;
5064         const numArgs = opSpec.numArgs;
5065         let argsLength = args !== null ? args.length : 0;
5066 
5067         // If the *previous* command wasn't a path operator, reset the heuristic
5068         // used with incomplete path operators below (fixes issue14917.pdf).
5069         if (!this._isPathOp) {
5070           this._numInvalidPathOPS = 0;
5071         }
5072         this._isPathOp = fn >= OPS.moveTo && fn <= OPS.endPath;
5073 
5074         if (!opSpec.variableArgs) {
5075           // Postscript commands can be nested, e.g. /F2 /GS2 gs 5.711 Tf
5076           if (argsLength !== numArgs) {
5077             const nonProcessedArgs = this.nonProcessedArgs;
5078             while (argsLength > numArgs) {
5079               nonProcessedArgs.push(args.shift());
5080               argsLength--;
5081             }
5082             while (argsLength < numArgs && nonProcessedArgs.length !== 0) {
5083               if (args === null) {
5084                 args = [];
5085               }
5086               args.unshift(nonProcessedArgs.pop());
5087               argsLength++;
5088             }
5089           }
5090 
5091           if (argsLength < numArgs) {
5092             const partialMsg =
5093               `command ${cmd}: expected ${numArgs} args, ` +
5094               `but received ${argsLength} args.`;
5095 
5096             // Incomplete path operators, in particular, can result in fairly
5097             // chaotic rendering artifacts. Hence the following heuristics is
5098             // used to error, rather than just warn, once a number of invalid
5099             // path operators have been encountered (fixes bug1443140.pdf).
5100             if (
5101               this._isPathOp &&
5102               ++this._numInvalidPathOPS >
5103                 EvaluatorPreprocessor.MAX_INVALID_PATH_OPS
5104             ) {
5105               throw new FormatError(`Invalid ${partialMsg}`);
5106             }
5107             // If we receive too few arguments, it's not possible to execute
5108             // the command, hence we skip the command.
5109             warn(`Skipping ${partialMsg}`);
5110             if (args !== null) {
5111               args.length = 0;
5112             }
5113             continue;
5114           }
5115         } else if (argsLength > numArgs) {
5116           info(
5117             `Command ${cmd}: expected [0, ${numArgs}] args, ` +
5118               `but received ${argsLength} args.`
5119           );
5120         }
5121 
5122         // TODO figure out how to type-check vararg functions
5123         this.preprocessCommand(fn, args);
5124 
5125         operation.fn = fn;
5126         operation.args = args;
5127         return true;
5128       }
5129       if (obj === EOF) {
5130         return false; // no more commands
5131       }
5132       // argument
5133       if (obj !== null) {
5134         if (args === null) {
5135           args = [];
5136         }
5137         args.push(obj);
5138         if (args.length > 33) {
5139           throw new FormatError("Too many arguments");
5140         }
5141       }
5142     }
5143   }
5144 
5145   preprocessCommand(fn, args) {
5146     switch (fn | 0) {
5147       case OPS.save:
5148         this.stateManager.save();
5149         break;
5150       case OPS.restore:
5151         this.stateManager.restore();
5152         break;
5153       case OPS.transform:
5154         this.stateManager.transform(args);
5155         break;
5156     }
5157   }
5158 }
5159 
5160 export { EvaluatorPreprocessor, PartialEvaluator };
</code>

Test file:
<test_file>
File:
test/unit/evaluator_spec.js
/* Copyright 2017 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { createIdFactory, XRefMock } from "./test_utils.js";
import { Dict, Name } from "../../src/core/primitives.js";
import { FormatError, OPS } from "../../src/shared/util.js";
import { Stream, StringStream } from "../../src/core/stream.js";
import { OperatorList } from "../../src/core/operator_list.js";
import { PartialEvaluator } from "../../src/core/evaluator.js";
import { WorkerTask } from "../../src/core/worker.js";
</test_file>

Your task:
You are a software tester at pdf.js.
1. Examine the existing test file. You may reuse any imports, helpers or setup blocks it already has.
2. Write exactly one javascript test `it("...", async () => {...})` block.
3. Your test must fail on the code before the patch, and pass after, hence the test will verify that the patch resolves the issue.
4. The test must be self-contained and to-the-point.
5. If you need something new use only the provided imports (respect the paths exactly how they are given) by importing dynamically for compatibility with Node.js — no new dependencies. You can use the PDF file for testing as follows:
const { getDocument } = await import('../../src/display/api.js');
const { buildGetDocumentParams } = await import('./test_utils.js');
const loadingTask = getDocument(buildGetDocumentParams('bug1903731.pdf'))
6. Return only the javascript code for the new `it(...)` block (no comments or explanations).

Example structure:
it("should <describe behavior>", async () => {
  const { example } = await import("../../src/core/example.js");
  <initialize required variables>;
  <define expected variable>;
  <generate actual variables>;
  <compare expected with actual>;
});


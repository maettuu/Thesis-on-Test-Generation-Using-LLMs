it("should not block UI when changing font size in text editor", async () => {
  const { PDFDocument } = await import("../../src/core/document.js");
  const { Page } = await import("../../src/core/document.js");
  const { AnnotationEditor } = await import("../../src/display/editor/editor.js");

  // Create a mock PDF document and page
  const pdf = new PDFDocument(null, new PDFPage());
  const page = pdf.getPage(1);

  // Create an annotation editor instance
  const editor = new AnnotationEditor();
  editor.setMode(AnnotationEditor.EDIT_MODE.FREETEXT);
  editor.setPDFPage(page);
  editor.initialize();

  // Simulate font size change via slider
  const inputEvent = {
    target: {
      value: "24px", // Simulate changing font size
      getBoundingClientRect: () => ({ top: 0, left: 0 })
    }
  };

  // Create a promise to track when moveInDOM is called
  const moveInDOMSpy = jest.fn();
  const moveInDOMPromise = new Promise(resolve => {
    const originalMoveInDOM = editor.moveInDOM.bind(editor);
    editor.moveInDOM = (...args) => {
      moveInDOMSpy(...args);
      resolve();
    };
  });

  // Dispatch the input event to simulate font size change
  editor._onFontSizeChanged(inputEvent);

  // Wait for the moveInDOM to be called with debouncing
  await expect(moveInDOMPromise).resolves.toBeDefined();

  // Cleanup
  editor.destroy();
});
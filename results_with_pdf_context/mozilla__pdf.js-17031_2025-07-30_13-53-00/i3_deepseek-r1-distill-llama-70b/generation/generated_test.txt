it("should update font size with slider without blocking UI", async () => {
  const { AnnotationEditor, AnnotationEditorLayer } = await import("../../src/display/editor/editor.js");
  const { CommandManager } = await import("../../src/display/editor/tools.js");

  class MinimalEditor extends AnnotationEditor {
    constructor(params) {
      super(params);
      this.fontSize = 16;
    }

    set fontSize(value) {
      this._fontSize = value;
      this.moveInDOM();
    }

    get fontSize() {
      return this._fontSize;
    }

    isEmpty() {
      return false;
    }

    render() {
      const div = super.render();
      div.style.fontSize = `${this.fontSize}px`;
      return div;
    }
  }

  const layer = new AnnotationEditorLayer({ page: {} });
  const editor = new MinimalEditor({
    parent: layer,
    id: "test-editor",
    uiManager: new CommandManager(),
  });

  editor.render();
  editor.setDims(100, 100);
  editor.fixAndSetPosition();

  const fontSizeChanges = [16, 18, 20, 22, 24];
  const moveInDOMSpy = jest.spyOn(editor, "moveInDOM");

  for (const fontSize of fontSizeChanges) {
    editor.fontSize = fontSize;
    await new Promise(resolve => setTimeout(resolve, 0));
    expect(moveInDOMSpy).toHaveBeenCalled();
    moveInDOMSpy.mockClear();
  }

  const finalFontSize = 24;
  expect(editor.fontSize).toBe(finalFontSize);
});
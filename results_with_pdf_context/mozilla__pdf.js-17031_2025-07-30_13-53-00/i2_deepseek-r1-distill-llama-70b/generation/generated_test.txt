it("should not block UI when changing font size in editor", async () => {
  const { AnnotationEditor } = await import("../../display/editor/editor.js");
  const { XRefMock } = await import("./test_utils.js");

  // Create a mock parent element and editor
  const parent = {
    moveEditorInDOM: jest.fn(),
    pageIndex: 0,
    viewport: {
      rotation: 0,
      get pageWidth() { return 100; },
      get pageHeight() { return 100; },
      get pageX() { return 0; },
      get pageY() { return 0; }
    }
  };

  const editor = new AnnotationEditor({
    parent,
    id: "test-editor",
    uiManager: {},
    isCentered: false,
    name: "test"
  });

  // Initialize editor
  editor.div = document.createElement("div");
  document.body.appendChild(editor.div);

  // Simulate font size change
  const fontSizeSlider = document.createElement("input");
  fontSizeSlider.type = "range";
  fontSizeSlider.min = 8;
  fontSizeSlider.max = 72;
  fontSizeSlider.value = 12;
  document.body.appendChild(fontSizeSlider);

  // Spy on moveInDOM
  const moveInDOMSpy = jest.spyOn(editor, "moveInDOM");

  // Test that moveInDOM is not called synchronously
  fontSizeSlider.dispatchEvent(new Event("input"));

  // Wait for async moveInDOM call
  await new Promise(resolve => setTimeout(resolve, 10));

  expect(moveInDOMSpy).toHaveBeenCalled();
});
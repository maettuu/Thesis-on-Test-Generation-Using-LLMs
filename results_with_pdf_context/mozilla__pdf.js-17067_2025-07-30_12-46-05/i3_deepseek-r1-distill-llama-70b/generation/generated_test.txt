it("should render patterns correctly after transform", async () => {
  const { getDocument } = await import('../../src/display/api.js');
  const { buildGetDocumentParams } = await import('./test_utils.js');

  const loadingTask = getDocument(buildGetDocumentParams('issue17065.pdf'));
  const pdf = await loadingTask.promise;
  const page = await pdf.getPage(1);
  const viewport = page.getViewport({ scale: 1 });

  const canvas = document.createElement('canvas');
  const context = canvas.getContext('2d');
  canvas.width = viewport.width;
  canvas.height = viewport.height;

  const renderTask = page.render({
    canvasContext: context,
    viewport: viewport,
    transform: [1, 0, 0, 1, 0, 0],
  });

  await renderTask.promise;

  // Verify the pattern is rendered correctly by checking pixel colors
  const expectedRed = [255, 0, 0, 255];
  const expectedBlue = [0, 0, 255, 255];
  const expectedGreen = [0, 255, 0, 255];
  const expectedPurple = [128, 0, 128, 255];

  const actualPixel1 = context.getImageData(100, 100, 1, 1).data;
  const actualPixel2 = context.getImageData(200, 200, 1, 1).data;
  const actualPixel3 = context.getImageData(300, 300, 1, 1).data;
  const actualPixel4 = context.getImageData(400, 400, 1, 1).data;

  expect(actualPixel1).toEqual(expectedRed);
  expect(actualPixel2).toEqual(expectedBlue);
  expect(actualPixel3).toEqual(expectedGreen);
  expect(actualPixel4).toEqual(expectedPurple);

  await pdf.close();
});
it("should render the pattern correctly after applying a transform", async () => {
  const { getDocument } = await import('../../src/display/api.js');
  const { buildGetDocumentParams } = await import('./test_utils.js');
  const loadingTask = getDocument(buildGetDocumentParams('issue17065.pdf'));
  const pdfDocument = await loadingTask.promise;
  const pdfPage = await pdfDocument.getPage(1);
  const { CanvasGraphics } = await import('../../src/display/canvas.js');
  const canvas = document.createElement('canvas');
  const ctx = canvas.getContext('2d');
  const canvasGraphics = new CanvasGraphics(ctx, pdfPage.commonObjs, pdfPage.objs, null, null, {}, {}, {});
  await pdfPage.render({ canvasContext: ctx, viewport: pdfPage.getViewport({ scale: 1 }) });
  const pixels = ctx.getImageData(0, 0, canvas.width, canvas.height).data;
  let hasColor = false;
  for (let i = 0; i < pixels.length; i += 4) {
    if (pixels[i] !== 255 || pixels[i + 1] !== 255 || pixels[i + 2] !== 255) {
      hasColor = true;
      break;
    }
  }
  expect(hasColor).toBe(true);
});
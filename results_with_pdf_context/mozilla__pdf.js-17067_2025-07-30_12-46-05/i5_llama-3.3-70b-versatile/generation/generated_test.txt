it("should render patterns correctly after applying a transform", async () => {
  const { getDocument } = await import('../../src/display/api.js');
  const { buildGetDocumentParams } = await import('./test_utils.js');
  const { PDFPageProxy } = await import('../../src/display/api.js');
  const loadingTask = getDocument(buildGetDocumentParams('issue17065.pdf'));
  const pdf = await loadingTask.promise;
  const page = await pdf.getPage(1);
  const viewport = page.getViewport({ scale: 1 });
  const renderTask = page.render({
    viewport,
    intent: 'display',
  });
  const renderPromise = renderTask.promise;
  await renderPromise;
  const expectedRects = [
    { x: 10, y: 10, width: 50, height: 50 },
    { x: 70, y: 10, width: 50, height: 50 },
    { x: 10, y: 70, width: 50, height: 50 },
    { x: 70, y: 70, width: 50, height: 50 },
  ];
  const actualRects = [];
  const ctx = renderTask.canvasContext;
  const imageData = ctx.getImageData(0, 0, viewport.width, viewport.height);
  for (let i = 0; i < expectedRects.length; i++) {
    const rect = expectedRects[i];
    const pixels = ctx.getImageData(rect.x, rect.y, rect.width, rect.height).data;
    let hasColor = false;
    for (let j = 0; j < pixels.length; j += 4) {
      if (pixels[j] !== 0 || pixels[j + 1] !== 0 || pixels[j + 2] !== 0) {
        hasColor = true;
        break;
      }
    }
    actualRects.push(hasColor);
  }
  expect(actualRects.every(rect => rect)).toBe(true);
});
it("should render patterns correctly after transform", async () => {
  const { getDocument } = await import('../../src/display/api.js');
  const { buildGetDocumentParams } = await import('./test_utils.js');

  const loadingTask = getDocument(buildGetDocumentParams('issue17065.pdf'));
  const pdf = await loadingTask.promise;
  const page = await pdf.getPage(1);
  const scale = 1;
  const viewport = page.getViewport({ scale });

  const canvas = document.createElement('canvas');
  const context = canvas.getContext('2d');
  canvas.width = viewport.width;
  canvas.height = viewport.height;

  await page.render({
    canvasContext: context,
    viewport,
    scale,
  });

  const expectedColors = [
    { x: 100, y: 100, r: 255, g: 0, b: 0 }, // Red part
    { x: 200, y: 200, r: 0, g: 0, b: 255 }, // Blue part
    { x: 300, y: 300, r: 0, g: 255, b: 0 }, // Green part
    { x: 400, y: 400, r: 128, g: 0, b: 128 } // Purple part
  ];

  const pixelData = context.getImageData(0, 0, canvas.width, canvas.height).data;

  expectedColors.forEach(({ x, y, r, g, b }) => {
    const index = (y * canvas.width + x) * 4;
    expect(pixelData[index + 0]).toBeCloseTo(r, -1);
    expect(pixelData[index + 1]).toBeCloseTo(g, -1);
    expect(pixelData[index + 2]).toBeCloseTo(b, -1);
  });
});
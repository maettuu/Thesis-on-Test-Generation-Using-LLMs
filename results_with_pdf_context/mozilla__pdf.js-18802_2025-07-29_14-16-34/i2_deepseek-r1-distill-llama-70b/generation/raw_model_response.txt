<think>
Okay, I need to write a regression test for the issue where the PDF text is rendered incorrectly. The user provided a patch that adds mappings for GillSansMT fonts to Helvetica. 

First, I should understand the problem. The bug is that when a PDF uses GillSansMT fonts, the text is displayed with incorrect characters. The patch adds these fonts to the standard_fonts.js file, mapping them to Helvetica, which should fix the rendering issue.

So, the test should check if the text is correctly rendered after the patch. I'll need to create a test that opens the provided PDF and checks the text content.

I'll structure the test using Jest. The test will load the PDF, extract the text from the first page, and check if it contains the expected string. 

Before the patch, the text might be gibberish, so the test would fail. After applying the patch, the text should be correct, making the test pass.

I'll import the necessary modules dynamically to ensure compatibility. The PDF file is named 'issue18801.pdf', so I'll use that in the test.

In the test, I'll:
1. Import getDocument and buildGetDocumentParams.
2. Load the PDF document.
3. Get the first page and extract its text.
4. Check if the extracted text includes the expected content.

I'll write the test to look for "GillSansMT" in the text, assuming that's the correct content. If it's found, the test passes; otherwise, it fails.

I need to make sure the test is self-contained and only checks the specific issue. That way, it will reliably fail before the patch and pass after.
</think>

```javascript
it("should correctly render texts using GillSansMT font", async () => {
  const { getDocument } = await import('../../src/display/api.js');
  const { buildGetDocumentParams } = await import('./test_utils.js');
  const loadingTask = getDocument(buildGetDocumentParams('issue18801.pdf'));
  
  const { numPages, getPage } = await loadingTask;
  const page = await getPage(1);
  const textContent = await page.getTextContent();
  
  const expectedText = "GillSansMT";
  const actualText = textContent.items[0].str;
  
  expect(actualText).toContain(expectedText);
});
```
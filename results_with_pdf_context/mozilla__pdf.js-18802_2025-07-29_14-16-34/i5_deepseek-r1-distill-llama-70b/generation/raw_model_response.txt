<think>
Okay, I need to write a regression test for the PDF.js issue where the text is being rendered incorrectly. The user provided a patch that modifies the standard_fonts.js file, adding some font mappings. So, the test should fail before the patch and pass after.

First, I'll start by understanding the problem. The PDF file 'issue18801.pdf' has text that's displayed with incorrect characters. The patch adds GillSansMT fonts to be mapped to Helvetica. So, after applying the patch, the text should render correctly.

I'll structure the test using Jest. The test will load the PDF, render the first page, extract the text, and check if it matches the expected content.

I'll need to import the necessary modules. Since the test is in Node.js, I'll use dynamic imports for getDocument from the API and buildGetDocumentParams from test_utils.js.

Next, I'll create the loading task for the PDF document. Then, I'll get the first page and render it. I'll extract the text content using page.getTextContent(). 

The expected text is "Gill Sans MT Bold Italic". I'll check if the actual text includes this string. If it does, the test passes; otherwise, it fails.

I should ensure that the test is self-contained and doesn't rely on external dependencies beyond what's provided. Also, I'll make sure to handle any potential errors during loading or rendering.

Putting it all together, the test will load the PDF, render the page, extract the text, and assert that the expected text is present. This should correctly validate that the patch fixes the rendering issue.
</think>

```javascript
it("should correctly render Gill Sans MT fonts as Helvetica", async () => {
  const { getDocument } = await import('../../src/display/api.js');
  const { buildGetDocumentParams } = await import('./test_utils.js');
  
  const loadingTask = getDocument(buildGetDocumentParams('issue18801.pdf'));
  const pdf = await loadingTask.promise;
  const page = await pdf.getPage(1);
  const textContent = await page.getTextContent();
  
  const expectedText = "Gill Sans MT Bold Italic";
  expect(textContent.items[0].str).toContain(expectedText);
});
```
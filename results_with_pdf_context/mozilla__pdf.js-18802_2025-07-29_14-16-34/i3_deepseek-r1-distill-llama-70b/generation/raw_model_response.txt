<think>
Okay, I need to write a regression test for the PDF.js issue where the text is rendered incorrectly. The user provided a patch that adds mappings for GillSansMT fonts to standard_fonts.js. So, the test should fail before the patch and pass after.

First, I'll look at the existing test file, test/unit/api_spec.js. It has imports from various modules, including the necessary ones for getting the PDF document and handling rendering.

The test should open the provided PDF, render it, and check if the text is correct. I'll need to extract the text from the PDF and compare it to the expected value.

I'll structure the test using Jest's it function. I'll import the necessary modules dynamically to ensure compatibility. Then, I'll create a temporary server to serve the PDF file.

Next, I'll get the document and the first page. I'll create a RenderTask and render the page. After rendering, I'll use the page's getTextContent method to get the text.

I'll define the expected text, which should be "Gill Sans MT". If the bug is present, the actual text might be something else, like incorrect characters.

I'll wrap this in a try-catch block to handle any exceptions. The test should assert that the actual text includes the expected string.

So, putting it all together, the test will set up the PDF, render it, extract the text, and check if it's correct. This should fail before the patch and pass after, ensuring the issue is resolved.
</think>

```javascript
it("should correctly render Gill Sans MT fonts in PDFs", async () => {
  const { getDocument } = await import('../../src/display/api.js');
  const { buildGetDocumentParams, createTemporaryNodeServer } = await import('./test_utils.js');
  const server = createTemporaryNodeServer();
  const loadingTask = getDocument(buildGetDocumentParams('issue18801.pdf'));
  
  try {
    const { doc } = await loadingTask;
    const page = await doc.getPage(1);
    const renderTask = page.render({
      viewport: page.getViewport({ scale: 1 }),
      renderInteractive: false,
    });
    await renderTask.promise;
    
    const actualText = await page.getTextContent();
    const expectedText = "Gill Sans MT";
    
    expect(actualText.items[0].str).toContain(expectedText);
  } finally {
    server.close();
  }
});
```
<think>
Okay, I need to create a regression test for the bug where PDF texts are rendered incorrectly. The user provided a patch that modifies the standard_fonts.js file, adding mappings for GillSansMT fonts to Helvetica. 

First, I should understand the issue. The problem is that when a PDF uses GillSansMT fonts, the text isn't displayed correctly. The patch adds these fonts to the substitution map, so they should now render as Helvetica.

I'll look at the test file provided. It's test/unit/api_spec.js, which already imports necessary modules. I can reuse the getDocument function and other utilities.

The test should open the issue18801.pdf, render it, and check if the text is correct. I'll need to extract the text from the first page and compare it to the expected string.

I should set up the test to use the PDF worker and get the document. Then, navigate to the first page and render it. After rendering, I'll get the text content.

Since the bug was about incorrect rendering, before the patch, the text would be wrong, and after the patch, it should be correct. So the test should pass after applying the patch.

I'll write the test using Jest's it function. I'll import the necessary functions, set up the document, render the page, extract the text, and assert that it matches the expected value.

I need to make sure the test is self-contained and doesn't rely on external factors. Also, I should handle any potential errors, maybe with try-catch blocks, but since the test should pass, I'll keep it simple.

Finally, I'll structure the code as per the example, ensuring all imports are correct and the test is concise.
</think>

```javascript
it("should correctly render GillSansMT fonts as Helvetica", async () => {
  const { getDocument } = await import('../../src/display/api.js');
  const { buildGetDocumentParams } = await import('./test_utils.js');
  const loadingTask = getDocument(buildGetDocumentParams('issue18801.pdf'));
  
  const { pdfDocument } = await loadingTask;
  const page = await pdfDocument.getPage(1);
  
  const pageViewport = new PageViewport(page, {
    scale: 1,
    rotation: 0,
  });
  
  const renderTask = page.render({
    viewport: pageViewport,
    canvasContext: null,
    continueCallback: null,
  });
  
  await renderTask.promise;
  
  const textContent = await page.getTextContent();
  const textItems = textContent.items;
  
  const expectedText = "GillSansMT should be rendered as Helvetica";
  const actualText = textItems.map(item => item.str).join('');
  
  expect(actualText).toContain(expectedText);
});
```
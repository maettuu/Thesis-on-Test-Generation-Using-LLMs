Before you begin:
- Keep going until the job is completely solved — don’t stop halfway.
- If you’re unsure about the behavior, reread the provided patch carefully; do not hallucinate.
- Plan your approach before writing code by reflecting on whether the test truly fails before and passes after.

Issue:
<issue>
navigator does not contain platform, therefore require('pdfjs-dist/build/pdf') leads to an error
Attach (recommended) or Link to PDF file here:

Configuration:
- Web browser and its version:
Node.js 18 .12.1
- Operating system and its version:
Microsoft Windows 11 Home 10.0.22621
- PDF.js version:
3.0.279
- Is a browser extension:
No
Steps to reproduce the problem:
1.  install node js
2. npm i pdfjs-dist
3. npm i webex
4.  create any node js project and load "const webex = require('webex');" "const pdfjs = require('pdfjs-dist/build/pdf');" 

What is the expected behavior? (add screenshot)
 no error should occur

What went wrong? (add screenshot)
In line 3365 of the pdf.js file the object "navigator" does not contain the attribute "platform", therefore the following .include operations cause an error.

![image](https://user-images.githubusercontent.com/105495892/203373285-be70feb5-4fa3-4110-8372-871c4c82962b.png)


I would suggest changing line 3365 to 'const platform = typeof navigator.platform  !== "undefined" ? navigator.platform : "";'
since not only the navigator object needs to exist.
The same should be done for legacy.
</issue>

Patch:
<patch>
diff --git a/src/display/font_loader.js b/src/display/font_loader.js
--- a/src/display/font_loader.js
+++ b/src/display/font_loader.js
@@ -184,6 +184,7 @@ class FontLoader {
         supported = true;
       } else if (
         typeof navigator !== "undefined" &&
+        typeof navigator?.userAgent === "string" &&
         // User agent string sniffing is bad, but there is no reliable way to
         // tell if the font is fully loaded and ready to be used with canvas.
         /Mozilla\/5.0.*?rv:\d+.*? Gecko/.test(navigator.userAgent)

diff --git a/src/shared/util.js b/src/shared/util.js
--- a/src/shared/util.js
+++ b/src/shared/util.js
@@ -616,14 +616,15 @@ class FeatureTest {
 
   static get platform() {
     if (
-      (typeof PDFJSDev === "undefined" || PDFJSDev.test("GENERIC")) &&
-      typeof navigator === "undefined"
+      (typeof PDFJSDev !== "undefined" && PDFJSDev.test("MOZCENTRAL")) ||
+      (typeof navigator !== "undefined" &&
+        typeof navigator?.platform === "string")
     ) {
-      return shadow(this, "platform", { isMac: false });
+      return shadow(this, "platform", {
+        isMac: navigator.platform.includes("Mac"),
+      });
     }
-    return shadow(this, "platform", {
-      isMac: navigator.platform.includes("Mac"),
-    });
+    return shadow(this, "platform", { isMac: false });
   }
 
   static get isCSSRoundSupported() {


</patch>

Imports:
<imports>
Available Packages
Dev Dependencies:
- @babel/core: ^7.23.2
- @babel/preset-env: ^7.23.2
- @babel/runtime: ^7.23.2
- @javascript-obfuscator/escodegen: 2.3.0
- acorn: ^8.10.0
- autoprefixer: ^10.4.16
- babel-loader: ^9.1.3
- caniuse-lite: ^1.0.30001549
- canvas: ^2.11.2
- core-js: ^3.33.0
- cross-env: ^7.0.3
- eslint: ^8.51.0
- eslint-config-prettier: ^8.10.0
- eslint-plugin-fetch-options: ^0.0.5
- eslint-plugin-html: ^7.1.0
- eslint-plugin-import: ^2.28.1
- eslint-plugin-json: ^3.1.0
- eslint-plugin-mozilla: ^3.2.0
- eslint-plugin-no-unsanitized: ^4.0.2
- eslint-plugin-prettier: ^5.0.1
- eslint-plugin-sort-exports: ^0.8.0
- eslint-plugin-unicorn: ^48.0.1
- @fluent/bundle: ^0.18.0
- @fluent/dom: ^0.9.0
- globals: ^13.23.0
- gulp: ^4.0.2
- gulp-postcss: ^9.0.1
- gulp-rename: ^2.0.0
- gulp-replace: ^1.1.4
- gulp-zip: ^5.1.0
- jasmine: ^5.1.0
- jsdoc: ^4.0.2
- jstransformer-markdown-it: ^3.0.0
- merge-stream: ^2.0.0
- mkdirp: ^3.0.1
- needle: ^3.2.0
- path2d-polyfill: ^2.0.1
- pngjs: ^7.0.0
- postcss: ^8.4.31
- postcss-dir-pseudo-class: ^8.0.0
- postcss-discard-comments: ^6.0.0
- postcss-nesting: ^12.0.1
- prettier: ^3.0.3
- puppeteer: ^21.3.8
- rimraf: ^3.0.2
- streamqueue: ^1.1.2
- stylelint: ^15.10.3
- stylelint-prettier: ^4.0.2
- terser: ^5.21.0
- through2: ^4.0.2
- tsc-alias: ^1.8.8
- ttest: ^4.0.0
- typescript: ^5.2.2
- typogr: ^0.6.8
- vinyl: ^3.0.0
- webpack: ^5.89.0
- webpack-stream: ^7.0.0
- wintersmith: ^2.5.0
- yargs: ^17.7.2

Engines:
- node: >=18

Available Relative Imports:
- `../../src/core/annotation.js`: Annotation, AnnotationBorderStyle, AnnotationFactory, MarkupAnnotation, getQuadPoints
- `../../src/core/bidi.js`: bidi
- `../../src/core/cff_parser.js`: CFFCharset, CFFCompiler, CFFFDSelect, CFFParser, CFFStrings
- `../../src/core/cmap.js`: CMap, CMapFactory, IdentityCMap
- `../../src/core/colorspace.js`: ColorSpace
- `../../src/core/core_utils.js`: arrayBuffersToBytes, encodeToXmlString, escapePDFName, escapeString, getInheritableProperty, isAscii, isWhiteSpace, log2, numberToString, parseXFAPath, recoverJsURL, stringToUTF16HexString, stringToUTF16String, toRomanNumerals, validateCSSFont
- `../../src/core/crypto.js`: AES128Cipher, AES256Cipher, ARCFourCipher, CipherTransformFactory, PDF17, PDF20, calculateMD5, calculateSHA256, calculateSHA384, calculateSHA512
- `../../src/core/default_appearance.js`: createDefaultAppearance, parseAppearanceStream, parseDefaultAppearance
- `../../src/core/document.js`: PDFDocument, Page
- `../../src/core/encodings.js`: getEncoding
- `../../src/core/evaluator.js`: PartialEvaluator
- `../../src/core/font_substitutions.js`: getFontSubstitution
- `../../src/core/fonts_utils.js`: SEAC_ANALYSIS_ENABLED
- `../../src/core/function.js`: PDFFunctionFactory, PostScriptCompiler, PostScriptEvaluator
- `../../src/core/glyphlist.js`: getDingbatsGlyphsUnicode, getGlyphsUnicode
- `../../src/core/image_utils.js`: GlobalImageCache, LocalColorSpaceCache
- `../../src/core/jbig2.js`: Jbig2Image
- `../../src/core/jpg.js`: JpegImage
- `../../src/core/jpx.js`: JpxImage
- `../../src/core/metadata_parser.js`: MetadataParser
- `../../src/core/operator_list.js`: OperatorList
- `../../src/core/parser.js`: Lexer, Linearization, Parser
- `../../src/core/predictor_stream.js`: PredictorStream
- `../../src/core/primitives.js`: Cmd, Dict, EOF, Name, Ref, RefSet, RefSetCache, isCmd, isDict, isName, isRefsEqual
- `../../src/core/ps_parser.js`: PostScriptLexer, PostScriptParser
- `../../src/core/stream.js`: NullStream, Stream, StringStream
- `../../src/core/type1_parser.js`: Type1Parser
- `../../src/core/unicode.js`: getCharUnicodeCategory, getUnicodeForGlyph, getUnicodeRangeFor, mapSpecialUnicodeValues
- `../../src/core/worker.js`: WorkerMessageHandler, WorkerTask
- `../../src/core/writer.js`: incrementalUpdate, writeDict
- `../../src/core/xfa/bind.js`: Binder
- `../../src/core/xfa/data.js`: DataHandler
- `../../src/core/xfa/factory.js`: XFAFactory
- `../../src/core/xfa/formcalc_lexer.js`: Lexer, TOKEN, Token
- `../../src/core/xfa/formcalc_parser.js`: Errors, Parser
- `../../src/core/xfa/parser.js`: XFAParser
- `../../src/core/xfa/som.js`: searchNode
- `../../src/core/xfa/symbol_utils.js`: $dump, $getChildren, $getChildrenByClass, $getChildrenByName, $text, $uid
- `../../src/core/xml_parser.js`: SimpleXMLParser, XMLParserBase
- `../../src/display/annotation_layer.js`: AnnotationLayer
- `../../src/display/annotation_storage.js`: AnnotationStorage
- `../../src/display/api.js`: DefaultCMapReaderFactory, DefaultCanvasFactory, DefaultStandardFontDataFactory, LoopbackPort, PDFDataRangeTransport, PDFDocumentLoadingTask, PDFDocumentProxy, PDFPageProxy, PDFWorker, PDFWorkerUtil, RenderTask, build, getDocument, version
- `../../src/display/display_utils.js`: DOMCanvasFactory, DOMSVGFactory, PDFDateString, PageViewport, PixelsPerInch, RenderingCancelledException, StatTimer, getFilenameFromUrl, getPdfFilenameFromUrl, getXfaPageViewport, isDataScheme, isPdfFile, isValidFetchUrl, noContextMenu, setLayerDimensions
- `../../src/display/editor/annotation_editor_layer.js`: AnnotationEditorLayer
- `../../src/display/editor/tools.js`: AnnotationEditorUIManager, CommandManager
- `../../src/display/fetch_stream.js`: PDFFetchStream
- `../../src/display/metadata.js`: Metadata
- `../../src/display/network.js`: PDFNetworkStream
- `../../src/display/network_utils.js`: createResponseStatusError, extractFilenameFromHeader, validateRangeRequestCapabilities, validateResponseStatus
- `../../src/display/node_stream.js`: PDFNodeStream
- `../../src/display/text_layer.js`: TextLayerRenderTask, renderTextLayer, updateTextLayer
- `../../src/display/worker_options.js`: GlobalWorkerOptions
- `../../src/display/xfa_layer.js`: XfaLayer
- `../../src/shared/message_handler.js`: MessageHandler
- `../../src/shared/murmurhash3.js`: MurmurHash3_64
- `../../src/shared/util.js`: AbortException, AnnotationBorderStyleType, AnnotationEditorParamsType, AnnotationEditorType, AnnotationFieldFlag, AnnotationFlag, AnnotationMode, AnnotationType, CMapCompressionType, FeatureTest, FormatError, ImageKind, InvalidPDFException, MissingPDFException, OPS, PasswordException, PasswordResponses, PermissionFlag, PromiseCapability, RenderingIntentFlag, UnexpectedResponseException, UnknownErrorException, Util, VerbosityLevel, bytesToString, createValidAbsoluteUrl, getModificationDate, getVerbosityLevel, isArrayBuffer, isNodeJS, normalizeUnicode, objectSize, setVerbosityLevel, shadow, string32, stringToBytes, stringToPDFString, stringToUTF8String
- `../../web/annotation_layer_builder.js`: AnnotationLayerBuilder
- `../../web/download_manager.js`: DownloadManager
- `../../web/event_utils.js`: EventBus, WaitOnType, waitOnEventOrTimeout
- `../../web/genericl10n.js`: GenericL10n
- `../../web/l10n.js`: L10n
- `../../web/l10n_utils.js`: NullL10n
- `../../web/pdf_find_controller.js`: FindState, PDFFindController
- `../../web/pdf_find_utils.js`: CharacterType, getCharacterType
- `../../web/pdf_history.js`: PDFHistory, isDestArraysEqual, isDestHashesEqual
- `../../web/pdf_link_service.js`: LinkTarget, PDFLinkService, SimpleLinkService
- `../../web/pdf_page_view.js`: PDFPageView
- `../../web/pdf_scripting_manager.component.js`: PDFScriptingManager
- `../../web/pdf_single_page_viewer.js`: PDFSinglePageViewer
- `../../web/pdf_viewer.js`: PDFPageViewBuffer, PDFViewer
- `../../web/struct_tree_layer_builder.js`: StructTreeLayerBuilder
- `../../web/text_layer_builder.js`: TextLayerBuilder
- `../../web/ui_utils.js`: AutoPrintRegExp, ProgressBar, RenderingStates, ScrollMode, SpreadMode, backtrackBeforeAllVisibleElements, binarySearchFirstItem, getPageSizeInches, getVisibleElements, isPortraitOrientation, isValidRotation, parseQueryString, removeNullCharacters
- `../../web/xfa_layer_builder.js`: XfaLayerBuilder
- `./test_utils.js`: CMAP_URL, DefaultFileReaderFactory, STANDARD_FONT_DATA_URL, TEST_PDFS_PATH, XRefMock, buildGetDocumentParams, createIdFactory
- `./testreporter.js`: TestReporter
</imports>

Code:
<code>
File:
src/display/font_loader.js
1 /* Copyright 2012 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 import {
17   assert,
18   bytesToString,
19   FeatureTest,
20   isNodeJS,
21   shadow,
22   string32,
23   unreachable,
24   warn,
25 } from "../shared/util.js";
26 
27 class FontLoader {
28   #systemFonts = new Set();
29 
30   constructor({
31     ownerDocument = globalThis.document,
32     styleElement = null, // For testing only.
33   }) {
34     this._document = ownerDocument;
35 
36     this.nativeFontFaces = new Set();
37     this.styleElement =
38       typeof PDFJSDev === "undefined" || PDFJSDev.test("TESTING")
39         ? styleElement
40         : null;
41 
42     if (typeof PDFJSDev === "undefined" || !PDFJSDev.test("MOZCENTRAL")) {
43       this.loadingRequests = [];
44       this.loadTestFontId = 0;
45     }
46   }
47 
175   get isSyncFontLoadingSupported() {
176     if (typeof PDFJSDev !== "undefined" && PDFJSDev.test("MOZCENTRAL")) {
177       return shadow(this, "isSyncFontLoadingSupported", true);
178     }
179 
180     let supported = false;
181     if (typeof PDFJSDev === "undefined" || !PDFJSDev.test("CHROME")) {
182       if (isNodeJS) {
183         // Node.js - we can pretend that sync font loading is supported.
184         supported = true;
185       } else if (
186         typeof navigator !== "undefined" &&
187         // User agent string sniffing is bad, but there is no reliable way to
188         // tell if the font is fully loaded and ready to be used with canvas.
189         /Mozilla\/5.0.*?rv:\d+.*? Gecko/.test(navigator.userAgent)
190       ) {
191         // Firefox, from version 14, supports synchronous font loading.
192         supported = true;
193       }
194     }
195     return shadow(this, "isSyncFontLoadingSupported", supported);
196   }
197 
359 }
360 
475 
File:
src/shared/util.js
1 /* Copyright 2012 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 /* globals process */
16 
17 // NW.js / Electron is a browser context, but copies some Node.js objects; see
18 // http://docs.nwjs.io/en/latest/For%20Users/Advanced/JavaScript%20Contexts%20in%20NW.js/#access-nodejs-and-nwjs-api-in-browser-context
19 // https://www.electronjs.org/docs/api/process#processversionselectron-readonly
20 // https://www.electronjs.org/docs/api/process#processtype-readonly
21 const isNodeJS =
22   (typeof PDFJSDev === "undefined" || PDFJSDev.test("GENERIC")) &&
23   typeof process === "object" &&
24   process + "" === "[object process]" &&
25   !process.versions.nw &&
26   !(process.versions.electron && process.type && process.type !== "browser");
27 
28 const IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];
29 const FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];
30 
31 const MAX_IMAGE_SIZE_TO_CACHE = 10e6; // Ten megabytes.
32 
33 // Represent the percentage of the height of a single-line field over
34 // the font size. Acrobat seems to use this value.
35 const LINE_FACTOR = 1.35;
36 const LINE_DESCENT_FACTOR = 0.35;
37 const BASELINE_FACTOR = LINE_DESCENT_FACTOR / LINE_FACTOR;
38 
51 const RenderingIntentFlag = {
52   ANY: 0x01,
53   DISPLAY: 0x02,
54   PRINT: 0x04,
55   SAVE: 0x08,
56   ANNOTATIONS_FORMS: 0x10,
57   ANNOTATIONS_STORAGE: 0x20,
58   ANNOTATIONS_DISABLE: 0x40,
59   OPLIST: 0x100,
60 };
61 
62 const AnnotationMode = {
63   DISABLE: 0,
64   ENABLE: 1,
65   ENABLE_FORMS: 2,
66   ENABLE_STORAGE: 3,
67 };
68 
69 const AnnotationEditorPrefix = "pdfjs_internal_editor_";
70 
71 const AnnotationEditorType = {
72   DISABLE: -1,
73   NONE: 0,
74   FREETEXT: 3,
75   STAMP: 13,
76   INK: 15,
77 };
78 
79 const AnnotationEditorParamsType = {
80   RESIZE: 1,
81   CREATE: 2,
82   FREETEXT_SIZE: 11,
83   FREETEXT_COLOR: 12,
84   FREETEXT_OPACITY: 13,
85   INK_COLOR: 21,
86   INK_THICKNESS: 22,
87   INK_OPACITY: 23,
88 };
89 
90 // Permission flags from Table 22, Section 7.6.3.2 of the PDF specification.
91 const PermissionFlag = {
92   PRINT: 0x04,
93   MODIFY_CONTENTS: 0x08,
94   COPY: 0x10,
95   MODIFY_ANNOTATIONS: 0x20,
96   FILL_INTERACTIVE_FORMS: 0x100,
97   COPY_FOR_ACCESSIBILITY: 0x200,
98   ASSEMBLE: 0x400,
99   PRINT_HIGH_QUALITY: 0x800,
100 };
101 
102 const TextRenderingMode = {
103   FILL: 0,
104   STROKE: 1,
105   FILL_STROKE: 2,
106   INVISIBLE: 3,
107   FILL_ADD_TO_PATH: 4,
108   STROKE_ADD_TO_PATH: 5,
109   FILL_STROKE_ADD_TO_PATH: 6,
110   ADD_TO_PATH: 7,
111   FILL_STROKE_MASK: 3,
112   ADD_TO_PATH_FLAG: 4,
113 };
114 
115 const ImageKind = {
116   GRAYSCALE_1BPP: 1,
117   RGB_24BPP: 2,
118   RGBA_32BPP: 3,
119 };
120 
121 const AnnotationType = {
122   TEXT: 1,
123   LINK: 2,
124   FREETEXT: 3,
125   LINE: 4,
126   SQUARE: 5,
127   CIRCLE: 6,
128   POLYGON: 7,
129   POLYLINE: 8,
130   HIGHLIGHT: 9,
131   UNDERLINE: 10,
132   SQUIGGLY: 11,
133   STRIKEOUT: 12,
134   STAMP: 13,
135   CARET: 14,
136   INK: 15,
137   POPUP: 16,
138   FILEATTACHMENT: 17,
139   SOUND: 18,
140   MOVIE: 19,
141   WIDGET: 20,
142   SCREEN: 21,
143   PRINTERMARK: 22,
144   TRAPNET: 23,
145   WATERMARK: 24,
146   THREED: 25,
147   REDACT: 26,
148 };
149 
150 const AnnotationReplyType = {
151   GROUP: "Group",
152   REPLY: "R",
153 };
154 
155 const AnnotationFlag = {
156   INVISIBLE: 0x01,
157   HIDDEN: 0x02,
158   PRINT: 0x04,
159   NOZOOM: 0x08,
160   NOROTATE: 0x10,
161   NOVIEW: 0x20,
162   READONLY: 0x40,
163   LOCKED: 0x80,
164   TOGGLENOVIEW: 0x100,
165   LOCKEDCONTENTS: 0x200,
166 };
167 
168 const AnnotationFieldFlag = {
169   READONLY: 0x0000001,
170   REQUIRED: 0x0000002,
171   NOEXPORT: 0x0000004,
172   MULTILINE: 0x0001000,
173   PASSWORD: 0x0002000,
174   NOTOGGLETOOFF: 0x0004000,
175   RADIO: 0x0008000,
176   PUSHBUTTON: 0x0010000,
177   COMBO: 0x0020000,
178   EDIT: 0x0040000,
179   SORT: 0x0080000,
180   FILESELECT: 0x0100000,
181   MULTISELECT: 0x0200000,
182   DONOTSPELLCHECK: 0x0400000,
183   DONOTSCROLL: 0x0800000,
184   COMB: 0x1000000,
185   RICHTEXT: 0x2000000,
186   RADIOSINUNISON: 0x2000000,
187   COMMITONSELCHANGE: 0x4000000,
188 };
189 
190 const AnnotationBorderStyleType = {
191   SOLID: 1,
192   DASHED: 2,
193   BEVELED: 3,
194   INSET: 4,
195   UNDERLINE: 5,
196 };
197 
198 const AnnotationActionEventType = {
199   E: "Mouse Enter",
200   X: "Mouse Exit",
201   D: "Mouse Down",
202   U: "Mouse Up",
203   Fo: "Focus",
204   Bl: "Blur",
205   PO: "PageOpen",
206   PC: "PageClose",
207   PV: "PageVisible",
208   PI: "PageInvisible",
209   K: "Keystroke",
210   F: "Format",
211   V: "Validate",
212   C: "Calculate",
213 };
214 
215 const DocumentActionEventType = {
216   WC: "WillClose",
217   WS: "WillSave",
218   DS: "DidSave",
219   WP: "WillPrint",
220   DP: "DidPrint",
221 };
222 
223 const PageActionEventType = {
224   O: "PageOpen",
225   C: "PageClose",
226 };
227 
228 const VerbosityLevel = {
229   ERRORS: 0,
230   WARNINGS: 1,
231   INFOS: 5,
232 };
233 
234 const CMapCompressionType = {
235   NONE: 0,
236   BINARY: 1,
237 };
238 
239 // All the possible operations for an operator list.
240 const OPS = {
241   // Intentionally start from 1 so it is easy to spot bad operators that will be
242   // 0's.
243   // PLEASE NOTE: We purposely keep any removed operators commented out, since
244   //              re-numbering the list would risk breaking third-party users.
245   dependency: 1,
246   setLineWidth: 2,
247   setLineCap: 3,
248   setLineJoin: 4,
249   setMiterLimit: 5,
250   setDash: 6,
251   setRenderingIntent: 7,
252   setFlatness: 8,
253   setGState: 9,
254   save: 10,
255   restore: 11,
256   transform: 12,
257   moveTo: 13,
258   lineTo: 14,
259   curveTo: 15,
260   curveTo2: 16,
261   curveTo3: 17,
262   closePath: 18,
263   rectangle: 19,
264   stroke: 20,
265   closeStroke: 21,
266   fill: 22,
267   eoFill: 23,
268   fillStroke: 24,
269   eoFillStroke: 25,
270   closeFillStroke: 26,
271   closeEOFillStroke: 27,
272   endPath: 28,
273   clip: 29,
274   eoClip: 30,
275   beginText: 31,
276   endText: 32,
277   setCharSpacing: 33,
278   setWordSpacing: 34,
279   setHScale: 35,
280   setLeading: 36,
281   setFont: 37,
282   setTextRenderingMode: 38,
283   setTextRise: 39,
284   moveText: 40,
285   setLeadingMoveText: 41,
286   setTextMatrix: 42,
287   nextLine: 43,
288   showText: 44,
289   showSpacedText: 45,
290   nextLineShowText: 46,
291   nextLineSetSpacingShowText: 47,
292   setCharWidth: 48,
293   setCharWidthAndBounds: 49,
294   setStrokeColorSpace: 50,
295   setFillColorSpace: 51,
296   setStrokeColor: 52,
297   setStrokeColorN: 53,
298   setFillColor: 54,
299   setFillColorN: 55,
300   setStrokeGray: 56,
301   setFillGray: 57,
302   setStrokeRGBColor: 58,
303   setFillRGBColor: 59,
304   setStrokeCMYKColor: 60,
305   setFillCMYKColor: 61,
306   shadingFill: 62,
307   beginInlineImage: 63,
308   beginImageData: 64,
309   endInlineImage: 65,
310   paintXObject: 66,
311   markPoint: 67,
312   markPointProps: 68,
313   beginMarkedContent: 69,
314   beginMarkedContentProps: 70,
315   endMarkedContent: 71,
316   beginCompat: 72,
317   endCompat: 73,
318   paintFormXObjectBegin: 74,
319   paintFormXObjectEnd: 75,
320   beginGroup: 76,
321   endGroup: 77,
322   // beginAnnotations: 78,
323   // endAnnotations: 79,
324   beginAnnotation: 80,
325   endAnnotation: 81,
326   // paintJpegXObject: 82,
327   paintImageMaskXObject: 83,
328   paintImageMaskXObjectGroup: 84,
329   paintImageXObject: 85,
330   paintInlineImageXObject: 86,
331   paintInlineImageXObjectGroup: 87,
332   paintImageXObjectRepeat: 88,
333   paintImageMaskXObjectRepeat: 89,
334   paintSolidColorImageMask: 90,
335   constructPath: 91,
336 };
337 
338 const PasswordResponses = {
339   NEED_PASSWORD: 1,
340   INCORRECT_PASSWORD: 2,
341 };
342 
343 let verbosity = VerbosityLevel.WARNINGS;
344 
355 // A notice for devs. These are good for things that are helpful to devs, such
356 // as warning that Workers were disabled, which is important to devs but not
357 // end users.
363 
364 // Non-fatal warnings.
370 
381 // Checks if URLs use one of the allowed protocols, e.g. to avoid XSS.
394 
457 const BaseException = (function BaseExceptionClosure() {
458   // eslint-disable-next-line no-shadow
459   function BaseException(message, name) {
460     if (this.constructor === BaseException) {
461       unreachable("Cannot initialize BaseException.");
462     }
463     this.message = message;
464     this.name = name;
465   }
466   BaseException.prototype = new Error();
467   BaseException.constructor = BaseException;
468 
469   return BaseException;
470 })();
471 
572 // Ensure that the returned Object has a `null` prototype; hence why
573 // `Object.fromEntries(...)` is not used.
581 
582 // Checks the endianness of the platform.
589 
590 // Checks if it's possible to eval JS expressions.
599 
600 class FeatureTest {
604 
617   static get platform() {
618     if (
619       (typeof PDFJSDev === "undefined" || PDFJSDev.test("GENERIC")) &&
620       typeof navigator === "undefined"
621     ) {
622       return shadow(this, "platform", { isMac: false });
623     }
624     return shadow(this, "platform", {
625       isMac: navigator.platform.includes("Mac"),
626     });
627   }
628 
636 }
637 
638 const hexNumbers = [...Array(256).keys()].map(n =>
639   n.toString(16).padStart(2, "0")
640 );
641 
893 const PDFStringTranslateTable = [
894   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2d8,
895   0x2c7, 0x2c6, 0x2d9, 0x2dd, 0x2db, 0x2da, 0x2dc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
896   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
897   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
898   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
899   0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192,
900   0x2044, 0x2039, 0x203a, 0x2212, 0x2030, 0x201e, 0x201c, 0x201d, 0x2018,
901   0x2019, 0x201a, 0x2122, 0xfb01, 0xfb02, 0x141, 0x152, 0x160, 0x178, 0x17d,
902   0x131, 0x142, 0x153, 0x161, 0x17e, 0, 0x20ac,
903 ];
904 
1009 let NormalizeRegex = null;
1010 let NormalizationMap = null;
1027 
1049 const AnnotationPrefix = "pdfjs_internal_id_";
1050 
</code>

PR summary:
<pr_summary>
Guard `navigator`-object accesses in `src/`-files (issue 15728)
There are environments that include *incomplete* polyfills for the `navigator`-object, which may thus cause the PDF.js library to break.
Despite that clearly not being our fault, it may still result in bug reports filed against the PDF.js project; see e.g. #15728.

Currently this even seem to affect *the latest* version of Node.js; see e.g. [here](https://github.com/nodejs/node/issues/39540#issuecomment-1771203699).

*Please note:* Thanks to the pre-processor none of these changes affect the Firefox PDF Viewer, however it does add "overhead" when working with and reviewing the affected code (which is why I'm not crazy about this).
</pr_summary>

Your task:
You are a software tester at pdf.js.
1. Write exactly one javascript test `it("...", async () => {...})` block.
2. Your test must fail on the code before the patch, and pass after, hence the test will verify that the patch resolves the issue.
3. The test must be self-contained and to-the-point.
4. Use only the provided imports (respect the paths exactly how they are given) by importing dynamically for compatibility with Node.js — no new dependencies. 
5. Return only the javascript code (no comments or explanations).

Example structure:
it("should <describe behavior>", async () => {
  const { example } = await import("../../src/core/example.js");
  <initialize required variables>;
  <define expected variable>;
  <generate actual variables>;
  <compare expected with actual>;
});


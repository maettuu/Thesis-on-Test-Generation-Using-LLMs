<think>
Okay, I need to create a regression test for the issue where `navigator.platform` is undefined in Node.js, causing an error when using `pdfjs-dist`. The user provided a patch that adjusts how `navigator.platform` is checked in `util.js`. 

First, I should understand the problem. The original code directly accesses `navigator.platform`, which doesn't exist in Node.js, leading to an error. The patch modifies the `platform` getter in `FeatureTest` to handle cases where `navigator` might be undefined or not have `platform`.

My test needs to verify that after the patch, the code doesn't throw an error when `navigator.platform` is missing. I'll use Jest for testing since it's commonly used with Node.js.

I'll start by setting up a test environment where `navigator` is mocked. I'll set `navigator.platform` to `undefined` to simulate the Node.js environment. Then, I'll import the `FeatureTest` class and check if accessing `platform` doesn't throw an error.

I'll write an `it` block that mocks `navigator`, imports `FeatureTest`, and asserts that accessing `FeatureTest.platform` doesn't throw an error. This should pass after the patch is applied.

I need to make sure the test is self-contained and only uses the provided imports. I'll structure the test to mock `navigator` within the test block to avoid affecting other tests.

So, the test will mock `navigator`, import `FeatureTest`, and check for no errors when accessing `platform`. This ensures the patch resolves the issue.
</think>

it("should handle missing navigator.platform in Node.js", async () => {
  const { FeatureTest } = await import("../../src/shared/util.js");
  
  // Mock navigator.platform to be undefined
  const originalNavigator = global.navigator;
  global.navigator = {
    ...originalNavigator,
    platform: undefined
  };

  // Access platform property which should not throw
  const platform = FeatureTest.platform;

  // Restore original navigator
  global.navigator = originalNavigator;

  expect(platform).toBeDefined();
});
it("should not throw when aborting null touchMoveAC", async () => {
  const { TouchManager } = await import("../../src/display/touch_manager.js");
  const container = {
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
  };

  const touchManager = new TouchManager({
    container,
    isPinchingDisabled: false,
    isPinchingStopped: false,
    onPinchStart: jest.fn(),
    onPinching: jest.fn(),
    onPinchEnd: jest.fn(),
    signal: new AbortController().signal,
  });

  // Mock touch events
  const touchStartEvt = {
    touches: [{}, {}],
    preventDefault: jest.fn(),
  };
  const touchMoveEvt = {
    touches: [{}, {}],
    preventDefault: jest.fn(),
  };
  const touchEndEvt = {
    touches: [],
    preventDefault: jest.fn(),
  };

  // Simulate touch sequence
  await expect(
    (async () => {
      touchManager["#onTouchStart"](touchStartEvt);
      touchManager["#onTouchMove"](touchMoveEvt);
      touchManager["#onTouchEnd"](touchEndEvt);
    })()
  ).resolves.not.toThrow();

  expect(touchManager["#touchMoveAC"]).toBeNull();
});
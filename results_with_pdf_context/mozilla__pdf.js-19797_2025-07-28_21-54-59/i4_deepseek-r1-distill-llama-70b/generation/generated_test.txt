it("should handle touch events without throwing null abort error", async () => {
  const { TouchManager } = await import("../../src/display/touch_manager.js");
  const { AnnotationEditorUIManager } = await import("../../src/display/editor/tools.js");

  const container = document.createElement("div");
  const onPinchStart = jest.fn();
  const onPinching = jest.fn();
  const onPinchEnd = jest.fn();

  const touchManager = new TouchManager({
    container,
    onPinchStart,
    onPinching,
    onPinchEnd,
    signal: new AbortController().signal,
  });

  // Simulate touch events
  const touchStartEvt = {
    touches: [{ screenX: 100, screenY: 100, identifier: 1 }],
    preventDefault: jest.fn(),
  };
  const touchMoveEvt = {
    touches: [
      { screenX: 150, screenY: 150, identifier: 1 },
      { screenX: 200, screenY: 200, identifier: 2 },
    ],
    preventDefault: jest.fn(),
  };
  const touchEndEvt = {
    touches: [],
    preventDefault: jest.fn(),
  };

  // Test touch events
  touchManager._onTouchStart(touchStartEvt);
  touchManager._onTouchMove(touchMoveEvt);
  touchManager._onTouchEnd(touchEndEvt);

  expect(() => {
    touchManager._onTouchEnd(touchEndEvt);
  }).not.toThrow();

  touchManager.destroy();
});
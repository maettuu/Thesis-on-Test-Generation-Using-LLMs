it("should not throw when touch move abort is called on null", async () => {
  const { TouchManager } = await import("../../src/display/touch_manager.js");
  const container = {
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
  };

  const signal = new AbortController().signal;
  const touchManager = new TouchManager({
    container,
    signal,
  });

  // Mock required browser APIs
  const mockAbortController = {
    abort: jest.fn(),
  };
  jest.spyOn(window, 'AbortController').mockImplementation(() => mockAbortController);

  // Mock touch events
  const touchStartEvt = {
    touches: [
      { screenX: 100, screenY: 100, identifier: 1 },
      { screenX: 200, screenY: 200, identifier: 2 },
    ],
    preventDefault: jest.fn(),
  };
  const touchMoveEvt = {
    touches: [
      { screenX: 150, screenY: 150, identifier: 1 },
      { screenX: 250, screenY: 250, identifier: 2 },
    ],
    preventDefault: jest.fn(),
  };
  const touchEndEvt = {
    touches: [],
    preventDefault: jest.fn(),
  };

  // Mock console.error to check for errors
  const mockConsoleError = jest.spyOn(console, 'error').mockImplementation(() => {});

  // Simulate touch events
  touchManager['onTouchStart'](touchStartEvt);
  touchManager['onTouchMove'](touchMoveEvt);
  touchManager['onTouchEnd'](touchEndEvt);

  // Verify no error was thrown
  expect(mockConsoleError).not.toHaveBeenCalledWith(
    "TypeError: null is not an object (evaluating 'this.#touchMoveAC.abort')"
  );

  // Verify abort was called on touchMoveAC if it exists
  if (touchManager['#touchMoveAC']) {
    expect(mockAbortController.abort).toHaveBeenCalled();
  }
});
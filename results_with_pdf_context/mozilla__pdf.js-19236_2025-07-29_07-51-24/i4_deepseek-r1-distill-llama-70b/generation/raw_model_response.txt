<think>
Okay, I need to write a regression test for the font fallback issue in PDF.js. The user provided a patch that adds a mapping for "HelveticaLTStd-Bold" to "Helvetica-Bold" in standard_fonts.js. The problem was that when rendering a PDF with HelveticaLTStd fonts, the text wasn't showing up because the font wasn't found, leading to fallback failures.

First, I should understand what the patch does. It adds a line in the standard_fonts.js file, specifically mapping "HelveticaLTStd-Bold" to "Helvetica-Bold". This means that when the PDF uses HelveticaLTStd-Bold, PDF.js should now use Helvetica-Bold as a fallback.

The test needs to verify that after applying this patch, the font fallback works correctly. So, the test should check if the text is rendered properly when the font isn't available but a fallback exists.

I'll use the provided PDF file, issue19234.pdf, which uses HelveticaLTStd fonts. The test will load this PDF and check if the text is correctly rendered.

I'll structure the test using Jest. The test will:

1. Import the necessary modules: getDocument from display/api.js and buildGetDocumentParams from test_utils.js.
2. Load the PDF document using getDocument with the params for issue19234.pdf.
3. Get the first page of the document.
4. Render the page into a canvas.
5. Check the rendered text to see if it's not empty.

I need to make sure that before the patch, the text was missing, and after the patch, the text is present. So the test will assert that the rendered text is not empty.

I should also handle any potential errors, like the PDF failing to load or render.

Putting it all together, the test will look something like this: load the PDF, render the first page, extract the text, and assert that the text length is greater than zero. This ensures that the font fallback worked and the text is visible.
</think>

```javascript
it("should render text using font fallback when HelveticaLTStd is requested", async () => {
  const { getDocument } = await import('../../src/display/api.js');
  const { buildGetDocumentParams } = await import('./test_utils.js');
  
  const loadingTask = getDocument(buildGetDocumentParams('issue19234.pdf'));
  const pdf = await loadingTask.promise;
  const page = await pdf.getPage(1);
  const canvas = document.createElement('canvas');
  const context = canvas.getContext('2d');
  
  await page.render({
    canvasContext: context,
    viewport: page.getViewport({ scale: 1 })
  });
  
  const textContent = await page.getTextContent();
  expect(textContent.items.length).toBeGreaterThan(0);
});
```
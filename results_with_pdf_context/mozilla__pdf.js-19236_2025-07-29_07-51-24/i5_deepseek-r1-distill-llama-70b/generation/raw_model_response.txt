<think>
Alright, I need to write a regression test for the bug where font fallback doesn't work on the node-js/legacy build. The user provided a patch that modifies the standard_fonts.js file, adding a mapping for "HelveticaLTStd-Bold" to "Helvetica-Bold". 

First, I should understand the issue. The problem is that when rendering a PDF that uses HelveticaLTStd fonts, the text isn't displayed correctly because the font isn't available, and the fallback isn't working. The patch adds a substitution rule to handle this specific case.

To test this, I'll create a test that checks if the font substitution works as expected. The test should load the problematic PDF, render it, and check if the text is present. Before the patch, the text would be missing, causing the test to fail. After the patch, the text should appear, making the test pass.

I'll structure the test using Jest. I'll import the necessary modules: getDocument from the display API and buildGetDocumentParams from test_utils.js. Then, I'll load the PDF and render the first page as a PNG. 

Next, I'll extract the text from the PDF to verify that the expected text is present. The expected text can be something like "If you need help...", which is present in the provided PDF. I'll use the getPageTextContent method and check if the extracted text includes the expected string.

I need to make sure the test is self-contained and only uses the provided imports. I'll also ensure that the test doesn't rely on any external dependencies beyond what's already available in the project.

So, putting it all together, the test will load the PDF, render it, extract the text, and assert that the expected text is present. This should fail before the patch and pass after, confirming the fix.
</think>

```javascript
it("should correctly render text with font fallback for HelveticaLTStd", async () => {
  const { getDocument } = await import('../../src/display/api.js');
  const { buildGetDocumentParams } = await import('./test_utils.js');
  
  const loadingTask = getDocument(buildGetDocumentParams('issue19234.pdf'));
  const pdf = await loadingTask.promise;
  const page = await pdf.getPage(1);
  const textContent = await page.getTextContent();
  
  const expectedText = "If you need help with this tax form, go to IRS.gov.";
  const actualText = textContent.items.map(item => item.str).join('');
  
  expect(actualText).toContain(expectedText);
});
```
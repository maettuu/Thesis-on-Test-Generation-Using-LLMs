<think>
Okay, so I need to write a regression test for the PDF.js library. The issue is that the £ symbol isn't displaying correctly. From the patch, it looks like the problem is in the standard_fonts.js file, specifically in the getSupplementalGlyphMapForCalibri function. 

First, I should understand the problem. The user mentioned that instead of the £ symbol (U+00A3), it's showing an alpha-with-tonos (U+03AC). So the mapping for the £ symbol is incorrect in the Calibri font's glyph map.

Looking at the patch, I see that in the getSupplementalGlyphMapForCalibri function, they added a line t[940] = 163;. This suggests that the CID 940 was incorrectly mapped before and now points to GID 163, which is the correct glyph for £.

So, the test needs to verify that after this patch, when the PDF is rendered, the £ symbol is correctly displayed. 

To write the test, I'll use the provided imports. I'll need to get the PDF document using getDocument from the API and then extract the text from the first page. 

I'll set up a test that loads the specific PDF file, issue19695.pdf. Then, I'll render the page and get the text content. I'll check if the text includes the £ symbol correctly.

Before the patch, the text would have included the wrong character, so the test would fail. After the patch, the £ should appear, making the test pass.

I need to make sure the test is self-contained, so I'll use dynamic imports for the necessary modules. I'll also handle any potential errors, like if the text doesn't contain the expected symbol.

Putting it all together, the test will load the PDF, render the page, extract the text, and assert that the £ symbol is present.
</think>

```javascript
it("should correctly display the £ symbol in Calibri font", async () => {
  const { getDocument } = await import('../../src/display/api.js');
  const { buildGetDocumentParams } = await import('./test_utils.js');
  const loadingTask = getDocument(buildGetDocumentParams('issue19695.pdf'));
  
  const { pdfDocument } = await loadingTask;
  const page = await pdfDocument.getPage(1);
  const textContent = await page.getTextContent();
  
  const expectedText = "£";
  const actualText = textContent.items[0].str;
  
  expect(actualText).toContain(expectedText);
});
```
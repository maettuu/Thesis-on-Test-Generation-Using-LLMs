<think>
Okay, I need to write a regression test for the issue where the £ symbol isn't displaying correctly in PDF.js. The user provided a patch that adds a specific mapping in the standard_fonts.js file. 

First, I should understand the problem. The £ symbol, which is U+00A3, was showing up as á (U+03AC). The patch adds t[940] = 163; in the getSupplementalGlyphMapForCalibri function. So, this mapping corrects the glyph index for the £ symbol.

Now, I need to create a test that fails before the patch and passes after. The test should load the provided PDF, which contains the £ symbol, and check if it's rendered correctly.

I'll start by importing the necessary modules. I'll need getDocument from the display API and buildGetDocumentParams from test_utils.js. Then, I'll load the PDF file using these imports.

Next, I'll get the first page of the document and render it. Since rendering is asynchronous, I'll use async/await. After the page is rendered, I'll extract the text from it.

The key step is to check if the extracted text contains the £ symbol correctly. I'll store the expected text, which includes "£24.99", and compare it against the actual text from the PDF. If the £ symbol is correct, the test will pass.

I should ensure that the test is self-contained and doesn't rely on any external factors. Also, I need to make sure that the test correctly uses the imports as specified, without adding any new dependencies.

Putting it all together, the test will load the PDF, render the first page, extract the text, and assert that the expected string is present. This should cover the scenario where the £ symbol is correctly rendered after the patch.
</think>

```javascript
it("should correctly display the £ symbol in Calibri font", async () => {
  const { getDocument } = await import('../../src/display/api.js');
  const { buildGetDocumentParams } = await import('./test_utils.js');
  const loadingTask = getDocument(buildGetDocumentParams('issue19695.pdf'));
  const pdf = await loadingTask;
  const page = await pdf.getPage(1);
  const text = await page.getTextContent();
  const expected = "£24.99";
  expect(text.items[0].str).toContain(expected);
});
```
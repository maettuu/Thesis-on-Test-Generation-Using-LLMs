Before you begin:
- Keep going until the job is completely solved — don’t stop halfway.
- If you’re unsure about the behavior, reread the provided patch carefully; do not hallucinate.
- Plan your approach before writing code by reflecting on whether the test truly fails before and passes after.

Issue:
<issue>
[Bug]: £ (pound) symbol does not display correctly
### Attach (recommended) or Link to PDF file

[PoundSymbol.pdf](https://github.com/user-attachments/files/19372999/PoundSymbol.pdf)

### Web browser and its version

Chrome 134

### Operating system and its version

Windows 10

### PDF.js version

Demo here: https://mozilla.github.io/pdf.js/web/viewer.html

### Is the bug present in the latest PDF.js version?

Yes

### Is a browser extension

No

### Steps to reproduce the problem

Open attached file in the the pdfjs demo page and note the pound (as in the British pound) symbol does not display correctly.

### What is the expected behavior?

Expect to see £, 

![Image](https://github.com/user-attachments/assets/4aae19f5-a516-448c-b9b6-73321a82baa1)

### What went wrong?

In stead of the pound U+00A3 (£) symbol, it shows an alpha-with-tonos, U+03AC (ά) symbol.

### Link to a viewer

_No response_

### Additional context

_No response_
</issue>

PDF File:
<pdf>
issue19695.pdf
</pdf>

Patch:
<patch>
diff --git a/src/core/standard_fonts.js b/src/core/standard_fonts.js
--- a/src/core/standard_fonts.js
+++ b/src/core/standard_fonts.js
@@ -906,6 +906,7 @@ const getSupplementalGlyphMapForCalibri = getLookupTableFactory(function (t) {
   t[896] = 91;
   t[897] = 93;
   t[923] = 64;
+  t[940] = 163;
   t[1004] = 48;
   t[1005] = 49;
   t[1006] = 50;


</patch>

Imports:
<imports>
Available Packages
Dev Dependencies:
- @babel/core: ^7.26.10
- @babel/preset-env: ^7.26.9
- @babel/runtime: ^7.26.10
- @fluent/bundle: ^0.18.0
- @fluent/dom: ^0.10.0
- @metalsmith/layouts: ^3.0.0
- @metalsmith/markdown: ^1.10.0
- @napi-rs/canvas: ^0.1.68
- @types/node: ^22.13.10
- autoprefixer: ^10.4.21
- babel-loader: ^10.0.0
- caniuse-lite: ^1.0.30001704
- core-js: ^3.41.0
- eslint: ^9.22.0
- eslint-plugin-import: ^2.31.0
- eslint-plugin-jasmine: ^4.2.2
- eslint-plugin-json: ^4.0.1
- eslint-plugin-no-unsanitized: ^4.1.2
- eslint-plugin-perfectionist: ^4.10.1
- eslint-plugin-prettier: ^5.2.3
- eslint-plugin-unicorn: ^57.0.0
- globals: ^16.0.0
- gulp: ^5.0.0
- gulp-cli: ^3.0.0
- gulp-postcss: ^10.0.0
- gulp-rename: ^2.0.0
- gulp-replace: ^1.1.4
- gulp-zip: ^6.1.0
- highlight.js: ^11.11.1
- jasmine: ^5.6.0
- jsdoc: ^4.0.4
- jstransformer-nunjucks: ^1.2.0
- metalsmith: ^2.6.3
- metalsmith-html-relative: ^2.0.6
- ordered-read-streams: ^2.0.0
- pngjs: ^7.0.0
- postcss: ^8.5.3
- postcss-dark-theme-class: ^1.3.0
- postcss-dir-pseudo-class: ^9.0.1
- postcss-discard-comments: ^7.0.3
- postcss-nesting: ^13.0.1
- prettier: ^3.5.3
- puppeteer: ^24.4.0
- stylelint: ^16.16.0
- stylelint-prettier: ^5.0.3
- svglint: ^3.1.0
- terser-webpack-plugin: ^5.3.14
- tsc-alias: ^1.8.11
- ttest: ^4.0.0
- typescript: ^5.8.2
- vinyl: ^3.0.0
- webpack: ^5.98.0
- webpack-stream: ^7.0.0
- yargs: ^17.7.2

Engines:
- node: >=20

Available Relative Imports:
- `../../src/core/annotation.js`: Annotation, AnnotationBorderStyle, AnnotationFactory, MarkupAnnotation, getQuadPoints
- `../../src/core/bidi.js`: bidi
- `../../src/core/calculate_md5.js`: calculateMD5
- `../../src/core/calculate_sha256.js`: calculateSHA256
- `../../src/core/calculate_sha_other.js`: calculateSHA384, calculateSHA512
- `../../src/core/cff_parser.js`: CFFCharset, CFFCompiler, CFFFDSelect, CFFParser, CFFStrings
- `../../src/core/cmap.js`: CMap, CMapFactory, IdentityCMap
- `../../src/core/colorspace.js`: ColorSpace
- `../../src/core/colorspace_utils.js`: ColorSpaceUtils
- `../../src/core/core_utils.js`: arrayBuffersToBytes, encodeToXmlString, escapePDFName, escapeString, getInheritableProperty, getSizeInBytes, isAscii, isWhiteSpace, log2, numberToString, parseXFAPath, recoverJsURL, stringToUTF16HexString, stringToUTF16String, toRomanNumerals, validateCSSFont
- `../../src/core/crypto.js`: AES128Cipher, AES256Cipher, ARCFourCipher, CipherTransformFactory, PDF17, PDF20
- `../../src/core/default_appearance.js`: createDefaultAppearance, parseAppearanceStream, parseDefaultAppearance
- `../../src/core/document.js`: PDFDocument, Page
- `../../src/core/encodings.js`: getEncoding
- `../../src/core/evaluator.js`: PartialEvaluator
- `../../src/core/flate_stream.js`: FlateStream
- `../../src/core/font_substitutions.js`: getFontSubstitution
- `../../src/core/fonts_utils.js`: SEAC_ANALYSIS_ENABLED
- `../../src/core/function.js`: PDFFunctionFactory, PostScriptCompiler, PostScriptEvaluator
- `../../src/core/glyphlist.js`: getDingbatsGlyphsUnicode, getGlyphsUnicode
- `../../src/core/image_utils.js`: GlobalColorSpaceCache, GlobalImageCache, LocalColorSpaceCache
- `../../src/core/jbig2.js`: Jbig2Error, Jbig2Image
- `../../src/core/jpg.js`: JpegError, JpegImage
- `../../src/core/jpx.js`: JpxError, JpxImage
- `../../src/core/metadata_parser.js`: MetadataParser
- `../../src/core/operator_list.js`: OperatorList
- `../../src/core/parser.js`: Lexer, Linearization, Parser
- `../../src/core/predictor_stream.js`: PredictorStream
- `../../src/core/primitives.js`: Cmd, Dict, EOF, Name, Ref, RefSet, RefSetCache, isCmd, isDict, isName, isRefsEqual
- `../../src/core/ps_parser.js`: PostScriptLexer, PostScriptParser
- `../../src/core/stream.js`: NullStream, Stream, StringStream
- `../../src/core/type1_parser.js`: Type1Parser
- `../../src/core/unicode.js`: getCharUnicodeCategory, getUnicodeForGlyph, getUnicodeRangeFor, mapSpecialUnicodeValues
- `../../src/core/worker.js`: WorkerMessageHandler, WorkerTask
- `../../src/core/writer.js`: incrementalUpdate, writeChanges, writeDict
- `../../src/core/xfa/bind.js`: Binder
- `../../src/core/xfa/data.js`: DataHandler
- `../../src/core/xfa/factory.js`: XFAFactory
- `../../src/core/xfa/formcalc_lexer.js`: Lexer, TOKEN, Token
- `../../src/core/xfa/formcalc_parser.js`: Errors, Parser
- `../../src/core/xfa/parser.js`: XFAParser
- `../../src/core/xfa/som.js`: searchNode
- `../../src/core/xfa/symbol_utils.js`: $dump, $getChildren, $getChildrenByClass, $getChildrenByName, $text, $uid
- `../../src/core/xml_parser.js`: SimpleXMLParser, XMLParserBase
- `../../src/display/annotation_layer.js`: AnnotationLayer
- `../../src/display/annotation_storage.js`: AnnotationStorage
- `../../src/display/api.js`: LoopbackPort, PDFDataRangeTransport, PDFDocumentLoadingTask, PDFDocumentProxy, PDFPageProxy, PDFWorker, RenderTask, build, getDocument, isValidExplicitDest, version
- `../../src/display/canvas_factory.js`: DOMCanvasFactory
- `../../src/display/cmap_reader_factory.js`: DOMCMapReaderFactory
- `../../src/display/display_utils.js`: OutputScale, PDFDateString, PageViewport, PixelsPerInch, RenderingCancelledException, StatTimer, SupportedImageMimeTypes, fetchData, getFilenameFromUrl, getPdfFilenameFromUrl, getXfaPageViewport, isDataScheme, isPdfFile, isValidFetchUrl, noContextMenu, setLayerDimensions, stopEvent
- `../../src/display/draw_layer.js`: DrawLayer
- `../../src/display/editor/annotation_editor_layer.js`: AnnotationEditorLayer
- `../../src/display/editor/color_picker.js`: ColorPicker
- `../../src/display/editor/drawers/signaturedraw.js`: SignatureExtractor
- `../../src/display/editor/tools.js`: AnnotationEditorUIManager, CommandManager
- `../../src/display/fetch_stream.js`: PDFFetchStream
- `../../src/display/metadata.js`: Metadata
- `../../src/display/network.js`: PDFNetworkStream
- `../../src/display/network_utils.js`: createHeaders, createResponseError, extractFilenameFromHeader, validateRangeRequestCapabilities, validateResponseStatus
- `../../src/display/node_stream.js`: PDFNodeStream
- `../../src/display/node_utils.js`: NodeCMapReaderFactory, NodeStandardFontDataFactory, fetchData
- `../../src/display/standard_fontdata_factory.js`: DOMStandardFontDataFactory
- `../../src/display/svg_factory.js`: DOMSVGFactory
- `../../src/display/text_layer.js`: TextLayer
- `../../src/display/touch_manager.js`: TouchManager
- `../../src/display/worker_options.js`: GlobalWorkerOptions
- `../../src/display/xfa_layer.js`: XfaLayer
- `../../src/shared/message_handler.js`: MessageHandler
- `../../src/shared/murmurhash3.js`: MurmurHash3_64
- `../../src/shared/util.js`: AbortException, AnnotationBorderStyleType, AnnotationEditorParamsType, AnnotationEditorType, AnnotationFieldFlag, AnnotationFlag, AnnotationMode, AnnotationType, BaseException, FeatureTest, FormatError, ImageKind, InvalidPDFException, MathClamp, OPS, PasswordException, PasswordResponses, PermissionFlag, RenderingIntentFlag, ResponseException, UnknownErrorException, Util, VerbosityLevel, assert, bytesToString, createValidAbsoluteUrl, getModificationDate, getUuid, getVerbosityLevel, isNodeJS, normalizeUnicode, objectSize, setVerbosityLevel, shadow, string32, stringToBytes, stringToPDFString, stringToUTF8String, toBase64Util
- `../../web/annotation_layer_builder.js`: AnnotationLayerBuilder
- `../../web/app_options.js`: AppOptions, OptionKind
- `../../web/autolinker.js`: Autolinker
- `../../web/download_manager.js`: DownloadManager
- `../../web/event_utils.js`: EventBus, WaitOnType, waitOnEventOrTimeout
- `../../web/genericl10n.js`: GenericL10n
- `../../web/pdf_find_controller.js`: FindState, PDFFindController
- `../../web/pdf_find_utils.js`: CharacterType, getCharacterType
- `../../web/pdf_history.js`: PDFHistory, isDestArraysEqual, isDestHashesEqual
- `../../web/pdf_link_service.js`: LinkTarget, PDFLinkService, SimpleLinkService
- `../../web/pdf_page_view.js`: PDFPageView
- `../../web/pdf_scripting_manager.component.js`: PDFScriptingManager
- `../../web/pdf_single_page_viewer.js`: PDFSinglePageViewer
- `../../web/pdf_viewer.js`: PDFPageViewBuffer, PDFViewer
- `../../web/struct_tree_layer_builder.js`: StructTreeLayerBuilder
- `../../web/text_layer_builder.js`: TextLayerBuilder
- `../../web/ui_utils.js`: AutoPrintRegExp, ProgressBar, RenderingStates, ScrollMode, SpreadMode, backtrackBeforeAllVisibleElements, binarySearchFirstItem, calcRound, getPageSizeInches, getVisibleElements, isPortraitOrientation, isValidRotation, parseQueryString, removeNullCharacters
- `../../web/xfa_layer_builder.js`: XfaLayerBuilder
- `../reporter.js`: TestReporter
- `./common_pdfstream_tests.js`: testCrossOriginRedirects
- `./test_utils.js`: CMAP_URL, DefaultCMapReaderFactory, DefaultFileReaderFactory, DefaultStandardFontDataFactory, STANDARD_FONT_DATA_URL, TEST_PDFS_PATH, TestPdfsServer, XRefMock, buildGetDocumentParams, createIdFactory, getCrossOriginHostname
</imports>

Code:
<code>
File:
src/core/standard_fonts.js
1 /* Copyright 2015 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 import { getLookupTableFactory } from "./core_utils.js";
17 import { normalizeFontName } from "./fonts_utils.js";
18 
23 const getStdFontMap = getLookupTableFactory(function (t) {
24   // The standard 14 fonts:
25   t["Times-Roman"] = "Times-Roman";
26   t.Helvetica = "Helvetica";
27   t.Courier = "Courier";
28   t.Symbol = "Symbol";
29   t["Times-Bold"] = "Times-Bold";
30   t["Helvetica-Bold"] = "Helvetica-Bold";
31   t["Courier-Bold"] = "Courier-Bold";
32   t.ZapfDingbats = "ZapfDingbats";
33   t["Times-Italic"] = "Times-Italic";
34   t["Helvetica-Oblique"] = "Helvetica-Oblique";
35   t["Courier-Oblique"] = "Courier-Oblique";
36   t["Times-BoldItalic"] = "Times-BoldItalic";
37   t["Helvetica-BoldOblique"] = "Helvetica-BoldOblique";
38   t["Courier-BoldOblique"] = "Courier-BoldOblique";
39 
40   // Extra mappings
41   t.ArialNarrow = "Helvetica";
42   t["ArialNarrow-Bold"] = "Helvetica-Bold";
43   t["ArialNarrow-BoldItalic"] = "Helvetica-BoldOblique";
44   t["ArialNarrow-Italic"] = "Helvetica-Oblique";
45   t.ArialBlack = "Helvetica";
46   t["ArialBlack-Bold"] = "Helvetica-Bold";
47   t["ArialBlack-BoldItalic"] = "Helvetica-BoldOblique";
48   t["ArialBlack-Italic"] = "Helvetica-Oblique";
49   t["Arial-Black"] = "Helvetica";
50   t["Arial-Black-Bold"] = "Helvetica-Bold";
51   t["Arial-Black-BoldItalic"] = "Helvetica-BoldOblique";
52   t["Arial-Black-Italic"] = "Helvetica-Oblique";
53   t.Arial = "Helvetica";
54   t["Arial-Bold"] = "Helvetica-Bold";
55   t["Arial-BoldItalic"] = "Helvetica-BoldOblique";
56   t["Arial-Italic"] = "Helvetica-Oblique";
57   t.ArialMT = "Helvetica";
58   t["Arial-BoldItalicMT"] = "Helvetica-BoldOblique";
59   t["Arial-BoldMT"] = "Helvetica-Bold";
60   t["Arial-ItalicMT"] = "Helvetica-Oblique";
61   t["Arial-BoldItalicMT-BoldItalic"] = "Helvetica-BoldOblique";
62   t["Arial-BoldMT-Bold"] = "Helvetica-Bold";
63   t["Arial-ItalicMT-Italic"] = "Helvetica-Oblique";
64   t.ArialUnicodeMS = "Helvetica";
65   t["ArialUnicodeMS-Bold"] = "Helvetica-Bold";
66   t["ArialUnicodeMS-BoldItalic"] = "Helvetica-BoldOblique";
67   t["ArialUnicodeMS-Italic"] = "Helvetica-Oblique";
68   t["Courier-BoldItalic"] = "Courier-BoldOblique";
69   t["Courier-Italic"] = "Courier-Oblique";
70   t.CourierNew = "Courier";
71   t["CourierNew-Bold"] = "Courier-Bold";
72   t["CourierNew-BoldItalic"] = "Courier-BoldOblique";
73   t["CourierNew-Italic"] = "Courier-Oblique";
74   t["CourierNewPS-BoldItalicMT"] = "Courier-BoldOblique";
75   t["CourierNewPS-BoldMT"] = "Courier-Bold";
76   t["CourierNewPS-ItalicMT"] = "Courier-Oblique";
77   t.CourierNewPSMT = "Courier";
78   t["Helvetica-BoldItalic"] = "Helvetica-BoldOblique";
79   t["Helvetica-Italic"] = "Helvetica-Oblique";
80   t["HelveticaLTStd-Bold"] = "Helvetica-Bold";
81   t["Symbol-Bold"] = "Symbol";
82   t["Symbol-BoldItalic"] = "Symbol";
83   t["Symbol-Italic"] = "Symbol";
84   t.TimesNewRoman = "Times-Roman";
85   t["TimesNewRoman-Bold"] = "Times-Bold";
86   t["TimesNewRoman-BoldItalic"] = "Times-BoldItalic";
87   t["TimesNewRoman-Italic"] = "Times-Italic";
88   t.TimesNewRomanPS = "Times-Roman";
89   t["TimesNewRomanPS-Bold"] = "Times-Bold";
90   t["TimesNewRomanPS-BoldItalic"] = "Times-BoldItalic";
91   t["TimesNewRomanPS-BoldItalicMT"] = "Times-BoldItalic";
92   t["TimesNewRomanPS-BoldMT"] = "Times-Bold";
93   t["TimesNewRomanPS-Italic"] = "Times-Italic";
94   t["TimesNewRomanPS-ItalicMT"] = "Times-Italic";
95   t.TimesNewRomanPSMT = "Times-Roman";
96   t["TimesNewRomanPSMT-Bold"] = "Times-Bold";
97   t["TimesNewRomanPSMT-BoldItalic"] = "Times-BoldItalic";
98   t["TimesNewRomanPSMT-Italic"] = "Times-Italic";
99 });
100 
101 // Contains mapping for standard fonts and xfa fonts.
102 const getFontNameToFileMap = getLookupTableFactory(function (t) {
103   t.Courier = "FoxitFixed.pfb";
104   t["Courier-Bold"] = "FoxitFixedBold.pfb";
105   t["Courier-BoldOblique"] = "FoxitFixedBoldItalic.pfb";
106   t["Courier-Oblique"] = "FoxitFixedItalic.pfb";
107   t.Helvetica = "LiberationSans-Regular.ttf";
108   t["Helvetica-Bold"] = "LiberationSans-Bold.ttf";
109   t["Helvetica-BoldOblique"] = "LiberationSans-BoldItalic.ttf";
110   t["Helvetica-Oblique"] = "LiberationSans-Italic.ttf";
111   t["Times-Roman"] = "FoxitSerif.pfb";
112   t["Times-Bold"] = "FoxitSerifBold.pfb";
113   t["Times-BoldItalic"] = "FoxitSerifBoldItalic.pfb";
114   t["Times-Italic"] = "FoxitSerifItalic.pfb";
115   t.Symbol = "FoxitSymbol.pfb";
116   t.ZapfDingbats = "FoxitDingbats.pfb";
117   t["LiberationSans-Regular"] = "LiberationSans-Regular.ttf";
118   t["LiberationSans-Bold"] = "LiberationSans-Bold.ttf";
119   t["LiberationSans-Italic"] = "LiberationSans-Italic.ttf";
120   t["LiberationSans-BoldItalic"] = "LiberationSans-BoldItalic.ttf";
121 });
122 
127 const getNonStdFontMap = getLookupTableFactory(function (t) {
128   t.Calibri = "Helvetica";
129   t["Calibri-Bold"] = "Helvetica-Bold";
130   t["Calibri-BoldItalic"] = "Helvetica-BoldOblique";
131   t["Calibri-Italic"] = "Helvetica-Oblique";
132   t.CenturyGothic = "Helvetica";
133   t["CenturyGothic-Bold"] = "Helvetica-Bold";
134   t["CenturyGothic-BoldItalic"] = "Helvetica-BoldOblique";
135   t["CenturyGothic-Italic"] = "Helvetica-Oblique";
136   t.ComicSansMS = "Comic Sans MS";
137   t["ComicSansMS-Bold"] = "Comic Sans MS-Bold";
138   t["ComicSansMS-BoldItalic"] = "Comic Sans MS-BoldItalic";
139   t["ComicSansMS-Italic"] = "Comic Sans MS-Italic";
140   t.GillSansMT = "Helvetica";
141   t["GillSansMT-Bold"] = "Helvetica-Bold";
142   t["GillSansMT-BoldItalic"] = "Helvetica-BoldOblique";
143   t["GillSansMT-Italic"] = "Helvetica-Oblique";
144   t.Impact = "Helvetica";
145   t["ItcSymbol-Bold"] = "Helvetica-Bold";
146   t["ItcSymbol-BoldItalic"] = "Helvetica-BoldOblique";
147   t["ItcSymbol-Book"] = "Helvetica";
148   t["ItcSymbol-BookItalic"] = "Helvetica-Oblique";
149   t["ItcSymbol-Medium"] = "Helvetica";
150   t["ItcSymbol-MediumItalic"] = "Helvetica-Oblique";
151   t.LucidaConsole = "Courier";
152   t["LucidaConsole-Bold"] = "Courier-Bold";
153   t["LucidaConsole-BoldItalic"] = "Courier-BoldOblique";
154   t["LucidaConsole-Italic"] = "Courier-Oblique";
155   t["LucidaSans-Demi"] = "Helvetica-Bold";
156   t["MS-Gothic"] = "MS Gothic";
157   t["MS-Gothic-Bold"] = "MS Gothic-Bold";
158   t["MS-Gothic-BoldItalic"] = "MS Gothic-BoldItalic";
159   t["MS-Gothic-Italic"] = "MS Gothic-Italic";
160   t["MS-Mincho"] = "MS Mincho";
161   t["MS-Mincho-Bold"] = "MS Mincho-Bold";
162   t["MS-Mincho-BoldItalic"] = "MS Mincho-BoldItalic";
163   t["MS-Mincho-Italic"] = "MS Mincho-Italic";
164   t["MS-PGothic"] = "MS PGothic";
165   t["MS-PGothic-Bold"] = "MS PGothic-Bold";
166   t["MS-PGothic-BoldItalic"] = "MS PGothic-BoldItalic";
167   t["MS-PGothic-Italic"] = "MS PGothic-Italic";
168   t["MS-PMincho"] = "MS PMincho";
169   t["MS-PMincho-Bold"] = "MS PMincho-Bold";
170   t["MS-PMincho-BoldItalic"] = "MS PMincho-BoldItalic";
171   t["MS-PMincho-Italic"] = "MS PMincho-Italic";
172   t.NuptialScript = "Times-Italic";
173   t.SegoeUISymbol = "Helvetica";
174 });
175 
176 const getSerifFonts = getLookupTableFactory(function (t) {
177   t["Adobe Jenson"] = true;
178   t["Adobe Text"] = true;
179   t.Albertus = true;
180   t.Aldus = true;
181   t.Alexandria = true;
182   t.Algerian = true;
183   t["American Typewriter"] = true;
184   t.Antiqua = true;
185   t.Apex = true;
186   t.Arno = true;
187   t.Aster = true;
188   t.Aurora = true;
189   t.Baskerville = true;
190   t.Bell = true;
191   t.Bembo = true;
192   t["Bembo Schoolbook"] = true;
193   t.Benguiat = true;
194   t["Berkeley Old Style"] = true;
195   t["Bernhard Modern"] = true;
196   t["Berthold City"] = true;
197   t.Bodoni = true;
198   t["Bauer Bodoni"] = true;
199   t["Book Antiqua"] = true;
200   t.Bookman = true;
201   t["Bordeaux Roman"] = true;
202   t["Californian FB"] = true;
203   t.Calisto = true;
204   t.Calvert = true;
205   t.Capitals = true;
206   t.Cambria = true;
207   t.Cartier = true;
208   t.Caslon = true;
209   t.Catull = true;
210   t.Centaur = true;
211   t["Century Old Style"] = true;
212   t["Century Schoolbook"] = true;
213   t.Chaparral = true;
214   t["Charis SIL"] = true;
215   t.Cheltenham = true;
216   t["Cholla Slab"] = true;
217   t.Clarendon = true;
218   t.Clearface = true;
219   t.Cochin = true;
220   t.Colonna = true;
221   t["Computer Modern"] = true;
222   t["Concrete Roman"] = true;
223   t.Constantia = true;
224   t["Cooper Black"] = true;
225   t.Corona = true;
226   t.Ecotype = true;
227   t.Egyptienne = true;
228   t.Elephant = true;
229   t.Excelsior = true;
230   t.Fairfield = true;
231   t["FF Scala"] = true;
232   t.Folkard = true;
233   t.Footlight = true;
234   t.FreeSerif = true;
235   t["Friz Quadrata"] = true;
236   t.Garamond = true;
237   t.Gentium = true;
238   t.Georgia = true;
239   t.Gloucester = true;
240   t["Goudy Old Style"] = true;
241   t["Goudy Schoolbook"] = true;
242   t["Goudy Pro Font"] = true;
243   t.Granjon = true;
244   t["Guardian Egyptian"] = true;
245   t.Heather = true;
246   t.Hercules = true;
247   t["High Tower Text"] = true;
248   t.Hiroshige = true;
249   t["Hoefler Text"] = true;
250   t["Humana Serif"] = true;
251   t.Imprint = true;
252   t["Ionic No. 5"] = true;
253   t.Janson = true;
254   t.Joanna = true;
255   t.Korinna = true;
256   t.Lexicon = true;
257   t.LiberationSerif = true;
258   t["Liberation Serif"] = true;
259   t["Linux Libertine"] = true;
260   t.Literaturnaya = true;
261   t.Lucida = true;
262   t["Lucida Bright"] = true;
263   t.Melior = true;
264   t.Memphis = true;
265   t.Miller = true;
266   t.Minion = true;
267   t.Modern = true;
268   t["Mona Lisa"] = true;
269   t["Mrs Eaves"] = true;
270   t["MS Serif"] = true;
271   t["Museo Slab"] = true;
272   t["New York"] = true;
273   t["Nimbus Roman"] = true;
274   t["NPS Rawlinson Roadway"] = true;
275   t.NuptialScript = true;
276   t.Palatino = true;
277   t.Perpetua = true;
278   t.Plantin = true;
279   t["Plantin Schoolbook"] = true;
280   t.Playbill = true;
281   t["Poor Richard"] = true;
282   t["Rawlinson Roadway"] = true;
283   t.Renault = true;
284   t.Requiem = true;
285   t.Rockwell = true;
286   t.Roman = true;
287   t["Rotis Serif"] = true;
288   t.Sabon = true;
289   t.Scala = true;
290   t.Seagull = true;
291   t.Sistina = true;
292   t.Souvenir = true;
293   t.STIX = true;
294   t["Stone Informal"] = true;
295   t["Stone Serif"] = true;
296   t.Sylfaen = true;
297   t.Times = true;
298   t.Trajan = true;
299   t["Trinité"] = true;
300   t["Trump Mediaeval"] = true;
301   t.Utopia = true;
302   t["Vale Type"] = true;
303   t["Bitstream Vera"] = true;
304   t["Vera Serif"] = true;
305   t.Versailles = true;
306   t.Wanted = true;
307   t.Weiss = true;
308   t["Wide Latin"] = true;
309   t.Windsor = true;
310   t.XITS = true;
311 });
312 
313 const getSymbolsFonts = getLookupTableFactory(function (t) {
314   t.Dingbats = true;
315   t.Symbol = true;
316   t.ZapfDingbats = true;
317   t.Wingdings = true;
318   t["Wingdings-Bold"] = true;
319   t["Wingdings-Regular"] = true;
320 });
321 
322 // Glyph map for well-known standard fonts. Sometimes Ghostscript uses CID
323 // fonts, but does not embed the CID to GID mapping. The mapping is incomplete
324 // for all glyphs, but common for some set of the standard fonts.
325 const getGlyphMapForStandardFonts = getLookupTableFactory(function (t) {
326   t[2] = 10;
327   t[3] = 32;
328   t[4] = 33;
329   t[5] = 34;
330   t[6] = 35;
331   t[7] = 36;
332   t[8] = 37;
333   t[9] = 38;
334   t[10] = 39;
335   t[11] = 40;
336   t[12] = 41;
337   t[13] = 42;
338   t[14] = 43;
339   t[15] = 44;
340   t[16] = 45;
341   t[17] = 46;
342   t[18] = 47;
343   t[19] = 48;
344   t[20] = 49;
345   t[21] = 50;
346   t[22] = 51;
347   t[23] = 52;
348   t[24] = 53;
349   t[25] = 54;
350   t[26] = 55;
351   t[27] = 56;
352   t[28] = 57;
353   t[29] = 58;
354   t[30] = 894;
355   t[31] = 60;
356   t[32] = 61;
357   t[33] = 62;
358   t[34] = 63;
359   t[35] = 64;
360   t[36] = 65;
361   t[37] = 66;
362   t[38] = 67;
363   t[39] = 68;
364   t[40] = 69;
365   t[41] = 70;
366   t[42] = 71;
367   t[43] = 72;
368   t[44] = 73;
369   t[45] = 74;
370   t[46] = 75;
371   t[47] = 76;
372   t[48] = 77;
373   t[49] = 78;
374   t[50] = 79;
375   t[51] = 80;
376   t[52] = 81;
377   t[53] = 82;
378   t[54] = 83;
379   t[55] = 84;
380   t[56] = 85;
381   t[57] = 86;
382   t[58] = 87;
383   t[59] = 88;
384   t[60] = 89;
385   t[61] = 90;
386   t[62] = 91;
387   t[63] = 92;
388   t[64] = 93;
389   t[65] = 94;
390   t[66] = 95;
391   t[67] = 96;
392   t[68] = 97;
393   t[69] = 98;
394   t[70] = 99;
395   t[71] = 100;
396   t[72] = 101;
397   t[73] = 102;
398   t[74] = 103;
399   t[75] = 104;
400   t[76] = 105;
401   t[77] = 106;
402   t[78] = 107;
403   t[79] = 108;
404   t[80] = 109;
405   t[81] = 110;
406   t[82] = 111;
407   t[83] = 112;
408   t[84] = 113;
409   t[85] = 114;
410   t[86] = 115;
411   t[87] = 116;
412   t[88] = 117;
413   t[89] = 118;
414   t[90] = 119;
415   t[91] = 120;
416   t[92] = 121;
417   t[93] = 122;
418   t[94] = 123;
419   t[95] = 124;
420   t[96] = 125;
421   t[97] = 126;
422   t[98] = 196;
423   t[99] = 197;
424   t[100] = 199;
425   t[101] = 201;
426   t[102] = 209;
427   t[103] = 214;
428   t[104] = 220;
429   t[105] = 225;
430   t[106] = 224;
431   t[107] = 226;
432   t[108] = 228;
433   t[109] = 227;
434   t[110] = 229;
435   t[111] = 231;
436   t[112] = 233;
437   t[113] = 232;
438   t[114] = 234;
439   t[115] = 235;
440   t[116] = 237;
441   t[117] = 236;
442   t[118] = 238;
443   t[119] = 239;
444   t[120] = 241;
445   t[121] = 243;
446   t[122] = 242;
447   t[123] = 244;
448   t[124] = 246;
449   t[125] = 245;
450   t[126] = 250;
451   t[127] = 249;
452   t[128] = 251;
453   t[129] = 252;
454   t[130] = 8224;
455   t[131] = 176;
456   t[132] = 162;
457   t[133] = 163;
458   t[134] = 167;
459   t[135] = 8226;
460   t[136] = 182;
461   t[137] = 223;
462   t[138] = 174;
463   t[139] = 169;
464   t[140] = 8482;
465   t[141] = 180;
466   t[142] = 168;
467   t[143] = 8800;
468   t[144] = 198;
469   t[145] = 216;
470   t[146] = 8734;
471   t[147] = 177;
472   t[148] = 8804;
473   t[149] = 8805;
474   t[150] = 165;
475   t[151] = 181;
476   t[152] = 8706;
477   t[153] = 8721;
478   t[154] = 8719;
479   t[156] = 8747;
480   t[157] = 170;
481   t[158] = 186;
482   t[159] = 8486;
483   t[160] = 230;
484   t[161] = 248;
485   t[162] = 191;
486   t[163] = 161;
487   t[164] = 172;
488   t[165] = 8730;
489   t[166] = 402;
490   t[167] = 8776;
491   t[168] = 8710;
492   t[169] = 171;
493   t[170] = 187;
494   t[171] = 8230;
495   t[179] = 8220;
496   t[180] = 8221;
497   t[181] = 8216;
498   t[182] = 8217;
499   t[200] = 193;
500   t[203] = 205;
501   t[207] = 211;
502   t[210] = 218;
503   t[223] = 711;
504   t[224] = 321;
505   t[225] = 322;
506   t[226] = 352;
507   t[227] = 353;
508   t[228] = 381;
509   t[229] = 382;
510   t[233] = 221;
511   t[234] = 253;
512   t[252] = 263;
513   t[253] = 268;
514   t[254] = 269;
515   t[258] = 258;
516   t[260] = 260;
517   t[261] = 261;
518   t[265] = 280;
519   t[266] = 281;
520   t[267] = 282;
521   t[268] = 283;
522   t[269] = 313;
523   t[275] = 323;
524   t[276] = 324;
525   t[278] = 328;
526   t[283] = 344;
527   t[284] = 345;
528   t[285] = 346;
529   t[286] = 347;
530   t[292] = 367;
531   t[295] = 377;
532   t[296] = 378;
533   t[298] = 380;
534   t[305] = 963;
535   t[306] = 964;
536   t[307] = 966;
537   t[308] = 8215;
538   t[309] = 8252;
539   t[310] = 8319;
540   t[311] = 8359;
541   t[312] = 8592;
542   t[313] = 8593;
543   t[337] = 9552;
544   t[493] = 1039;
545   t[494] = 1040;
546   t[570] = 1040;
547   t[571] = 1041;
548   t[572] = 1042;
549   t[573] = 1043;
550   t[574] = 1044;
551   t[575] = 1045;
552   t[576] = 1046;
553   t[577] = 1047;
554   t[578] = 1048;
555   t[579] = 1049;
556   t[580] = 1050;
557   t[581] = 1051;
558   t[582] = 1052;
559   t[583] = 1053;
560   t[584] = 1054;
561   t[585] = 1055;
562   t[586] = 1056;
563   t[587] = 1057;
564   t[588] = 1058;
565   t[589] = 1059;
566   t[590] = 1060;
567   t[591] = 1061;
568   t[592] = 1062;
569   t[593] = 1063;
570   t[594] = 1064;
571   t[595] = 1065;
572   t[596] = 1066;
573   t[597] = 1067;
574   t[598] = 1068;
575   t[599] = 1069;
576   t[600] = 1070;
577   t[672] = 1488;
578   t[673] = 1489;
579   t[674] = 1490;
580   t[675] = 1491;
581   t[676] = 1492;
582   t[677] = 1493;
583   t[678] = 1494;
584   t[679] = 1495;
585   t[680] = 1496;
586   t[681] = 1497;
587   t[682] = 1498;
588   t[683] = 1499;
589   t[684] = 1500;
590   t[685] = 1501;
591   t[686] = 1502;
592   t[687] = 1503;
593   t[688] = 1504;
594   t[689] = 1505;
595   t[690] = 1506;
596   t[691] = 1507;
597   t[692] = 1508;
598   t[693] = 1509;
599   t[694] = 1510;
600   t[695] = 1511;
601   t[696] = 1512;
602   t[697] = 1513;
603   t[698] = 1514;
604   t[705] = 1524;
605   t[706] = 8362;
606   t[710] = 64288;
607   t[711] = 64298;
608   t[759] = 1617;
609   t[761] = 1776;
610   t[763] = 1778;
611   t[775] = 1652;
612   t[777] = 1764;
613   t[778] = 1780;
614   t[779] = 1781;
615   t[780] = 1782;
616   t[782] = 771;
617   t[783] = 64726;
618   t[786] = 8363;
619   t[788] = 8532;
620   t[790] = 768;
621   t[791] = 769;
622   t[792] = 768;
623   t[795] = 803;
624   t[797] = 64336;
625   t[798] = 64337;
626   t[799] = 64342;
627   t[800] = 64343;
628   t[801] = 64344;
629   t[802] = 64345;
630   t[803] = 64362;
631   t[804] = 64363;
632   t[805] = 64364;
633   t[2424] = 7821;
634   t[2425] = 7822;
635   t[2426] = 7823;
636   t[2427] = 7824;
637   t[2428] = 7825;
638   t[2429] = 7826;
639   t[2430] = 7827;
640   t[2433] = 7682;
641   t[2678] = 8045;
642   t[2679] = 8046;
643   t[2830] = 1552;
644   t[2838] = 686;
645   t[2840] = 751;
646   t[2842] = 753;
647   t[2843] = 754;
648   t[2844] = 755;
649   t[2846] = 757;
650   t[2856] = 767;
651   t[2857] = 848;
652   t[2858] = 849;
653   t[2862] = 853;
654   t[2863] = 854;
655   t[2864] = 855;
656   t[2865] = 861;
657   t[2866] = 862;
658   t[2906] = 7460;
659   t[2908] = 7462;
660   t[2909] = 7463;
661   t[2910] = 7464;
662   t[2912] = 7466;
663   t[2913] = 7467;
664   t[2914] = 7468;
665   t[2916] = 7470;
666   t[2917] = 7471;
667   t[2918] = 7472;
668   t[2920] = 7474;
669   t[2921] = 7475;
670   t[2922] = 7476;
671   t[2924] = 7478;
672   t[2925] = 7479;
673   t[2926] = 7480;
674   t[2928] = 7482;
675   t[2929] = 7483;
676   t[2930] = 7484;
677   t[2932] = 7486;
678   t[2933] = 7487;
679   t[2934] = 7488;
680   t[2936] = 7490;
681   t[2937] = 7491;
682   t[2938] = 7492;
683   t[2940] = 7494;
684   t[2941] = 7495;
685   t[2942] = 7496;
686   t[2944] = 7498;
687   t[2946] = 7500;
688   t[2948] = 7502;
689   t[2950] = 7504;
690   t[2951] = 7505;
691   t[2952] = 7506;
692   t[2954] = 7508;
693   t[2955] = 7509;
694   t[2956] = 7510;
695   t[2958] = 7512;
696   t[2959] = 7513;
697   t[2960] = 7514;
698   t[2962] = 7516;
699   t[2963] = 7517;
700   t[2964] = 7518;
701   t[2966] = 7520;
702   t[2967] = 7521;
703   t[2968] = 7522;
704   t[2970] = 7524;
705   t[2971] = 7525;
706   t[2972] = 7526;
707   t[2974] = 7528;
708   t[2975] = 7529;
709   t[2976] = 7530;
710   t[2978] = 1537;
711   t[2979] = 1538;
712   t[2980] = 1539;
713   t[2982] = 1549;
714   t[2983] = 1551;
715   t[2984] = 1552;
716   t[2986] = 1554;
717   t[2987] = 1555;
718   t[2988] = 1556;
719   t[2990] = 1623;
720   t[2991] = 1624;
721   t[2995] = 1775;
722   t[2999] = 1791;
723   t[3002] = 64290;
724   t[3003] = 64291;
725   t[3004] = 64292;
726   t[3006] = 64294;
727   t[3007] = 64295;
728   t[3008] = 64296;
729   t[3011] = 1900;
730   t[3014] = 8223;
731   t[3015] = 8244;
732   t[3017] = 7532;
733   t[3018] = 7533;
734   t[3019] = 7534;
735   t[3075] = 7590;
736   t[3076] = 7591;
737   t[3079] = 7594;
738   t[3080] = 7595;
739   t[3083] = 7598;
740   t[3084] = 7599;
741   t[3087] = 7602;
742   t[3088] = 7603;
743   t[3091] = 7606;
744   t[3092] = 7607;
745   t[3095] = 7610;
746   t[3096] = 7611;
747   t[3099] = 7614;
748   t[3100] = 7615;
749   t[3103] = 7618;
750   t[3104] = 7619;
751   t[3107] = 8337;
752   t[3108] = 8338;
753   t[3116] = 1884;
754   t[3119] = 1885;
755   t[3120] = 1885;
756   t[3123] = 1886;
757   t[3124] = 1886;
758   t[3127] = 1887;
759   t[3128] = 1887;
760   t[3131] = 1888;
761   t[3132] = 1888;
762   t[3135] = 1889;
763   t[3136] = 1889;
764   t[3139] = 1890;
765   t[3140] = 1890;
766   t[3143] = 1891;
767   t[3144] = 1891;
768   t[3147] = 1892;
769   t[3148] = 1892;
770   t[3153] = 580;
771   t[3154] = 581;
772   t[3157] = 584;
773   t[3158] = 585;
774   t[3161] = 588;
775   t[3162] = 589;
776   t[3165] = 891;
777   t[3166] = 892;
778   t[3169] = 1274;
779   t[3170] = 1275;
780   t[3173] = 1278;
781   t[3174] = 1279;
782   t[3181] = 7622;
783   t[3182] = 7623;
784   t[3282] = 11799;
785   t[3316] = 578;
786   t[3379] = 42785;
787   t[3393] = 1159;
788   t[3416] = 8377;
789 });
790 
791 // The glyph map for ArialBlack differs slightly from the glyph map used for
792 // other well-known standard fonts. Hence we use this (incomplete) CID to GID
793 // mapping to adjust the glyph map for non-embedded ArialBlack fonts.
794 const getSupplementalGlyphMapForArialBlack = getLookupTableFactory(
795   function (t) {
796     t[227] = 322;
797     t[264] = 261;
798     t[291] = 346;
799   }
800 );
801 
802 // The glyph map for Calibri (a Windows font) differs from the glyph map used
803 // in the standard fonts. Hence we use this (incomplete) CID to GID mapping to
804 // adjust the glyph map for non-embedded Calibri fonts.
805 const getSupplementalGlyphMapForCalibri = getLookupTableFactory(function (t) {
806   t[1] = 32;
807   t[4] = 65;
808   t[5] = 192;
809   t[6] = 193;
810   t[9] = 196;
811   t[17] = 66;
812   t[18] = 67;
813   t[21] = 268;
814   t[24] = 68;
815   t[28] = 69;
816   t[29] = 200;
817   t[30] = 201;
818   t[32] = 282;
819   t[38] = 70;
820   t[39] = 71;
821   t[44] = 72;
822   t[47] = 73;
823   t[48] = 204;
824   t[49] = 205;
825   t[58] = 74;
826   t[60] = 75;
827   t[62] = 76;
828   t[68] = 77;
829   t[69] = 78;
830   t[75] = 79;
831   t[76] = 210;
832   t[80] = 214;
833   t[87] = 80;
834   t[89] = 81;
835   t[90] = 82;
836   t[92] = 344;
837   t[94] = 83;
838   t[97] = 352;
839   t[100] = 84;
840   t[104] = 85;
841   t[109] = 220;
842   t[115] = 86;
843   t[116] = 87;
844   t[121] = 88;
845   t[122] = 89;
846   t[124] = 221;
847   t[127] = 90;
848   t[129] = 381;
849   t[258] = 97;
850   t[259] = 224;
851   t[260] = 225;
852   t[263] = 228;
853   t[268] = 261;
854   t[271] = 98;
855   t[272] = 99;
856   t[273] = 263;
857   t[275] = 269;
858   t[282] = 100;
859   t[286] = 101;
860   t[287] = 232;
861   t[288] = 233;
862   t[290] = 283;
863   t[295] = 281;
864   t[296] = 102;
865   t[336] = 103;
866   t[346] = 104;
867   t[349] = 105;
868   t[350] = 236;
869   t[351] = 237;
870   t[361] = 106;
871   t[364] = 107;
872   t[367] = 108;
873   t[371] = 322;
874   t[373] = 109;
875   t[374] = 110;
876   t[381] = 111;
877   t[382] = 242;
878   t[383] = 243;
879   t[386] = 246;
880   t[393] = 112;
881   t[395] = 113;
882   t[396] = 114;
883   t[398] = 345;
884   t[400] = 115;
885   t[401] = 347;
886   t[403] = 353;
887   t[410] = 116;
888   t[437] = 117;
889   t[442] = 252;
890   t[448] = 118;
891   t[449] = 119;
892   t[454] = 120;
893   t[455] = 121;
894   t[457] = 253;
895   t[460] = 122;
896   t[462] = 382;
897   t[463] = 380;
898   t[853] = 44;
899   t[855] = 58;
900   t[856] = 46;
901   t[876] = 47;
902   t[878] = 45;
903   t[882] = 45;
904   t[894] = 40;
905   t[895] = 41;
906   t[896] = 91;
907   t[897] = 93;
908   t[923] = 64;
909   t[1004] = 48;
910   t[1005] = 49;
911   t[1006] = 50;
912   t[1007] = 51;
913   t[1008] = 52;
914   t[1009] = 53;
915   t[1010] = 54;
916   t[1011] = 55;
917   t[1012] = 56;
918   t[1013] = 57;
919   t[1081] = 37;
920   t[1085] = 43;
921   t[1086] = 45;
922 });
923 
939 
</code>

PR summary:
<pr_summary>
Extend `getSupplementalGlyphMapForCalibri` with Pound-sign (issue 19695)

</pr_summary>

Your task:
You are a software tester at pdf.js.
1. Write exactly one javascript test `it("...", async () => {...})` block.
2. Your test must fail on the code before the patch, and pass after, hence the test will verify that the patch resolves the issue.
3. The test must be self-contained and to-the-point.
4. Use only the provided imports (respect the paths exactly how they are given) by importing dynamically for compatibility with Node.js — no new dependencies. You can use the PDF file for testing as follows:
const { getDocument } = await import('../../src/display/api.js');
const { buildGetDocumentParams } = await import('./test_utils.js');
const loadingTask = getDocument(buildGetDocumentParams('issue19695.pdf'))
5. Return only the javascript code (no comments or explanations).

Example structure:
it("should <describe behavior>", async () => {
  const { example } = await import("../../src/core/example.js");
  <initialize required variables>;
  <define expected variable>;
  <generate actual variables>;
  <compare expected with actual>;
});


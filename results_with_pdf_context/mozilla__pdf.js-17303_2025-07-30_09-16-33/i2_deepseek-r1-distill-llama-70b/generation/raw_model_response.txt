<think>
Okay, I need to write a regression test for the issue where a TypeError occurs when parsing a JPEG image without frame data. The test should fail before the patch and pass after applying the patch.

First, I'll start by understanding the problem. The error happens because the code tries to access 'samplesPerLine' of an undefined 'frame' object. The patch adds a check to throw a JpegError if 'frame' is null.

So, the test should create a scenario where the JPEG data doesn't have a frame, causing the old code to throw a TypeError and the patched code to throw a JpegError.

I'll use the provided test.js as a basis. It imports JpegImage and tries to parse a buffer with 'ffd8', which is the SOI marker but lacks any frame data.

In the test, I'll import JpegImage from the correct path. Then, I'll create a data buffer with just 'ffd8' and attempt to parse it. In the old code, this should throw a TypeError. After the patch, it should throw a JpegError with the message "JpegImage.parse - no frame data found."

I'll structure the test using async/await since the import is dynamic. I'll use try-catch to handle the error. The test will check that the correct error is thrown and that its message matches the expected string.

I need to make sure the test is self-contained and doesn't rely on any external dependencies beyond the provided imports. Also, I should ensure that the test accurately reflects the expected behavior before and after the patch.

So, the test will import JpegImage, create the problematic data, and then attempt to parse it. It expects an error to be thrown and verifies the error type and message.

I think that's all. Now, I'll write the test code accordingly.
</think>

```javascript
it("should throw JpegError when no frame data is found", async () => {
  const { JpegImage } = await import("../../src/core/jpg.js");
  const data = Buffer.from('ffd8', 'hex');
  
  try {
    new JpegImage().parse(data);
    throw new Error("Expected JpegError to be thrown");
  } catch (error) {
    if (error instanceof JpegError) {
      expect(error.message).toBe("JpegImage.parse - no frame data found.");
    } else {
      throw error;
    }
  }
});
```
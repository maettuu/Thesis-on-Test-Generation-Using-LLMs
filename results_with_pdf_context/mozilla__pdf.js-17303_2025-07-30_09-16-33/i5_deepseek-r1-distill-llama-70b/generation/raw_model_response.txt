<think>
Okay, I need to write a regression test for the issue where a TypeError occurs when using JpegImage.parse with an incomplete JPEG buffer. The user provided a patch that adds a check for the frame data, throwing a JpegError if it's missing. 

First, I should understand the problem. The error happens because frame.samplesPerLine is accessed when frame is undefined. The patch adds a check to throw a specific error if frame isn't found, which should prevent the TypeError.

Now, I need to create a test that fails before the patch and passes after. The test should simulate the scenario where the JPEG data is incomplete. 

Looking at the example, the user used Buffer.from('ffd8', 'hex'), which is just the start of a JPEG without the necessary frame data. This should trigger the error.

So, the test will import JpegImage and try to parse this buffer. Before the patch, it throws a TypeError. After the patch, it should throw a JpegError with the message "JpegImage.parse - no frame data found." 

I'll structure the test using Jest. It should catch the specific error and compare the message. 

I need to make sure the test is self-contained and uses the correct import paths. Since it's for Node.js, I'll use dynamic imports as shown in the example.

Putting it all together, the test will attempt to parse the incomplete buffer and check that the correct error is thrown with the correct message.
</think>

```javascript
it("should throw JpegError when frame data is missing", async () => {
  const { JpegImage } = await import("../../src/core/jpg.js");
  const buffer = Buffer.from('ffd8', 'hex');
  
  const expectedError = new JpegError("JpegImage.parse - no frame data found.");
  let actualError;
  
  try {
    new JpegImage().parse(buffer);
  } catch (error) {
    actualError = error;
  }
  
  expect(actualError).toBeInstanceOf(JpegError);
  expect(actualError.message).toBe(expectedError.message);
});
```
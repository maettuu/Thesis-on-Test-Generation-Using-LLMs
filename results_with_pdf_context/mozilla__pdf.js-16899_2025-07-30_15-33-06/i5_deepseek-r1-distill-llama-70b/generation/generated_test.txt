it("should display FreeText annotation with content", async () => {
  const { getDocument } = await import('../../src/display/api.js');
  const { buildGetDocumentParams } = await import('./test_utils.js');
  const loadingTask = getDocument(buildGetDocumentParams('bug1851498.pdf'));

  const { pdfDocument } = await loadingTask;
  const page = await pdfDocument.getPage(1);
  const annotationLayer = await import('../../src/display/annotation_layer.js');
  const annotationLayerInstance = new annotationLayer.AnnotationLayer({
    page,
    viewport: page.getViewport({ scale: 1 }),
    renderInteractiveForms: true,
  });

  const annotations = await page.getAnnotations();
  const freeTextAnnotation = annotations.find(annotation => annotation.subtype === 'FreeText');

  expect(freeTextAnnotation).toBeTruthy();

  const hasPopupData = freeTextAnnotation.titleObj?.str || 
                      freeTextAnnotation.contentsObj?.str || 
                      freeTextAnnotation.richText?.str;

  expect(hasPopupData).toBeTruthy();

  annotationLayerInstance.render();

  const popupTrigger = annotationLayerInstance.container.querySelector('.popupTriggerArea');
  if (popupTrigger) {
    popupTrigger.click();
  }

  const popup = annotationLayerInstance.container.querySelector('.popup');
  expect(popup).toBeTruthy();
});
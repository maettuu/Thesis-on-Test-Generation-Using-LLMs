it("should display FreeText annotation with popup data", async () => {
  const { getDocument } = await import('../../src/display/api.js');
  const { buildGetDocumentParams } = await import('./test_utils.js');
  const loadingTask = getDocument(buildGetDocumentParams('bug1851498.pdf'));
  const pdfDocument = await loadingTask.promise;
  const pdfPage = await pdfDocument.getPage(1);
  const annotationStorage = new (await import('../../src/display/annotation_storage.js')).AnnotationStorage();
  const annotationLayer = new (await import('../../src/display/annotation_layer.js')).AnnotationLayer({
    page: pdfPage,
    viewport: pdfPage.getViewport({ scale: 1 }),
    annotationStorage: annotationStorage,
    renderForms: true,
    linkService: null,
    downloadManager: null,
    imageResourcesPath: '',
    enableScripting: false,
    hasJSActions: false,
    fieldObjects: {},
    parent: null,
  });
  const annotations = await pdfPage.getAnnotations();
  const freeTextAnnotation = annotations.find(annotation => annotation.subtype === 'FreeText');
  const freeTextAnnotationElement = new (await import('../../src/display/annotation_layer.js')).FreeTextAnnotationElement({
    data: freeTextAnnotation,
    layer: annotationLayer,
    linkService: null,
    downloadManager: null,
    imageResourcesPath: '',
    renderForms: true,
    svgFactory: new (await import('../../src/display/display_utils.js')).DOMSVGFactory(),
    annotationStorage: annotationStorage,
    enableScripting: false,
    hasJSActions: false,
    fieldObjects: {},
    parent: null,
  });
  const container = freeTextAnnotationElement.render();
  expect(container.querySelector('.annotationTextContent')).not.toBeNull();
  expect(container.querySelector('.popupTriggerArea')).not.toBeNull();
});
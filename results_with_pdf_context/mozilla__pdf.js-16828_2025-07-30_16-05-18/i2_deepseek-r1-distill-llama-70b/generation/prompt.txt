Before you begin:
- Keep going until the job is completely solved — don’t stop halfway.
- If you’re unsure about the behavior, reread the provided patch carefully; do not hallucinate.
- Plan your approach before writing code by reflecting on whether the test truly fails before and passes after.

Issue:
<issue>
When in editing mode, support pasting an image from the clipboard
</issue>

Patch:
<patch>
diff --git a/src/display/editor/annotation_editor_layer.js b/src/display/editor/annotation_editor_layer.js
--- a/src/display/editor/annotation_editor_layer.js
+++ b/src/display/editor/annotation_editor_layer.js
@@ -464,6 +464,31 @@ class AnnotationEditorLayer {
     return null;
   }
 
+  /**
+   * Paste some content into a new editor.
+   * @param {number} mode
+   * @param {Object} params
+   */
+  pasteEditor(mode, params) {
+    this.#uiManager.updateToolbar(mode);
+    this.#uiManager.updateMode(mode);
+
+    const { offsetX, offsetY } = this.#getCenterPoint();
+    const id = this.getNextId();
+    const editor = this.#createNewEditor({
+      parent: this,
+      id,
+      x: offsetX,
+      y: offsetY,
+      uiManager: this.#uiManager,
+      isCentered: true,
+      ...params,
+    });
+    if (editor) {
+      this.add(editor);
+    }
+  }
+
   /**
    * Create a new editor
    * @param {Object} data
@@ -504,10 +529,7 @@ class AnnotationEditorLayer {
     return editor;
   }
 
-  /**
-   * Create and add a new editor.
-   */
-  addNewEditor() {
+  #getCenterPoint() {
     const { x, y, width, height } = this.div.getBoundingClientRect();
     const tlX = Math.max(0, x);
     const tlY = Math.max(0, y);
@@ -520,11 +542,15 @@ class AnnotationEditorLayer {
         ? [centerX, centerY]
         : [centerY, centerX];
 
+    return { offsetX, offsetY };
+  }
+
+  /**
+   * Create and add a new editor.
+   */
+  addNewEditor() {
     this.#createAndAddNewEditor(
-      {
-        offsetX,
-        offsetY,
-      },
+      this.#getCenterPoint(),
       /* isCentered = */ true
     );
   }

diff --git a/src/display/editor/editor.js b/src/display/editor/editor.js
--- a/src/display/editor/editor.js
+++ b/src/display/editor/editor.js
@@ -140,6 +140,26 @@ class AnnotationEditor {
     return [];
   }
 
+  /**
+   * Check if this kind of editor is able to handle the given mime type for
+   * pasting.
+   * @param {string} mime
+   * @returns {boolean}
+   */
+  static isHandlingMimeForPasting(_mime) {
+    return false;
+  }
+
+  /**
+   * Extract the data from the clipboard item and delegate the creation of the
+   * editor to the parent.
+   * @param {DataTransferItem} item
+   * @param {AnnotationEditorLayer} parent
+   */
+  static paste(item, parent) {
+    unreachable("Not implemented");
+  }
+
   /**
    * Get the properties to update in the UI for this editor.
    * @returns {Array}

diff --git a/src/display/editor/stamp.js b/src/display/editor/stamp.js
--- a/src/display/editor/stamp.js
+++ b/src/display/editor/stamp.js
@@ -30,6 +30,8 @@ class StampEditor extends AnnotationEditor {
 
   #bitmapUrl = null;
 
+  #bitmapFile = null;
+
   #canvas = null;
 
   #observer = null;
@@ -45,6 +47,7 @@ class StampEditor extends AnnotationEditor {
   constructor(params) {
     super({ ...params, name: "stampEditor" });
     this.#bitmapUrl = params.bitmapUrl;
+    this.#bitmapFile = params.bitmapFile;
   }
 
   static get supportedTypes() {
@@ -64,10 +67,26 @@ class StampEditor extends AnnotationEditor {
     return shadow(
       this,
       "supportedTypes",
-      types.map(type => `image/${type}`).join(",")
+      types.map(type => `image/${type}`)
     );
   }
 
+  static get supportedTypesStr() {
+    return shadow(this, "supportedTypesStr", this.supportedTypes.join(","));
+  }
+
+  /** @inheritdoc */
+  static isHandlingMimeForPasting(mime) {
+    return this.supportedTypes.includes(mime);
+  }
+
+  /** @inheritdoc */
+  static paste(item, parent) {
+    parent.pasteEditor(AnnotationEditorType.STAMP, {
+      bitmapFile: item.getAsFile(),
+    });
+  }
+
   #getBitmapDone() {
     this._uiManager.enableWaiting(false);
     if (this.#canvas) {
@@ -115,6 +134,29 @@ class StampEditor extends AnnotationEditor {
       return;
     }
 
+    if (this.#bitmapFile) {
+      const file = this.#bitmapFile;
+      this.#bitmapFile = null;
+      this._uiManager.enableWaiting(true);
+      this.#bitmapPromise = this._uiManager.imageManager
+        .getFromFile(file)
+        .then(data => {
+          this.#bitmapPromise = null;
+          if (!data) {
+            this.remove();
+            return;
+          }
+          ({
+            bitmap: this.#bitmap,
+            id: this.#bitmapId,
+            isSvg: this.#isSvg,
+          } = data);
+          this.#createCanvas();
+        })
+        .finally(() => this.#getBitmapDone());
+      return;
+    }
+
     const input = document.createElement("input");
     if (typeof PDFJSDev !== "undefined" && PDFJSDev.test("TESTING")) {
       input.hidden = true;
@@ -122,7 +164,7 @@ class StampEditor extends AnnotationEditor {
       document.body.append(input);
     }
     input.type = "file";
-    input.accept = StampEditor.supportedTypes;
+    input.accept = StampEditor.supportedTypesStr;
     this.#bitmapPromise = new Promise(resolve => {
       input.addEventListener("change", async () => {
         this.#bitmapPromise = null;

diff --git a/src/display/editor/tools.js b/src/display/editor/tools.js
--- a/src/display/editor/tools.js
+++ b/src/display/editor/tools.js
@@ -919,8 +919,17 @@ class AnnotationEditorUIManager {
    */
   paste(event) {
     event.preventDefault();
+    const { clipboardData } = event;
+    for (const item of clipboardData.items) {
+      for (const editorType of this.#editorTypes) {
+        if (editorType.isHandlingMimeForPasting(item.type)) {
+          editorType.paste(item, this.currentLayer);
+          return;
+        }
+      }
+    }
 
-    let data = event.clipboardData.getData("application/pdfjs");
+    let data = clipboardData.getData("application/pdfjs");
     if (!data) {
       return;
     }
@@ -1099,6 +1108,9 @@ class AnnotationEditorUIManager {
    * @param {string|null} editId
    */
   updateMode(mode, editId = null) {
+    if (this.#mode === mode) {
+      return;
+    }
     this.#mode = mode;
     if (mode === AnnotationEditorType.NONE) {
       this.setEditingState(false);


</patch>

Imports:
<imports>
Available Packages
Dev Dependencies:
- @babel/core: ^7.22.9
- @babel/plugin-transform-modules-commonjs: ^7.22.5
- @babel/preset-env: ^7.22.9
- @babel/runtime: ^7.22.6
- @javascript-obfuscator/escodegen: 2.3.0
- acorn: ^8.10.0
- autoprefixer: ^10.4.14
- babel-loader: ^9.1.3
- caniuse-lite: ^1.0.30001519
- canvas: ^2.11.2
- core-js: ^3.32.0
- cross-env: ^7.0.3
- es-module-shims: 1.4.7
- eslint: ^8.46.0
- eslint-config-prettier: ^8.10.0
- eslint-plugin-fetch-options: ^0.0.5
- eslint-plugin-html: ^7.1.0
- eslint-plugin-import: ^2.28.0
- eslint-plugin-json: ^3.1.0
- eslint-plugin-mozilla: ^3.1.0
- eslint-plugin-no-unsanitized: ^4.0.2
- eslint-plugin-prettier: ^5.0.0
- eslint-plugin-sort-exports: ^0.8.0
- eslint-plugin-unicorn: ^48.0.1
- globals: ^13.20.0
- gulp: ^4.0.2
- gulp-postcss: ^9.0.1
- gulp-rename: ^2.0.0
- gulp-replace: ^1.1.4
- gulp-zip: ^5.1.0
- jasmine: ^5.1.0
- jsdoc: ^4.0.2
- jstransformer-markdown-it: ^3.0.0
- merge-stream: ^2.0.0
- mkdirp: ^3.0.1
- needle: ^3.2.0
- path2d-polyfill: ^2.0.1
- pngjs: ^7.0.0
- postcss: ^8.4.27
- postcss-dir-pseudo-class: ^8.0.0
- postcss-nesting: ^12.0.1
- prettier: ^3.0.1
- puppeteer: ^21.0.1
- rimraf: ^3.0.2
- streamqueue: ^1.1.2
- stylelint: ^15.10.2
- stylelint-prettier: ^4.0.2
- terser: ^5.19.2
- through2: ^4.0.2
- ttest: ^4.0.0
- typescript: ^5.1.6
- typogr: ^0.6.8
- vinyl: ^3.0.0
- webpack: ^5.88.2
- webpack-stream: ^7.0.0
- wintersmith: ^2.5.0
- yargs: ^17.7.2

Engines:
- node: >=18

Available Relative Imports:
- `../../src/core/annotation.js`: Annotation, AnnotationBorderStyle, AnnotationFactory, MarkupAnnotation, getQuadPoints
- `../../src/core/bidi.js`: bidi
- `../../src/core/cff_parser.js`: CFFCharset, CFFCompiler, CFFFDSelect, CFFParser, CFFStrings
- `../../src/core/cmap.js`: CMap, CMapFactory, IdentityCMap
- `../../src/core/colorspace.js`: ColorSpace
- `../../src/core/core_utils.js`: arrayBuffersToBytes, encodeToXmlString, escapePDFName, escapeString, getInheritableProperty, isAscii, isWhiteSpace, log2, numberToString, parseXFAPath, recoverJsURL, stringToUTF16HexString, stringToUTF16String, toRomanNumerals, validateCSSFont
- `../../src/core/crypto.js`: AES128Cipher, AES256Cipher, ARCFourCipher, CipherTransformFactory, PDF17, PDF20, calculateMD5, calculateSHA256, calculateSHA384, calculateSHA512
- `../../src/core/default_appearance.js`: createDefaultAppearance, parseAppearanceStream, parseDefaultAppearance
- `../../src/core/document.js`: PDFDocument, Page
- `../../src/core/encodings.js`: getEncoding
- `../../src/core/evaluator.js`: PartialEvaluator
- `../../src/core/font_substitutions.js`: getFontSubstitution
- `../../src/core/fonts_utils.js`: SEAC_ANALYSIS_ENABLED
- `../../src/core/function.js`: PDFFunctionFactory, PostScriptCompiler, PostScriptEvaluator
- `../../src/core/glyphlist.js`: getDingbatsGlyphsUnicode, getGlyphsUnicode
- `../../src/core/image_utils.js`: GlobalImageCache, LocalColorSpaceCache
- `../../src/core/jbig2.js`: Jbig2Image
- `../../src/core/jpg.js`: JpegImage
- `../../src/core/jpx.js`: JpxImage
- `../../src/core/metadata_parser.js`: MetadataParser
- `../../src/core/operator_list.js`: OperatorList
- `../../src/core/parser.js`: Lexer, Linearization, Parser
- `../../src/core/predictor_stream.js`: PredictorStream
- `../../src/core/primitives.js`: Cmd, Dict, EOF, Name, Ref, RefSet, RefSetCache, isCmd, isDict, isName, isRefsEqual
- `../../src/core/ps_parser.js`: PostScriptLexer, PostScriptParser
- `../../src/core/stream.js`: NullStream, Stream, StringStream
- `../../src/core/type1_parser.js`: Type1Parser
- `../../src/core/unicode.js`: getCharUnicodeCategory, getUnicodeForGlyph, getUnicodeRangeFor, mapSpecialUnicodeValues
- `../../src/core/worker.js`: WorkerMessageHandler, WorkerTask
- `../../src/core/writer.js`: incrementalUpdate, writeDict
- `../../src/core/xfa/bind.js`: Binder
- `../../src/core/xfa/data.js`: DataHandler
- `../../src/core/xfa/factory.js`: XFAFactory
- `../../src/core/xfa/formcalc_lexer.js`: Lexer, TOKEN, Token
- `../../src/core/xfa/formcalc_parser.js`: Errors, Parser
- `../../src/core/xfa/parser.js`: XFAParser
- `../../src/core/xfa/som.js`: searchNode
- `../../src/core/xfa/symbol_utils.js`: $dump, $getChildren, $getChildrenByClass, $getChildrenByName, $text, $uid
- `../../src/core/xml_parser.js`: SimpleXMLParser, XMLParserBase
- `../../src/display/annotation_layer.js`: AnnotationLayer
- `../../src/display/annotation_storage.js`: AnnotationStorage
- `../../src/display/api.js`: DefaultCMapReaderFactory, DefaultCanvasFactory, DefaultStandardFontDataFactory, LoopbackPort, PDFDataRangeTransport, PDFDocumentLoadingTask, PDFDocumentProxy, PDFPageProxy, PDFWorker, PDFWorkerUtil, RenderTask, SVGGraphics, build, getDocument, version
- `../../src/display/display_utils.js`: DOMCanvasFactory, DOMSVGFactory, PDFDateString, PageViewport, PixelsPerInch, RenderingCancelledException, StatTimer, getFilenameFromUrl, getPdfFilenameFromUrl, getXfaPageViewport, isDataScheme, isPdfFile, isValidFetchUrl, loadScript, setLayerDimensions
- `../../src/display/editor/annotation_editor_layer.js`: AnnotationEditorLayer
- `../../src/display/editor/tools.js`: AnnotationEditorUIManager, CommandManager
- `../../src/display/fetch_stream.js`: PDFFetchStream
- `../../src/display/metadata.js`: Metadata
- `../../src/display/network.js`: PDFNetworkStream
- `../../src/display/network_utils.js`: createResponseStatusError, extractFilenameFromHeader, validateRangeRequestCapabilities, validateResponseStatus
- `../../src/display/node_stream.js`: PDFNodeStream
- `../../src/display/svg.js`: SVGGraphics
- `../../src/display/text_layer.js`: TextLayerRenderTask, renderTextLayer, updateTextLayer
- `../../src/display/worker_options.js`: GlobalWorkerOptions
- `../../src/display/xfa_layer.js`: XfaLayer
- `../../src/shared/message_handler.js`: MessageHandler
- `../../src/shared/murmurhash3.js`: MurmurHash3_64
- `../../src/shared/util.js`: AbortException, AnnotationBorderStyleType, AnnotationEditorParamsType, AnnotationEditorType, AnnotationFieldFlag, AnnotationFlag, AnnotationMode, AnnotationType, CMapCompressionType, FeatureTest, FormatError, ImageKind, InvalidPDFException, MissingPDFException, OPS, PasswordException, PasswordResponses, PermissionFlag, PromiseCapability, RenderingIntentFlag, UnexpectedResponseException, UnknownErrorException, Util, VerbosityLevel, bytesToString, createValidAbsoluteUrl, getModificationDate, getVerbosityLevel, isArrayBuffer, isNodeJS, normalizeUnicode, objectSize, setVerbosityLevel, shadow, string32, stringToBytes, stringToPDFString, stringToUTF8String
- `../../web/annotation_layer_builder.js`: AnnotationLayerBuilder
- `../../web/download_manager.js`: DownloadManager
- `../../web/event_utils.js`: EventBus, WaitOnType, waitOnEventOrTimeout
- `../../web/genericl10n.js`: GenericL10n
- `../../web/l10n_utils.js`: NullL10n
- `../../web/pdf_find_controller.js`: FindState, PDFFindController
- `../../web/pdf_find_utils.js`: CharacterType, getCharacterType
- `../../web/pdf_history.js`: PDFHistory, isDestArraysEqual, isDestHashesEqual
- `../../web/pdf_link_service.js`: LinkTarget, PDFLinkService, SimpleLinkService
- `../../web/pdf_page_view.js`: PDFPageView
- `../../web/pdf_scripting_manager.component.js`: PDFScriptingManager
- `../../web/pdf_single_page_viewer.js`: PDFSinglePageViewer
- `../../web/pdf_viewer.js`: PDFPageViewBuffer, PDFViewer
- `../../web/struct_tree_layer_builder.js`: StructTreeLayerBuilder
- `../../web/text_layer_builder.js`: TextLayerBuilder
- `../../web/ui_utils.js`: AutoPrintRegExp, ProgressBar, RenderingStates, ScrollMode, SpreadMode, backtrackBeforeAllVisibleElements, binarySearchFirstItem, getPageSizeInches, getVisibleElements, isPortraitOrientation, isValidRotation, parseQueryString, removeNullCharacters
- `../../web/xfa_layer_builder.js`: XfaLayerBuilder
- `./test_utils.js`: CMAP_URL, DefaultFileReaderFactory, STANDARD_FONT_DATA_URL, TEST_PDFS_PATH, XRefMock, buildGetDocumentParams, createIdFactory
- `./testreporter.js`: TestReporter
</imports>

Code:
<code>
File:
src/display/editor/annotation_editor_layer.js
1 /* Copyright 2022 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 // eslint-disable-next-line max-len
19 // eslint-disable-next-line max-len
22 // eslint-disable-next-line max-len
24 
25 import { AnnotationEditorType, FeatureTest } from "../../shared/util.js";
26 import { AnnotationEditor } from "./editor.js";
27 import { FreeTextEditor } from "./freetext.js";
28 import { InkEditor } from "./ink.js";
29 import { setLayerDimensions } from "../display_utils.js";
30 import { StampEditor } from "./stamp.js";
31 
50 /**
51  * Manage all the different editors on a page.
52  */
53 class AnnotationEditorLayer {
54   #accessibilityManager;
55 
56   #allowClick = false;
57 
58   #annotationLayer = null;
59 
60   #boundPointerup = this.pointerup.bind(this);
61 
62   #boundPointerdown = this.pointerdown.bind(this);
63 
64   #editors = new Map();
65 
66   #hadPointerDown = false;
67 
68   #isCleaningUp = false;
69 
70   #isDisabling = false;
71 
72   #uiManager;
73 
74   static _initialized = false;
75 
76   /**
77    * @param {AnnotationEditorLayerOptions} options
78    */
79   constructor({
80     uiManager,
81     pageIndex,
82     div,
83     accessibilityManager,
84     annotationLayer,
85     viewport,
86     l10n,
87   }) {
88     const editorTypes = [FreeTextEditor, InkEditor, StampEditor];
89     if (!AnnotationEditorLayer._initialized) {
90       AnnotationEditorLayer._initialized = true;
91       for (const editorType of editorTypes) {
92         editorType.initialize(l10n);
93       }
94     }
95     uiManager.registerEditorTypes(editorTypes);
96 
97     this.#uiManager = uiManager;
98     this.pageIndex = pageIndex;
99     this.div = div;
100     this.#accessibilityManager = accessibilityManager;
101     this.#annotationLayer = annotationLayer;
102     this.viewport = viewport;
103 
104     this.#uiManager.addLayer(this);
105   }
106 
507   /**
508    * Create and add a new editor.
509    */
510   addNewEditor() {
511     const { x, y, width, height } = this.div.getBoundingClientRect();
512     const tlX = Math.max(0, x);
513     const tlY = Math.max(0, y);
514     const brX = Math.min(window.innerWidth, x + width);
515     const brY = Math.min(window.innerHeight, y + height);
516     const centerX = (tlX + brX) / 2 - x;
517     const centerY = (tlY + brY) / 2 - y;
518     const [offsetX, offsetY] =
519       this.viewport.rotation % 180 === 0
520         ? [centerX, centerY]
521         : [centerY, centerX];
522 
523     this.#createAndAddNewEditor(
524       {
525         offsetX,
526         offsetY,
527       },
528       /* isCentered = */ true
529     );
530   }
531 
715 }
716 
File:
src/display/editor/editor.js
1 /* Copyright 2022 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 // eslint-disable-next-line max-len
18 // eslint-disable-next-line max-len
20 
21 import { bindEvents, ColorManager } from "./tools.js";
22 import { FeatureTest, shadow, unreachable } from "../../shared/util.js";
23 
33 /**
34  * Base class for editors.
35  */
36 class AnnotationEditor {
37   #keepAspectRatio = false;
38 
39   #resizersDiv = null;
40 
41   #boundFocusin = this.focusin.bind(this);
42 
43   #boundFocusout = this.focusout.bind(this);
44 
45   #hasBeenClicked = false;
46 
47   #isEditing = false;
48 
49   #isInEditMode = false;
50 
51   _initialOptions = Object.create(null);
52 
53   _uiManager = null;
54 
55   _focusEventsAllowed = true;
56 
57   #isDraggable = false;
58 
59   #zIndex = AnnotationEditor._zIndex++;
60 
61   static _colorManager = new ColorManager();
62 
63   static _zIndex = 1;
64 
65   /**
66    * @param {AnnotationEditorParameters} parameters
67    */
68   constructor(parameters) {
69     if (this.constructor === AnnotationEditor) {
70       unreachable("Cannot initialize AnnotationEditor.");
71     }
72 
73     this.parent = parameters.parent;
74     this.id = parameters.id;
75     this.width = this.height = null;
76     this.pageIndex = parameters.parent.pageIndex;
77     this.name = parameters.name;
78     this.div = null;
79     this._uiManager = parameters.uiManager;
80     this.annotationElementId = null;
81     this._willKeepAspectRatio = false;
82     this._initialOptions.isCentered = parameters.isCentered;
83 
84     const {
85       rotation,
86       rawDims: { pageWidth, pageHeight, pageX, pageY },
87     } = this.parent.viewport;
88 
89     this.rotation = rotation;
90     this.pageRotation =
91       (360 + rotation - this._uiManager.viewParameters.rotation) % 360;
92     this.pageDimensions = [pageWidth, pageHeight];
93     this.pageTranslation = [pageX, pageY];
94 
95     const [width, height] = this.parentDimensions;
96     this.x = parameters.x / width;
97     this.y = parameters.y / height;
98 
99     this.isAttachedToDOM = false;
100     this.deleted = false;
101   }
102 
1145 }
1146 
1147 // This class is used to fake an editor which has been deleted.
1163 
File:
src/display/editor/stamp.js
1 /* Copyright 2022 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 import { AnnotationEditorType, shadow } from "../../shared/util.js";
17 import { AnnotationEditor } from "./editor.js";
18 import { PixelsPerInch } from "../display_utils.js";
19 import { StampAnnotationElement } from "../annotation_layer.js";
20 
21 /**
22  * Basic text editor in order to create a FreeTex annotation.
23  */
24 class StampEditor extends AnnotationEditor {
25   #bitmap = null;
26 
27   #bitmapId = null;
28 
29   #bitmapPromise = null;
30 
31   #bitmapUrl = null;
32 
33   #canvas = null;
34 
35   #observer = null;
36 
37   #resizeTimeoutId = null;
38 
39   #isSvg = false;
40 
41   #hasBeenAddedInUndoStack = false;
42 
43   static _type = "stamp";
44 
45   constructor(params) {
46     super({ ...params, name: "stampEditor" });
47     this.#bitmapUrl = params.bitmapUrl;
48   }
49 
50   static get supportedTypes() {
51     // See https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types
52     // to know which types are supported by the browser.
53     const types = [
54       "apng",
55       "avif",
56       "bmp",
57       "gif",
58       "jpeg",
59       "png",
60       "svg+xml",
61       "webp",
62       "x-icon",
63     ];
64     return shadow(
65       this,
66       "supportedTypes",
67       types.map(type => `image/${type}`).join(",")
68     );
69   }
70 
78   #getBitmap() {
79     if (this.#bitmapId) {
80       this._uiManager.enableWaiting(true);
81       this._uiManager.imageManager
82         .getFromId(this.#bitmapId)
83         .then(data => {
84           if (!data) {
85             this.remove();
86             return;
87           }
88           this.#bitmap = data.bitmap;
89           this.#createCanvas();
90         })
91         .finally(() => this.#getBitmapDone());
92       return;
93     }
94 
95     if (this.#bitmapUrl) {
96       const url = this.#bitmapUrl;
97       this.#bitmapUrl = null;
98       this._uiManager.enableWaiting(true);
99       this.#bitmapPromise = this._uiManager.imageManager
100         .getFromUrl(url)
101         .then(data => {
102           this.#bitmapPromise = null;
103           if (!data) {
104             this.remove();
105             return;
106           }
107           ({
108             bitmap: this.#bitmap,
109             id: this.#bitmapId,
110             isSvg: this.#isSvg,
111           } = data);
112           this.#createCanvas();
113         })
114         .finally(() => this.#getBitmapDone());
115       return;
116     }
117 
118     const input = document.createElement("input");
119     if (typeof PDFJSDev !== "undefined" && PDFJSDev.test("TESTING")) {
120       input.hidden = true;
121       input.id = "stampEditorFileInput";
122       document.body.append(input);
123     }
124     input.type = "file";
125     input.accept = StampEditor.supportedTypes;
126     this.#bitmapPromise = new Promise(resolve => {
127       input.addEventListener("change", async () => {
128         this.#bitmapPromise = null;
129         if (!input.files || input.files.length === 0) {
130           this.remove();
131         } else {
132           this._uiManager.enableWaiting(true);
133           const data = await this._uiManager.imageManager.getFromFile(
134             input.files[0]
135           );
136           if (!data) {
137             this.remove();
138             return;
139           }
140           ({
141             bitmap: this.#bitmap,
142             id: this.#bitmapId,
143             isSvg: this.#isSvg,
144           } = data);
145           this.#createCanvas();
146         }
147         if (typeof PDFJSDev !== "undefined" && PDFJSDev.test("TESTING")) {
148           input.remove();
149         }
150         resolve();
151       });
152       input.addEventListener("cancel", () => {
153         this.#bitmapPromise = null;
154         this.remove();
155         resolve();
156       });
157     }).finally(() => this.#getBitmapDone());
158     if (typeof PDFJSDev === "undefined" || !PDFJSDev.test("TESTING")) {
159       input.click();
160     }
161   }
162 
530 }
531 
File:
src/display/editor/tools.js
1 /* Copyright 2022 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
17 // eslint-disable-next-line max-len
19 
20 import {
21   AnnotationEditorParamsType,
22   AnnotationEditorPrefix,
23   AnnotationEditorType,
24   FeatureTest,
25   getUuid,
26   shadow,
27   Util,
28   warn,
29 } from "../../shared/util.js";
30 import { getColorValues, getRGB, PixelsPerInch } from "../display_utils.js";
31 
513 /**
514  * A pdf has several pages and each of them when it will rendered
515  * will have an AnnotationEditorLayer which will contain the some
516  * new Annotations associated to an editor in order to modify them.
517  *
518  * This class is used to manage all the different layers, editors and
519  * some action like copy/paste, undo/redo, ...
520  */
521 class AnnotationEditorUIManager {
522   #activeEditor = null;
523 
524   #allEditors = new Map();
525 
526   #allLayers = new Map();
527 
528   #annotationStorage = null;
529 
530   #commandManager = new CommandManager();
531 
532   #currentPageIndex = 0;
533 
534   #deletedAnnotationsElementIds = new Set();
535 
536   #draggingEditors = null;
537 
538   #editorTypes = null;
539 
540   #editorsToRescale = new Set();
541 
542   #eventBus = null;
543 
544   #filterFactory = null;
545 
546   #idManager = new IdManager();
547 
548   #isEnabled = false;
549 
550   #isWaiting = false;
551 
552   #lastActiveElement = null;
553 
554   #mode = AnnotationEditorType.NONE;
555 
556   #selectedEditors = new Set();
557 
558   #pageColors = null;
559 
560   #boundBlur = this.blur.bind(this);
561 
562   #boundFocus = this.focus.bind(this);
563 
564   #boundCopy = this.copy.bind(this);
565 
566   #boundCut = this.cut.bind(this);
567 
568   #boundPaste = this.paste.bind(this);
569 
570   #boundKeydown = this.keydown.bind(this);
571 
572   #boundOnEditingAction = this.onEditingAction.bind(this);
573 
574   #boundOnPageChanging = this.onPageChanging.bind(this);
575 
576   #boundOnScaleChanging = this.onScaleChanging.bind(this);
577 
578   #boundOnRotationChanging = this.onRotationChanging.bind(this);
579 
580   #previousStates = {
581     isEditing: false,
582     isEmpty: true,
583     hasSomethingToUndo: false,
584     hasSomethingToRedo: false,
585     hasSelectedEditor: false,
586   };
587 
588   #translation = [0, 0];
589 
590   #translationTimeoutId = null;
591 
592   #container = null;
593 
594   #viewer = null;
595 
596   static TRANSLATE_SMALL = 1; // page units.
597 
598   static TRANSLATE_BIG = 10; // page units.
599 
696   constructor(container, viewer, eventBus, pdfDocument, pageColors) {
697     this.#container = container;
698     this.#viewer = viewer;
699     this.#eventBus = eventBus;
700     this.#eventBus._on("editingaction", this.#boundOnEditingAction);
701     this.#eventBus._on("pagechanging", this.#boundOnPageChanging);
702     this.#eventBus._on("scalechanging", this.#boundOnScaleChanging);
703     this.#eventBus._on("rotationchanging", this.#boundOnRotationChanging);
704     this.#annotationStorage = pdfDocument.annotationStorage;
705     this.#filterFactory = pdfDocument.filterFactory;
706     this.#pageColors = pageColors;
707     this.viewParameters = {
708       realScale: PixelsPerInch.PDF_TO_CSS_UNITS,
709       rotation: 0,
710     };
711   }
712 
916   /**
917    * Paste callback.
918    * @param {ClipboardEvent} event
919    */
920   paste(event) {
921     event.preventDefault();
922 
923     let data = event.clipboardData.getData("application/pdfjs");
924     if (!data) {
925       return;
926     }
927 
928     try {
929       data = JSON.parse(data);
930     } catch (ex) {
931       warn(`paste: "${ex.message}".`);
932       return;
933     }
934 
935     if (!Array.isArray(data)) {
936       return;
937     }
938 
939     this.unselectAll();
940     const layer = this.currentLayer;
941 
942     try {
943       const newEditors = [];
944       for (const editor of data) {
945         const deserializedEditor = layer.deserialize(editor);
946         if (!deserializedEditor) {
947           return;
948         }
949         newEditors.push(deserializedEditor);
950       }
951 
952       const cmd = () => {
953         for (const editor of newEditors) {
954           this.#addEditorToLayer(editor);
955         }
956         this.#selectEditors(newEditors);
957       };
958       const undo = () => {
959         for (const editor of newEditors) {
960           editor.remove();
961         }
962       };
963       this.addCommands({ cmd, undo, mustExec: true });
964     } catch (ex) {
965       warn(`paste: "${ex.message}".`);
966     }
967   }
968 
1096   /**
1097    * Change the editor mode (None, FreeText, Ink, ...)
1098    * @param {number} mode
1099    * @param {string|null} editId
1100    */
1101   updateMode(mode, editId = null) {
1102     this.#mode = mode;
1103     if (mode === AnnotationEditorType.NONE) {
1104       this.setEditingState(false);
1105       this.#disableAll();
1106       return;
1107     }
1108     this.setEditingState(true);
1109     this.#enableAll();
1110     this.unselectAll();
1111     for (const layer of this.#allLayers.values()) {
1112       layer.updateMode(mode);
1113     }
1114     if (!editId) {
1115       return;
1116     }
1117     for (const editor of this.#allEditors.values()) {
1118       if (editor.annotationElementId === editId) {
1119         this.setSelected(editor);
1120         editor.enterInEditMode();
1121         break;
1122       }
1123     }
1124   }
1125 
1697 }
1698 
</code>

PR summary:
<pr_summary>
[Editor] Add the possibility to paste an image from the clipboard (bug 1848317)

</pr_summary>

Your task:
You are a software tester at pdf.js.
1. Write exactly one javascript test `it("...", async () => {...})` block.
2. Your test must fail on the code before the patch, and pass after, hence the test will verify that the patch resolves the issue.
3. The test must be self-contained and to-the-point.
4. Use only the provided imports (respect the paths exactly how they are given) by importing dynamically for compatibility with Node.js — no new dependencies. 
5. Return only the javascript code (no comments or explanations).

Example structure:
it("should <describe behavior>", async () => {
  const { example } = await import("../../src/core/example.js");
  <initialize required variables>;
  <define expected variable>;
  <generate actual variables>;
  <compare expected with actual>;
});


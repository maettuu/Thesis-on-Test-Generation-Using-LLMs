it("should create a stamp editor when pasting an image from clipboard", async () => {
  const { AnnotationEditorLayer, AnnotationEditorUIManager } = 
    await import("../../src/display/editor/annotation_editor_layer.js");
  const { StampEditor } = await import("../../src/display/editor/stamp.js");

  const container = { addEventListener: () => {}, removeEventListener: () => {} };
  const viewer = { currentLayer: {} };
  const eventBus = { _on: () => {} };
  const pdfDocument = { annotationStorage: {} };
  const pageColors = {};

  const uiManager = new AnnotationEditorUIManager(
    container, viewer, eventBus, pdfDocument, pageColors
  );
  const layer = new AnnotationEditorLayer({
    uiManager,
    pageIndex: 0,
    div: {},
    accessibilityManager: {},
    annotationLayer: {},
    viewport: {},
    l10n: {}
  });

  // Mock clipboard event with image data
  const clipboardData = {
    items: [
      {
        type: "image/png",
        getAsFile: () => new File([""], "test.png", { type: "image/png" })
      }
    ],
    getData: () => ""
  };

  const event = { clipboardData, preventDefault: () => {} };

  // Paste should not create editor before patch ( StampEditor not handling MIME )
  const initialEditorsCount = uiManager.#allEditors.size;
  uiManager.paste(event);
  expect(uiManager.#allEditors.size).toBe(initialEditorsCount);

  // After patch, pasting image creates StampEditor
  const afterPatchEditorsCount = uiManager.#allEditors.size;
  expect(afterPatchEditorsCount - initialEditorsCount).toBe(1);
  const newEditor = Array.from(uiManager.#allEditors.values()).pop();
  expect(newEditor).toBeInstanceOf(StampEditor);
});
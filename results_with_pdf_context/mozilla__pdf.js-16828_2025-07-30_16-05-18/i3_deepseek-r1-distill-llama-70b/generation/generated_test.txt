it("should create a stamp editor when pasting an image from clipboard", async () => {
  const { default: AnnotationEditorUIManager } = await import("../../src/display/editor/tools.js");
  const { default: StampEditor } = await import("../../src/display/editor/stamp.js");

  // Setup mock data
  const mockClipboardData = {
    items: [
      {
        type: "image/png",
        kind: "file",
        getAsFile: () => new File(["iVBORw0KGgoAAAANSUhEUgAAAAEAAAABAYAAAC4qZBY4GYAAACGIHgYk5PjdXQBFY5jGPbIHMID1mQUAAIABAAAAABAAEAQB8AAEAfAAABAAgAZGF0YU", "base64"])
      }
    ],
    getData: () => "application/pdfjs"
  };

  // Create UI manager and layer
  const uiManager = new AnnotationEditorUIManager({
    container: document.createElement("div"),
    viewer: document.createElement("div"),
    eventBus: {
      _on: () => {},
      _off: () => {},
      dispatch: () => {}
    },
    pdfDocument: {
      annotationStorage: {
        has: () => false,
        getValue: () => null,
        setValue: () => {},
        remove: () => {}
      },
      filterFactory: {}
    },
    pageColors: {}
  });

  const layer = {
    div: document.createElement("div"),
    enable() {},
    disable() {},
    updateMode() {},
    addOrRebuild: (editor) => {
      editor.parent = this;
    }
  };

  uiManager.addLayer(layer);

  // Dispatch paste event
  const event = {
    preventDefault: () => {},
    clipboardData: mockClipboardData
  };

  await uiManager.paste(event);

  // Verify that a StampEditor was created and added to the layer
  const editors = uiManager.getEditors(layer.pageIndex);
  const stampEditor = editors.find(editor => editor instanceof StampEditor);

  expect(stampEditor).toBeDefined();
  expect(layer.addOrRebuild).toHaveBeenCalled();
});
```javascript
it("should read highlighted text during editing inside a PDF", async () => {
  const { HighlightEditor } = await import("../../src/display/editor/highlight.js");
  const { AnnotationEditorUIManager } = await import("../../src/display/editor/tools.js");

  const mockParent = {
    drawLayer: {
      highlight: jest.fn().mockReturnValue({ id: 1, clipPathId: "clipPathId" }),
      highlightOutline: jest.fn().mockReturnValue(2),
      remove: jest.fn(),
      updateLine: jest.fn(),
      updateBox: jest.fn(),
      show: jest.fn(),
      addClass: jest.fn(),
      removeClass: jest.fn(),
    },
    addUndoableEditor: jest.fn(),
    add: jest.fn(),
    unselect: jest.fn(),
    viewport: { rotation: 0 },
    scale: 1,
    parentDimensions: [100, 100],
  };

  const mockUIManager = new AnnotationEditorUIManager(
    document.createElement("div"),
    document.createElement("div"),
    null,
    { _on: jest.fn(), _off: jest.fn(), dispatch: jest.fn() },
    { annotationStorage: new Map(), filterFactory: { addHCMFilter: jest.fn() } },
    null,
    null,
    null
  );

  const highlightEditor = new HighlightEditor({
    parent: mockParent,
    uiManager: mockUIManager,
    anchorNode: document.createTextNode("Test"),
    anchorOffset: 0,
    focusNode: document.createTextNode("Test"),
    focusOffset: 4,
    boxes: [{ x: 0, y: 0, width: 1, height: 1 }],
    color: "#FFFF00",
    opacity: 1,
    thickness: 12,
    methodOfCreation: "test",
  });

  const div = highlightEditor.render();
  const mark = div.querySelector("mark");
  const isAriaHidden = mark.getAttribute("aria-hidden");

  expect(isAriaHidden).toBeNull();
});
```
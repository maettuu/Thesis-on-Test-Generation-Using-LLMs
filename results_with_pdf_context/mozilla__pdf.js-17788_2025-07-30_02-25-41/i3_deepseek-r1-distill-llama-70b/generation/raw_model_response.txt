<think>
Okay, I need to write a regression test for the issue where Voice Over doesn't read highlighted text during PDF editing. The patch provided makes some changes to improve accessibility, so the test should verify that after the patch, the highlighted text is accessible.

First, I'll look at the code changes. The patch adds ARIA attributes and includes the text in the DOM. So, the test needs to check if the highlighted text is present in the accessibility tree.

I'll start by importing the necessary modules. Since I'm using Jest, I'll use dynamic imports for the PDF.js modules. I'll need 'getDocument' to load the PDF, 'AnnotationEditorUIManager' to handle highlights, and 'util' for creating the HTML structure.

Next, I'll set up a test PDF file. For this, I'll create a simple PDF with a single page containing the text "Hello World!". This text will be the target for highlighting.

I'll then create a mock DOM element to simulate the PDF viewer. Using 'getDocument', I'll load the PDF and wait for it to be ready. Once loaded, I'll set up the annotation layer and editor UI manager.

After setting up the UI, I'll manually trigger a text selection to simulate the user selecting the text. This involves creating a range and setting it as the current selection.

With the text selected, I'll create a highlight annotation using the 'highlightSelection' method. This should add the highlighted text to the DOM with the appropriate ARIA attributes.

Now, I'll check the DOM structure. The highlighted text should be wrapped in a 'mark' element with a 'visuallyHidden' class, which makes it invisible but accessible to screen readers. I'll look for this element and verify that it contains the expected text.

Finally, I'll compare the inner text of the 'mark' element with the expected text "Hello World!" to ensure that the highlighted text is correctly exposed to assistive technologies.

This test should fail before the patch because the highlighted text isn't present in the DOM, and after the patch, it should pass as the text is now accessible.
</think>

```javascript
it("should expose highlighted text to screen readers", async () => {
  const { getDocument } = await import("../../src/display/api.js");
  const { AnnotationEditorUIManager } = await import("../../src/display/editor/tools.js");
  const { Util } = await import("../../src/shared/util.js");

  const pdfData = new TextEncoder().encode(
    "%PDF-1.3\n" +
    "1 0 obj\n" +
    "<</Type /Catalog /Pages 2 0 R>>\n" +
    "2 0 obj\n" +
    "<</Type /Pages /Kids [3 0 R] /Count 1 /Resources 4 0 R>>\n" +
    "3 0 obj\n" +
    "<</Type /Page /Parent 2 0 R /Resources 4 0 R /Contents 5 0 R>>\n" +
    "4 0 obj\n" +
    "<</ProcSet [/PDF /Text]>>\n" +
    "5 0 obj\n" +
    "<</Length 6 0 R>>\n" +
    "6 0 obj\n" +
    new TextEncoder().encode("BT\n/F1 24 Tf\n120 600 Td\n(Hello World!) Tj\nET\n") +
    "\n";

  const pdfBlob = new Blob([pdfData], { type: "application/pdf" });
  const pdfUrl = URL.createObjectURL(pdfBlob);

  const pdf = await getDocument({
    data: pdfBlob,
    url: pdfUrl,
    CMapLoader: null,
  });

  const container = document.createElement("div");
  document.body.appendChild(container);

  const editorUI = new AnnotationEditorUIManager(
    container,
    null,
    null,
    null,
    pdf,
    null,
    null,
    null
  );

  const annotationLayer = new AnnotationLayer();
  container.appendChild(annotationLayer.render());

  const page = pdf.getPage(1);
  const viewport = page.getViewport({ scale: 1 });

  const textLayer = document.createElement("div");
  textLayer.className = "textLayer";
  textLayer.style.width = `${viewport.width}px`;
  textLayer.style.height = `${viewport.height}px`;
  container.appendChild(textLayer);

  await pdf.load();

  // Simulate text selection
  const selection = window.getSelection();
  const range = document.createRange();
  const textNode = document.createTextNode("Hello World!");
  textLayer.appendChild(textNode);
  range.selectNodeContents(textNode);
  selection.removeAllRanges();
  selection.addRange(range);

  editorUI.highlightSelection("main_toolbar");

  // Check that the highlighted text is exposed in the DOM
  const highlightDiv = textLayer.querySelector("mark.visuallyHidden");
  expect(highlightDiv).toBeTruthy();

  const expectedText = "Hello World!";
  expect(highlightDiv?.textContent).toBe(expectedText);
});
```
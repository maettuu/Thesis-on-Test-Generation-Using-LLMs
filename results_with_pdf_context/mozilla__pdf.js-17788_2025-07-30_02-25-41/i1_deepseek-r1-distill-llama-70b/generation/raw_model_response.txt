<think>
Okay, I need to create a regression test for the issue where Voice Over doesn't read highlighted text during editing in a PDF. The patch provided makes some changes to the codebase, so the test should fail before the patch and pass after.

First, I'll look at the changes in the patch. The main modifications are adding ARIA attributes and making some elements visually hidden but screen reader accessible. For example, in draw_layer.js, they set "aria-hidden" to true on SVG elements. In highlight.js, they added a <mark> element with a class "visuallyHidden" that contains the highlighted text.

The test needs to verify that when a highlight is created, the text is accessible to screen readers. So, I'll simulate creating a highlight and check if the text is present in the DOM with the correct ARIA attributes.

I'll start by importing the necessary modules. I'll use PDFWorker to get the document and set up the UI manager and editor layer. Then, I'll create a selection range with some text and highlight it.

After highlighting, I'll check the DOM structure. I expect a <mark> element with class "visuallyHidden" containing the selected text. Also, the SVG elements should have "aria-hidden" set to true to ensure they don't interfere with screen readers.

I'll write the test using Jest, making sure it's self-contained and only tests the specific behavior. The test will fail before the patch because the necessary ARIA attributes and elements won't be present. After the patch, the test should pass as the elements will be correctly set up for accessibility.
</think>

```javascript
it("should make highlighted text accessible to screen readers", async () => {
  const { PDFWorker } = await import("../../src/display/api.js");
  const { AnnotationEditorUIManager } = await import("../../src/display/editor/tools.js");
  const { DrawLayer } = await import("../../src/display/draw_layer.js");
  const { AnnotationEditorLayer } = await import("../../src/display/editor/annotation_editor_layer.js");

  // Setup PDF worker and document
  const pdfWorker = await PDFWorker.create();
  const pdfDoc = await pdfWorker.getPDFDocument("test.pdf");
  const page = await pdfDoc.getPage(1);
  const viewport = page.getViewport({ scale: 1 });

  // Setup UI components
  const container = document.createElement("div");
  const editorLayer = new AnnotationEditorLayer(viewport);
  const uiManager = new AnnotationEditorUIManager(container, viewport, null, null, pdfDoc, null, null, null);

  // Create a selection and highlight it
  const selection = document.getSelection();
  selection.selectAllChildren(document.createElement("div"));
  const range = document.createRange();
  range.selectNodeText(document.createTextNode("Test Highlight"));
  
  // Simulate highlight creation
  const highlightEditor = new (await import("../../src/display/editor/highlight.js").then(c => c.HighlightEditor));
  highlightEditor.constructor({
    methodOfCreation: "test",
    anchorNode: range.startContainer,
    anchorOffset: 0,
    focusNode: range.endContainer,
    focusOffset: 1,
    boxes: [],
    color: "#ffff00",
    thickness: 2,
    opacity: 1
  });

  // Verify accessibility structure
  const highlightDiv = editorLayer.highlightDiv;
  const markElement = highlightDiv.querySelector("mark.visuallyHidden");
  const svgElements = highlightDiv.querySelectorAll("svg");

  expect(markElement).toBeTruthy();
  expect(markElement.textContent).toBe("Test Highlight");
  expect(svgElements.length > 0);
  svgElements.forEach(svg => {
    expect(svg.getAttribute("aria-hidden")).toBe("true");
  });
});
```
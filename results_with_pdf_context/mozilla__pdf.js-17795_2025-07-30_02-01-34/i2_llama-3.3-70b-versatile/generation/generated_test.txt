it("should render inlined images correctly", async () => {
  const { getDocument } = await import('../../src/display/api.js');
  const { buildGetDocumentParams } = await import('./test_utils.js');
  const loadingTask = getDocument(buildGetDocumentParams('issue17794.pdf'));
  const pdf = await loadingTask.promise;
  const page = await pdf.getPage(1);
  const operatorList = new (await import('../../src/core/operator_list.js')).OperatorList();
  const partialEvaluator = new (await import('../../src/core/evaluator.js')).PartialEvaluator({
    xref: pdf.xref,
    handler: pdf.handler,
    pageIndex: 0,
    idFactory: pdf.idFactory,
    fontCache: pdf.fontCache,
    builtInCMapCache: pdf.builtInCMapCache,
    standardFontDataCache: pdf.standardFontDataCache,
    globalImageCache: pdf.globalImageCache,
    systemFontCache: pdf.systemFontCache,
  });
  await partialEvaluator.buildPaintImageXObject({
    resources: page.resources,
    image: page.images[0],
    isInline: true,
    operatorList,
    cacheKey: null,
    localImageCache: null,
    localColorSpaceCache: null,
  });
  const expectedImageCount = 2;
  const actualImageCount = operatorList.ops.filter(op => op.fn === (await import('../../src/core/evaluator.js')).OPS.paintInlineImageXObject).length;
  expect(actualImageCount).toBe(expectedImageCount);
});
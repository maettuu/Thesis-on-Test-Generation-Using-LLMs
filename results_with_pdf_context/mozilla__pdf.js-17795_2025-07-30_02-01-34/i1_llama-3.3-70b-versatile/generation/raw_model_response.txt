```javascript
it("should render all inlined images correctly", async () => {
  const { getDocument } = await import('../../src/display/api.js');
  const { buildGetDocumentParams } = await import('./test_utils.js');
  const loadingTask = await getDocument(buildGetDocumentParams('issue17794.pdf'));
  const pdfDocument = await loadingTask.promise;
  const pdfPage = await pdfDocument.getPage(1);
  const operatorList = new (await import('../../src/core/operator_list.js')).OperatorList();
  const partialEvaluator = new (await import('../../src/core/evaluator.js')).PartialEvaluator({
    xref: pdfDocument.xref,
    handler: null,
    pageIndex: 0,
    idFactory: await import('./test_utils.js').then(module => module.createIdFactory()),
    fontCache: {},
    builtInCMapCache: {},
    standardFontDataCache: {},
    globalImageCache: {},
    systemFontCache: {},
    options: {}
  });
  await partialEvaluator.buildPaintImageXObject({
    resources: pdfPage.resources,
    image: pdfPage.images[0],
    isInline: true,
    operatorList,
    cacheKey: null,
    localImageCache: {},
    localColorSpaceCache: {}
  });
  const expectedImageCount = 2;
  const actualImageCount = operatorList.imageOps.length;
  expect(actualImageCount).toBe(expectedImageCount);
});
```
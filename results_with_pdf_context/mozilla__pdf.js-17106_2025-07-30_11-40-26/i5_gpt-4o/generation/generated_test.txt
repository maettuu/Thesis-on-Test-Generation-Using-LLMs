it("should release ImageBitmap data when intentStates size is zero", async () => {
  const { PDFPageProxy } = await import("../../src/display/api.js");
  const { createIdFactory } = await import("./test_utils.js");

  const idFactory = createIdFactory(0);
  const pageProxy = new PDFPageProxy({
    pageIndex: 0,
    pageInfo: { ref: { num: 1, gen: 0 } },
    transport: null,
    intentStates: new Map(),
    idFactory,
  });

  const imageData = {
    bitmap: {
      close: jest.fn(),
    },
  };

  pageProxy.objs = new Map();
  pageProxy.objs.has = jest.fn().mockReturnValue(false);

  pageProxy._intentStates = new Map();

  pageProxy.objs.get = jest.fn().mockReturnValue(imageData);

  pageProxy.objs.has = jest.fn().mockReturnValue(false);

  pageProxy._transport = {
    messageHandler: {
      sendWithPromise: jest.fn().mockResolvedValue({}),
    },
  };

  pageProxy._transport.messageHandler.sendWithPromise("commonobj", {
    id: "testId",
    type: "Image",
    imageData,
  });

  expect(imageData.bitmap.close).toHaveBeenCalled();
});
```javascript
it("should improve performance by avoiding subarray creation when optimizing 'save, transform, constructPath, restore'", async () => {
  const { Util } = await import("../../src/shared/util.js");
  const { OperatorList } = await import("../../src/core/operator_list.js");
  const { Commands } = await import("../../src/core/font_renderer.js");

  const buffer = new Float64Array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);
  const transform = [1, 0, 0, 1, 0, 0];

  const startTime = performance.now();
  for (let i = 0; i < 10000; i++) {
    Util.applyTransform(buffer, transform, 0);
  }
  const endTime = performance.now();

  const timeTaken = endTime - startTime;

  const { DrawOPS } = await import("../../src/shared/util.js");
  const operatorList = new OperatorList();
  operatorList.beginAnnotation();
  operatorList.save();
  operatorList.transform(transform);
  operatorList.moveTo(10, 20);
  operatorList.lineTo(30, 40);
  operatorList.curveTo(50, 60, 70, 80, 90, 100);
  operatorList.restore();
  operatorList.endAnnotation();

  const commands = new Commands();
  commands.add(DrawOPS.moveTo, [10, 20]);
  commands.add(DrawOPS.lineTo, [30, 40]);
  commands.add(DrawOPS.curveTo, [50, 60, 70, 80, 90, 100]);

  expect(timeTaken).toBeLessThan(100);
});
```
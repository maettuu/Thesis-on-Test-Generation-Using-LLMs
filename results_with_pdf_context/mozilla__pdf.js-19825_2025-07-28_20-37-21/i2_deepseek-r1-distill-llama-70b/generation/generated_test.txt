it("should improve performance when applying multiple transforms", async () => {
  const { Util } = await import("../../shared/util.js");
  const { OperatorList } = await import("../../core/operator_list.js");

  // Create a large array of points to transform
  const points = new Float64Array(1000000);
  for (let i = 0; i < points.length; i += 2) {
    points[i] = Math.random();
    points[i + 1] = Math.random();
  }

  // Create a sample transform matrix
  const transform = [0.5, 0, 0, 0.5, 10, 20];

  // Measure time before optimization
  const beforeTime = performance.now();
  for (let i = 0; i < points.length; i += 2) {
    Util.applyTransform(points, transform, i);
  }
  const afterTime = performance.now();

  // Verify the optimization reduces execution time
  const executionTime = afterTime - beforeTime;
  expect(executionTime).toBeLessThan(100);
});
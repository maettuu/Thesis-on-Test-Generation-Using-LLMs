it("should add a default beginMarkedContentProps op when encountering malformed arguments", async () => {
  const { PartialEvaluator } = await import("../../src/core/evaluator.js");
  const { OPS, warn } = await import("../../src/shared/util.js");
  const { Dict } = await import("../../src/core/primitives.js");
  const { StringStream } = await import("../../src/core/stream.js");
  const { OperatorList } = await import("../../src/core/operator_list.js");
  const { XRefMock } = await import("./test_utils.js");
  const { WorkerTask } = await import("../../src/core/worker.js");
  // The PDF content simulates a malformed beginMarkedContentProps operator:
  // instead of a Name as the first argument, a number is provided.
  // In PDF syntax, "BDC" maps to beginMarkedContentProps.
  const pdfContent = "123 << /MCID 7 >> BDC";
  const stream = new StringStream(pdfContent);
  const operatorList = new OperatorList();
  const xref = new XRefMock();
  const resources = Dict.empty;
  const task = new WorkerTask("test", () => {});
  const partialEvaluator = new PartialEvaluator({
    xref,
    handler: null,
    pageIndex: 0,
    idFactory: null,
    fontCache: null,
    builtInCMapCache: {},
    standardFontDataCache: {},
    globalImageCache: { getData: () => null },
    systemFontCache: {},
    options: { ignoreErrors: false }
  });
  return partialEvaluator.getOperatorList({ stream, task, resources, operatorList }).then(() => {
    const idx = operatorList.fnArray.indexOf(OPS.beginMarkedContentProps);
    if (idx === -1) {
      throw new Error("Missing beginMarkedContentProps operator");
    }
    const args = operatorList.argsArray[idx];
    if (args[0] !== "OC" || args[1] !== null) {
      throw new Error("Unexpected arguments for beginMarkedContentProps operator");
    }
  });
});

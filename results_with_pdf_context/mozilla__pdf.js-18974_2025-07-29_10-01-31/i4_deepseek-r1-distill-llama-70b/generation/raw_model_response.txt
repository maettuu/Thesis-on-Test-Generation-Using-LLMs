<think>
Okay, I need to write a regression test for the bug where the signature page of a digitally signed PDF doesn't render correctly. The user provided a patch that modifies the StreamsSequenceStream constructor in decode_stream.js. My task is to create a test that fails before the patch and passes after.

First, I'll look at the patch. It adds a line to filter the streams, ensuring only instances of BaseStream are included. This suggests that non-BaseStream objects were causing issues, like the readBlock method not being called correctly.

I should use the provided PDF, issue18973.pdf, which has the problem on page 45. The test will load this PDF and check if page 45 renders without errors.

I'll structure the test using Jest. I'll import getDocument and buildGetDocumentParams. Then, I'll load the PDF and navigate to page 45. I'll render it and check for any errors during rendering.

I'll wrap this in a try-catch block. If an error occurs during rendering, the test will fail. After the patch, the error should no longer happen, so the test will pass.

I need to make sure the test is self-contained and only uses the provided imports. I'll also ensure that the test doesn't introduce any new dependencies.

So, the test will load the PDF, get page 45, render it, and expect no errors. This should validate that the patch fixes the rendering issue.
</think>

```javascript
it("should render page with digital signature without errors", async () => {
  const { getDocument } = await import('../../src/display/api.js');
  const { buildGetDocumentParams } = await import('./test_utils.js');
  const loadingTask = getDocument(buildGetDocumentParams('issue18973.pdf'));
  
  const { numPages } = await loadingTask;
  const page = await loadingTask.getPage(45);
  
  const renderTask = page.render({
    viewport: page.getViewport({ scale: 1 }),
    spreadMode: 'none',
    flags: 'anno'
  });
  
  await expect(renderTask).resolves.not.toThrow();
});
```
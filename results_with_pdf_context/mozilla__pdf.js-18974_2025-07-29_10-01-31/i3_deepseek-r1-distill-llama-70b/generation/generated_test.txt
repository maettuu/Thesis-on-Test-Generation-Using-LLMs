it("should handle nonBaseStream instances in StreamsSequenceStream", async () => {
  const { Dict } = await import("../../src/core/primitives.js");
  const { PredictorStream } = await import("../../src/core/predictor_stream.js");
  const { Stream } = await import("../../src/core/stream.js");
  const { getDocument } = await import("../../src/display/api.js");
  const { buildGetDocumentParams } = await import("./test_utils.js");

  // Create a test stream that is not a BaseStream
  class TestStream extends Stream {
    constructor() {
      super();
      this.dict = new Dict();
    }
  }

  // Create a StreamsSequenceStream with a mix of valid and invalid streams
  const streams = [new TestStream(), new PredictorStream(new Stream(new Uint8Array(0)))];
  const sss = new StreamsSequenceStream(streams);

  // Without the patch, this would throw an error
  // With the patch, it should handle the invalid stream gracefully
  await expect(sss.readBlock()).resolves.not.toThrow();
});
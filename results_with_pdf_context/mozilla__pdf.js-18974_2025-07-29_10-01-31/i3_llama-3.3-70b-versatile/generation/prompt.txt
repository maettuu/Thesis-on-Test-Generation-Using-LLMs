Before you begin:
- Keep going until the job is completely solved — don’t stop halfway.
- If you’re unsure about the behavior, reread the provided patch carefully; do not hallucinate.
- Plan your approach before writing code by reflecting on whether the test truly fails before and passes after.

Issue:
<issue>
[Bug]: The signature page of a digitally signed PDF does not read
### Attach (recommended) or Link to PDF file

[doc1520828609.pdf](https://github.com/user-attachments/files/17550758/doc1520828609.pdf)


### Web browser and its version

Firefox 133.0a1 (20241028095635)

### Operating system and its version

Windows 10 22H2 

### PDF.js version

PDF.js v4.8.30 (build: bde36f28b)

### Is the bug present in the latest PDF.js version?

Yes

### Is a browser extension

Yes

### Steps to reproduce the problem

1. Load the attached PDF and browse to page 45.

### What is the expected behavior?

The folowing page should display: 
![imagen](https://github.com/user-attachments/assets/72932078-e64e-4478-afaf-c1a21f56c6f8)


### What went wrong?

The following error is displayed: 
![imagen](https://github.com/user-attachments/assets/b7af8180-8271-4564-b6bb-ec7e5ba95dde)


### Link to a viewer

http://scw.pjn.gov.ar/scw/viewer.seam?id=7hhfZ9Brh9%2BDTOazdtk66%2FkO1%2BbEayOyZiZ4V5aoMXE%3D&tipoDoc=despacho&cid=334348

### Additional context

The PDF file renders OK in Edge (130.0.2849.56) but not in Adobe Reader (version: ![imagen](https://github.com/user-attachments/assets/060cf955-2924-4585-9838-6b73660912b4))
</issue>

PDF File:
<pdf>
issue18973.pdf
</pdf>

Patch:
<patch>
diff --git a/src/core/decode_stream.js b/src/core/decode_stream.js
--- a/src/core/decode_stream.js
+++ b/src/core/decode_stream.js
@@ -132,6 +132,8 @@ class DecodeStream extends BaseStream {
 
 class StreamsSequenceStream extends DecodeStream {
   constructor(streams, onError = null) {
+    streams = streams.filter(s => s instanceof BaseStream);
+
     let maybeLength = 0;
     for (const stream of streams) {
       maybeLength +=


</patch>

Imports:
<imports>
Available Packages
Dev Dependencies:
- @babel/core: ^7.25.8
- @babel/preset-env: ^7.25.8
- @babel/runtime: ^7.25.7
- @fluent/bundle: ^0.18.0
- @fluent/dom: ^0.10.0
- @jazzer.js/core: ^2.1.0
- @metalsmith/layouts: ^2.7.0
- @metalsmith/markdown: ^1.10.0
- autoprefixer: ^10.4.20
- babel-loader: ^9.2.1
- caniuse-lite: ^1.0.30001669
- canvas: ^3.0.0-rc2
- core-js: ^3.38.1
- eslint: ^8.57.1
- eslint-plugin-import: ^2.31.0
- eslint-plugin-jasmine: ^4.2.2
- eslint-plugin-json: ^3.1.0
- eslint-plugin-no-unsanitized: ^4.1.2
- eslint-plugin-perfectionist: ^3.9.1
- eslint-plugin-prettier: ^5.2.1
- eslint-plugin-unicorn: ^56.0.0
- gulp: ^5.0.0
- gulp-cli: ^3.0.0
- gulp-postcss: ^10.0.0
- gulp-rename: ^2.0.0
- gulp-replace: ^1.1.4
- gulp-zip: ^6.0.0
- highlight.js: ^11.10.0
- jasmine: ^5.4.0
- jsdoc: ^4.0.4
- jstransformer-nunjucks: ^1.2.0
- metalsmith: ^2.6.3
- metalsmith-html-relative: ^2.0.5
- ordered-read-streams: ^2.0.0
- path2d: ^0.2.1
- pngjs: ^7.0.0
- postcss: ^8.4.47
- postcss-dark-theme-class: ^1.3.0
- postcss-dir-pseudo-class: ^9.0.0
- postcss-discard-comments: ^7.0.3
- postcss-nesting: ^13.0.0
- prettier: ^3.3.3
- puppeteer: 23.3.1
- stylelint: ^16.10.0
- stylelint-prettier: ^5.0.2
- svglint: ^3.0.0
- terser-webpack-plugin: ^5.3.10
- tsc-alias: ^1.8.10
- ttest: ^4.0.0
- typescript: ^5.6.3
- vinyl: ^3.0.0
- webpack: ^5.95.0
- webpack-stream: ^7.0.0
- yargs: ^17.7.2

Engines:
- node: >=18

Available Relative Imports:
- `../../src/core/annotation.js`: Annotation, AnnotationBorderStyle, AnnotationFactory, MarkupAnnotation, getQuadPoints
- `../../src/core/bidi.js`: bidi
- `../../src/core/cff_parser.js`: CFFCharset, CFFCompiler, CFFFDSelect, CFFParser, CFFStrings
- `../../src/core/cmap.js`: CMap, CMapFactory, IdentityCMap
- `../../src/core/colorspace.js`: ColorSpace
- `../../src/core/core_utils.js`: arrayBuffersToBytes, encodeToXmlString, escapePDFName, escapeString, getInheritableProperty, getSizeInBytes, isAscii, isWhiteSpace, log2, numberToString, parseXFAPath, recoverJsURL, stringToUTF16HexString, stringToUTF16String, toRomanNumerals, validateCSSFont
- `../../src/core/crypto.js`: AES128Cipher, AES256Cipher, ARCFourCipher, CipherTransformFactory, PDF17, PDF20, calculateMD5, calculateSHA256, calculateSHA384, calculateSHA512
- `../../src/core/default_appearance.js`: createDefaultAppearance, parseAppearanceStream, parseDefaultAppearance
- `../../src/core/document.js`: PDFDocument, Page
- `../../src/core/encodings.js`: getEncoding
- `../../src/core/evaluator.js`: PartialEvaluator
- `../../src/core/flate_stream.js`: FlateStream
- `../../src/core/font_substitutions.js`: getFontSubstitution
- `../../src/core/fonts_utils.js`: SEAC_ANALYSIS_ENABLED
- `../../src/core/function.js`: PDFFunctionFactory, PostScriptCompiler, PostScriptEvaluator
- `../../src/core/glyphlist.js`: getDingbatsGlyphsUnicode, getGlyphsUnicode
- `../../src/core/image_utils.js`: GlobalImageCache, LocalColorSpaceCache
- `../../src/core/jbig2.js`: Jbig2Error, Jbig2Image
- `../../src/core/jpg.js`: JpegError, JpegImage
- `../../src/core/jpx.js`: JpxError, JpxImage
- `../../src/core/metadata_parser.js`: MetadataParser
- `../../src/core/operator_list.js`: OperatorList
- `../../src/core/parser.js`: Lexer, Linearization, Parser
- `../../src/core/predictor_stream.js`: PredictorStream
- `../../src/core/primitives.js`: Cmd, Dict, EOF, Name, Ref, RefSet, RefSetCache, isCmd, isDict, isName, isRefsEqual
- `../../src/core/ps_parser.js`: PostScriptLexer, PostScriptParser
- `../../src/core/stream.js`: NullStream, Stream, StringStream
- `../../src/core/type1_parser.js`: Type1Parser
- `../../src/core/unicode.js`: getCharUnicodeCategory, getUnicodeForGlyph, getUnicodeRangeFor, mapSpecialUnicodeValues
- `../../src/core/worker.js`: WorkerMessageHandler, WorkerTask
- `../../src/core/writer.js`: incrementalUpdate, writeDict
- `../../src/core/xfa/bind.js`: Binder
- `../../src/core/xfa/data.js`: DataHandler
- `../../src/core/xfa/factory.js`: XFAFactory
- `../../src/core/xfa/formcalc_lexer.js`: Lexer, TOKEN, Token
- `../../src/core/xfa/formcalc_parser.js`: Errors, Parser
- `../../src/core/xfa/parser.js`: XFAParser
- `../../src/core/xfa/som.js`: searchNode
- `../../src/core/xfa/symbol_utils.js`: $dump, $getChildren, $getChildrenByClass, $getChildrenByName, $text, $uid
- `../../src/core/xml_parser.js`: SimpleXMLParser, XMLParserBase
- `../../src/display/annotation_layer.js`: AnnotationLayer
- `../../src/display/annotation_storage.js`: AnnotationStorage
- `../../src/display/api.js`: DefaultCMapReaderFactory, DefaultCanvasFactory, DefaultStandardFontDataFactory, LoopbackPort, PDFDataRangeTransport, PDFDocumentLoadingTask, PDFDocumentProxy, PDFPageProxy, PDFWorker, RenderTask, build, getDocument, version
- `../../src/display/display_utils.js`: DOMCanvasFactory, DOMSVGFactory, OutputScale, PDFDateString, PageViewport, PixelsPerInch, RenderingCancelledException, StatTimer, fetchData, getFilenameFromUrl, getPdfFilenameFromUrl, getXfaPageViewport, isDataScheme, isPdfFile, isValidFetchUrl, noContextMenu, setLayerDimensions
- `../../src/display/draw_layer.js`: DrawLayer
- `../../src/display/editor/annotation_editor_layer.js`: AnnotationEditorLayer
- `../../src/display/editor/color_picker.js`: ColorPicker
- `../../src/display/editor/tools.js`: AnnotationEditorUIManager, CommandManager
- `../../src/display/fetch_stream.js`: PDFFetchStream
- `../../src/display/metadata.js`: Metadata
- `../../src/display/network.js`: PDFNetworkStream
- `../../src/display/network_utils.js`: createHeaders, createResponseStatusError, extractFilenameFromHeader, validateRangeRequestCapabilities, validateResponseStatus
- `../../src/display/node_stream.js`: PDFNodeStream
- `../../src/display/node_utils.js`: NodePackages, fetchData
- `../../src/display/text_layer.js`: TextLayer
- `../../src/display/worker_options.js`: GlobalWorkerOptions
- `../../src/display/xfa_layer.js`: XfaLayer
- `../../src/shared/message_handler.js`: MessageHandler
- `../../src/shared/murmurhash3.js`: MurmurHash3_64
- `../../src/shared/util.js`: AbortException, AnnotationBorderStyleType, AnnotationEditorParamsType, AnnotationEditorType, AnnotationFieldFlag, AnnotationFlag, AnnotationMode, AnnotationType, BaseException, FeatureTest, FormatError, ImageKind, InvalidPDFException, MissingPDFException, OPS, PasswordException, PasswordResponses, PermissionFlag, RenderingIntentFlag, UnexpectedResponseException, UnknownErrorException, Util, VerbosityLevel, assert, bytesToString, createValidAbsoluteUrl, getModificationDate, getVerbosityLevel, isNodeJS, normalizeUnicode, objectSize, setVerbosityLevel, shadow, string32, stringToBytes, stringToPDFString, stringToUTF8String
- `../../web/annotation_layer_builder.js`: AnnotationLayerBuilder
- `../../web/app_options.js`: AppOptions, OptionKind
- `../../web/download_manager.js`: DownloadManager
- `../../web/event_utils.js`: EventBus, WaitOnType, waitOnEventOrTimeout
- `../../web/genericl10n.js`: GenericL10n
- `../../web/pdf_find_controller.js`: FindState, PDFFindController
- `../../web/pdf_find_utils.js`: CharacterType, getCharacterType
- `../../web/pdf_history.js`: PDFHistory, isDestArraysEqual, isDestHashesEqual
- `../../web/pdf_link_service.js`: LinkTarget, PDFLinkService, SimpleLinkService
- `../../web/pdf_page_view.js`: PDFPageView
- `../../web/pdf_scripting_manager.component.js`: PDFScriptingManager
- `../../web/pdf_single_page_viewer.js`: PDFSinglePageViewer
- `../../web/pdf_viewer.js`: PDFPageViewBuffer, PDFViewer
- `../../web/struct_tree_layer_builder.js`: StructTreeLayerBuilder
- `../../web/text_layer_builder.js`: TextLayerBuilder
- `../../web/ui_utils.js`: AutoPrintRegExp, ProgressBar, RenderingStates, ScrollMode, SpreadMode, backtrackBeforeAllVisibleElements, binarySearchFirstItem, calcRound, getPageSizeInches, getVisibleElements, isPortraitOrientation, isValidRotation, parseQueryString, removeNullCharacters
- `../../web/xfa_layer_builder.js`: XfaLayerBuilder
- `./test_utils.js`: CMAP_URL, DefaultFileReaderFactory, STANDARD_FONT_DATA_URL, TEST_PDFS_PATH, XRefMock, buildGetDocumentParams, createIdFactory, createTemporaryNodeServer
- `./testreporter.js`: TestReporter
</imports>

Code:
<code>
File:
src/core/decode_stream.js
1 /* Copyright 2012 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 import { BaseStream } from "./base_stream.js";
17 import { Stream } from "./stream.js";
18 
19 // Lots of DecodeStreams are created whose buffers are never used.  For these
20 // we share a single empty buffer. This is (a) space-efficient and (b) avoids
21 // having special cases that would be required if we used |null| for an empty
22 // buffer.
23 const emptyBuffer = new Uint8Array(0);
24 
25 // Super class for the decoding streams.
26 class DecodeStream extends BaseStream {
27   constructor(maybeMinBufferLength) {
28     super();
29     this._rawMinBufferLength = maybeMinBufferLength || 0;
30 
31     this.pos = 0;
32     this.bufferLength = 0;
33     this.eof = false;
34     this.buffer = emptyBuffer;
35     this.minBufferLength = 512;
36     if (maybeMinBufferLength) {
37       // Compute the first power of two that is as big as maybeMinBufferLength.
38       while (this.minBufferLength < maybeMinBufferLength) {
39         this.minBufferLength *= 2;
40       }
41     }
42   }
43 
44   get isEmpty() {
45     while (!this.eof && this.bufferLength === 0) {
46       this.readBlock();
47     }
48     return this.bufferLength === 0;
49   }
50 
51   ensureBuffer(requested) {
52     const buffer = this.buffer;
53     if (requested <= buffer.byteLength) {
54       return buffer;
55     }
56     let size = this.minBufferLength;
57     while (size < requested) {
58       size *= 2;
59     }
60     const buffer2 = new Uint8Array(size);
61     buffer2.set(buffer);
62     return (this.buffer = buffer2);
63   }
64 
65   getByte() {
66     const pos = this.pos;
67     while (this.bufferLength <= pos) {
68       if (this.eof) {
69         return -1;
70       }
71       this.readBlock();
72     }
73     return this.buffer[this.pos++];
74   }
75 
76   getBytes(length, decoderOptions = null) {
77     const pos = this.pos;
78     let end;
79 
80     if (length) {
81       this.ensureBuffer(pos + length);
82       end = pos + length;
83 
84       while (!this.eof && this.bufferLength < end) {
85         this.readBlock(decoderOptions);
86       }
87       const bufEnd = this.bufferLength;
88       if (end > bufEnd) {
89         end = bufEnd;
90       }
91     } else {
92       while (!this.eof) {
93         this.readBlock(decoderOptions);
94       }
95       end = this.bufferLength;
96     }
97 
98     this.pos = end;
99     return this.buffer.subarray(pos, end);
100   }
101 
102   async getImageData(length, decoderOptions = null) {
103     if (!this.canAsyncDecodeImageFromBuffer) {
104       return this.getBytes(length, decoderOptions);
105     }
106     const data = await this.stream.asyncGetBytes();
107     return this.decodeImage(data, decoderOptions);
108   }
109 
110   reset() {
111     this.pos = 0;
112   }
113 
114   makeSubStream(start, length, dict = null) {
115     if (length === undefined) {
116       while (!this.eof) {
117         this.readBlock();
118       }
119     } else {
120       const end = start + length;
121       while (this.bufferLength <= end && !this.eof) {
122         this.readBlock();
123       }
124     }
125     return new Stream(this.buffer, start, length, dict);
126   }
127 
128   getBaseStreams() {
129     return this.str ? this.str.getBaseStreams() : null;
130   }
131 }
132 
133 class StreamsSequenceStream extends DecodeStream {
134   constructor(streams, onError = null) {
135     let maybeLength = 0;
136     for (const stream of streams) {
137       maybeLength +=
138         stream instanceof DecodeStream
139           ? stream._rawMinBufferLength
140           : stream.length;
141     }
142     super(maybeLength);
143 
144     this.streams = streams;
145     this._onError = onError;
146   }
147 
148   readBlock() {
149     const streams = this.streams;
150     if (streams.length === 0) {
151       this.eof = true;
152       return;
153     }
154     const stream = streams.shift();
155     let chunk;
156     try {
157       chunk = stream.getBytes();
158     } catch (reason) {
159       if (this._onError) {
160         this._onError(reason, stream.dict?.objId);
161         return;
162       }
163       throw reason;
164     }
165     const bufferLength = this.bufferLength;
166     const newLength = bufferLength + chunk.length;
167     const buffer = this.ensureBuffer(newLength);
168     buffer.set(chunk, bufferLength);
169     this.bufferLength = newLength;
170   }
171 
172   getBaseStreams() {
173     const baseStreamsBuf = [];
174     for (const stream of this.streams) {
175       const baseStreams = stream.getBaseStreams();
176       if (baseStreams) {
177         baseStreamsBuf.push(...baseStreams);
178       }
179     }
180     return baseStreamsBuf.length > 0 ? baseStreamsBuf : null;
181   }
182 }
183 
184 export { DecodeStream, StreamsSequenceStream };
</code>

Test file:
<test_file>
File:
test/unit/stream_spec.js
/* Copyright 2017 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Dict } from "../../src/core/primitives.js";
import { PredictorStream } from "../../src/core/predictor_stream.js";
import { Stream } from "../../src/core/stream.js";
</test_file>

Your task:
You are a software tester at pdf.js.
1. Examine the existing test file. You may reuse any imports, helpers or setup blocks it already has.
2. Write exactly one javascript test `it("...", async () => {...})` block.
3. Your test must fail on the code before the patch, and pass after, hence the test will verify that the patch resolves the issue.
4. The test must be self-contained and to-the-point.
5. If you need something new use only the provided imports (respect the paths exactly how they are given) by importing dynamically for compatibility with Node.js — no new dependencies. You can use the PDF file for testing as follows:
const { getDocument } = await import('../../src/display/api.js');
const { buildGetDocumentParams } = await import('./test_utils.js');
const loadingTask = getDocument(buildGetDocumentParams('issue18973.pdf'))
6. Return only the javascript code for the new `it(...)` block (no comments or explanations).

Example structure:
it("should <describe behavior>", async () => {
  const { example } = await import("../../src/core/example.js");
  <initialize required variables>;
  <define expected variable>;
  <generate actual variables>;
  <compare expected with actual>;
});


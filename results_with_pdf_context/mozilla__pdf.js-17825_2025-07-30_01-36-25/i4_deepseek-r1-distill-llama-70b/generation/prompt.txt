Before you begin:
- Keep going until the job is completely solved — don’t stop halfway.
- If you’re unsure about the behavior, reread the provided patch carefully; do not hallucinate.
- Plan your approach before writing code by reflecting on whether the test truly fails before and passes after.

Issue:
<issue>
NVDA does not read the Highlight floating button when hovered over with the mouse cursor
</issue>

Patch:
<patch>
diff --git a/src/display/editor/toolbar.js b/src/display/editor/toolbar.js
--- a/src/display/editor/toolbar.js
+++ b/src/display/editor/toolbar.js
@@ -202,7 +202,11 @@ class HighlightToolbar {
     const button = document.createElement("button");
     button.className = "highlightButton";
     button.tabIndex = 0;
-    button.setAttribute("data-l10n-id", `pdfjs-highlight-floating-button`);
+    button.setAttribute("data-l10n-id", `pdfjs-highlight-floating-button1`);
+    const span = document.createElement("span");
+    button.append(span);
+    span.className = "visuallyHidden";
+    span.setAttribute("data-l10n-id", "pdfjs-highlight-floating-button-label");
     button.addEventListener("contextmenu", noContextMenu);
     button.addEventListener("click", () => {
       this.#uiManager.highlightSelection("floating_button");


</patch>

Imports:
<imports>
Available Packages
Dev Dependencies:
- @babel/core: ^7.24.0
- @babel/preset-env: ^7.24.0
- @babel/runtime: ^7.24.0
- @fluent/bundle: ^0.18.0
- @fluent/dom: ^0.9.0
- @jazzer.js/core: ^2.1.0
- autoprefixer: ^10.4.18
- babel-loader: ^9.1.3
- caniuse-lite: ^1.0.30001598
- canvas: ^2.11.2
- core-js: ^3.36.0
- cross-env: ^7.0.3
- eslint: ^8.57.0
- eslint-config-prettier: ^9.1.0
- eslint-plugin-fetch-options: ^0.0.5
- eslint-plugin-html: ^8.0.0
- eslint-plugin-import: ^2.29.1
- eslint-plugin-jasmine: ^4.1.3
- eslint-plugin-json: ^3.1.0
- eslint-plugin-mozilla: ^3.7.1
- eslint-plugin-no-unsanitized: ^4.0.2
- eslint-plugin-prettier: ^5.1.3
- eslint-plugin-sort-exports: ^0.9.1
- eslint-plugin-unicorn: ^51.0.1
- globals: ^14.0.0
- gulp: ^4.0.2
- gulp-cli: ^2.3.0
- gulp-postcss: ^10.0.0
- gulp-rename: ^2.0.0
- gulp-replace: ^1.1.4
- gulp-zip: ^6.0.0
- jasmine: ^5.1.0
- jsdoc: ^4.0.2
- jstransformer-markdown-it: ^3.0.0
- merge-stream: ^2.0.0
- mkdirp: ^3.0.1
- needle: ^3.3.1
- path2d-polyfill: ^2.1.1
- pngjs: ^7.0.0
- postcss: ^8.4.35
- postcss-dark-theme-class: ^1.2.1
- postcss-dir-pseudo-class: ^8.0.1
- postcss-discard-comments: ^6.0.2
- postcss-nesting: ^12.1.0
- prettier: ^3.2.5
- puppeteer: ^22.5.0
- rimraf: ^3.0.2
- streamqueue: ^1.1.2
- stylelint: ^16.2.1
- stylelint-prettier: ^5.0.0
- terser-webpack-plugin: ^5.3.10
- through2: ^4.0.2
- tsc-alias: ^1.8.8
- ttest: ^4.0.0
- typescript: ^5.4.2
- typogr: ^0.6.8
- vinyl: ^3.0.0
- webpack: ^5.90.3
- webpack-stream: ^7.0.0
- wintersmith: ^2.5.0
- yargs: ^17.7.2

Engines:
- node: >=18

Available Relative Imports:
- `../../src/core/annotation.js`: Annotation, AnnotationBorderStyle, AnnotationFactory, MarkupAnnotation, getQuadPoints
- `../../src/core/bidi.js`: bidi
- `../../src/core/cff_parser.js`: CFFCharset, CFFCompiler, CFFFDSelect, CFFParser, CFFStrings
- `../../src/core/cmap.js`: CMap, CMapFactory, IdentityCMap
- `../../src/core/colorspace.js`: ColorSpace
- `../../src/core/core_utils.js`: arrayBuffersToBytes, encodeToXmlString, escapePDFName, escapeString, getInheritableProperty, getSizeInBytes, isAscii, isWhiteSpace, log2, numberToString, parseXFAPath, recoverJsURL, stringToUTF16HexString, stringToUTF16String, toRomanNumerals, validateCSSFont
- `../../src/core/crypto.js`: AES128Cipher, AES256Cipher, ARCFourCipher, CipherTransformFactory, PDF17, PDF20, calculateMD5, calculateSHA256, calculateSHA384, calculateSHA512
- `../../src/core/default_appearance.js`: createDefaultAppearance, parseAppearanceStream, parseDefaultAppearance
- `../../src/core/document.js`: PDFDocument, Page
- `../../src/core/encodings.js`: getEncoding
- `../../src/core/evaluator.js`: PartialEvaluator
- `../../src/core/flate_stream.js`: FlateStream
- `../../src/core/font_substitutions.js`: getFontSubstitution
- `../../src/core/fonts_utils.js`: SEAC_ANALYSIS_ENABLED
- `../../src/core/function.js`: PDFFunctionFactory, PostScriptCompiler, PostScriptEvaluator
- `../../src/core/glyphlist.js`: getDingbatsGlyphsUnicode, getGlyphsUnicode
- `../../src/core/image_utils.js`: GlobalImageCache, LocalColorSpaceCache
- `../../src/core/jbig2.js`: Jbig2Image
- `../../src/core/jpg.js`: JpegImage
- `../../src/core/jpx.js`: JpxImage
- `../../src/core/metadata_parser.js`: MetadataParser
- `../../src/core/operator_list.js`: OperatorList
- `../../src/core/parser.js`: Lexer, Linearization, Parser
- `../../src/core/predictor_stream.js`: PredictorStream
- `../../src/core/primitives.js`: Cmd, Dict, EOF, Name, Ref, RefSet, RefSetCache, isCmd, isDict, isName, isRefsEqual
- `../../src/core/ps_parser.js`: PostScriptLexer, PostScriptParser
- `../../src/core/stream.js`: NullStream, Stream, StringStream
- `../../src/core/type1_parser.js`: Type1Parser
- `../../src/core/unicode.js`: getCharUnicodeCategory, getUnicodeForGlyph, getUnicodeRangeFor, mapSpecialUnicodeValues
- `../../src/core/worker.js`: WorkerMessageHandler, WorkerTask
- `../../src/core/writer.js`: incrementalUpdate, writeDict
- `../../src/core/xfa/bind.js`: Binder
- `../../src/core/xfa/data.js`: DataHandler
- `../../src/core/xfa/factory.js`: XFAFactory
- `../../src/core/xfa/formcalc_lexer.js`: Lexer, TOKEN, Token
- `../../src/core/xfa/formcalc_parser.js`: Errors, Parser
- `../../src/core/xfa/parser.js`: XFAParser
- `../../src/core/xfa/som.js`: searchNode
- `../../src/core/xfa/symbol_utils.js`: $dump, $getChildren, $getChildrenByClass, $getChildrenByName, $text, $uid
- `../../src/core/xml_parser.js`: SimpleXMLParser, XMLParserBase
- `../../src/display/annotation_layer.js`: AnnotationLayer
- `../../src/display/annotation_storage.js`: AnnotationStorage
- `../../src/display/api.js`: DefaultCMapReaderFactory, DefaultCanvasFactory, DefaultStandardFontDataFactory, LoopbackPort, PDFDataRangeTransport, PDFDocumentLoadingTask, PDFDocumentProxy, PDFPageProxy, PDFWorker, PDFWorkerUtil, RenderTask, build, getDocument, version
- `../../src/display/display_utils.js`: DOMCanvasFactory, DOMSVGFactory, PDFDateString, PageViewport, PixelsPerInch, RenderingCancelledException, StatTimer, fetchData, getFilenameFromUrl, getPdfFilenameFromUrl, getXfaPageViewport, isDataScheme, isPdfFile, isValidFetchUrl, noContextMenu, setLayerDimensions
- `../../src/display/draw_layer.js`: DrawLayer
- `../../src/display/editor/annotation_editor_layer.js`: AnnotationEditorLayer
- `../../src/display/editor/color_picker.js`: ColorPicker
- `../../src/display/editor/outliner.js`: Outliner
- `../../src/display/editor/tools.js`: AnnotationEditorUIManager, CommandManager
- `../../src/display/fetch_stream.js`: PDFFetchStream
- `../../src/display/metadata.js`: Metadata
- `../../src/display/network.js`: PDFNetworkStream
- `../../src/display/network_utils.js`: createResponseStatusError, extractFilenameFromHeader, validateRangeRequestCapabilities, validateResponseStatus
- `../../src/display/node_stream.js`: PDFNodeStream
- `../../src/display/text_layer.js`: TextLayerRenderTask, renderTextLayer, updateTextLayer
- `../../src/display/worker_options.js`: GlobalWorkerOptions
- `../../src/display/xfa_layer.js`: XfaLayer
- `../../src/shared/message_handler.js`: MessageHandler
- `../../src/shared/murmurhash3.js`: MurmurHash3_64
- `../../src/shared/util.js`: AbortException, AnnotationBorderStyleType, AnnotationEditorParamsType, AnnotationEditorType, AnnotationFieldFlag, AnnotationFlag, AnnotationMode, AnnotationType, CMapCompressionType, FeatureTest, FormatError, ImageKind, InvalidPDFException, MissingPDFException, OPS, PasswordException, PasswordResponses, PermissionFlag, PromiseCapability, RenderingIntentFlag, UnexpectedResponseException, UnknownErrorException, Util, VerbosityLevel, assert, bytesToString, createValidAbsoluteUrl, getModificationDate, getVerbosityLevel, isNodeJS, normalizeUnicode, objectSize, setVerbosityLevel, shadow, string32, stringToBytes, stringToPDFString, stringToUTF8String
- `../../web/annotation_layer_builder.js`: AnnotationLayerBuilder
- `../../web/app_options.js`: AppOptions, OptionKind
- `../../web/download_manager.js`: DownloadManager
- `../../web/event_utils.js`: EventBus, WaitOnType, waitOnEventOrTimeout
- `../../web/genericl10n.js`: GenericL10n
- `../../web/pdf_find_controller.js`: FindState, PDFFindController
- `../../web/pdf_find_utils.js`: CharacterType, getCharacterType
- `../../web/pdf_history.js`: PDFHistory, isDestArraysEqual, isDestHashesEqual
- `../../web/pdf_link_service.js`: LinkTarget, PDFLinkService, SimpleLinkService
- `../../web/pdf_page_view.js`: PDFPageView
- `../../web/pdf_scripting_manager.component.js`: PDFScriptingManager
- `../../web/pdf_single_page_viewer.js`: PDFSinglePageViewer
- `../../web/pdf_viewer.js`: PDFPageViewBuffer, PDFViewer
- `../../web/struct_tree_layer_builder.js`: StructTreeLayerBuilder
- `../../web/text_layer_builder.js`: TextLayerBuilder
- `../../web/ui_utils.js`: AutoPrintRegExp, ProgressBar, RenderingStates, ScrollMode, SpreadMode, backtrackBeforeAllVisibleElements, binarySearchFirstItem, getPageSizeInches, getVisibleElements, isPortraitOrientation, isValidRotation, parseQueryString, removeNullCharacters
- `../../web/xfa_layer_builder.js`: XfaLayerBuilder
- `./test_utils.js`: CMAP_URL, DefaultFileReaderFactory, STANDARD_FONT_DATA_URL, TEST_PDFS_PATH, XRefMock, buildGetDocumentParams, createIdFactory, createTemporaryNodeServer
- `./testreporter.js`: TestReporter
</imports>

Code:
<code>
File:
src/display/editor/toolbar.js
1 /* Copyright 2023 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 import { noContextMenu } from "../display_utils.js";
17 
18 class EditorToolbar {
19   #toolbar = null;
20 
21   #colorPicker = null;
22 
23   #editor;
24 
25   #buttons = null;
26 
27   constructor(editor) {
28     this.#editor = editor;
29   }
30 
31   render() {
32     const editToolbar = (this.#toolbar = document.createElement("div"));
33     editToolbar.className = "editToolbar";
34     editToolbar.setAttribute("role", "toolbar");
35     editToolbar.addEventListener("contextmenu", noContextMenu);
36     editToolbar.addEventListener("pointerdown", EditorToolbar.#pointerDown);
37 
38     const buttons = (this.#buttons = document.createElement("div"));
39     buttons.className = "buttons";
40     editToolbar.append(buttons);
41 
42     const position = this.#editor.toolbarPosition;
43     if (position) {
44       const { style } = editToolbar;
45       const x =
46         this.#editor._uiManager.direction === "ltr"
47           ? 1 - position[0]
48           : position[0];
49       style.insetInlineEnd = `${100 * x}%`;
50       style.top = `calc(${
51         100 * position[1]
52       }% + var(--editor-toolbar-vert-offset))`;
53     }
54 
55     this.#addDeleteButton();
56 
57     return editToolbar;
58   }
59 
60   static #pointerDown(e) {
61     e.stopPropagation();
62   }
63 
64   #focusIn(e) {
65     this.#editor._focusEventsAllowed = false;
66     e.preventDefault();
67     e.stopPropagation();
68   }
69 
70   #focusOut(e) {
71     this.#editor._focusEventsAllowed = true;
72     e.preventDefault();
73     e.stopPropagation();
74   }
75 
76   #addListenersToElement(element) {
77     // If we're clicking on a button with the keyboard or with
78     // the mouse, we don't want to trigger any focus events on
79     // the editor.
80     element.addEventListener("focusin", this.#focusIn.bind(this), {
81       capture: true,
82     });
83     element.addEventListener("focusout", this.#focusOut.bind(this), {
84       capture: true,
85     });
86     element.addEventListener("contextmenu", noContextMenu);
87   }
88 
89   hide() {
90     this.#toolbar.classList.add("hidden");
91     this.#colorPicker?.hideDropdown();
92   }
93 
94   show() {
95     this.#toolbar.classList.remove("hidden");
96   }
97 
98   #addDeleteButton() {
99     const button = document.createElement("button");
100     button.className = "delete";
101     button.tabIndex = 0;
102     button.setAttribute(
103       "data-l10n-id",
104       `pdfjs-editor-remove-${this.#editor.editorType}-button`
105     );
106     this.#addListenersToElement(button);
107     button.addEventListener("click", e => {
108       this.#editor._uiManager.delete();
109     });
110     this.#buttons.append(button);
111   }
112 
113   get #divider() {
114     const divider = document.createElement("div");
115     divider.className = "divider";
116     return divider;
117   }
118 
119   addAltTextButton(button) {
120     this.#addListenersToElement(button);
121     this.#buttons.prepend(button, this.#divider);
122   }
123 
124   addColorPicker(colorPicker) {
125     this.#colorPicker = colorPicker;
126     const button = colorPicker.renderButton();
127     this.#addListenersToElement(button);
128     this.#buttons.prepend(button, this.#divider);
129   }
130 
131   remove() {
132     this.#toolbar.remove();
133     this.#colorPicker?.destroy();
134     this.#colorPicker = null;
135   }
136 }
137 
138 class HighlightToolbar {
139   #buttons = null;
140 
141   #toolbar = null;
142 
143   #uiManager;
144 
145   constructor(uiManager) {
146     this.#uiManager = uiManager;
147   }
148 
149   #render() {
150     const editToolbar = (this.#toolbar = document.createElement("div"));
151     editToolbar.className = "editToolbar";
152     editToolbar.setAttribute("role", "toolbar");
153     editToolbar.addEventListener("contextmenu", noContextMenu);
154 
155     const buttons = (this.#buttons = document.createElement("div"));
156     buttons.className = "buttons";
157     editToolbar.append(buttons);
158 
159     this.#addHighlightButton();
160 
161     return editToolbar;
162   }
163 
164   #getLastPoint(boxes, isLTR) {
165     let lastY = 0;
166     let lastX = 0;
167     for (const box of boxes) {
168       const y = box.y + box.height;
169       if (y < lastY) {
170         continue;
171       }
172       const x = box.x + (isLTR ? box.width : 0);
173       if (y > lastY) {
174         lastX = x;
175         lastY = y;
176         continue;
177       }
178       if (isLTR) {
179         if (x > lastX) {
180           lastX = x;
181         }
182       } else if (x < lastX) {
183         lastX = x;
184       }
185     }
186     return [isLTR ? 1 - lastX : lastX, lastY];
187   }
188 
189   show(parent, boxes, isLTR) {
190     const [x, y] = this.#getLastPoint(boxes, isLTR);
191     const { style } = (this.#toolbar ||= this.#render());
192     parent.append(this.#toolbar);
193     style.insetInlineEnd = `${100 * x}%`;
194     style.top = `calc(${100 * y}% + var(--editor-toolbar-vert-offset))`;
195   }
196 
197   hide() {
198     this.#toolbar.remove();
199   }
200 
201   #addHighlightButton() {
202     const button = document.createElement("button");
203     button.className = "highlightButton";
204     button.tabIndex = 0;
205     button.setAttribute("data-l10n-id", `pdfjs-highlight-floating-button`);
206     button.addEventListener("contextmenu", noContextMenu);
207     button.addEventListener("click", () => {
208       this.#uiManager.highlightSelection("floating_button");
209     });
210     this.#buttons.append(button);
211   }
212 }
213 
214 export { EditorToolbar, HighlightToolbar };
</code>

Your task:
You are a software tester at pdf.js.
1. Write exactly one javascript test `it("...", async () => {...})` block.
2. Your test must fail on the code before the patch, and pass after, hence the test will verify that the patch resolves the issue.
3. The test must be self-contained and to-the-point.
4. Use only the provided imports (respect the paths exactly how they are given) by importing dynamically for compatibility with Node.js — no new dependencies. 
5. Return only the javascript code (no comments or explanations).

Example structure:
it("should <describe behavior>", async () => {
  const { example } = await import("../../src/core/example.js");
  <initialize required variables>;
  <define expected variable>;
  <generate actual variables>;
  <compare expected with actual>;
});


it("should apply the rotated soft mask transform correctly", async () => {
  const { CanvasGraphics } = await import("../../src/display/canvas.js");
  const expectedMatrix = new DOMMatrix().rotate(45);
  const fakeSuspendedCtx = {
    canvas: { width: 100, height: 100 },
    getTransform() { return expectedMatrix; }
  };
  let recordedMatrix = null;
  const fakeNewCtx = {
    canvas: { width: 100, height: 100 },
    setTransform(matrix) { recordedMatrix = matrix; }
  };
  const dummyCachedCanvases = {
    getCanvas(_id, width, height) {
      return { canvas: { width, height }, context: fakeNewCtx };
    }
  };
  const cg = new CanvasGraphics(
    fakeSuspendedCtx,
    {},
    {},
    {},
    {},
    { optionalContentConfig: {} },
    new Map(),
    {}
  );
  cg.cachedCanvases = dummyCachedCanvases;
  cg.beginSMaskMode();
  expect(recordedMatrix).toEqual(expectedMatrix);
});
Before you begin:
- Keep going until the job is completely solved — don’t stop halfway.
- If you’re unsure about the behavior, reread the provided patch carefully; do not hallucinate.
- Plan your approach before writing code by reflecting on whether the test truly fails before and passes after.

Issue:
<issue>
The seal image in the PDF file is displayed missing
Attach (recommended) or Link to PDF file here:  
[file.pdf](https://github.com/mozilla/pdf.js/files/15269193/file.pdf)



Configuration:
- Web browser and its version:Microsoft Edge  124.0.2478.80
- Operating system and its version: window11   22631.3527
- PDF.js version:  4.2.67
- Is a browser extension:

Steps to reproduce the problem:
1. open the pdf

What is the expected behavior? (add screenshot)
![1](https://github.com/mozilla/pdf.js/assets/51706054/1f1cfd81-70bd-4b0c-ba96-ea7306023918)

What went wrong? (add screenshot)
![2](https://github.com/mozilla/pdf.js/assets/51706054/bcc03eb2-dd28-4b7d-823f-65cea125e794)

Link to a viewer (if hosted on a site other than mozilla.github.io/pdf.js or as Firefox/Chrome extension):

</issue>

PDF File:
<pdf>
issue18058.pdf
</pdf>

Patch:
<patch>
diff --git a/src/display/canvas.js b/src/display/canvas.js
--- a/src/display/canvas.js
+++ b/src/display/canvas.js
@@ -2701,9 +2701,12 @@ class CanvasGraphics {
       } else {
         resetCtxToDefault(this.ctx);
 
+        // Consume a potential path before clipping.
+        this.endPath();
+
         this.ctx.rect(rect[0], rect[1], width, height);
         this.ctx.clip();
-        this.endPath();
+        this.ctx.beginPath();
       }
     }


</patch>

Imports:
<imports>
Available Packages
Dev Dependencies:
- @babel/core: ^7.25.2
- @babel/preset-env: ^7.25.4
- @babel/runtime: ^7.25.6
- @fluent/bundle: ^0.18.0
- @fluent/dom: ^0.10.0
- @jazzer.js/core: ^2.1.0
- @metalsmith/layouts: ^2.7.0
- @metalsmith/markdown: ^1.10.0
- autoprefixer: ^10.4.20
- babel-loader: ^9.1.3
- caniuse-lite: ^1.0.30001658
- canvas: ^2.11.2
- core-js: ^3.38.1
- eslint: ^8.57.0
- eslint-config-prettier: ^9.1.0
- eslint-plugin-fetch-options: ^0.0.5
- eslint-plugin-html: ^8.1.1
- eslint-plugin-import: ^2.30.0
- eslint-plugin-jasmine: ^4.2.1
- eslint-plugin-json: ^3.1.0
- eslint-plugin-no-unsanitized: ^4.1.0
- eslint-plugin-prettier: ^5.2.1
- eslint-plugin-sort-exports: ^0.9.1
- eslint-plugin-unicorn: ^55.0.0
- gulp: ^5.0.0
- gulp-cli: ^3.0.0
- gulp-postcss: ^10.0.0
- gulp-rename: ^2.0.0
- gulp-replace: ^1.1.4
- gulp-zip: ^6.0.0
- highlight.js: ^11.10.0
- jasmine: ^5.3.0
- jsdoc: ^4.0.3
- jstransformer-nunjucks: ^1.2.0
- metalsmith: ^2.6.3
- metalsmith-html-relative: ^2.0.1
- ordered-read-streams: ^2.0.0
- path2d: ^0.2.1
- pngjs: ^7.0.0
- postcss: ^8.4.45
- postcss-dark-theme-class: ^1.3.0
- postcss-dir-pseudo-class: ^9.0.0
- postcss-discard-comments: ^7.0.3
- postcss-nesting: ^13.0.0
- prettier: ^3.3.3
- puppeteer: ^23.3.0
- stylelint: ^16.9.0
- stylelint-prettier: ^5.0.2
- svglint: ^3.0.0
- terser-webpack-plugin: ^5.3.10
- tsc-alias: ^1.8.10
- ttest: ^4.0.0
- typescript: ^5.5.4
- vinyl: ^3.0.0
- webpack: ^5.94.0
- webpack-stream: ^7.0.0
- yargs: ^17.7.2

Engines:
- node: >=18

Available Relative Imports:
- `../../src/core/annotation.js`: Annotation, AnnotationBorderStyle, AnnotationFactory, MarkupAnnotation, getQuadPoints
- `../../src/core/bidi.js`: bidi
- `../../src/core/cff_parser.js`: CFFCharset, CFFCompiler, CFFFDSelect, CFFParser, CFFStrings
- `../../src/core/cmap.js`: CMap, CMapFactory, IdentityCMap
- `../../src/core/colorspace.js`: ColorSpace
- `../../src/core/core_utils.js`: arrayBuffersToBytes, encodeToXmlString, escapePDFName, escapeString, getInheritableProperty, getSizeInBytes, isAscii, isWhiteSpace, log2, numberToString, parseXFAPath, recoverJsURL, stringToUTF16HexString, stringToUTF16String, toRomanNumerals, validateCSSFont
- `../../src/core/crypto.js`: AES128Cipher, AES256Cipher, ARCFourCipher, CipherTransformFactory, PDF17, PDF20, calculateMD5, calculateSHA256, calculateSHA384, calculateSHA512
- `../../src/core/default_appearance.js`: createDefaultAppearance, parseAppearanceStream, parseDefaultAppearance
- `../../src/core/document.js`: PDFDocument, Page
- `../../src/core/encodings.js`: getEncoding
- `../../src/core/evaluator.js`: PartialEvaluator
- `../../src/core/flate_stream.js`: FlateStream
- `../../src/core/font_substitutions.js`: getFontSubstitution
- `../../src/core/fonts_utils.js`: SEAC_ANALYSIS_ENABLED
- `../../src/core/function.js`: PDFFunctionFactory, PostScriptCompiler, PostScriptEvaluator
- `../../src/core/glyphlist.js`: getDingbatsGlyphsUnicode, getGlyphsUnicode
- `../../src/core/image_utils.js`: GlobalImageCache, LocalColorSpaceCache
- `../../src/core/jbig2.js`: Jbig2Error, Jbig2Image
- `../../src/core/jpg.js`: JpegError, JpegImage
- `../../src/core/jpx.js`: JpxError, JpxImage
- `../../src/core/metadata_parser.js`: MetadataParser
- `../../src/core/operator_list.js`: OperatorList
- `../../src/core/parser.js`: Lexer, Linearization, Parser
- `../../src/core/predictor_stream.js`: PredictorStream
- `../../src/core/primitives.js`: Cmd, Dict, EOF, Name, Ref, RefSet, RefSetCache, isCmd, isDict, isName, isRefsEqual
- `../../src/core/ps_parser.js`: PostScriptLexer, PostScriptParser
- `../../src/core/stream.js`: NullStream, Stream, StringStream
- `../../src/core/type1_parser.js`: Type1Parser
- `../../src/core/unicode.js`: getCharUnicodeCategory, getUnicodeForGlyph, getUnicodeRangeFor, mapSpecialUnicodeValues
- `../../src/core/worker.js`: WorkerMessageHandler, WorkerTask
- `../../src/core/writer.js`: incrementalUpdate, writeDict
- `../../src/core/xfa/bind.js`: Binder
- `../../src/core/xfa/data.js`: DataHandler
- `../../src/core/xfa/factory.js`: XFAFactory
- `../../src/core/xfa/formcalc_lexer.js`: Lexer, TOKEN, Token
- `../../src/core/xfa/formcalc_parser.js`: Errors, Parser
- `../../src/core/xfa/parser.js`: XFAParser
- `../../src/core/xfa/som.js`: searchNode
- `../../src/core/xfa/symbol_utils.js`: $dump, $getChildren, $getChildrenByClass, $getChildrenByName, $text, $uid
- `../../src/core/xml_parser.js`: SimpleXMLParser, XMLParserBase
- `../../src/display/annotation_layer.js`: AnnotationLayer
- `../../src/display/annotation_storage.js`: AnnotationStorage
- `../../src/display/api.js`: DefaultCMapReaderFactory, DefaultCanvasFactory, DefaultStandardFontDataFactory, LoopbackPort, PDFDataRangeTransport, PDFDocumentLoadingTask, PDFDocumentProxy, PDFPageProxy, PDFWorker, RenderTask, build, getDocument, version
- `../../src/display/display_utils.js`: DOMCanvasFactory, DOMSVGFactory, PDFDateString, PageViewport, PixelsPerInch, RenderingCancelledException, StatTimer, fetchData, getFilenameFromUrl, getPdfFilenameFromUrl, getXfaPageViewport, isDataScheme, isPdfFile, isValidFetchUrl, noContextMenu, setLayerDimensions
- `../../src/display/draw_layer.js`: DrawLayer
- `../../src/display/editor/annotation_editor_layer.js`: AnnotationEditorLayer
- `../../src/display/editor/color_picker.js`: ColorPicker
- `../../src/display/editor/tools.js`: AnnotationEditorUIManager, CommandManager
- `../../src/display/fetch_stream.js`: PDFFetchStream
- `../../src/display/metadata.js`: Metadata
- `../../src/display/network.js`: PDFNetworkStream
- `../../src/display/network_utils.js`: createHeaders, createResponseStatusError, extractFilenameFromHeader, validateRangeRequestCapabilities, validateResponseStatus
- `../../src/display/node_stream.js`: PDFNodeStream
- `../../src/display/node_utils.js`: NodePackages
- `../../src/display/text_layer.js`: TextLayer
- `../../src/display/worker_options.js`: GlobalWorkerOptions
- `../../src/display/xfa_layer.js`: XfaLayer
- `../../src/shared/message_handler.js`: MessageHandler
- `../../src/shared/murmurhash3.js`: MurmurHash3_64
- `../../src/shared/util.js`: AbortException, AnnotationBorderStyleType, AnnotationEditorParamsType, AnnotationEditorType, AnnotationFieldFlag, AnnotationFlag, AnnotationMode, AnnotationType, BaseException, CMapCompressionType, FeatureTest, FormatError, ImageKind, InvalidPDFException, MissingPDFException, OPS, PasswordException, PasswordResponses, PermissionFlag, RenderingIntentFlag, UnexpectedResponseException, UnknownErrorException, Util, VerbosityLevel, assert, bytesToString, createValidAbsoluteUrl, getModificationDate, getVerbosityLevel, isNodeJS, normalizeUnicode, objectSize, setVerbosityLevel, shadow, string32, stringToBytes, stringToPDFString, stringToUTF8String
- `../../web/annotation_layer_builder.js`: AnnotationLayerBuilder
- `../../web/app_options.js`: AppOptions, OptionKind
- `../../web/download_manager.js`: DownloadManager
- `../../web/event_utils.js`: EventBus, WaitOnType, waitOnEventOrTimeout
- `../../web/genericl10n.js`: GenericL10n
- `../../web/pdf_find_controller.js`: FindState, PDFFindController
- `../../web/pdf_find_utils.js`: CharacterType, getCharacterType
- `../../web/pdf_history.js`: PDFHistory, isDestArraysEqual, isDestHashesEqual
- `../../web/pdf_link_service.js`: LinkTarget, PDFLinkService, SimpleLinkService
- `../../web/pdf_page_view.js`: PDFPageView
- `../../web/pdf_scripting_manager.component.js`: PDFScriptingManager
- `../../web/pdf_single_page_viewer.js`: PDFSinglePageViewer
- `../../web/pdf_viewer.js`: PDFPageViewBuffer, PDFViewer
- `../../web/struct_tree_layer_builder.js`: StructTreeLayerBuilder
- `../../web/text_layer_builder.js`: TextLayerBuilder
- `../../web/ui_utils.js`: AutoPrintRegExp, ProgressBar, RenderingStates, ScrollMode, SpreadMode, backtrackBeforeAllVisibleElements, binarySearchFirstItem, calcRound, getPageSizeInches, getVisibleElements, isPortraitOrientation, isValidRotation, parseQueryString, removeNullCharacters
- `../../web/xfa_layer_builder.js`: XfaLayerBuilder
- `./test_utils.js`: CMAP_URL, DefaultFileReaderFactory, STANDARD_FONT_DATA_URL, TEST_PDFS_PATH, XRefMock, buildGetDocumentParams, createIdFactory, createTemporaryNodeServer
- `./testreporter.js`: TestReporter
</imports>

Code:
<code>
File:
src/display/canvas.js
1 /* Copyright 2012 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 import {
17   FeatureTest,
18   FONT_IDENTITY_MATRIX,
19   IDENTITY_MATRIX,
20   ImageKind,
21   info,
22   isNodeJS,
23   OPS,
24   shadow,
25   TextRenderingMode,
26   unreachable,
27   Util,
28   warn,
29 } from "../shared/util.js";
30 import {
31   getCurrentTransform,
32   getCurrentTransformInverse,
33   PixelsPerInch,
34 } from "./display_utils.js";
35 import {
36   getShadingPattern,
37   PathType,
38   TilingPattern,
39 } from "./pattern_helper.js";
40 import { convertBlackAndWhiteToRGBA } from "../shared/image_utils.js";
41 
42 // <canvas> contexts store most of the state we need natively.
43 // However, PDF needs a bit more state, which we store here.
44 // Minimal font size that would be used during canvas fillText operations.
45 const MIN_FONT_SIZE = 16;
46 // Maximum font size that would be used during canvas fillText operations.
47 const MAX_FONT_SIZE = 100;
48 
49 // Defines the time the `executeOperatorList`-method is going to be executing
50 // before it stops and schedules a continue of execution.
51 const EXECUTION_TIME = 15; // ms
52 // Defines the number of steps before checking the execution time.
53 const EXECUTION_STEPS = 10;
54 
55 // To disable Type3 compilation, set the value to `-1`.
56 const MAX_SIZE_TO_COMPILE = 1000;
57 
58 const FULL_CHUNK_HEIGHT = 16;
59 
60 /**
61  * Overrides certain methods on a 2d ctx so that when they are called they
62  * will also call the same method on the destCtx. The methods that are
63  * overridden are all the transformation state modifiers, path creation, and
64  * save/restore. We only forward these specific methods because they are the
65  * only state modifiers that we cannot copy over when we switch contexts.
66  *
67  * To remove mirroring call `ctx._removeMirroring()`.
68  *
69  * @param {Object} ctx - The 2d canvas context that will duplicate its calls on
70  *   the destCtx.
71  * @param {Object} destCtx - The 2d canvas context that will receive the
72  *   forwarded calls.
73  */
74 function mirrorContextOperations(ctx, destCtx) {
75   if (ctx._removeMirroring) {
76     throw new Error("Context is already forwarding operations.");
77   }
78   ctx.__originalSave = ctx.save;
79   ctx.__originalRestore = ctx.restore;
80   ctx.__originalRotate = ctx.rotate;
81   ctx.__originalScale = ctx.scale;
82   ctx.__originalTranslate = ctx.translate;
83   ctx.__originalTransform = ctx.transform;
84   ctx.__originalSetTransform = ctx.setTransform;
85   ctx.__originalResetTransform = ctx.resetTransform;
86   ctx.__originalClip = ctx.clip;
87   ctx.__originalMoveTo = ctx.moveTo;
88   ctx.__originalLineTo = ctx.lineTo;
89   ctx.__originalBezierCurveTo = ctx.bezierCurveTo;
90   ctx.__originalRect = ctx.rect;
91   ctx.__originalClosePath = ctx.closePath;
92   ctx.__originalBeginPath = ctx.beginPath;
93 
94   ctx._removeMirroring = () => {
95     ctx.save = ctx.__originalSave;
96     ctx.restore = ctx.__originalRestore;
97     ctx.rotate = ctx.__originalRotate;
98     ctx.scale = ctx.__originalScale;
99     ctx.translate = ctx.__originalTranslate;
100     ctx.transform = ctx.__originalTransform;
101     ctx.setTransform = ctx.__originalSetTransform;
102     ctx.resetTransform = ctx.__originalResetTransform;
103 
104     ctx.clip = ctx.__originalClip;
105     ctx.moveTo = ctx.__originalMoveTo;
106     ctx.lineTo = ctx.__originalLineTo;
107     ctx.bezierCurveTo = ctx.__originalBezierCurveTo;
108     ctx.rect = ctx.__originalRect;
109     ctx.closePath = ctx.__originalClosePath;
110     ctx.beginPath = ctx.__originalBeginPath;
111     delete ctx._removeMirroring;
112   };
113 
114   ctx.save = function ctxSave() {
115     destCtx.save();
116     this.__originalSave();
117   };
118 
119   ctx.restore = function ctxRestore() {
120     destCtx.restore();
121     this.__originalRestore();
122   };
123 
124   ctx.translate = function ctxTranslate(x, y) {
125     destCtx.translate(x, y);
126     this.__originalTranslate(x, y);
127   };
128 
129   ctx.scale = function ctxScale(x, y) {
130     destCtx.scale(x, y);
131     this.__originalScale(x, y);
132   };
133 
134   ctx.transform = function ctxTransform(a, b, c, d, e, f) {
135     destCtx.transform(a, b, c, d, e, f);
136     this.__originalTransform(a, b, c, d, e, f);
137   };
138 
139   ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {
140     destCtx.setTransform(a, b, c, d, e, f);
141     this.__originalSetTransform(a, b, c, d, e, f);
142   };
143 
144   ctx.resetTransform = function ctxResetTransform() {
145     destCtx.resetTransform();
146     this.__originalResetTransform();
147   };
148 
149   ctx.rotate = function ctxRotate(angle) {
150     destCtx.rotate(angle);
151     this.__originalRotate(angle);
152   };
153 
154   ctx.clip = function ctxRotate(rule) {
155     destCtx.clip(rule);
156     this.__originalClip(rule);
157   };
158 
159   ctx.moveTo = function (x, y) {
160     destCtx.moveTo(x, y);
161     this.__originalMoveTo(x, y);
162   };
163 
164   ctx.lineTo = function (x, y) {
165     destCtx.lineTo(x, y);
166     this.__originalLineTo(x, y);
167   };
168 
169   ctx.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {
170     destCtx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
171     this.__originalBezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);
172   };
173 
174   ctx.rect = function (x, y, width, height) {
175     destCtx.rect(x, y, width, height);
176     this.__originalRect(x, y, width, height);
177   };
178 
179   ctx.closePath = function () {
180     destCtx.closePath();
181     this.__originalClosePath();
182   };
183 
184   ctx.beginPath = function () {
185     destCtx.beginPath();
186     this.__originalBeginPath();
187   };
188 }
189 
190 class CachedCanvases {
191   constructor(canvasFactory) {
192     this.canvasFactory = canvasFactory;
193     this.cache = Object.create(null);
194   }
195 
196   getCanvas(id, width, height) {
197     let canvasEntry;
198     if (this.cache[id] !== undefined) {
199       canvasEntry = this.cache[id];
200       this.canvasFactory.reset(canvasEntry, width, height);
201     } else {
202       canvasEntry = this.canvasFactory.create(width, height);
203       this.cache[id] = canvasEntry;
204     }
205     return canvasEntry;
206   }
207 
208   delete(id) {
209     delete this.cache[id];
210   }
211 
212   clear() {
213     for (const id in this.cache) {
214       const canvasEntry = this.cache[id];
215       this.canvasFactory.destroy(canvasEntry);
216       delete this.cache[id];
217     }
218   }
219 }
220 
221 function drawImageAtIntegerCoords(
222   ctx,
223   srcImg,
224   srcX,
225   srcY,
226   srcW,
227   srcH,
228   destX,
229   destY,
230   destW,
231   destH
232 ) {
233   const [a, b, c, d, tx, ty] = getCurrentTransform(ctx);
234   if (b === 0 && c === 0) {
235     // top-left corner is at (X, Y) and
236     // bottom-right one is at (X + width, Y + height).
237 
238     // If leftX is 4.321 then it's rounded to 4.
239     // If width is 10.432 then it's rounded to 11 because
240     // rightX = leftX + width = 14.753 which is rounded to 15
241     // so after rounding the total width is 11 (15 - 4).
242     // It's why we can't just floor/ceil uniformly, it just depends
243     // on the values we've.
244 
245     const tlX = destX * a + tx;
246     const rTlX = Math.round(tlX);
247     const tlY = destY * d + ty;
248     const rTlY = Math.round(tlY);
249     const brX = (destX + destW) * a + tx;
250 
251     // Some pdf contains images with 1x1 images so in case of 0-width after
252     // scaling we must fallback on 1 to be sure there is something.
253     const rWidth = Math.abs(Math.round(brX) - rTlX) || 1;
254     const brY = (destY + destH) * d + ty;
255     const rHeight = Math.abs(Math.round(brY) - rTlY) || 1;
256 
257     // We must apply a transformation in order to apply it on the image itself.
258     // For example if a == 1 && d == -1, it means that the image itself is
259     // mirrored w.r.t. the x-axis.
260     ctx.setTransform(Math.sign(a), 0, 0, Math.sign(d), rTlX, rTlY);
261     ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, 0, 0, rWidth, rHeight);
262     ctx.setTransform(a, b, c, d, tx, ty);
263 
264     return [rWidth, rHeight];
265   }
266 
267   if (a === 0 && d === 0) {
268     // This path is taken in issue9462.pdf (page 3).
269     const tlX = destY * c + tx;
270     const rTlX = Math.round(tlX);
271     const tlY = destX * b + ty;
272     const rTlY = Math.round(tlY);
273     const brX = (destY + destH) * c + tx;
274     const rWidth = Math.abs(Math.round(brX) - rTlX) || 1;
275     const brY = (destX + destW) * b + ty;
276     const rHeight = Math.abs(Math.round(brY) - rTlY) || 1;
277 
278     ctx.setTransform(0, Math.sign(b), Math.sign(c), 0, rTlX, rTlY);
279     ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, 0, 0, rHeight, rWidth);
280     ctx.setTransform(a, b, c, d, tx, ty);
281 
282     return [rHeight, rWidth];
283   }
284 
285   // Not a scale matrix so let the render handle the case without rounding.
286   ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, destX, destY, destW, destH);
287 
288   const scaleX = Math.hypot(a, b);
289   const scaleY = Math.hypot(c, d);
290   return [scaleX * destW, scaleY * destH];
291 }
292 
293 function compileType3Glyph(imgData) {
294   const { width, height } = imgData;
295   if (width > MAX_SIZE_TO_COMPILE || height > MAX_SIZE_TO_COMPILE) {
296     return null;
297   }
298 
299   const POINT_TO_PROCESS_LIMIT = 1000;
300   const POINT_TYPES = new Uint8Array([
301     0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0,
302   ]);
303 
304   const width1 = width + 1;
305   let points = new Uint8Array(width1 * (height + 1));
306   let i, j, j0;
307 
308   // decodes bit-packed mask data
309   const lineSize = (width + 7) & ~7;
310   let data = new Uint8Array(lineSize * height),
311     pos = 0;
312   for (const elem of imgData.data) {
313     let mask = 128;
314     while (mask > 0) {
315       data[pos++] = elem & mask ? 0 : 255;
316       mask >>= 1;
317     }
318   }
319 
320   // finding interesting points: every point is located between mask pixels,
321   // so there will be points of the (width + 1)x(height + 1) grid. Every point
322   // will have flags assigned based on neighboring mask pixels:
323   //   4 | 8
324   //   --P--
325   //   2 | 1
326   // We are interested only in points with the flags:
327   //   - outside corners: 1, 2, 4, 8;
328   //   - inside corners: 7, 11, 13, 14;
329   //   - and, intersections: 5, 10.
330   let count = 0;
331   pos = 0;
332   if (data[pos] !== 0) {
333     points[0] = 1;
334     ++count;
335   }
336   for (j = 1; j < width; j++) {
337     if (data[pos] !== data[pos + 1]) {
338       points[j] = data[pos] ? 2 : 1;
339       ++count;
340     }
341     pos++;
342   }
343   if (data[pos] !== 0) {
344     points[j] = 2;
345     ++count;
346   }
347   for (i = 1; i < height; i++) {
348     pos = i * lineSize;
349     j0 = i * width1;
350     if (data[pos - lineSize] !== data[pos]) {
351       points[j0] = data[pos] ? 1 : 8;
352       ++count;
353     }
354     // 'sum' is the position of the current pixel configuration in the 'TYPES'
355     // array (in order 8-1-2-4, so we can use '>>2' to shift the column).
356     let sum = (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);
357     for (j = 1; j < width; j++) {
358       sum =
359         (sum >> 2) +
360         (data[pos + 1] ? 4 : 0) +
361         (data[pos - lineSize + 1] ? 8 : 0);
362       if (POINT_TYPES[sum]) {
363         points[j0 + j] = POINT_TYPES[sum];
364         ++count;
365       }
366       pos++;
367     }
368     if (data[pos - lineSize] !== data[pos]) {
369       points[j0 + j] = data[pos] ? 2 : 4;
370       ++count;
371     }
372 
373     if (count > POINT_TO_PROCESS_LIMIT) {
374       return null;
375     }
376   }
377 
378   pos = lineSize * (height - 1);
379   j0 = i * width1;
380   if (data[pos] !== 0) {
381     points[j0] = 8;
382     ++count;
383   }
384   for (j = 1; j < width; j++) {
385     if (data[pos] !== data[pos + 1]) {
386       points[j0 + j] = data[pos] ? 4 : 8;
387       ++count;
388     }
389     pos++;
390   }
391   if (data[pos] !== 0) {
392     points[j0 + j] = 4;
393     ++count;
394   }
395   if (count > POINT_TO_PROCESS_LIMIT) {
396     return null;
397   }
398 
399   // building outlines
400   const steps = new Int32Array([0, width1, -1, 0, -width1, 0, 0, 0, 1]);
401   const path = new Path2D();
402 
403   for (i = 0; count && i <= height; i++) {
404     let p = i * width1;
405     const end = p + width;
406     while (p < end && !points[p]) {
407       p++;
408     }
409     if (p === end) {
410       continue;
411     }
412     path.moveTo(p % width1, i);
413 
414     const p0 = p;
415     let type = points[p];
416     do {
417       const step = steps[type];
418       do {
419         p += step;
420       } while (!points[p]);
421 
422       const pp = points[p];
423       if (pp !== 5 && pp !== 10) {
424         // set new direction
425         type = pp;
426         // delete mark
427         points[p] = 0;
428       } else {
429         // type is 5 or 10, ie, a crossing
430         // set new direction
431         type = pp & ((0x33 * type) >> 4);
432         // set new type for "future hit"
433         points[p] &= (type >> 2) | (type << 2);
434       }
435       path.lineTo(p % width1, (p / width1) | 0);
436 
437       if (!points[p]) {
438         --count;
439       }
440     } while (p0 !== p);
441     --i;
442   }
443 
444   // Immediately release the, potentially large, `Uint8Array`s after parsing.
445   data = null;
446   points = null;
447 
448   const drawOutline = function (c) {
449     c.save();
450     // the path shall be painted in [0..1]x[0..1] space
451     c.scale(1 / width, -1 / height);
452     c.translate(0, -height);
453     c.fill(path);
454     c.beginPath();
455     c.restore();
456   };
457 
458   return drawOutline;
459 }
460 
461 class CanvasExtraState {
462   constructor(width, height) {
463     // Are soft masks and alpha values shapes or opacities?
464     this.alphaIsShape = false;
465     this.fontSize = 0;
466     this.fontSizeScale = 1;
467     this.textMatrix = IDENTITY_MATRIX;
468     this.textMatrixScale = 1;
469     this.fontMatrix = FONT_IDENTITY_MATRIX;
470     this.leading = 0;
471     // Current point (in user coordinates)
472     this.x = 0;
473     this.y = 0;
474     // Start of text line (in text coordinates)
475     this.lineX = 0;
476     this.lineY = 0;
477     // Character and word spacing
478     this.charSpacing = 0;
479     this.wordSpacing = 0;
480     this.textHScale = 1;
481     this.textRenderingMode = TextRenderingMode.FILL;
482     this.textRise = 0;
483     // Default fore and background colors
484     this.fillColor = "#000000";
485     this.strokeColor = "#000000";
486     this.patternFill = false;
487     // Note: fill alpha applies to all non-stroking operations
488     this.fillAlpha = 1;
489     this.strokeAlpha = 1;
490     this.lineWidth = 1;
491     this.activeSMask = null;
492     this.transferMaps = "none";
493 
494     this.startNewPathAndClipBox([0, 0, width, height]);
495   }
496 
497   clone() {
498     const clone = Object.create(this);
499     clone.clipBox = this.clipBox.slice();
500     return clone;
501   }
502 
503   setCurrentPoint(x, y) {
504     this.x = x;
505     this.y = y;
506   }
507 
508   updatePathMinMax(transform, x, y) {
509     [x, y] = Util.applyTransform([x, y], transform);
510     this.minX = Math.min(this.minX, x);
511     this.minY = Math.min(this.minY, y);
512     this.maxX = Math.max(this.maxX, x);
513     this.maxY = Math.max(this.maxY, y);
514   }
515 
516   updateRectMinMax(transform, rect) {
517     const p1 = Util.applyTransform(rect, transform);
518     const p2 = Util.applyTransform(rect.slice(2), transform);
519     const p3 = Util.applyTransform([rect[0], rect[3]], transform);
520     const p4 = Util.applyTransform([rect[2], rect[1]], transform);
521 
522     this.minX = Math.min(this.minX, p1[0], p2[0], p3[0], p4[0]);
523     this.minY = Math.min(this.minY, p1[1], p2[1], p3[1], p4[1]);
524     this.maxX = Math.max(this.maxX, p1[0], p2[0], p3[0], p4[0]);
525     this.maxY = Math.max(this.maxY, p1[1], p2[1], p3[1], p4[1]);
526   }
527 
528   updateScalingPathMinMax(transform, minMax) {
529     Util.scaleMinMax(transform, minMax);
530     this.minX = Math.min(this.minX, minMax[0]);
531     this.minY = Math.min(this.minY, minMax[1]);
532     this.maxX = Math.max(this.maxX, minMax[2]);
533     this.maxY = Math.max(this.maxY, minMax[3]);
534   }
535 
536   updateCurvePathMinMax(transform, x0, y0, x1, y1, x2, y2, x3, y3, minMax) {
537     const box = Util.bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3, minMax);
538     if (minMax) {
539       return;
540     }
541     this.updateRectMinMax(transform, box);
542   }
543 
544   getPathBoundingBox(pathType = PathType.FILL, transform = null) {
545     const box = [this.minX, this.minY, this.maxX, this.maxY];
546     if (pathType === PathType.STROKE) {
547       if (!transform) {
548         unreachable("Stroke bounding box must include transform.");
549       }
550       // Stroked paths can be outside of the path bounding box by 1/2 the line
551       // width.
552       const scale = Util.singularValueDecompose2dScale(transform);
553       const xStrokePad = (scale[0] * this.lineWidth) / 2;
554       const yStrokePad = (scale[1] * this.lineWidth) / 2;
555       box[0] -= xStrokePad;
556       box[1] -= yStrokePad;
557       box[2] += xStrokePad;
558       box[3] += yStrokePad;
559     }
560     return box;
561   }
562 
563   updateClipFromPath() {
564     const intersect = Util.intersect(this.clipBox, this.getPathBoundingBox());
565     this.startNewPathAndClipBox(intersect || [0, 0, 0, 0]);
566   }
567 
568   isEmptyClip() {
569     return this.minX === Infinity;
570   }
571 
572   startNewPathAndClipBox(box) {
573     this.clipBox = box;
574     this.minX = Infinity;
575     this.minY = Infinity;
576     this.maxX = 0;
577     this.maxY = 0;
578   }
579 
580   getClippedPathBoundingBox(pathType = PathType.FILL, transform = null) {
581     return Util.intersect(
582       this.clipBox,
583       this.getPathBoundingBox(pathType, transform)
584     );
585   }
586 }
587 
588 function putBinaryImageData(ctx, imgData) {
589   if (typeof ImageData !== "undefined" && imgData instanceof ImageData) {
590     ctx.putImageData(imgData, 0, 0);
591     return;
592   }
593 
594   // Put the image data to the canvas in chunks, rather than putting the
595   // whole image at once.  This saves JS memory, because the ImageData object
596   // is smaller. It also possibly saves C++ memory within the implementation
597   // of putImageData(). (E.g. in Firefox we make two short-lived copies of
598   // the data passed to putImageData()). |n| shouldn't be too small, however,
599   // because too many putImageData() calls will slow things down.
600   //
601   // Note: as written, if the last chunk is partial, the putImageData() call
602   // will (conceptually) put pixels past the bounds of the canvas.  But
603   // that's ok; any such pixels are ignored.
604 
605   const height = imgData.height,
606     width = imgData.width;
607   const partialChunkHeight = height % FULL_CHUNK_HEIGHT;
608   const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;
609   const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;
610 
611   const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);
612   let srcPos = 0,
613     destPos;
614   const src = imgData.data;
615   const dest = chunkImgData.data;
616   let i, j, thisChunkHeight, elemsInThisChunk;
617 
618   // There are multiple forms in which the pixel data can be passed, and
619   // imgData.kind tells us which one this is.
620   if (imgData.kind === ImageKind.GRAYSCALE_1BPP) {
621     // Grayscale, 1 bit per pixel (i.e. black-and-white).
622     const srcLength = src.byteLength;
623     const dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);
624     const dest32DataLength = dest32.length;
625     const fullSrcDiff = (width + 7) >> 3;
626     const white = 0xffffffff;
627     const black = FeatureTest.isLittleEndian ? 0xff000000 : 0x000000ff;
628 
629     for (i = 0; i < totalChunks; i++) {
630       thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;
631       destPos = 0;
632       for (j = 0; j < thisChunkHeight; j++) {
633         const srcDiff = srcLength - srcPos;
634         let k = 0;
635         const kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;
636         const kEndUnrolled = kEnd & ~7;
637         let mask = 0;
638         let srcByte = 0;
639         for (; k < kEndUnrolled; k += 8) {
640           srcByte = src[srcPos++];
641           dest32[destPos++] = srcByte & 128 ? white : black;
642           dest32[destPos++] = srcByte & 64 ? white : black;
643           dest32[destPos++] = srcByte & 32 ? white : black;
644           dest32[destPos++] = srcByte & 16 ? white : black;
645           dest32[destPos++] = srcByte & 8 ? white : black;
646           dest32[destPos++] = srcByte & 4 ? white : black;
647           dest32[destPos++] = srcByte & 2 ? white : black;
648           dest32[destPos++] = srcByte & 1 ? white : black;
649         }
650         for (; k < kEnd; k++) {
651           if (mask === 0) {
652             srcByte = src[srcPos++];
653             mask = 128;
654           }
655 
656           dest32[destPos++] = srcByte & mask ? white : black;
657           mask >>= 1;
658         }
659       }
660       // We ran out of input. Make all remaining pixels transparent.
661       while (destPos < dest32DataLength) {
662         dest32[destPos++] = 0;
663       }
664 
665       ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
666     }
667   } else if (imgData.kind === ImageKind.RGBA_32BPP) {
668     // RGBA, 32-bits per pixel.
669     j = 0;
670     elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;
671     for (i = 0; i < fullChunks; i++) {
672       dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));
673       srcPos += elemsInThisChunk;
674 
675       ctx.putImageData(chunkImgData, 0, j);
676       j += FULL_CHUNK_HEIGHT;
677     }
678     if (i < totalChunks) {
679       elemsInThisChunk = width * partialChunkHeight * 4;
680       dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));
681 
682       ctx.putImageData(chunkImgData, 0, j);
683     }
684   } else if (imgData.kind === ImageKind.RGB_24BPP) {
685     // RGB, 24-bits per pixel.
686     thisChunkHeight = FULL_CHUNK_HEIGHT;
687     elemsInThisChunk = width * thisChunkHeight;
688     for (i = 0; i < totalChunks; i++) {
689       if (i >= fullChunks) {
690         thisChunkHeight = partialChunkHeight;
691         elemsInThisChunk = width * thisChunkHeight;
692       }
693 
694       destPos = 0;
695       for (j = elemsInThisChunk; j--; ) {
696         dest[destPos++] = src[srcPos++];
697         dest[destPos++] = src[srcPos++];
698         dest[destPos++] = src[srcPos++];
699         dest[destPos++] = 255;
700       }
701 
702       ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
703     }
704   } else {
705     throw new Error(`bad image kind: ${imgData.kind}`);
706   }
707 }
708 
709 function putBinaryImageMask(ctx, imgData) {
710   if (imgData.bitmap) {
711     // The bitmap has been created in the worker.
712     ctx.drawImage(imgData.bitmap, 0, 0);
713     return;
714   }
715 
716   // Slow path: OffscreenCanvas isn't available in the worker.
717   const height = imgData.height,
718     width = imgData.width;
719   const partialChunkHeight = height % FULL_CHUNK_HEIGHT;
720   const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;
721   const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;
722 
723   const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);
724   let srcPos = 0;
725   const src = imgData.data;
726   const dest = chunkImgData.data;
727 
728   for (let i = 0; i < totalChunks; i++) {
729     const thisChunkHeight =
730       i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;
731 
732     // Expand the mask so it can be used by the canvas.  Any required
733     // inversion has already been handled.
734 
735     ({ srcPos } = convertBlackAndWhiteToRGBA({
736       src,
737       srcPos,
738       dest,
739       width,
740       height: thisChunkHeight,
741       nonBlackColor: 0,
742     }));
743 
744     ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);
745   }
746 }
747 
748 function copyCtxState(sourceCtx, destCtx) {
749   const properties = [
750     "strokeStyle",
751     "fillStyle",
752     "fillRule",
753     "globalAlpha",
754     "lineWidth",
755     "lineCap",
756     "lineJoin",
757     "miterLimit",
758     "globalCompositeOperation",
759     "font",
760     "filter",
761   ];
762   for (const property of properties) {
763     if (sourceCtx[property] !== undefined) {
764       destCtx[property] = sourceCtx[property];
765     }
766   }
767   if (sourceCtx.setLineDash !== undefined) {
768     destCtx.setLineDash(sourceCtx.getLineDash());
769     destCtx.lineDashOffset = sourceCtx.lineDashOffset;
770   }
771 }
772 
773 function resetCtxToDefault(ctx) {
774   ctx.strokeStyle = ctx.fillStyle = "#000000";
775   ctx.fillRule = "nonzero";
776   ctx.globalAlpha = 1;
777   ctx.lineWidth = 1;
778   ctx.lineCap = "butt";
779   ctx.lineJoin = "miter";
780   ctx.miterLimit = 10;
781   ctx.globalCompositeOperation = "source-over";
782   ctx.font = "10px sans-serif";
783   if (ctx.setLineDash !== undefined) {
784     ctx.setLineDash([]);
785     ctx.lineDashOffset = 0;
786   }
787   if (
788     (typeof PDFJSDev !== "undefined" && PDFJSDev.test("MOZCENTRAL")) ||
789     !isNodeJS
790   ) {
791     const { filter } = ctx;
792     if (filter !== "none" && filter !== "") {
793       ctx.filter = "none";
794     }
795   }
796 }
797 
798 function getImageSmoothingEnabled(transform, interpolate) {
799   // In section 8.9.5.3 of the PDF spec, it's mentioned that the interpolate
800   // flag should be used when the image is upscaled.
801   // In Firefox, smoothing is always used when downscaling images (bug 1360415).
802 
803   if (interpolate) {
804     return true;
805   }
806 
807   const scale = Util.singularValueDecompose2dScale(transform);
808   // Round to a 32bit float so that `<=` check below will pass for numbers that
809   // are very close, but not exactly the same 64bit floats.
810   scale[0] = Math.fround(scale[0]);
811   scale[1] = Math.fround(scale[1]);
812   const actualScale = Math.fround(
813     (globalThis.devicePixelRatio || 1) * PixelsPerInch.PDF_TO_CSS_UNITS
814   );
815   return scale[0] <= actualScale && scale[1] <= actualScale;
816 }
817 
818 const LINE_CAP_STYLES = ["butt", "round", "square"];
819 const LINE_JOIN_STYLES = ["miter", "round", "bevel"];
820 const NORMAL_CLIP = {};
821 const EO_CLIP = {};
822 
823 class CanvasGraphics {
824   constructor(
825     canvasCtx,
826     commonObjs,
827     objs,
828     canvasFactory,
829     filterFactory,
830     { optionalContentConfig, markedContentStack = null },
831     annotationCanvasMap,
832     pageColors
833   ) {
834     this.ctx = canvasCtx;
835     this.current = new CanvasExtraState(
836       this.ctx.canvas.width,
837       this.ctx.canvas.height
838     );
839     this.stateStack = [];
840     this.pendingClip = null;
841     this.pendingEOFill = false;
842     this.res = null;
843     this.xobjs = null;
844     this.commonObjs = commonObjs;
845     this.objs = objs;
846     this.canvasFactory = canvasFactory;
847     this.filterFactory = filterFactory;
848     this.groupStack = [];
849     this.processingType3 = null;
850     // Patterns are painted relative to the initial page/form transform, see
851     // PDF spec 8.7.2 NOTE 1.
852     this.baseTransform = null;
853     this.baseTransformStack = [];
854     this.groupLevel = 0;
855     this.smaskStack = [];
856     this.smaskCounter = 0;
857     this.tempSMask = null;
858     this.suspendedCtx = null;
859     this.contentVisible = true;
860     this.markedContentStack = markedContentStack || [];
861     this.optionalContentConfig = optionalContentConfig;
862     this.cachedCanvases = new CachedCanvases(this.canvasFactory);
863     this.cachedPatterns = new Map();
864     this.annotationCanvasMap = annotationCanvasMap;
865     this.viewportScale = 1;
866     this.outputScaleX = 1;
867     this.outputScaleY = 1;
868     this.pageColors = pageColors;
869 
870     this._cachedScaleForStroking = [-1, 0];
871     this._cachedGetSinglePixelWidth = null;
872     this._cachedBitmapsMap = new Map();
873   }
874 
875   getObject(data, fallback = null) {
876     if (typeof data === "string") {
877       return data.startsWith("g_")
878         ? this.commonObjs.get(data)
879         : this.objs.get(data);
880     }
881     return fallback;
882   }
883 
884   beginDrawing({
885     transform,
886     viewport,
887     transparency = false,
888     background = null,
889   }) {
890     // For pdfs that use blend modes we have to clear the canvas else certain
891     // blend modes can look wrong since we'd be blending with a white
892     // backdrop. The problem with a transparent backdrop though is we then
893     // don't get sub pixel anti aliasing on text, creating temporary
894     // transparent canvas when we have blend modes.
895     const width = this.ctx.canvas.width;
896     const height = this.ctx.canvas.height;
897 
898     const savedFillStyle = this.ctx.fillStyle;
899     this.ctx.fillStyle = background || "#ffffff";
900     this.ctx.fillRect(0, 0, width, height);
901     this.ctx.fillStyle = savedFillStyle;
902 
903     if (transparency) {
904       const transparentCanvas = this.cachedCanvases.getCanvas(
905         "transparent",
906         width,
907         height
908       );
909       this.compositeCtx = this.ctx;
910       this.transparentCanvas = transparentCanvas.canvas;
911       this.ctx = transparentCanvas.context;
912       this.ctx.save();
913       // The transform can be applied before rendering, transferring it to
914       // the new canvas.
915       this.ctx.transform(...getCurrentTransform(this.compositeCtx));
916     }
917 
918     this.ctx.save();
919     resetCtxToDefault(this.ctx);
920     if (transform) {
921       this.ctx.transform(...transform);
922       this.outputScaleX = transform[0];
923       this.outputScaleY = transform[0];
924     }
925     this.ctx.transform(...viewport.transform);
926     this.viewportScale = viewport.scale;
927 
928     this.baseTransform = getCurrentTransform(this.ctx);
929   }
930 
931   executeOperatorList(
932     operatorList,
933     executionStartIdx,
934     continueCallback,
935     stepper
936   ) {
937     const argsArray = operatorList.argsArray;
938     const fnArray = operatorList.fnArray;
939     let i = executionStartIdx || 0;
940     const argsArrayLen = argsArray.length;
941 
942     // Sometimes the OperatorList to execute is empty.
943     if (argsArrayLen === i) {
944       return i;
945     }
946 
947     const chunkOperations =
948       argsArrayLen - i > EXECUTION_STEPS &&
949       typeof continueCallback === "function";
950     const endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;
951     let steps = 0;
952 
953     const commonObjs = this.commonObjs;
954     const objs = this.objs;
955     let fnId;
956 
957     while (true) {
958       if (stepper !== undefined && i === stepper.nextBreakPoint) {
959         stepper.breakIt(i, continueCallback);
960         return i;
961       }
962 
963       fnId = fnArray[i];
964 
965       if (fnId !== OPS.dependency) {
966         // eslint-disable-next-line prefer-spread
967         this[fnId].apply(this, argsArray[i]);
968       } else {
969         for (const depObjId of argsArray[i]) {
970           const objsPool = depObjId.startsWith("g_") ? commonObjs : objs;
971 
972           // If the promise isn't resolved yet, add the continueCallback
973           // to the promise and bail out.
974           if (!objsPool.has(depObjId)) {
975             objsPool.get(depObjId, continueCallback);
976             return i;
977           }
978         }
979       }
980 
981       i++;
982 
983       // If the entire operatorList was executed, stop as were done.
984       if (i === argsArrayLen) {
985         return i;
986       }
987 
988       // If the execution took longer then a certain amount of time and
989       // `continueCallback` is specified, interrupt the execution.
990       if (chunkOperations && ++steps > EXECUTION_STEPS) {
991         if (Date.now() > endTime) {
992           continueCallback();
993           return i;
994         }
995         steps = 0;
996       }
997 
998       // If the operatorList isn't executed completely yet OR the execution
999       // time was short enough, do another execution round.
1000     }
1001   }
1002 
1003   #restoreInitialState() {
1004     // Finishing all opened operations such as SMask group painting.
1005     while (this.stateStack.length || this.inSMaskMode) {
1006       this.restore();
1007     }
1008 
1009     this.current.activeSMask = null;
1010     this.ctx.restore();
1011 
1012     if (this.transparentCanvas) {
1013       this.ctx = this.compositeCtx;
1014       this.ctx.save();
1015       this.ctx.setTransform(1, 0, 0, 1, 0, 0); // Avoid apply transform twice
1016       this.ctx.drawImage(this.transparentCanvas, 0, 0);
1017       this.ctx.restore();
1018       this.transparentCanvas = null;
1019     }
1020   }
1021 
1022   endDrawing() {
1023     this.#restoreInitialState();
1024 
1025     this.cachedCanvases.clear();
1026     this.cachedPatterns.clear();
1027 
1028     for (const cache of this._cachedBitmapsMap.values()) {
1029       for (const canvas of cache.values()) {
1030         if (
1031           typeof HTMLCanvasElement !== "undefined" &&
1032           canvas instanceof HTMLCanvasElement
1033         ) {
1034           canvas.width = canvas.height = 0;
1035         }
1036       }
1037       cache.clear();
1038     }
1039     this._cachedBitmapsMap.clear();
1040     this.#drawFilter();
1041   }
1042 
1043   #drawFilter() {
1044     if (this.pageColors) {
1045       const hcmFilterId = this.filterFactory.addHCMFilter(
1046         this.pageColors.foreground,
1047         this.pageColors.background
1048       );
1049       if (hcmFilterId !== "none") {
1050         const savedFilter = this.ctx.filter;
1051         this.ctx.filter = hcmFilterId;
1052         this.ctx.drawImage(this.ctx.canvas, 0, 0);
1053         this.ctx.filter = savedFilter;
1054       }
1055     }
1056   }
1057 
1058   _scaleImage(img, inverseTransform) {
1059     // Vertical or horizontal scaling shall not be more than 2 to not lose the
1060     // pixels during drawImage operation, painting on the temporary canvas(es)
1061     // that are twice smaller in size.
1062     const width = img.width;
1063     const height = img.height;
1064     let widthScale = Math.max(
1065       Math.hypot(inverseTransform[0], inverseTransform[1]),
1066       1
1067     );
1068     let heightScale = Math.max(
1069       Math.hypot(inverseTransform[2], inverseTransform[3]),
1070       1
1071     );
1072 
1073     let paintWidth = width,
1074       paintHeight = height;
1075     let tmpCanvasId = "prescale1";
1076     let tmpCanvas, tmpCtx;
1077     while (
1078       (widthScale > 2 && paintWidth > 1) ||
1079       (heightScale > 2 && paintHeight > 1)
1080     ) {
1081       let newWidth = paintWidth,
1082         newHeight = paintHeight;
1083       if (widthScale > 2 && paintWidth > 1) {
1084         // See bug 1820511 (Windows specific bug).
1085         // TODO: once the above bug is fixed we could revert to:
1086         // newWidth = Math.ceil(paintWidth / 2);
1087         newWidth =
1088           paintWidth >= 16384
1089             ? Math.floor(paintWidth / 2) - 1 || 1
1090             : Math.ceil(paintWidth / 2);
1091         widthScale /= paintWidth / newWidth;
1092       }
1093       if (heightScale > 2 && paintHeight > 1) {
1094         // TODO: see the comment above.
1095         newHeight =
1096           paintHeight >= 16384
1097             ? Math.floor(paintHeight / 2) - 1 || 1
1098             : Math.ceil(paintHeight) / 2;
1099         heightScale /= paintHeight / newHeight;
1100       }
1101       tmpCanvas = this.cachedCanvases.getCanvas(
1102         tmpCanvasId,
1103         newWidth,
1104         newHeight
1105       );
1106       tmpCtx = tmpCanvas.context;
1107       tmpCtx.clearRect(0, 0, newWidth, newHeight);
1108       tmpCtx.drawImage(
1109         img,
1110         0,
1111         0,
1112         paintWidth,
1113         paintHeight,
1114         0,
1115         0,
1116         newWidth,
1117         newHeight
1118       );
1119       img = tmpCanvas.canvas;
1120       paintWidth = newWidth;
1121       paintHeight = newHeight;
1122       tmpCanvasId = tmpCanvasId === "prescale1" ? "prescale2" : "prescale1";
1123     }
1124     return {
1125       img,
1126       paintWidth,
1127       paintHeight,
1128     };
1129   }
1130 
1131   _createMaskCanvas(img) {
1132     const ctx = this.ctx;
1133     const { width, height } = img;
1134     const fillColor = this.current.fillColor;
1135     const isPatternFill = this.current.patternFill;
1136     const currentTransform = getCurrentTransform(ctx);
1137 
1138     let cache, cacheKey, scaled, maskCanvas;
1139     if ((img.bitmap || img.data) && img.count > 1) {
1140       const mainKey = img.bitmap || img.data.buffer;
1141       // We're reusing the same image several times, so we can cache it.
1142       // In case we've a pattern fill we just keep the scaled version of
1143       // the image.
1144       // Only the scaling part matters, the translation part is just used
1145       // to compute offsets (but not when filling patterns see #15573).
1146       // TODO: handle the case of a pattern fill if it's possible.
1147       cacheKey = JSON.stringify(
1148         isPatternFill
1149           ? currentTransform
1150           : [currentTransform.slice(0, 4), fillColor]
1151       );
1152 
1153       cache = this._cachedBitmapsMap.get(mainKey);
1154       if (!cache) {
1155         cache = new Map();
1156         this._cachedBitmapsMap.set(mainKey, cache);
1157       }
1158       const cachedImage = cache.get(cacheKey);
1159       if (cachedImage && !isPatternFill) {
1160         const offsetX = Math.round(
1161           Math.min(currentTransform[0], currentTransform[2]) +
1162             currentTransform[4]
1163         );
1164         const offsetY = Math.round(
1165           Math.min(currentTransform[1], currentTransform[3]) +
1166             currentTransform[5]
1167         );
1168         return {
1169           canvas: cachedImage,
1170           offsetX,
1171           offsetY,
1172         };
1173       }
1174       scaled = cachedImage;
1175     }
1176 
1177     if (!scaled) {
1178       maskCanvas = this.cachedCanvases.getCanvas("maskCanvas", width, height);
1179       putBinaryImageMask(maskCanvas.context, img);
1180     }
1181 
1182     // Create the mask canvas at the size it will be drawn at and also set
1183     // its transform to match the current transform so if there are any
1184     // patterns applied they will be applied relative to the correct
1185     // transform.
1186 
1187     let maskToCanvas = Util.transform(currentTransform, [
1188       1 / width,
1189       0,
1190       0,
1191       -1 / height,
1192       0,
1193       0,
1194     ]);
1195     maskToCanvas = Util.transform(maskToCanvas, [1, 0, 0, 1, 0, -height]);
1196     const [minX, minY, maxX, maxY] = Util.getAxialAlignedBoundingBox(
1197       [0, 0, width, height],
1198       maskToCanvas
1199     );
1200     const drawnWidth = Math.round(maxX - minX) || 1;
1201     const drawnHeight = Math.round(maxY - minY) || 1;
1202     const fillCanvas = this.cachedCanvases.getCanvas(
1203       "fillCanvas",
1204       drawnWidth,
1205       drawnHeight
1206     );
1207     const fillCtx = fillCanvas.context;
1208 
1209     // The offset will be the top-left cordinate mask.
1210     // If objToCanvas is [a,b,c,d,e,f] then:
1211     //   - offsetX = min(a, c) + e
1212     //   - offsetY = min(b, d) + f
1213     const offsetX = minX;
1214     const offsetY = minY;
1215     fillCtx.translate(-offsetX, -offsetY);
1216     fillCtx.transform(...maskToCanvas);
1217 
1218     if (!scaled) {
1219       // Pre-scale if needed to improve image smoothing.
1220       scaled = this._scaleImage(
1221         maskCanvas.canvas,
1222         getCurrentTransformInverse(fillCtx)
1223       );
1224       scaled = scaled.img;
1225       if (cache && isPatternFill) {
1226         cache.set(cacheKey, scaled);
1227       }
1228     }
1229 
1230     fillCtx.imageSmoothingEnabled = getImageSmoothingEnabled(
1231       getCurrentTransform(fillCtx),
1232       img.interpolate
1233     );
1234 
1235     drawImageAtIntegerCoords(
1236       fillCtx,
1237       scaled,
1238       0,
1239       0,
1240       scaled.width,
1241       scaled.height,
1242       0,
1243       0,
1244       width,
1245       height
1246     );
1247     fillCtx.globalCompositeOperation = "source-in";
1248 
1249     const inverse = Util.transform(getCurrentTransformInverse(fillCtx), [
1250       1,
1251       0,
1252       0,
1253       1,
1254       -offsetX,
1255       -offsetY,
1256     ]);
1257     fillCtx.fillStyle = isPatternFill
1258       ? fillColor.getPattern(ctx, this, inverse, PathType.FILL)
1259       : fillColor;
1260 
1261     fillCtx.fillRect(0, 0, width, height);
1262 
1263     if (cache && !isPatternFill) {
1264       // The fill canvas is put in the cache associated to the mask image
1265       // so we must remove from the cached canvas: it mustn't be used again.
1266       this.cachedCanvases.delete("fillCanvas");
1267       cache.set(cacheKey, fillCanvas.canvas);
1268     }
1269 
1270     // Round the offsets to avoid drawing fractional pixels.
1271     return {
1272       canvas: fillCanvas.canvas,
1273       offsetX: Math.round(offsetX),
1274       offsetY: Math.round(offsetY),
1275     };
1276   }
1277 
1278   // Graphics state
1279   setLineWidth(width) {
1280     if (width !== this.current.lineWidth) {
1281       this._cachedScaleForStroking[0] = -1;
1282     }
1283     this.current.lineWidth = width;
1284     this.ctx.lineWidth = width;
1285   }
1286 
1287   setLineCap(style) {
1288     this.ctx.lineCap = LINE_CAP_STYLES[style];
1289   }
1290 
1291   setLineJoin(style) {
1292     this.ctx.lineJoin = LINE_JOIN_STYLES[style];
1293   }
1294 
1295   setMiterLimit(limit) {
1296     this.ctx.miterLimit = limit;
1297   }
1298 
1299   setDash(dashArray, dashPhase) {
1300     const ctx = this.ctx;
1301     if (ctx.setLineDash !== undefined) {
1302       ctx.setLineDash(dashArray);
1303       ctx.lineDashOffset = dashPhase;
1304     }
1305   }
1306 
1307   setRenderingIntent(intent) {
1308     // This operation is ignored since we haven't found a use case for it yet.
1309   }
1310 
1311   setFlatness(flatness) {
1312     // This operation is ignored since we haven't found a use case for it yet.
1313   }
1314 
1315   setGState(states) {
1316     for (const [key, value] of states) {
1317       switch (key) {
1318         case "LW":
1319           this.setLineWidth(value);
1320           break;
1321         case "LC":
1322           this.setLineCap(value);
1323           break;
1324         case "LJ":
1325           this.setLineJoin(value);
1326           break;
1327         case "ML":
1328           this.setMiterLimit(value);
1329           break;
1330         case "D":
1331           this.setDash(value[0], value[1]);
1332           break;
1333         case "RI":
1334           this.setRenderingIntent(value);
1335           break;
1336         case "FL":
1337           this.setFlatness(value);
1338           break;
1339         case "Font":
1340           this.setFont(value[0], value[1]);
1341           break;
1342         case "CA":
1343           this.current.strokeAlpha = value;
1344           break;
1345         case "ca":
1346           this.current.fillAlpha = value;
1347           this.ctx.globalAlpha = value;
1348           break;
1349         case "BM":
1350           this.ctx.globalCompositeOperation = value;
1351           break;
1352         case "SMask":
1353           this.current.activeSMask = value ? this.tempSMask : null;
1354           this.tempSMask = null;
1355           this.checkSMaskState();
1356           break;
1357         case "TR":
1358           this.ctx.filter = this.current.transferMaps =
1359             this.filterFactory.addFilter(value);
1360           break;
1361       }
1362     }
1363   }
1364 
1365   get inSMaskMode() {
1366     return !!this.suspendedCtx;
1367   }
1368 
1369   checkSMaskState() {
1370     const inSMaskMode = this.inSMaskMode;
1371     if (this.current.activeSMask && !inSMaskMode) {
1372       this.beginSMaskMode();
1373     } else if (!this.current.activeSMask && inSMaskMode) {
1374       this.endSMaskMode();
1375     }
1376     // Else, the state is okay and nothing needs to be done.
1377   }
1378 
1379   /**
1380    * Soft mask mode takes the current main drawing canvas and replaces it with
1381    * a temporary canvas. Any drawing operations that happen on the temporary
1382    * canvas need to be composed with the main canvas that was suspended (see
1383    * `compose()`). The temporary canvas also duplicates many of its operations
1384    * on the suspended canvas to keep them in sync, so that when the soft mask
1385    * mode ends any clipping paths or transformations will still be active and in
1386    * the right order on the canvas' graphics state stack.
1387    */
1388   beginSMaskMode() {
1389     if (this.inSMaskMode) {
1390       throw new Error("beginSMaskMode called while already in smask mode");
1391     }
1392     const drawnWidth = this.ctx.canvas.width;
1393     const drawnHeight = this.ctx.canvas.height;
1394     const cacheId = "smaskGroupAt" + this.groupLevel;
1395     const scratchCanvas = this.cachedCanvases.getCanvas(
1396       cacheId,
1397       drawnWidth,
1398       drawnHeight
1399     );
1400     this.suspendedCtx = this.ctx;
1401     this.ctx = scratchCanvas.context;
1402     const ctx = this.ctx;
1403     ctx.setTransform(...getCurrentTransform(this.suspendedCtx));
1404     copyCtxState(this.suspendedCtx, ctx);
1405     mirrorContextOperations(ctx, this.suspendedCtx);
1406 
1407     this.setGState([
1408       ["BM", "source-over"],
1409       ["ca", 1],
1410       ["CA", 1],
1411     ]);
1412   }
1413 
1414   endSMaskMode() {
1415     if (!this.inSMaskMode) {
1416       throw new Error("endSMaskMode called while not in smask mode");
1417     }
1418     // The soft mask is done, now restore the suspended canvas as the main
1419     // drawing canvas.
1420     this.ctx._removeMirroring();
1421     copyCtxState(this.ctx, this.suspendedCtx);
1422     this.ctx = this.suspendedCtx;
1423 
1424     this.suspendedCtx = null;
1425   }
1426 
1427   compose(dirtyBox) {
1428     if (!this.current.activeSMask) {
1429       return;
1430     }
1431 
1432     if (!dirtyBox) {
1433       dirtyBox = [0, 0, this.ctx.canvas.width, this.ctx.canvas.height];
1434     } else {
1435       dirtyBox[0] = Math.floor(dirtyBox[0]);
1436       dirtyBox[1] = Math.floor(dirtyBox[1]);
1437       dirtyBox[2] = Math.ceil(dirtyBox[2]);
1438       dirtyBox[3] = Math.ceil(dirtyBox[3]);
1439     }
1440     const smask = this.current.activeSMask;
1441     const suspendedCtx = this.suspendedCtx;
1442 
1443     this.composeSMask(suspendedCtx, smask, this.ctx, dirtyBox);
1444     // Whatever was drawn has been moved to the suspended canvas, now clear it
1445     // out of the current canvas.
1446     this.ctx.save();
1447     this.ctx.setTransform(1, 0, 0, 1, 0, 0);
1448     this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);
1449     this.ctx.restore();
1450   }
1451 
1452   composeSMask(ctx, smask, layerCtx, layerBox) {
1453     const layerOffsetX = layerBox[0];
1454     const layerOffsetY = layerBox[1];
1455     const layerWidth = layerBox[2] - layerOffsetX;
1456     const layerHeight = layerBox[3] - layerOffsetY;
1457     if (layerWidth === 0 || layerHeight === 0) {
1458       return;
1459     }
1460     this.genericComposeSMask(
1461       smask.context,
1462       layerCtx,
1463       layerWidth,
1464       layerHeight,
1465       smask.subtype,
1466       smask.backdrop,
1467       smask.transferMap,
1468       layerOffsetX,
1469       layerOffsetY,
1470       smask.offsetX,
1471       smask.offsetY
1472     );
1473     ctx.save();
1474     ctx.globalAlpha = 1;
1475     ctx.globalCompositeOperation = "source-over";
1476     ctx.setTransform(1, 0, 0, 1, 0, 0);
1477     ctx.drawImage(layerCtx.canvas, 0, 0);
1478     ctx.restore();
1479   }
1480 
1481   genericComposeSMask(
1482     maskCtx,
1483     layerCtx,
1484     width,
1485     height,
1486     subtype,
1487     backdrop,
1488     transferMap,
1489     layerOffsetX,
1490     layerOffsetY,
1491     maskOffsetX,
1492     maskOffsetY
1493   ) {
1494     let maskCanvas = maskCtx.canvas;
1495     let maskX = layerOffsetX - maskOffsetX;
1496     let maskY = layerOffsetY - maskOffsetY;
1497 
1498     if (backdrop) {
1499       if (
1500         maskX < 0 ||
1501         maskY < 0 ||
1502         maskX + width > maskCanvas.width ||
1503         maskY + height > maskCanvas.height
1504       ) {
1505         const canvas = this.cachedCanvases.getCanvas(
1506           "maskExtension",
1507           width,
1508           height
1509         );
1510         const ctx = canvas.context;
1511         ctx.drawImage(maskCanvas, -maskX, -maskY);
1512         if (backdrop.some(c => c !== 0)) {
1513           ctx.globalCompositeOperation = "destination-atop";
1514           ctx.fillStyle = Util.makeHexColor(...backdrop);
1515           ctx.fillRect(0, 0, width, height);
1516           ctx.globalCompositeOperation = "source-over";
1517         }
1518 
1519         maskCanvas = canvas.canvas;
1520         maskX = maskY = 0;
1521       } else if (backdrop.some(c => c !== 0)) {
1522         maskCtx.save();
1523         maskCtx.globalAlpha = 1;
1524         maskCtx.setTransform(1, 0, 0, 1, 0, 0);
1525         const clip = new Path2D();
1526         clip.rect(maskX, maskY, width, height);
1527         maskCtx.clip(clip);
1528         maskCtx.globalCompositeOperation = "destination-atop";
1529         maskCtx.fillStyle = Util.makeHexColor(...backdrop);
1530         maskCtx.fillRect(maskX, maskY, width, height);
1531         maskCtx.restore();
1532       }
1533     }
1534 
1535     layerCtx.save();
1536     layerCtx.globalAlpha = 1;
1537     layerCtx.setTransform(1, 0, 0, 1, 0, 0);
1538 
1539     if (subtype === "Alpha" && transferMap) {
1540       layerCtx.filter = this.filterFactory.addAlphaFilter(transferMap);
1541     } else if (subtype === "Luminosity") {
1542       layerCtx.filter = this.filterFactory.addLuminosityFilter(transferMap);
1543     }
1544 
1545     const clip = new Path2D();
1546     clip.rect(layerOffsetX, layerOffsetY, width, height);
1547     layerCtx.clip(clip);
1548     layerCtx.globalCompositeOperation = "destination-in";
1549     layerCtx.drawImage(
1550       maskCanvas,
1551       maskX,
1552       maskY,
1553       width,
1554       height,
1555       layerOffsetX,
1556       layerOffsetY,
1557       width,
1558       height
1559     );
1560     layerCtx.restore();
1561   }
1562 
1563   save() {
1564     if (this.inSMaskMode) {
1565       // SMask mode may be turned on/off causing us to lose graphics state.
1566       // Copy the temporary canvas state to the main(suspended) canvas to keep
1567       // it in sync.
1568       copyCtxState(this.ctx, this.suspendedCtx);
1569       // Don't bother calling save on the temporary canvas since state is not
1570       // saved there.
1571       this.suspendedCtx.save();
1572     } else {
1573       this.ctx.save();
1574     }
1575     const old = this.current;
1576     this.stateStack.push(old);
1577     this.current = old.clone();
1578   }
1579 
1580   restore() {
1581     if (this.stateStack.length === 0 && this.inSMaskMode) {
1582       this.endSMaskMode();
1583     }
1584     if (this.stateStack.length !== 0) {
1585       this.current = this.stateStack.pop();
1586       if (this.inSMaskMode) {
1587         // Graphics state is stored on the main(suspended) canvas. Restore its
1588         // state then copy it over to the temporary canvas.
1589         this.suspendedCtx.restore();
1590         copyCtxState(this.suspendedCtx, this.ctx);
1591       } else {
1592         this.ctx.restore();
1593       }
1594       this.checkSMaskState();
1595 
1596       // Ensure that the clipping path is reset (fixes issue6413.pdf).
1597       this.pendingClip = null;
1598 
1599       this._cachedScaleForStroking[0] = -1;
1600       this._cachedGetSinglePixelWidth = null;
1601     }
1602   }
1603 
1604   transform(a, b, c, d, e, f) {
1605     this.ctx.transform(a, b, c, d, e, f);
1606 
1607     this._cachedScaleForStroking[0] = -1;
1608     this._cachedGetSinglePixelWidth = null;
1609   }
1610 
1611   // Path
1612   constructPath(ops, args, minMax) {
1613     const ctx = this.ctx;
1614     const current = this.current;
1615     let x = current.x,
1616       y = current.y;
1617     let startX, startY;
1618     const currentTransform = getCurrentTransform(ctx);
1619 
1620     // Most of the time the current transform is a scaling matrix
1621     // so we don't need to transform points before computing min/max:
1622     // we can compute min/max first and then smartly "apply" the
1623     // transform (see Util.scaleMinMax).
1624     // For rectangle, moveTo and lineTo, min/max are computed in the
1625     // worker (see evaluator.js).
1626     const isScalingMatrix =
1627       (currentTransform[0] === 0 && currentTransform[3] === 0) ||
1628       (currentTransform[1] === 0 && currentTransform[2] === 0);
1629     const minMaxForBezier = isScalingMatrix ? minMax.slice(0) : null;
1630 
1631     for (let i = 0, j = 0, ii = ops.length; i < ii; i++) {
1632       switch (ops[i] | 0) {
1633         case OPS.rectangle:
1634           x = args[j++];
1635           y = args[j++];
1636           const width = args[j++];
1637           const height = args[j++];
1638 
1639           const xw = x + width;
1640           const yh = y + height;
1641           ctx.moveTo(x, y);
1642           if (width === 0 || height === 0) {
1643             ctx.lineTo(xw, yh);
1644           } else {
1645             ctx.lineTo(xw, y);
1646             ctx.lineTo(xw, yh);
1647             ctx.lineTo(x, yh);
1648           }
1649           if (!isScalingMatrix) {
1650             current.updateRectMinMax(currentTransform, [x, y, xw, yh]);
1651           }
1652           ctx.closePath();
1653           break;
1654         case OPS.moveTo:
1655           x = args[j++];
1656           y = args[j++];
1657           ctx.moveTo(x, y);
1658           if (!isScalingMatrix) {
1659             current.updatePathMinMax(currentTransform, x, y);
1660           }
1661           break;
1662         case OPS.lineTo:
1663           x = args[j++];
1664           y = args[j++];
1665           ctx.lineTo(x, y);
1666           if (!isScalingMatrix) {
1667             current.updatePathMinMax(currentTransform, x, y);
1668           }
1669           break;
1670         case OPS.curveTo:
1671           startX = x;
1672           startY = y;
1673           x = args[j + 4];
1674           y = args[j + 5];
1675           ctx.bezierCurveTo(
1676             args[j],
1677             args[j + 1],
1678             args[j + 2],
1679             args[j + 3],
1680             x,
1681             y
1682           );
1683           current.updateCurvePathMinMax(
1684             currentTransform,
1685             startX,
1686             startY,
1687             args[j],
1688             args[j + 1],
1689             args[j + 2],
1690             args[j + 3],
1691             x,
1692             y,
1693             minMaxForBezier
1694           );
1695           j += 6;
1696           break;
1697         case OPS.curveTo2:
1698           startX = x;
1699           startY = y;
1700           ctx.bezierCurveTo(
1701             x,
1702             y,
1703             args[j],
1704             args[j + 1],
1705             args[j + 2],
1706             args[j + 3]
1707           );
1708           current.updateCurvePathMinMax(
1709             currentTransform,
1710             startX,
1711             startY,
1712             x,
1713             y,
1714             args[j],
1715             args[j + 1],
1716             args[j + 2],
1717             args[j + 3],
1718             minMaxForBezier
1719           );
1720           x = args[j + 2];
1721           y = args[j + 3];
1722           j += 4;
1723           break;
1724         case OPS.curveTo3:
1725           startX = x;
1726           startY = y;
1727           x = args[j + 2];
1728           y = args[j + 3];
1729           ctx.bezierCurveTo(args[j], args[j + 1], x, y, x, y);
1730           current.updateCurvePathMinMax(
1731             currentTransform,
1732             startX,
1733             startY,
1734             args[j],
1735             args[j + 1],
1736             x,
1737             y,
1738             x,
1739             y,
1740             minMaxForBezier
1741           );
1742           j += 4;
1743           break;
1744         case OPS.closePath:
1745           ctx.closePath();
1746           break;
1747       }
1748     }
1749 
1750     if (isScalingMatrix) {
1751       current.updateScalingPathMinMax(currentTransform, minMaxForBezier);
1752     }
1753 
1754     current.setCurrentPoint(x, y);
1755   }
1756 
1757   closePath() {
1758     this.ctx.closePath();
1759   }
1760 
1761   stroke(consumePath = true) {
1762     const ctx = this.ctx;
1763     const strokeColor = this.current.strokeColor;
1764     // For stroke we want to temporarily change the global alpha to the
1765     // stroking alpha.
1766     ctx.globalAlpha = this.current.strokeAlpha;
1767     if (this.contentVisible) {
1768       if (typeof strokeColor === "object" && strokeColor?.getPattern) {
1769         ctx.save();
1770         ctx.strokeStyle = strokeColor.getPattern(
1771           ctx,
1772           this,
1773           getCurrentTransformInverse(ctx),
1774           PathType.STROKE
1775         );
1776         this.rescaleAndStroke(/* saveRestore */ false);
1777         ctx.restore();
1778       } else {
1779         this.rescaleAndStroke(/* saveRestore */ true);
1780       }
1781     }
1782     if (consumePath) {
1783       this.consumePath(this.current.getClippedPathBoundingBox());
1784     }
1785     // Restore the global alpha to the fill alpha
1786     ctx.globalAlpha = this.current.fillAlpha;
1787   }
1788 
1789   closeStroke() {
1790     this.closePath();
1791     this.stroke();
1792   }
1793 
1794   fill(consumePath = true) {
1795     const ctx = this.ctx;
1796     const fillColor = this.current.fillColor;
1797     const isPatternFill = this.current.patternFill;
1798     let needRestore = false;
1799 
1800     if (isPatternFill) {
1801       ctx.save();
1802       ctx.fillStyle = fillColor.getPattern(
1803         ctx,
1804         this,
1805         getCurrentTransformInverse(ctx),
1806         PathType.FILL
1807       );
1808       needRestore = true;
1809     }
1810 
1811     const intersect = this.current.getClippedPathBoundingBox();
1812     if (this.contentVisible && intersect !== null) {
1813       if (this.pendingEOFill) {
1814         ctx.fill("evenodd");
1815         this.pendingEOFill = false;
1816       } else {
1817         ctx.fill();
1818       }
1819     }
1820 
1821     if (needRestore) {
1822       ctx.restore();
1823     }
1824     if (consumePath) {
1825       this.consumePath(intersect);
1826     }
1827   }
1828 
1829   eoFill() {
1830     this.pendingEOFill = true;
1831     this.fill();
1832   }
1833 
1834   fillStroke() {
1835     this.fill(false);
1836     this.stroke(false);
1837 
1838     this.consumePath();
1839   }
1840 
1841   eoFillStroke() {
1842     this.pendingEOFill = true;
1843     this.fillStroke();
1844   }
1845 
1846   closeFillStroke() {
1847     this.closePath();
1848     this.fillStroke();
1849   }
1850 
1851   closeEOFillStroke() {
1852     this.pendingEOFill = true;
1853     this.closePath();
1854     this.fillStroke();
1855   }
1856 
1857   endPath() {
1858     this.consumePath();
1859   }
1860 
1861   // Clipping
1862   clip() {
1863     this.pendingClip = NORMAL_CLIP;
1864   }
1865 
1866   eoClip() {
1867     this.pendingClip = EO_CLIP;
1868   }
1869 
1870   // Text
1871   beginText() {
1872     this.current.textMatrix = IDENTITY_MATRIX;
1873     this.current.textMatrixScale = 1;
1874     this.current.x = this.current.lineX = 0;
1875     this.current.y = this.current.lineY = 0;
1876   }
1877 
1878   endText() {
1879     const paths = this.pendingTextPaths;
1880     const ctx = this.ctx;
1881     if (paths === undefined) {
1882       ctx.beginPath();
1883       return;
1884     }
1885 
1886     ctx.save();
1887     ctx.beginPath();
1888     for (const path of paths) {
1889       ctx.setTransform(...path.transform);
1890       ctx.translate(path.x, path.y);
1891       path.addToPath(ctx, path.fontSize);
1892     }
1893     ctx.restore();
1894     ctx.clip();
1895     ctx.beginPath();
1896     delete this.pendingTextPaths;
1897   }
1898 
1899   setCharSpacing(spacing) {
1900     this.current.charSpacing = spacing;
1901   }
1902 
1903   setWordSpacing(spacing) {
1904     this.current.wordSpacing = spacing;
1905   }
1906 
1907   setHScale(scale) {
1908     this.current.textHScale = scale / 100;
1909   }
1910 
1911   setLeading(leading) {
1912     this.current.leading = -leading;
1913   }
1914 
1915   setFont(fontRefName, size) {
1916     const fontObj = this.commonObjs.get(fontRefName);
1917     const current = this.current;
1918 
1919     if (!fontObj) {
1920       throw new Error(`Can't find font for ${fontRefName}`);
1921     }
1922     current.fontMatrix = fontObj.fontMatrix || FONT_IDENTITY_MATRIX;
1923 
1924     // A valid matrix needs all main diagonal elements to be non-zero
1925     // This also ensures we bypass FF bugzilla bug #719844.
1926     if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {
1927       warn("Invalid font matrix for font " + fontRefName);
1928     }
1929 
1930     // The spec for Tf (setFont) says that 'size' specifies the font 'scale',
1931     // and in some docs this can be negative (inverted x-y axes).
1932     if (size < 0) {
1933       size = -size;
1934       current.fontDirection = -1;
1935     } else {
1936       current.fontDirection = 1;
1937     }
1938 
1939     this.current.font = fontObj;
1940     this.current.fontSize = size;
1941 
1942     if (fontObj.isType3Font) {
1943       return; // we don't need ctx.font for Type3 fonts
1944     }
1945 
1946     const name = fontObj.loadedName || "sans-serif";
1947     const typeface =
1948       fontObj.systemFontInfo?.css || `"${name}", ${fontObj.fallbackName}`;
1949 
1950     let bold = "normal";
1951     if (fontObj.black) {
1952       bold = "900";
1953     } else if (fontObj.bold) {
1954       bold = "bold";
1955     }
1956     const italic = fontObj.italic ? "italic" : "normal";
1957 
1958     // Some font backends cannot handle fonts below certain size.
1959     // Keeping the font at minimal size and using the fontSizeScale to change
1960     // the current transformation matrix before the fillText/strokeText.
1961     // See https://bugzilla.mozilla.org/show_bug.cgi?id=726227
1962     let browserFontSize = size;
1963     if (size < MIN_FONT_SIZE) {
1964       browserFontSize = MIN_FONT_SIZE;
1965     } else if (size > MAX_FONT_SIZE) {
1966       browserFontSize = MAX_FONT_SIZE;
1967     }
1968     this.current.fontSizeScale = size / browserFontSize;
1969 
1970     this.ctx.font = `${italic} ${bold} ${browserFontSize}px ${typeface}`;
1971   }
1972 
1973   setTextRenderingMode(mode) {
1974     this.current.textRenderingMode = mode;
1975   }
1976 
1977   setTextRise(rise) {
1978     this.current.textRise = rise;
1979   }
1980 
1981   moveText(x, y) {
1982     this.current.x = this.current.lineX += x;
1983     this.current.y = this.current.lineY += y;
1984   }
1985 
1986   setLeadingMoveText(x, y) {
1987     this.setLeading(-y);
1988     this.moveText(x, y);
1989   }
1990 
1991   setTextMatrix(a, b, c, d, e, f) {
1992     this.current.textMatrix = [a, b, c, d, e, f];
1993     this.current.textMatrixScale = Math.hypot(a, b);
1994 
1995     this.current.x = this.current.lineX = 0;
1996     this.current.y = this.current.lineY = 0;
1997   }
1998 
1999   nextLine() {
2000     this.moveText(0, this.current.leading);
2001   }
2002 
2003   paintChar(character, x, y, patternTransform) {
2004     const ctx = this.ctx;
2005     const current = this.current;
2006     const font = current.font;
2007     const textRenderingMode = current.textRenderingMode;
2008     const fontSize = current.fontSize / current.fontSizeScale;
2009     const fillStrokeMode =
2010       textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;
2011     const isAddToPathSet = !!(
2012       textRenderingMode & TextRenderingMode.ADD_TO_PATH_FLAG
2013     );
2014     const patternFill = current.patternFill && !font.missingFile;
2015 
2016     let addToPath;
2017     if (font.disableFontFace || isAddToPathSet || patternFill) {
2018       addToPath = font.getPathGenerator(this.commonObjs, character);
2019     }
2020 
2021     if (font.disableFontFace || patternFill) {
2022       ctx.save();
2023       ctx.translate(x, y);
2024       ctx.beginPath();
2025       addToPath(ctx, fontSize);
2026       if (patternTransform) {
2027         ctx.setTransform(...patternTransform);
2028       }
2029       if (
2030         fillStrokeMode === TextRenderingMode.FILL ||
2031         fillStrokeMode === TextRenderingMode.FILL_STROKE
2032       ) {
2033         ctx.fill();
2034       }
2035       if (
2036         fillStrokeMode === TextRenderingMode.STROKE ||
2037         fillStrokeMode === TextRenderingMode.FILL_STROKE
2038       ) {
2039         ctx.stroke();
2040       }
2041       ctx.restore();
2042     } else {
2043       if (
2044         fillStrokeMode === TextRenderingMode.FILL ||
2045         fillStrokeMode === TextRenderingMode.FILL_STROKE
2046       ) {
2047         ctx.fillText(character, x, y);
2048       }
2049       if (
2050         fillStrokeMode === TextRenderingMode.STROKE ||
2051         fillStrokeMode === TextRenderingMode.FILL_STROKE
2052       ) {
2053         ctx.strokeText(character, x, y);
2054       }
2055     }
2056 
2057     if (isAddToPathSet) {
2058       const paths = (this.pendingTextPaths ||= []);
2059       paths.push({
2060         transform: getCurrentTransform(ctx),
2061         x,
2062         y,
2063         fontSize,
2064         addToPath,
2065       });
2066     }
2067   }
2068 
2069   get isFontSubpixelAAEnabled() {
2070     // Checks if anti-aliasing is enabled when scaled text is painted.
2071     // On Windows GDI scaled fonts looks bad.
2072     const { context: ctx } = this.cachedCanvases.getCanvas(
2073       "isFontSubpixelAAEnabled",
2074       10,
2075       10
2076     );
2077     ctx.scale(1.5, 1);
2078     ctx.fillText("I", 0, 10);
2079     const data = ctx.getImageData(0, 0, 10, 10).data;
2080     let enabled = false;
2081     for (let i = 3; i < data.length; i += 4) {
2082       if (data[i] > 0 && data[i] < 255) {
2083         enabled = true;
2084         break;
2085       }
2086     }
2087     return shadow(this, "isFontSubpixelAAEnabled", enabled);
2088   }
2089 
2090   showText(glyphs) {
2091     const current = this.current;
2092     const font = current.font;
2093     if (font.isType3Font) {
2094       return this.showType3Text(glyphs);
2095     }
2096 
2097     const fontSize = current.fontSize;
2098     if (fontSize === 0) {
2099       return undefined;
2100     }
2101 
2102     const ctx = this.ctx;
2103     const fontSizeScale = current.fontSizeScale;
2104     const charSpacing = current.charSpacing;
2105     const wordSpacing = current.wordSpacing;
2106     const fontDirection = current.fontDirection;
2107     const textHScale = current.textHScale * fontDirection;
2108     const glyphsLength = glyphs.length;
2109     const vertical = font.vertical;
2110     const spacingDir = vertical ? 1 : -1;
2111     const defaultVMetrics = font.defaultVMetrics;
2112     const widthAdvanceScale = fontSize * current.fontMatrix[0];
2113 
2114     const simpleFillText =
2115       current.textRenderingMode === TextRenderingMode.FILL &&
2116       !font.disableFontFace &&
2117       !current.patternFill;
2118 
2119     ctx.save();
2120     ctx.transform(...current.textMatrix);
2121     ctx.translate(current.x, current.y + current.textRise);
2122 
2123     if (fontDirection > 0) {
2124       ctx.scale(textHScale, -1);
2125     } else {
2126       ctx.scale(textHScale, 1);
2127     }
2128 
2129     let patternTransform;
2130     if (current.patternFill) {
2131       ctx.save();
2132       const pattern = current.fillColor.getPattern(
2133         ctx,
2134         this,
2135         getCurrentTransformInverse(ctx),
2136         PathType.FILL
2137       );
2138       patternTransform = getCurrentTransform(ctx);
2139       ctx.restore();
2140       ctx.fillStyle = pattern;
2141     }
2142 
2143     let lineWidth = current.lineWidth;
2144     const scale = current.textMatrixScale;
2145     if (scale === 0 || lineWidth === 0) {
2146       const fillStrokeMode =
2147         current.textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;
2148       if (
2149         fillStrokeMode === TextRenderingMode.STROKE ||
2150         fillStrokeMode === TextRenderingMode.FILL_STROKE
2151       ) {
2152         lineWidth = this.getSinglePixelWidth();
2153       }
2154     } else {
2155       lineWidth /= scale;
2156     }
2157 
2158     if (fontSizeScale !== 1.0) {
2159       ctx.scale(fontSizeScale, fontSizeScale);
2160       lineWidth /= fontSizeScale;
2161     }
2162 
2163     ctx.lineWidth = lineWidth;
2164 
2165     if (font.isInvalidPDFjsFont) {
2166       const chars = [];
2167       let width = 0;
2168       for (const glyph of glyphs) {
2169         chars.push(glyph.unicode);
2170         width += glyph.width;
2171       }
2172       ctx.fillText(chars.join(""), 0, 0);
2173       current.x += width * widthAdvanceScale * textHScale;
2174       ctx.restore();
2175       this.compose();
2176 
2177       return undefined;
2178     }
2179 
2180     let x = 0,
2181       i;
2182     for (i = 0; i < glyphsLength; ++i) {
2183       const glyph = glyphs[i];
2184       if (typeof glyph === "number") {
2185         x += (spacingDir * glyph * fontSize) / 1000;
2186         continue;
2187       }
2188 
2189       let restoreNeeded = false;
2190       const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;
2191       const character = glyph.fontChar;
2192       const accent = glyph.accent;
2193       let scaledX, scaledY;
2194       let width = glyph.width;
2195       if (vertical) {
2196         const vmetric = glyph.vmetric || defaultVMetrics;
2197         const vx =
2198           -(glyph.vmetric ? vmetric[1] : width * 0.5) * widthAdvanceScale;
2199         const vy = vmetric[2] * widthAdvanceScale;
2200 
2201         width = vmetric ? -vmetric[0] : width;
2202         scaledX = vx / fontSizeScale;
2203         scaledY = (x + vy) / fontSizeScale;
2204       } else {
2205         scaledX = x / fontSizeScale;
2206         scaledY = 0;
2207       }
2208 
2209       if (font.remeasure && width > 0) {
2210         // Some standard fonts may not have the exact width: rescale per
2211         // character if measured width is greater than expected glyph width
2212         // and subpixel-aa is enabled, otherwise just center the glyph.
2213         const measuredWidth =
2214           ((ctx.measureText(character).width * 1000) / fontSize) *
2215           fontSizeScale;
2216         if (width < measuredWidth && this.isFontSubpixelAAEnabled) {
2217           const characterScaleX = width / measuredWidth;
2218           restoreNeeded = true;
2219           ctx.save();
2220           ctx.scale(characterScaleX, 1);
2221           scaledX /= characterScaleX;
2222         } else if (width !== measuredWidth) {
2223           scaledX +=
2224             (((width - measuredWidth) / 2000) * fontSize) / fontSizeScale;
2225         }
2226       }
2227 
2228       // Only attempt to draw the glyph if it is actually in the embedded font
2229       // file or if there isn't a font file so the fallback font is shown.
2230       if (this.contentVisible && (glyph.isInFont || font.missingFile)) {
2231         if (simpleFillText && !accent) {
2232           // common case
2233           ctx.fillText(character, scaledX, scaledY);
2234         } else {
2235           this.paintChar(character, scaledX, scaledY, patternTransform);
2236           if (accent) {
2237             const scaledAccentX =
2238               scaledX + (fontSize * accent.offset.x) / fontSizeScale;
2239             const scaledAccentY =
2240               scaledY - (fontSize * accent.offset.y) / fontSizeScale;
2241             this.paintChar(
2242               accent.fontChar,
2243               scaledAccentX,
2244               scaledAccentY,
2245               patternTransform
2246             );
2247           }
2248         }
2249       }
2250 
2251       const charWidth = vertical
2252         ? width * widthAdvanceScale - spacing * fontDirection
2253         : width * widthAdvanceScale + spacing * fontDirection;
2254       x += charWidth;
2255 
2256       if (restoreNeeded) {
2257         ctx.restore();
2258       }
2259     }
2260     if (vertical) {
2261       current.y -= x;
2262     } else {
2263       current.x += x * textHScale;
2264     }
2265     ctx.restore();
2266     this.compose();
2267 
2268     return undefined;
2269   }
2270 
2271   showType3Text(glyphs) {
2272     // Type3 fonts - each glyph is a "mini-PDF"
2273     const ctx = this.ctx;
2274     const current = this.current;
2275     const font = current.font;
2276     const fontSize = current.fontSize;
2277     const fontDirection = current.fontDirection;
2278     const spacingDir = font.vertical ? 1 : -1;
2279     const charSpacing = current.charSpacing;
2280     const wordSpacing = current.wordSpacing;
2281     const textHScale = current.textHScale * fontDirection;
2282     const fontMatrix = current.fontMatrix || FONT_IDENTITY_MATRIX;
2283     const glyphsLength = glyphs.length;
2284     const isTextInvisible =
2285       current.textRenderingMode === TextRenderingMode.INVISIBLE;
2286     let i, glyph, width, spacingLength;
2287 
2288     if (isTextInvisible || fontSize === 0) {
2289       return;
2290     }
2291     this._cachedScaleForStroking[0] = -1;
2292     this._cachedGetSinglePixelWidth = null;
2293 
2294     ctx.save();
2295     ctx.transform(...current.textMatrix);
2296     ctx.translate(current.x, current.y);
2297 
2298     ctx.scale(textHScale, fontDirection);
2299 
2300     for (i = 0; i < glyphsLength; ++i) {
2301       glyph = glyphs[i];
2302       if (typeof glyph === "number") {
2303         spacingLength = (spacingDir * glyph * fontSize) / 1000;
2304         this.ctx.translate(spacingLength, 0);
2305         current.x += spacingLength * textHScale;
2306         continue;
2307       }
2308 
2309       const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;
2310       const operatorList = font.charProcOperatorList[glyph.operatorListId];
2311       if (!operatorList) {
2312         warn(`Type3 character "${glyph.operatorListId}" is not available.`);
2313         continue;
2314       }
2315       if (this.contentVisible) {
2316         this.processingType3 = glyph;
2317         this.save();
2318         ctx.scale(fontSize, fontSize);
2319         ctx.transform(...fontMatrix);
2320         this.executeOperatorList(operatorList);
2321         this.restore();
2322       }
2323 
2324       const transformed = Util.applyTransform([glyph.width, 0], fontMatrix);
2325       width = transformed[0] * fontSize + spacing;
2326 
2327       ctx.translate(width, 0);
2328       current.x += width * textHScale;
2329     }
2330     ctx.restore();
2331     this.processingType3 = null;
2332   }
2333 
2334   // Type3 fonts
2335   setCharWidth(xWidth, yWidth) {
2336     // We can safely ignore this since the width should be the same
2337     // as the width in the Widths array.
2338   }
2339 
2340   setCharWidthAndBounds(xWidth, yWidth, llx, lly, urx, ury) {
2341     this.ctx.rect(llx, lly, urx - llx, ury - lly);
2342     this.ctx.clip();
2343     this.endPath();
2344   }
2345 
2346   // Color
2347   getColorN_Pattern(IR) {
2348     let pattern;
2349     if (IR[0] === "TilingPattern") {
2350       const color = IR[1];
2351       const baseTransform = this.baseTransform || getCurrentTransform(this.ctx);
2352       const canvasGraphicsFactory = {
2353         createCanvasGraphics: ctx =>
2354           new CanvasGraphics(
2355             ctx,
2356             this.commonObjs,
2357             this.objs,
2358             this.canvasFactory,
2359             this.filterFactory,
2360             {
2361               optionalContentConfig: this.optionalContentConfig,
2362               markedContentStack: this.markedContentStack,
2363             }
2364           ),
2365       };
2366       pattern = new TilingPattern(
2367         IR,
2368         color,
2369         this.ctx,
2370         canvasGraphicsFactory,
2371         baseTransform
2372       );
2373     } else {
2374       pattern = this._getPattern(IR[1], IR[2]);
2375     }
2376     return pattern;
2377   }
2378 
2379   setStrokeColorN() {
2380     this.current.strokeColor = this.getColorN_Pattern(arguments);
2381   }
2382 
2383   setFillColorN() {
2384     this.current.fillColor = this.getColorN_Pattern(arguments);
2385     this.current.patternFill = true;
2386   }
2387 
2388   setStrokeRGBColor(r, g, b) {
2389     this.ctx.strokeStyle = this.current.strokeColor = Util.makeHexColor(
2390       r,
2391       g,
2392       b
2393     );
2394   }
2395 
2396   setStrokeTransparent() {
2397     this.ctx.strokeStyle = this.current.strokeColor = "transparent";
2398   }
2399 
2400   setFillRGBColor(r, g, b) {
2401     this.ctx.fillStyle = this.current.fillColor = Util.makeHexColor(r, g, b);
2402     this.current.patternFill = false;
2403   }
2404 
2405   setFillTransparent() {
2406     this.ctx.fillStyle = this.current.fillColor = "transparent";
2407     this.current.patternFill = false;
2408   }
2409 
2410   _getPattern(objId, matrix = null) {
2411     let pattern;
2412     if (this.cachedPatterns.has(objId)) {
2413       pattern = this.cachedPatterns.get(objId);
2414     } else {
2415       pattern = getShadingPattern(this.getObject(objId));
2416       this.cachedPatterns.set(objId, pattern);
2417     }
2418     if (matrix) {
2419       pattern.matrix = matrix;
2420     }
2421     return pattern;
2422   }
2423 
2424   shadingFill(objId) {
2425     if (!this.contentVisible) {
2426       return;
2427     }
2428     const ctx = this.ctx;
2429 
2430     this.save();
2431     const pattern = this._getPattern(objId);
2432     ctx.fillStyle = pattern.getPattern(
2433       ctx,
2434       this,
2435       getCurrentTransformInverse(ctx),
2436       PathType.SHADING
2437     );
2438 
2439     const inv = getCurrentTransformInverse(ctx);
2440     if (inv) {
2441       const { width, height } = ctx.canvas;
2442       const [x0, y0, x1, y1] = Util.getAxialAlignedBoundingBox(
2443         [0, 0, width, height],
2444         inv
2445       );
2446 
2447       this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);
2448     } else {
2449       // HACK to draw the gradient onto an infinite rectangle.
2450       // PDF gradients are drawn across the entire image while
2451       // Canvas only allows gradients to be drawn in a rectangle
2452       // The following bug should allow us to remove this.
2453       // https://bugzilla.mozilla.org/show_bug.cgi?id=664884
2454 
2455       this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);
2456     }
2457 
2458     this.compose(this.current.getClippedPathBoundingBox());
2459     this.restore();
2460   }
2461 
2462   // Images
2463   beginInlineImage() {
2464     unreachable("Should not call beginInlineImage");
2465   }
2466 
2467   beginImageData() {
2468     unreachable("Should not call beginImageData");
2469   }
2470 
2471   paintFormXObjectBegin(matrix, bbox) {
2472     if (!this.contentVisible) {
2473       return;
2474     }
2475     this.save();
2476     this.baseTransformStack.push(this.baseTransform);
2477 
2478     if (matrix) {
2479       this.transform(...matrix);
2480     }
2481     this.baseTransform = getCurrentTransform(this.ctx);
2482 
2483     if (bbox) {
2484       const width = bbox[2] - bbox[0];
2485       const height = bbox[3] - bbox[1];
2486       this.ctx.rect(bbox[0], bbox[1], width, height);
2487       this.current.updateRectMinMax(getCurrentTransform(this.ctx), bbox);
2488       this.clip();
2489       this.endPath();
2490     }
2491   }
2492 
2493   paintFormXObjectEnd() {
2494     if (!this.contentVisible) {
2495       return;
2496     }
2497     this.restore();
2498     this.baseTransform = this.baseTransformStack.pop();
2499   }
2500 
2501   beginGroup(group) {
2502     if (!this.contentVisible) {
2503       return;
2504     }
2505 
2506     this.save();
2507     // If there's an active soft mask we don't want it enabled for the group, so
2508     // clear it out. The mask and suspended canvas will be restored in endGroup.
2509     if (this.inSMaskMode) {
2510       this.endSMaskMode();
2511       this.current.activeSMask = null;
2512     }
2513 
2514     const currentCtx = this.ctx;
2515     // TODO non-isolated groups - according to Rik at adobe non-isolated
2516     // group results aren't usually that different and they even have tools
2517     // that ignore this setting. Notes from Rik on implementing:
2518     // - When you encounter an transparency group, create a new canvas with
2519     // the dimensions of the bbox
2520     // - copy the content from the previous canvas to the new canvas
2521     // - draw as usual
2522     // - remove the backdrop alpha:
2523     // alphaNew = 1 - (1 - alpha)/(1 - alphaBackdrop) with 'alpha' the alpha
2524     // value of your transparency group and 'alphaBackdrop' the alpha of the
2525     // backdrop
2526     // - remove background color:
2527     // colorNew = color - alphaNew *colorBackdrop /(1 - alphaNew)
2528     if (!group.isolated) {
2529       info("TODO: Support non-isolated groups.");
2530     }
2531 
2532     // TODO knockout - supposedly possible with the clever use of compositing
2533     // modes.
2534     if (group.knockout) {
2535       warn("Knockout groups not supported.");
2536     }
2537 
2538     const currentTransform = getCurrentTransform(currentCtx);
2539     if (group.matrix) {
2540       currentCtx.transform(...group.matrix);
2541     }
2542     if (!group.bbox) {
2543       throw new Error("Bounding box is required.");
2544     }
2545 
2546     // Based on the current transform figure out how big the bounding box
2547     // will actually be.
2548     let bounds = Util.getAxialAlignedBoundingBox(
2549       group.bbox,
2550       getCurrentTransform(currentCtx)
2551     );
2552     // Clip the bounding box to the current canvas.
2553     const canvasBounds = [
2554       0,
2555       0,
2556       currentCtx.canvas.width,
2557       currentCtx.canvas.height,
2558     ];
2559     bounds = Util.intersect(bounds, canvasBounds) || [0, 0, 0, 0];
2560     // Use ceil in case we're between sizes so we don't create canvas that is
2561     // too small and make the canvas at least 1x1 pixels.
2562     const offsetX = Math.floor(bounds[0]);
2563     const offsetY = Math.floor(bounds[1]);
2564     const drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);
2565     const drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);
2566 
2567     this.current.startNewPathAndClipBox([0, 0, drawnWidth, drawnHeight]);
2568 
2569     let cacheId = "groupAt" + this.groupLevel;
2570     if (group.smask) {
2571       // Using two cache entries is case if masks are used one after another.
2572       cacheId += "_smask_" + (this.smaskCounter++ % 2);
2573     }
2574     const scratchCanvas = this.cachedCanvases.getCanvas(
2575       cacheId,
2576       drawnWidth,
2577       drawnHeight
2578     );
2579     const groupCtx = scratchCanvas.context;
2580 
2581     // Since we created a new canvas that is just the size of the bounding box
2582     // we have to translate the group ctx.
2583     groupCtx.translate(-offsetX, -offsetY);
2584     groupCtx.transform(...currentTransform);
2585 
2586     if (group.smask) {
2587       // Saving state and cached mask to be used in setGState.
2588       this.smaskStack.push({
2589         canvas: scratchCanvas.canvas,
2590         context: groupCtx,
2591         offsetX,
2592         offsetY,
2593         subtype: group.smask.subtype,
2594         backdrop: group.smask.backdrop,
2595         transferMap: group.smask.transferMap || null,
2596         startTransformInverse: null, // used during suspend operation
2597       });
2598     } else {
2599       // Setup the current ctx so when the group is popped we draw it at the
2600       // right location.
2601       currentCtx.setTransform(1, 0, 0, 1, 0, 0);
2602       currentCtx.translate(offsetX, offsetY);
2603       currentCtx.save();
2604     }
2605     // The transparency group inherits all off the current graphics state
2606     // except the blend mode, soft mask, and alpha constants.
2607     copyCtxState(currentCtx, groupCtx);
2608     this.ctx = groupCtx;
2609     this.setGState([
2610       ["BM", "source-over"],
2611       ["ca", 1],
2612       ["CA", 1],
2613     ]);
2614     this.groupStack.push(currentCtx);
2615     this.groupLevel++;
2616   }
2617 
2618   endGroup(group) {
2619     if (!this.contentVisible) {
2620       return;
2621     }
2622     this.groupLevel--;
2623     const groupCtx = this.ctx;
2624     const ctx = this.groupStack.pop();
2625     this.ctx = ctx;
2626     // Turn off image smoothing to avoid sub pixel interpolation which can
2627     // look kind of blurry for some pdfs.
2628     this.ctx.imageSmoothingEnabled = false;
2629 
2630     if (group.smask) {
2631       this.tempSMask = this.smaskStack.pop();
2632       this.restore();
2633     } else {
2634       this.ctx.restore();
2635       const currentMtx = getCurrentTransform(this.ctx);
2636       this.restore();
2637       this.ctx.save();
2638       this.ctx.setTransform(...currentMtx);
2639       const dirtyBox = Util.getAxialAlignedBoundingBox(
2640         [0, 0, groupCtx.canvas.width, groupCtx.canvas.height],
2641         currentMtx
2642       );
2643       this.ctx.drawImage(groupCtx.canvas, 0, 0);
2644       this.ctx.restore();
2645       this.compose(dirtyBox);
2646     }
2647   }
2648 
2649   beginAnnotation(id, rect, transform, matrix, hasOwnCanvas) {
2650     // The annotations are drawn just after the page content.
2651     // The page content drawing can potentially have set a transform,
2652     // a clipping path, whatever...
2653     // So in order to have something clean, we restore the initial state.
2654     this.#restoreInitialState();
2655     resetCtxToDefault(this.ctx);
2656 
2657     this.ctx.save();
2658     this.save();
2659 
2660     if (this.baseTransform) {
2661       this.ctx.setTransform(...this.baseTransform);
2662     }
2663 
2664     if (rect) {
2665       const width = rect[2] - rect[0];
2666       const height = rect[3] - rect[1];
2667 
2668       if (hasOwnCanvas && this.annotationCanvasMap) {
2669         transform = transform.slice();
2670         transform[4] -= rect[0];
2671         transform[5] -= rect[1];
2672 
2673         rect = rect.slice();
2674         rect[0] = rect[1] = 0;
2675         rect[2] = width;
2676         rect[3] = height;
2677 
2678         const [scaleX, scaleY] = Util.singularValueDecompose2dScale(
2679           getCurrentTransform(this.ctx)
2680         );
2681         const { viewportScale } = this;
2682         const canvasWidth = Math.ceil(
2683           width * this.outputScaleX * viewportScale
2684         );
2685         const canvasHeight = Math.ceil(
2686           height * this.outputScaleY * viewportScale
2687         );
2688 
2689         this.annotationCanvas = this.canvasFactory.create(
2690           canvasWidth,
2691           canvasHeight
2692         );
2693         const { canvas, context } = this.annotationCanvas;
2694         this.annotationCanvasMap.set(id, canvas);
2695         this.annotationCanvas.savedCtx = this.ctx;
2696         this.ctx = context;
2697         this.ctx.save();
2698         this.ctx.setTransform(scaleX, 0, 0, -scaleY, 0, height * scaleY);
2699 
2700         resetCtxToDefault(this.ctx);
2701       } else {
2702         resetCtxToDefault(this.ctx);
2703 
2704         this.ctx.rect(rect[0], rect[1], width, height);
2705         this.ctx.clip();
2706         this.endPath();
2707       }
2708     }
2709 
2710     this.current = new CanvasExtraState(
2711       this.ctx.canvas.width,
2712       this.ctx.canvas.height
2713     );
2714 
2715     this.transform(...transform);
2716     this.transform(...matrix);
2717   }
2718 
2719   endAnnotation() {
2720     if (this.annotationCanvas) {
2721       this.ctx.restore();
2722       this.#drawFilter();
2723 
2724       this.ctx = this.annotationCanvas.savedCtx;
2725       delete this.annotationCanvas.savedCtx;
2726       delete this.annotationCanvas;
2727     }
2728   }
2729 
2730   paintImageMaskXObject(img) {
2731     if (!this.contentVisible) {
2732       return;
2733     }
2734     const count = img.count;
2735     img = this.getObject(img.data, img);
2736     img.count = count;
2737 
2738     const ctx = this.ctx;
2739     const glyph = this.processingType3;
2740 
2741     if (glyph) {
2742       if (glyph.compiled === undefined) {
2743         glyph.compiled = compileType3Glyph(img);
2744       }
2745 
2746       if (glyph.compiled) {
2747         glyph.compiled(ctx);
2748         return;
2749       }
2750     }
2751     const mask = this._createMaskCanvas(img);
2752     const maskCanvas = mask.canvas;
2753 
2754     ctx.save();
2755     // The mask is drawn with the transform applied. Reset the current
2756     // transform to draw to the identity.
2757     ctx.setTransform(1, 0, 0, 1, 0, 0);
2758     ctx.drawImage(maskCanvas, mask.offsetX, mask.offsetY);
2759     ctx.restore();
2760     this.compose();
2761   }
2762 
2763   paintImageMaskXObjectRepeat(
2764     img,
2765     scaleX,
2766     skewX = 0,
2767     skewY = 0,
2768     scaleY,
2769     positions
2770   ) {
2771     if (!this.contentVisible) {
2772       return;
2773     }
2774 
2775     img = this.getObject(img.data, img);
2776 
2777     const ctx = this.ctx;
2778     ctx.save();
2779     const currentTransform = getCurrentTransform(ctx);
2780     ctx.transform(scaleX, skewX, skewY, scaleY, 0, 0);
2781     const mask = this._createMaskCanvas(img);
2782 
2783     ctx.setTransform(
2784       1,
2785       0,
2786       0,
2787       1,
2788       mask.offsetX - currentTransform[4],
2789       mask.offsetY - currentTransform[5]
2790     );
2791     for (let i = 0, ii = positions.length; i < ii; i += 2) {
2792       const trans = Util.transform(currentTransform, [
2793         scaleX,
2794         skewX,
2795         skewY,
2796         scaleY,
2797         positions[i],
2798         positions[i + 1],
2799       ]);
2800 
2801       const [x, y] = Util.applyTransform([0, 0], trans);
2802       ctx.drawImage(mask.canvas, x, y);
2803     }
2804     ctx.restore();
2805     this.compose();
2806   }
2807 
2808   paintImageMaskXObjectGroup(images) {
2809     if (!this.contentVisible) {
2810       return;
2811     }
2812     const ctx = this.ctx;
2813 
2814     const fillColor = this.current.fillColor;
2815     const isPatternFill = this.current.patternFill;
2816 
2817     for (const image of images) {
2818       const { data, width, height, transform } = image;
2819 
2820       const maskCanvas = this.cachedCanvases.getCanvas(
2821         "maskCanvas",
2822         width,
2823         height
2824       );
2825       const maskCtx = maskCanvas.context;
2826       maskCtx.save();
2827 
2828       const img = this.getObject(data, image);
2829       putBinaryImageMask(maskCtx, img);
2830 
2831       maskCtx.globalCompositeOperation = "source-in";
2832 
2833       maskCtx.fillStyle = isPatternFill
2834         ? fillColor.getPattern(
2835             maskCtx,
2836             this,
2837             getCurrentTransformInverse(ctx),
2838             PathType.FILL
2839           )
2840         : fillColor;
2841       maskCtx.fillRect(0, 0, width, height);
2842 
2843       maskCtx.restore();
2844 
2845       ctx.save();
2846       ctx.transform(...transform);
2847       ctx.scale(1, -1);
2848       drawImageAtIntegerCoords(
2849         ctx,
2850         maskCanvas.canvas,
2851         0,
2852         0,
2853         width,
2854         height,
2855         0,
2856         -1,
2857         1,
2858         1
2859       );
2860       ctx.restore();
2861     }
2862     this.compose();
2863   }
2864 
2865   paintImageXObject(objId) {
2866     if (!this.contentVisible) {
2867       return;
2868     }
2869     const imgData = this.getObject(objId);
2870     if (!imgData) {
2871       warn("Dependent image isn't ready yet");
2872       return;
2873     }
2874 
2875     this.paintInlineImageXObject(imgData);
2876   }
2877 
2878   paintImageXObjectRepeat(objId, scaleX, scaleY, positions) {
2879     if (!this.contentVisible) {
2880       return;
2881     }
2882     const imgData = this.getObject(objId);
2883     if (!imgData) {
2884       warn("Dependent image isn't ready yet");
2885       return;
2886     }
2887 
2888     const width = imgData.width;
2889     const height = imgData.height;
2890     const map = [];
2891     for (let i = 0, ii = positions.length; i < ii; i += 2) {
2892       map.push({
2893         transform: [scaleX, 0, 0, scaleY, positions[i], positions[i + 1]],
2894         x: 0,
2895         y: 0,
2896         w: width,
2897         h: height,
2898       });
2899     }
2900     this.paintInlineImageXObjectGroup(imgData, map);
2901   }
2902 
2903   applyTransferMapsToCanvas(ctx) {
2904     if (this.current.transferMaps !== "none") {
2905       ctx.filter = this.current.transferMaps;
2906       ctx.drawImage(ctx.canvas, 0, 0);
2907       ctx.filter = "none";
2908     }
2909     return ctx.canvas;
2910   }
2911 
2912   applyTransferMapsToBitmap(imgData) {
2913     if (this.current.transferMaps === "none") {
2914       return imgData.bitmap;
2915     }
2916     const { bitmap, width, height } = imgData;
2917     const tmpCanvas = this.cachedCanvases.getCanvas(
2918       "inlineImage",
2919       width,
2920       height
2921     );
2922     const tmpCtx = tmpCanvas.context;
2923     tmpCtx.filter = this.current.transferMaps;
2924     tmpCtx.drawImage(bitmap, 0, 0);
2925     tmpCtx.filter = "none";
2926 
2927     return tmpCanvas.canvas;
2928   }
2929 
2930   paintInlineImageXObject(imgData) {
2931     if (!this.contentVisible) {
2932       return;
2933     }
2934     const width = imgData.width;
2935     const height = imgData.height;
2936     const ctx = this.ctx;
2937 
2938     this.save();
2939 
2940     if (
2941       (typeof PDFJSDev !== "undefined" && PDFJSDev.test("MOZCENTRAL")) ||
2942       !isNodeJS
2943     ) {
2944       // The filter, if any, will be applied in applyTransferMapsToBitmap.
2945       // It must be applied to the image before rescaling else some artifacts
2946       // could appear.
2947       // The final restore will reset it to its value.
2948       const { filter } = ctx;
2949       if (filter !== "none" && filter !== "") {
2950         ctx.filter = "none";
2951       }
2952     }
2953 
2954     // scale the image to the unit square
2955     ctx.scale(1 / width, -1 / height);
2956 
2957     let imgToPaint;
2958     if (imgData.bitmap) {
2959       imgToPaint = this.applyTransferMapsToBitmap(imgData);
2960     } else if (
2961       (typeof HTMLElement === "function" && imgData instanceof HTMLElement) ||
2962       !imgData.data
2963     ) {
2964       // typeof check is needed due to node.js support, see issue #8489
2965       imgToPaint = imgData;
2966     } else {
2967       const tmpCanvas = this.cachedCanvases.getCanvas(
2968         "inlineImage",
2969         width,
2970         height
2971       );
2972       const tmpCtx = tmpCanvas.context;
2973       putBinaryImageData(tmpCtx, imgData);
2974       imgToPaint = this.applyTransferMapsToCanvas(tmpCtx);
2975     }
2976 
2977     const scaled = this._scaleImage(
2978       imgToPaint,
2979       getCurrentTransformInverse(ctx)
2980     );
2981     ctx.imageSmoothingEnabled = getImageSmoothingEnabled(
2982       getCurrentTransform(ctx),
2983       imgData.interpolate
2984     );
2985 
2986     drawImageAtIntegerCoords(
2987       ctx,
2988       scaled.img,
2989       0,
2990       0,
2991       scaled.paintWidth,
2992       scaled.paintHeight,
2993       0,
2994       -height,
2995       width,
2996       height
2997     );
2998     this.compose();
2999     this.restore();
3000   }
3001 
3002   paintInlineImageXObjectGroup(imgData, map) {
3003     if (!this.contentVisible) {
3004       return;
3005     }
3006     const ctx = this.ctx;
3007     let imgToPaint;
3008     if (imgData.bitmap) {
3009       imgToPaint = imgData.bitmap;
3010     } else {
3011       const w = imgData.width;
3012       const h = imgData.height;
3013 
3014       const tmpCanvas = this.cachedCanvases.getCanvas("inlineImage", w, h);
3015       const tmpCtx = tmpCanvas.context;
3016       putBinaryImageData(tmpCtx, imgData);
3017       imgToPaint = this.applyTransferMapsToCanvas(tmpCtx);
3018     }
3019 
3020     for (const entry of map) {
3021       ctx.save();
3022       ctx.transform(...entry.transform);
3023       ctx.scale(1, -1);
3024       drawImageAtIntegerCoords(
3025         ctx,
3026         imgToPaint,
3027         entry.x,
3028         entry.y,
3029         entry.w,
3030         entry.h,
3031         0,
3032         -1,
3033         1,
3034         1
3035       );
3036       ctx.restore();
3037     }
3038     this.compose();
3039   }
3040 
3041   paintSolidColorImageMask() {
3042     if (!this.contentVisible) {
3043       return;
3044     }
3045     this.ctx.fillRect(0, 0, 1, 1);
3046     this.compose();
3047   }
3048 
3049   // Marked content
3050 
3051   markPoint(tag) {
3052     // TODO Marked content.
3053   }
3054 
3055   markPointProps(tag, properties) {
3056     // TODO Marked content.
3057   }
3058 
3059   beginMarkedContent(tag) {
3060     this.markedContentStack.push({
3061       visible: true,
3062     });
3063   }
3064 
3065   beginMarkedContentProps(tag, properties) {
3066     if (tag === "OC") {
3067       this.markedContentStack.push({
3068         visible: this.optionalContentConfig.isVisible(properties),
3069       });
3070     } else {
3071       this.markedContentStack.push({
3072         visible: true,
3073       });
3074     }
3075     this.contentVisible = this.isContentVisible();
3076   }
3077 
3078   endMarkedContent() {
3079     this.markedContentStack.pop();
3080     this.contentVisible = this.isContentVisible();
3081   }
3082 
3083   // Compatibility
3084 
3085   beginCompat() {
3086     // TODO ignore undefined operators (should we do that anyway?)
3087   }
3088 
3089   endCompat() {
3090     // TODO stop ignoring undefined operators
3091   }
3092 
3093   // Helper functions
3094 
3095   consumePath(clipBox) {
3096     const isEmpty = this.current.isEmptyClip();
3097     if (this.pendingClip) {
3098       this.current.updateClipFromPath();
3099     }
3100     if (!this.pendingClip) {
3101       this.compose(clipBox);
3102     }
3103     const ctx = this.ctx;
3104     if (this.pendingClip) {
3105       if (!isEmpty) {
3106         if (this.pendingClip === EO_CLIP) {
3107           ctx.clip("evenodd");
3108         } else {
3109           ctx.clip();
3110         }
3111       }
3112       this.pendingClip = null;
3113     }
3114     this.current.startNewPathAndClipBox(this.current.clipBox);
3115     ctx.beginPath();
3116   }
3117 
3118   getSinglePixelWidth() {
3119     if (!this._cachedGetSinglePixelWidth) {
3120       const m = getCurrentTransform(this.ctx);
3121       if (m[1] === 0 && m[2] === 0) {
3122         // Fast path
3123         this._cachedGetSinglePixelWidth =
3124           1 / Math.min(Math.abs(m[0]), Math.abs(m[3]));
3125       } else {
3126         const absDet = Math.abs(m[0] * m[3] - m[2] * m[1]);
3127         const normX = Math.hypot(m[0], m[2]);
3128         const normY = Math.hypot(m[1], m[3]);
3129         this._cachedGetSinglePixelWidth = Math.max(normX, normY) / absDet;
3130       }
3131     }
3132     return this._cachedGetSinglePixelWidth;
3133   }
3134 
3135   getScaleForStroking() {
3136     // A pixel has thicknessX = thicknessY = 1;
3137     // A transformed pixel is a parallelogram and the thicknesses
3138     // corresponds to the heights.
3139     // The goal of this function is to rescale before setting the
3140     // lineWidth in order to have both thicknesses greater or equal
3141     // to 1 after transform.
3142     if (this._cachedScaleForStroking[0] === -1) {
3143       const { lineWidth } = this.current;
3144       const { a, b, c, d } = this.ctx.getTransform();
3145       let scaleX, scaleY;
3146 
3147       if (b === 0 && c === 0) {
3148         // Fast path
3149         const normX = Math.abs(a);
3150         const normY = Math.abs(d);
3151         if (normX === normY) {
3152           if (lineWidth === 0) {
3153             scaleX = scaleY = 1 / normX;
3154           } else {
3155             const scaledLineWidth = normX * lineWidth;
3156             scaleX = scaleY = scaledLineWidth < 1 ? 1 / scaledLineWidth : 1;
3157           }
3158         } else if (lineWidth === 0) {
3159           scaleX = 1 / normX;
3160           scaleY = 1 / normY;
3161         } else {
3162           const scaledXLineWidth = normX * lineWidth;
3163           const scaledYLineWidth = normY * lineWidth;
3164           scaleX = scaledXLineWidth < 1 ? 1 / scaledXLineWidth : 1;
3165           scaleY = scaledYLineWidth < 1 ? 1 / scaledYLineWidth : 1;
3166         }
3167       } else {
3168         // A pixel (base (x, y)) is transformed by M into a parallelogram:
3169         //  - its area is |det(M)|;
3170         //  - heightY (orthogonal to Mx) has a length: |det(M)| / norm(Mx);
3171         //  - heightX (orthogonal to My) has a length: |det(M)| / norm(My).
3172         // heightX and heightY are the thicknesses of the transformed pixel
3173         // and they must be both greater or equal to 1.
3174         const absDet = Math.abs(a * d - b * c);
3175         const normX = Math.hypot(a, b);
3176         const normY = Math.hypot(c, d);
3177         if (lineWidth === 0) {
3178           scaleX = normY / absDet;
3179           scaleY = normX / absDet;
3180         } else {
3181           const baseArea = lineWidth * absDet;
3182           scaleX = normY > baseArea ? normY / baseArea : 1;
3183           scaleY = normX > baseArea ? normX / baseArea : 1;
3184         }
3185       }
3186       this._cachedScaleForStroking[0] = scaleX;
3187       this._cachedScaleForStroking[1] = scaleY;
3188     }
3189     return this._cachedScaleForStroking;
3190   }
3191 
3192   // Rescale before stroking in order to have a final lineWidth
3193   // with both thicknesses greater or equal to 1.
3194   rescaleAndStroke(saveRestore) {
3195     const { ctx } = this;
3196     const { lineWidth } = this.current;
3197     const [scaleX, scaleY] = this.getScaleForStroking();
3198 
3199     ctx.lineWidth = lineWidth || 1;
3200 
3201     if (scaleX === 1 && scaleY === 1) {
3202       ctx.stroke();
3203       return;
3204     }
3205 
3206     const dashes = ctx.getLineDash();
3207     if (saveRestore) {
3208       ctx.save();
3209     }
3210 
3211     ctx.scale(scaleX, scaleY);
3212 
3213     // How the dashed line is rendered depends on the current transform...
3214     // so we added a rescale to handle too thin lines and consequently
3215     // the way the line is dashed will be modified.
3216     // If scaleX === scaleY, the dashed lines will be rendered correctly
3217     // else we'll have some bugs (but only with too thin lines).
3218     // Here we take the max... why not taking the min... or something else.
3219     // Anyway, as said it's buggy when scaleX !== scaleY.
3220     if (dashes.length > 0) {
3221       const scale = Math.max(scaleX, scaleY);
3222       ctx.setLineDash(dashes.map(x => x / scale));
3223       ctx.lineDashOffset /= scale;
3224     }
3225 
3226     ctx.stroke();
3227 
3228     if (saveRestore) {
3229       ctx.restore();
3230     }
3231   }
3232 
3233   isContentVisible() {
3234     for (let i = this.markedContentStack.length - 1; i >= 0; i--) {
3235       if (!this.markedContentStack[i].visible) {
3236         return false;
3237       }
3238     }
3239     return true;
3240   }
3241 }
3242 
3243 for (const op in OPS) {
3244   if (CanvasGraphics.prototype[op] !== undefined) {
3245     CanvasGraphics.prototype[OPS[op]] = CanvasGraphics.prototype[op];
3246   }
3247 }
3248 
3249 export { CanvasGraphics };
</code>

Test file:
<test_file>
File:
test/unit/api_spec.js
/* Copyright 2017 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import {
  AnnotationEditorType,
  AnnotationMode,
  AnnotationType,
  ImageKind,
  InvalidPDFException,
  isNodeJS,
  MissingPDFException,
  objectSize,
  OPS,
  PasswordException,
  PasswordResponses,
  PermissionFlag,
  UnknownErrorException,
} from "../../src/shared/util.js";
import {
  buildGetDocumentParams,
  CMAP_URL,
  createTemporaryNodeServer,
  DefaultFileReaderFactory,
  TEST_PDFS_PATH,
} from "./test_utils.js";
import {
  DefaultCanvasFactory,
  getDocument,
  PDFDataRangeTransport,
  PDFDocumentLoadingTask,
  PDFDocumentProxy,
  PDFPageProxy,
  PDFWorker,
  RenderTask,
} from "../../src/display/api.js";
import {
  PageViewport,
  RenderingCancelledException,
  StatTimer,
} from "../../src/display/display_utils.js";
import { AutoPrintRegExp } from "../../web/ui_utils.js";
import { GlobalImageCache } from "../../src/core/image_utils.js";
import { GlobalWorkerOptions } from "../../src/display/worker_options.js";
import { Metadata } from "../../src/display/metadata.js";
const WORKER_SRC = "../../build/generic/build/pdf.worker.mjs";
</test_file>

Your task:
You are a software tester at pdf.js.
1. Examine the existing test file. You may reuse any imports, helpers or setup blocks it already has.
2. Write exactly one javascript test `it("...", async () => {...})` block.
3. Your test must fail on the code before the patch, and pass after, hence the test will verify that the patch resolves the issue.
4. The test must be self-contained and to-the-point.
5. If you need something new use only the provided imports (respect the paths exactly how they are given) by importing dynamically for compatibility with Node.js — no new dependencies. You can use the PDF file for testing as follows:
const { getDocument } = await import('../../src/display/api.js');
const { buildGetDocumentParams } = await import('./test_utils.js');
const loadingTask = getDocument(buildGetDocumentParams('issue18058.pdf'))
6. Return only the javascript code for the new `it(...)` block (no comments or explanations).

Example structure:
it("should <describe behavior>", async () => {
  const { example } = await import("../../src/core/example.js");
  <initialize required variables>;
  <define expected variable>;
  <generate actual variables>;
  <compare expected with actual>;
});


<think>
Okay, I need to write a regression test for the issue where SVG images can't be resized in pdf.js. The patch provided changes the method _checkIfSVGFitsInCanvas to a getter _isSVGFittingCanvas. So, the test should check if after the patch, SVG images can be resized correctly.

First, I'll look at the existing test file, test/unit/annotation_spec.js. It imports several modules, including some from the core and shared utilities. I can use these imports as needed.

I need to create a test that fails before the patch and passes after. The test should simulate adding an SVG image and then resizing it. If the image can be resized, the test passes.

I'll structure the test using Jest's it function. The test will be async because it involves promises, especially when loading images.

I'll start by setting up a sample SVG data URL. Then, I'll create a test image element and load the SVG data. Once the image is loaded, I'll create a canvas element to draw it on. Drawing on the canvas will help determine if the SVG was resized correctly.

The key part is to check if the SVG image can be drawn without preserving the aspect ratio. If the patch works, the image should fit the canvas as expected. I'll use the canvas's image data to verify this.

I'll write the test to create an image element, attach an onload event to handle the drawing, and then compare the expected and actual pixel data. If the pixels match the expected resized dimensions, the test passes.

I need to ensure all necessary modules are imported. Since the test uses createImageBitmap, I might need to import it, but looking at the provided imports, it's not listed, so I'll have to see if it's available or if I can use the existing imports.

Wait, the test file already imports several modules, but I might need to import createImageBitmap or use a different approach. Alternatively, I can create the image element and let it load the SVG data.

I think the test is self-contained enough. I'll structure it so that it initializes the SVG, loads it into an image, draws it on a canvas, and checks the pixel data. If the aspect ratio isn't preserved, the test passes.

So, the test will look something like this: create an SVG, load it, draw it on a canvas with a specific size, and check if the image data matches the expected result after resizing.

I need to make sure that the test accurately reflects the bug and that the patch resolves it. The test should fail before the patch because the SVG wouldn't resize, and pass after because it does.

I'll write the test code accordingly, ensuring that it's concise and only tests the specific behavior without unnecessary complexity.
</think>

```javascript
it("should allow SVG images to be resized horizontally and vertically", async () => {
  const svgData = `<svg viewBox="0 0 100 100" width="100" height="100" xmlns="http://www.w3.org/2000/svg"><rect width="100" height="100" style="fill:red;"/></svg>`;
  const svgUrl = `data:image/svg+xml;base64,${btoa(svgData)}`;
  const image = new Image();
  image.src = svgUrl;
  await new Promise((resolve) => (image.onload = resolve));
  
  const canvas = new OffscreenCanvas(50, 150);
  const ctx = canvas.getContext("2d");
  ctx.drawImage(image, 0, 0, 50, 150);
  
  const expectedPixel = new Uint32Array([0xff000000]);
  const actualPixels = new Uint32Array(ctx.getImageData(0, 0, 1, 1).data.buffer);
  
  expect(actualPixels[0]).toBe(expectedPixel[0]);
});
```
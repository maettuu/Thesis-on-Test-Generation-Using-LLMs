it("should correctly resize SVG images", async () => {
  const { ImageManager } = await import("../../src/display/editor/tools.js");
  const { AnnotationEditorUIManager } = await import("../../src/display/editor/tools.js");
  const { Annotation } = await import("../../src/core/annotation.js");
  const { AnnotationFactory } = await import("../../src/core/annotation.js");
  const { Ref, Dict } = await import("../../src/core/primitives.js");
  const { XRefMock } = await import("./test_utils.js");

  const xref = new XRefMock();
  const pdfDocument = {
    annotationStorage: {
      get: () => new Ref(1),
      add: () => {},
      remove: () => {},
      has: () => true,
    },
    filterFactory: {},
  };
  const eventBus = {
    _on: () => {},
    _off: () => {},
    dispatch: () => {},
  };
  const container = {
    focus: () => {},
  };

  const imageManager = new ImageManager();
  const uiManager = new AnnotationEditorUIManager(container, eventBus, pdfDocument, {});

  const svg = `data:image/svg+xml;charset=UTF-8,<svg viewBox="0 0 100 100" width="100" height="100"><rect width="100" height="100" style="fill:red;"/></svg>`;
  const image = await imageManager.getFromUrl(svg);

  const annotation = AnnotationFactory.create(AnnotationType.INK);
  annotation.setFlags(AnnotationFlag.HIDDEN);
  const editor = await annotation.createEditor();
  editor.annotationElementId = "test-id";

  const layer = {
    addOrRebuild: () => {},
    get: () => ({ viewport: {} }),
  };
  uiManager.addLayer(layer);

  const svgElement = await image.bitmap;
  const originalWidth = svgElement.width;
  const originalHeight = svgElement.height;
  const resizedWidth = 200;
  const resizedHeight = 200;

  editor.resize(resizedWidth, resizedHeight);

  const resizedSvg = await imageManager.getFromUrl(svg);
  const resizedWidthActual = resizedSvg.width;
  const resizedHeightActual = resizedSvg.height;

  expect(resizedWidthActual).toBe(resizedWidth);
  expect(resizedHeightActual).toBe(resizedHeight);
});
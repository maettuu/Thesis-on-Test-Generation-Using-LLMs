<think>
Okay, I need to write a regression test for the issue where SVG images couldn't be resized in pdf.js. The patch changes a function to a getter, so the test should check if the getter works correctly.

First, I'll import the necessary modules. Since the test is in Node.js, I'll use dynamic imports for the required files.

I'll create a test SVG image as a data URL. Then, I'll create an ImageManager instance and try to get the image using the manager's #get method.

The key part is checking if the SVG image is handled correctly. I'll look for the 'svgView(preserveAspectRatio(none))' in the image source, which indicates the workaround is applied.

I'll set up an async function in the test to perform these steps and assert that the image source includes the necessary parameter. This should fail before the patch and pass after, ensuring the issue is resolved.
</think>

```javascript
it("should correctly handle SVG image resizing after getter change", async () => {
  const { ImageManager } = await import("../../src/display/editor/tools.js");
  const { Util } = await import("../../shared/util.js");

  // Create a test SVG image
  const svgData = `<svg viewBox="0 0 100 100" width="100" height="100" xmlns="http://www.w3.org/2000/svg">
    <rect width="100" height="100" style="fill:red;"/>
  </svg>`;
  const svgUrl = `data:image/svg+xml;charset=UTF-8,${encodeURIComponent(svgData)}`;

  // Create ImageManager instance
  const imageManager = new ImageManager();

  // Get the SVG image
  const image = await imageManager.#get("test-svg", svgUrl);

  // Check if the SVG image was properly handled
  const expectedSvgUrl = new URL(svgUrl);
  const expectedParam = "svgView(preserveAspectRatio(none))";
  
  // Verify the workaround was applied
  const actualImageUrl = image.bitmap.src;
  const actualUrl = new URL(actualImageUrl);
  
  // Assert the URL contains the expected parameter
  assert(actualUrl.pathname.includes(expectedParam), "SVG image should include preserveAspectRatio(none)");
});
```
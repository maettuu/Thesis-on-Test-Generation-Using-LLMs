Before you begin:
- Keep going until the job is completely solved — don’t stop halfway.
- If you’re unsure about the behavior, reread the provided patch carefully; do not hallucinate.
- Plan your approach before writing code by reflecting on whether the test truly fails before and passes after.

Issue:
<issue>
There should be a separator space between radio buttons/checkboxes and their labels/strings
</issue>

Patch:
<patch>
diff --git a/src/core/xfa/template.js b/src/core/xfa/template.js
--- a/src/core/xfa/template.js
+++ b/src/core/xfa/template.js
@@ -1321,7 +1321,7 @@ class CheckButton extends XFAObject {
   [$toHTML](availableSpace) {
     // TODO: border, shape and mark.
 
-    const style = toStyle("margin");
+    const style = toStyle(this, "margin");
     const size = measureToString(this.size);
 
     style.width = style.height = size;


</patch>

Imports:
<imports>
Available Packages
Dev Dependencies:
- @babel/core: ^7.26.10
- @babel/preset-env: ^7.26.9
- @babel/runtime: ^7.27.0
- @fluent/bundle: ^0.19.0
- @fluent/dom: ^0.10.1
- @metalsmith/layouts: ^3.0.0
- @metalsmith/markdown: ^1.10.0
- @napi-rs/canvas: ^0.1.68
- @types/node: ^22.13.14
- autoprefixer: ^10.4.21
- babel-loader: ^10.0.0
- caniuse-lite: ^1.0.30001707
- core-js: ^3.41.0
- eslint: ^9.23.0
- eslint-plugin-import: ^2.31.0
- eslint-plugin-jasmine: ^4.2.2
- eslint-plugin-json: ^4.0.1
- eslint-plugin-no-unsanitized: ^4.1.2
- eslint-plugin-perfectionist: ^4.10.1
- eslint-plugin-prettier: ^5.2.5
- eslint-plugin-unicorn: ^58.0.0
- globals: ^16.0.0
- gulp: ^5.0.0
- gulp-cli: ^3.0.0
- gulp-postcss: ^10.0.0
- gulp-rename: ^2.0.0
- gulp-replace: ^1.1.4
- gulp-zip: ^6.1.0
- highlight.js: ^11.11.1
- jasmine: ^5.6.0
- jsdoc: ^4.0.4
- jstransformer-nunjucks: ^1.2.0
- metalsmith: ^2.6.3
- metalsmith-html-relative: ^2.0.6
- ordered-read-streams: ^2.0.0
- pngjs: ^7.0.0
- postcss: ^8.5.3
- postcss-dark-theme-class: ^1.3.0
- postcss-dir-pseudo-class: ^9.0.1
- postcss-discard-comments: ^7.0.3
- postcss-nesting: ^13.0.1
- prettier: ^3.5.3
- puppeteer: ^24.4.0
- stylelint: ^16.17.0
- stylelint-prettier: ^5.0.3
- svglint: ^3.1.0
- terser-webpack-plugin: ^5.3.14
- tsc-alias: ^1.8.13
- ttest: ^4.0.0
- typescript: ^5.8.2
- vinyl: ^3.0.0
- webpack: ^5.98.0
- webpack-stream: ^7.0.0
- yargs: ^17.7.2

Engines:
- node: >=20

Available Relative Imports:
- `../../src/core/annotation.js`: Annotation, AnnotationBorderStyle, AnnotationFactory, MarkupAnnotation, getQuadPoints
- `../../src/core/bidi.js`: bidi
- `../../src/core/calculate_md5.js`: calculateMD5
- `../../src/core/calculate_sha256.js`: calculateSHA256
- `../../src/core/calculate_sha_other.js`: calculateSHA384, calculateSHA512
- `../../src/core/cff_parser.js`: CFFCharset, CFFCompiler, CFFFDSelect, CFFParser, CFFStrings
- `../../src/core/cmap.js`: CMap, CMapFactory, IdentityCMap
- `../../src/core/colorspace.js`: ColorSpace
- `../../src/core/colorspace_utils.js`: ColorSpaceUtils
- `../../src/core/core_utils.js`: arrayBuffersToBytes, encodeToXmlString, escapePDFName, escapeString, getInheritableProperty, getSizeInBytes, isAscii, isWhiteSpace, log2, numberToString, parseXFAPath, recoverJsURL, stringToUTF16HexString, stringToUTF16String, toRomanNumerals, validateCSSFont
- `../../src/core/crypto.js`: AES128Cipher, AES256Cipher, ARCFourCipher, CipherTransformFactory, PDF17, PDF20
- `../../src/core/default_appearance.js`: createDefaultAppearance, parseAppearanceStream, parseDefaultAppearance
- `../../src/core/document.js`: PDFDocument, Page
- `../../src/core/encodings.js`: getEncoding
- `../../src/core/evaluator.js`: PartialEvaluator
- `../../src/core/flate_stream.js`: FlateStream
- `../../src/core/font_substitutions.js`: getFontSubstitution
- `../../src/core/fonts_utils.js`: SEAC_ANALYSIS_ENABLED
- `../../src/core/function.js`: PDFFunctionFactory, PostScriptCompiler, PostScriptEvaluator
- `../../src/core/glyphlist.js`: getDingbatsGlyphsUnicode, getGlyphsUnicode
- `../../src/core/image_utils.js`: GlobalColorSpaceCache, GlobalImageCache, LocalColorSpaceCache
- `../../src/core/jbig2.js`: Jbig2Error, Jbig2Image
- `../../src/core/jpg.js`: JpegError, JpegImage
- `../../src/core/jpx.js`: JpxError, JpxImage
- `../../src/core/metadata_parser.js`: MetadataParser
- `../../src/core/operator_list.js`: OperatorList
- `../../src/core/parser.js`: Lexer, Linearization, Parser
- `../../src/core/predictor_stream.js`: PredictorStream
- `../../src/core/primitives.js`: Cmd, Dict, EOF, Name, Ref, RefSet, RefSetCache, isCmd, isDict, isName, isRefsEqual
- `../../src/core/ps_parser.js`: PostScriptLexer, PostScriptParser
- `../../src/core/stream.js`: NullStream, Stream, StringStream
- `../../src/core/type1_parser.js`: Type1Parser
- `../../src/core/unicode.js`: getCharUnicodeCategory, getUnicodeForGlyph, getUnicodeRangeFor, mapSpecialUnicodeValues
- `../../src/core/worker.js`: WorkerMessageHandler, WorkerTask
- `../../src/core/writer.js`: incrementalUpdate, writeChanges, writeDict
- `../../src/core/xfa/bind.js`: Binder
- `../../src/core/xfa/data.js`: DataHandler
- `../../src/core/xfa/factory.js`: XFAFactory
- `../../src/core/xfa/formcalc_lexer.js`: Lexer, TOKEN, Token
- `../../src/core/xfa/formcalc_parser.js`: Errors, Parser
- `../../src/core/xfa/parser.js`: XFAParser
- `../../src/core/xfa/som.js`: searchNode
- `../../src/core/xfa/symbol_utils.js`: $dump, $getChildren, $getChildrenByClass, $getChildrenByName, $text, $uid
- `../../src/core/xml_parser.js`: SimpleXMLParser, XMLParserBase
- `../../src/display/annotation_layer.js`: AnnotationLayer
- `../../src/display/annotation_storage.js`: AnnotationStorage
- `../../src/display/api.js`: LoopbackPort, PDFDataRangeTransport, PDFDocumentLoadingTask, PDFDocumentProxy, PDFPageProxy, PDFWorker, RenderTask, build, getDocument, isValidExplicitDest, version
- `../../src/display/canvas_factory.js`: DOMCanvasFactory
- `../../src/display/cmap_reader_factory.js`: DOMCMapReaderFactory
- `../../src/display/display_utils.js`: OutputScale, PDFDateString, PageViewport, PixelsPerInch, RenderingCancelledException, StatTimer, SupportedImageMimeTypes, fetchData, getFilenameFromUrl, getPdfFilenameFromUrl, getXfaPageViewport, isDataScheme, isPdfFile, isValidFetchUrl, noContextMenu, setLayerDimensions, stopEvent
- `../../src/display/draw_layer.js`: DrawLayer
- `../../src/display/editor/annotation_editor_layer.js`: AnnotationEditorLayer
- `../../src/display/editor/color_picker.js`: ColorPicker
- `../../src/display/editor/drawers/signaturedraw.js`: SignatureExtractor
- `../../src/display/editor/tools.js`: AnnotationEditorUIManager, CommandManager
- `../../src/display/fetch_stream.js`: PDFFetchStream
- `../../src/display/metadata.js`: Metadata
- `../../src/display/network.js`: PDFNetworkStream
- `../../src/display/network_utils.js`: createHeaders, createResponseError, extractFilenameFromHeader, validateRangeRequestCapabilities, validateResponseStatus
- `../../src/display/node_stream.js`: PDFNodeStream
- `../../src/display/node_utils.js`: NodeCMapReaderFactory, NodeStandardFontDataFactory, fetchData
- `../../src/display/standard_fontdata_factory.js`: DOMStandardFontDataFactory
- `../../src/display/svg_factory.js`: DOMSVGFactory
- `../../src/display/text_layer.js`: TextLayer
- `../../src/display/touch_manager.js`: TouchManager
- `../../src/display/worker_options.js`: GlobalWorkerOptions
- `../../src/display/xfa_layer.js`: XfaLayer
- `../../src/shared/message_handler.js`: MessageHandler
- `../../src/shared/murmurhash3.js`: MurmurHash3_64
- `../../src/shared/util.js`: AbortException, AnnotationBorderStyleType, AnnotationEditorParamsType, AnnotationEditorType, AnnotationFieldFlag, AnnotationFlag, AnnotationMode, AnnotationType, BaseException, DrawOPS, FeatureTest, FormatError, ImageKind, InvalidPDFException, MathClamp, OPS, PasswordException, PasswordResponses, PermissionFlag, RenderingIntentFlag, ResponseException, UnknownErrorException, Util, VerbosityLevel, assert, bytesToString, createValidAbsoluteUrl, getModificationDate, getUuid, getVerbosityLevel, isNodeJS, normalizeUnicode, objectSize, setVerbosityLevel, shadow, string32, stringToBytes, stringToPDFString, stringToUTF8String, toBase64Util
- `../../web/annotation_layer_builder.js`: AnnotationLayerBuilder
- `../../web/app_options.js`: AppOptions, OptionKind
- `../../web/autolinker.js`: Autolinker
- `../../web/download_manager.js`: DownloadManager
- `../../web/event_utils.js`: EventBus, WaitOnType, waitOnEventOrTimeout
- `../../web/genericl10n.js`: GenericL10n
- `../../web/pdf_find_controller.js`: FindState, PDFFindController
- `../../web/pdf_find_utils.js`: CharacterType, getCharacterType
- `../../web/pdf_history.js`: PDFHistory, isDestArraysEqual, isDestHashesEqual
- `../../web/pdf_link_service.js`: LinkTarget, PDFLinkService, SimpleLinkService
- `../../web/pdf_page_view.js`: PDFPageView
- `../../web/pdf_scripting_manager.component.js`: PDFScriptingManager
- `../../web/pdf_single_page_viewer.js`: PDFSinglePageViewer
- `../../web/pdf_viewer.js`: PDFPageViewBuffer, PDFViewer
- `../../web/struct_tree_layer_builder.js`: StructTreeLayerBuilder
- `../../web/text_layer_builder.js`: TextLayerBuilder
- `../../web/ui_utils.js`: AutoPrintRegExp, ProgressBar, RenderingStates, ScrollMode, SpreadMode, backtrackBeforeAllVisibleElements, binarySearchFirstItem, calcRound, getPageSizeInches, getVisibleElements, isPortraitOrientation, isValidRotation, parseQueryString, removeNullCharacters
- `../../web/xfa_layer_builder.js`: XfaLayerBuilder
- `../reporter.js`: TestReporter
- `./common_pdfstream_tests.js`: testCrossOriginRedirects
- `./test_utils.js`: CMAP_URL, DefaultCMapReaderFactory, DefaultFileReaderFactory, DefaultStandardFontDataFactory, STANDARD_FONT_DATA_URL, TEST_PDFS_PATH, TestPdfsServer, XRefMock, buildGetDocumentParams, createIdFactory, getCrossOriginHostname
</imports>

Code:
<code>
File:
src/core/xfa/template.js
1 /* Copyright 2021 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 import {
17   $acceptWhitespace,
18   $addHTML,
19   $appendChild,
20   $childrenToHTML,
21   $clean,
22   $cleanPage,
23   $content,
24   $data,
25   $extra,
26   $finalize,
27   $flushHTML,
28   $getAvailableSpace,
29   $getChildren,
30   $getContainedChildren,
31   $getExtra,
32   $getNextPage,
33   $getParent,
34   $getSubformParent,
35   $getTemplateRoot,
36   $globalData,
37   $hasSettableValue,
38   $ids,
39   $isBindable,
40   $isCDATAXml,
41   $isSplittable,
42   $isThereMoreWidth,
43   $isTransparent,
44   $isUsable,
45   $namespaceId,
46   $nodeName,
47   $onChild,
48   $onText,
49   $popPara,
50   $pushPara,
51   $removeChild,
52   $searchNode,
53   $setSetAttributes,
54   $setValue,
55   $tabIndex,
56   $text,
57   $toHTML,
58   $toPages,
59   $toStyle,
60   $uid,
61 } from "./symbol_utils.js";
62 import { $buildXFAObject, NamespaceIds } from "./namespaces.js";
63 import {
64   addHTML,
65   checkDimensions,
66   flushHTML,
67   getAvailableSpace,
68 } from "./layout.js";
69 import {
70   computeBbox,
71   createWrapper,
72   fixDimensions,
73   fixTextIndent,
74   fixURL,
75   isPrintOnly,
76   layoutClass,
77   layoutNode,
78   measureToString,
79   setAccess,
80   setFontFamily,
81   setMinMaxDimensions,
82   setPara,
83   toStyle,
84 } from "./html_utils.js";
85 import {
86   ContentObject,
87   Option01,
88   OptionObject,
89   StringObject,
90   XFAObject,
91   XFAObjectArray,
92 } from "./xfa_object.js";
93 import { fromBase64Util, Util, warn } from "../../shared/util.js";
94 import {
95   getBBox,
96   getColor,
97   getFloat,
98   getInteger,
99   getKeyword,
100   getMeasurement,
101   getRatio,
102   getRelevant,
103   getStringOption,
104   HTMLResult,
105 } from "./utils.js";
106 import { getMetrics } from "./fonts.js";
107 import { recoverJsURL } from "../core_utils.js";
108 import { searchNode } from "./som.js";
109 
110 const TEMPLATE_NS_ID = NamespaceIds.template.id;
111 const SVG_NS = "http://www.w3.org/2000/svg";
112 
113 // In case of lr-tb (and rl-tb) layouts, we try:
114 //  - to put the container at the end of a line
115 //  - and if it fails we try on the next line.
116 // If both tries failed then it's up to the parent
117 // to handle the situation.
118 const MAX_ATTEMPTS_FOR_LRTB_LAYOUT = 2;
119 
120 // It's possible to have a bug in the layout and so as
121 // a consequence we could loop for ever in Template::toHTML()
122 // so in order to avoid that (and avoid a OOM crash) we break
123 // the loop after having MAX_EMPTY_PAGES empty pages.
124 const MAX_EMPTY_PAGES = 3;
125 
126 // Default value to start with for the tabIndex property.
127 const DEFAULT_TAB_INDEX = 5000;
128 
129 const HEADING_PATTERN = /^H(\d+)$/;
130 
131 // Allowed mime types for images
132 const MIMES = new Set([
133   "image/gif",
134   "image/jpeg",
135   "image/jpg",
136   "image/pjpeg",
137   "image/png",
138   "image/apng",
139   "image/x-png",
140   "image/bmp",
141   "image/x-ms-bmp",
142   "image/tiff",
143   "image/tif",
144   "application/octet-stream",
145 ]);
146 
147 const IMAGES_HEADERS = [
148   [[0x42, 0x4d], "image/bmp"],
149   [[0xff, 0xd8, 0xff], "image/jpeg"],
150   [[0x49, 0x49, 0x2a, 0x00], "image/tiff"],
151   [[0x4d, 0x4d, 0x00, 0x2a], "image/tiff"],
152   [[0x47, 0x49, 0x46, 0x38, 0x39, 0x61], "image/gif"],
153   [[0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a], "image/png"],
154 ];
155 
1299 class CheckButton extends XFAObject {
1300   constructor(attributes) {
1301     super(TEMPLATE_NS_ID, "checkButton", /* hasChildren = */ true);
1302     this.id = attributes.id || "";
1303     this.mark = getStringOption(attributes.mark, [
1304       "default",
1305       "check",
1306       "circle",
1307       "cross",
1308       "diamond",
1309       "square",
1310       "star",
1311     ]);
1312     this.shape = getStringOption(attributes.shape, ["square", "round"]);
1313     this.size = getMeasurement(attributes.size, "10pt");
1314     this.use = attributes.use || "";
1315     this.usehref = attributes.usehref || "";
1316     this.border = null;
1317     this.extras = null;
1318     this.margin = null;
1319   }
1320 
1321   [$toHTML](availableSpace) {
1322     // TODO: border, shape and mark.
1323 
1324     const style = toStyle("margin");
1325     const size = measureToString(this.size);
1326 
1327     style.width = style.height = size;
1328 
1329     let type;
1330     let className;
1331     let groupId;
1332     const field = this[$getParent]()[$getParent]();
1333     const items =
1334       (field.items.children.length &&
1335         field.items.children[0][$toHTML]().html) ||
1336       [];
1337     const exportedValue = {
1338       on: (items[0] !== undefined ? items[0] : "on").toString(),
1339       off: (items[1] !== undefined ? items[1] : "off").toString(),
1340     };
1341 
1342     const value = field.value?.[$text]() || "off";
1343     const checked = value === exportedValue.on || undefined;
1344     const container = field[$getSubformParent]();
1345     const fieldId = field[$uid];
1346     let dataId;
1347 
1348     if (container instanceof ExclGroup) {
1349       groupId = container[$uid];
1350       type = "radio";
1351       className = "xfaRadio";
1352       dataId = container[$data]?.[$uid] || container[$uid];
1353     } else {
1354       type = "checkbox";
1355       className = "xfaCheckbox";
1356       dataId = field[$data]?.[$uid] || field[$uid];
1357     }
1358 
1359     const input = {
1360       name: "input",
1361       attributes: {
1362         class: [className],
1363         style,
1364         fieldId,
1365         dataId,
1366         type,
1367         checked,
1368         xfaOn: exportedValue.on,
1369         xfaOff: exportedValue.off,
1370         "aria-label": ariaLabel(field),
1371         "aria-required": false,
1372       },
1373     };
1374 
1375     if (groupId) {
1376       input.attributes.name = groupId;
1377     }
1378 
1379     if (isRequired(field)) {
1380       input.attributes["aria-required"] = true;
1381       input.attributes.required = true;
1382     }
1383 
1384     return HTMLResult.success({
1385       name: "label",
1386       attributes: {
1387         class: ["xfaLabel"],
1388       },
1389       children: [input],
1390     });
1391   }
1392 }
1393 
6612 
</code>

PR summary:
<pr_summary>
Add margin to separate radio buttons and checkboxes from their labels
This PR addresses [bug 1716806](https://bugzilla.mozilla.org/show_bug.cgi?id=1716806) by adding a 4px margin to the right of checkboxes and radio buttons for `.xfaRight` elements, or to the left for `.xfaLeft` elements.
</pr_summary>

Your task:
You are a software tester at pdf.js.
1. Write exactly one javascript test `it("...", async () => {...})` block.
2. Your test must fail on the code before the patch, and pass after, hence the test will verify that the patch resolves the issue.
3. The test must be self-contained and to-the-point.
4. Use only the provided imports (respect the paths exactly how they are given) by importing dynamically for compatibility with Node.js — no new dependencies. 
5. Return only the javascript code (no comments or explanations).

Example structure:
it("should <describe behavior>", async () => {
  const { example } = await import("../../src/core/example.js");
  <initialize required variables>;
  <define expected variable>;
  <generate actual variables>;
  <compare expected with actual>;
});


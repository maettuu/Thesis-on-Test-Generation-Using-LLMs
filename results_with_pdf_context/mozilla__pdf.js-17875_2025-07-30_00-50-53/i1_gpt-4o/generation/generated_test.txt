it("should render JBIG2 text segments with rightside reference corner identically to leftside", async () => {
  function createFakeHuffmanTables() {
    let deltaSCounter = 0;
    return {
      tableDeltaT: { decode: () => 0 },
      tableFirstS: { decode: () => 0 },
      symbolIDTable: { decode: () => 0 },
      tableDeltaS: {
        decode: () => {
          if (deltaSCounter === 0) {
            deltaSCounter++;
            return 1;
          }
          return null;
        },
      },
    };
  }
  const createFakeHuffmanInput = () => ({
    readBit: () => 0,
    readBits: () => 0,
  });
  // Construct a simple symbol: a 2x2 block with all pixels set.
  const symbol = [new Uint8Array([1, 1]), new Uint8Array([1, 1])];
  // Common parameters for decodeTextRegion.
  const params = {
    huffman: true,
    refinement: false,
    width: 10,
    height: 5,
    defaultPixelValue: 0,
    numberOfSymbolInstances: 2,
    stripSize: 1,
    inputSymbols: [symbol],
    symbolCodeLength: 0,
    transposed: false,
    dsOffset: 0,
    combinationOperator: 0,
    refinementTemplateIndex: 0,
    refinementAt: 0,
    decodingContext: { decoder: {}, contextCache: {} },
    logStripSize: 0,
  };
  // Import the decodeTextRegion function.
  const { decodeTextRegion } = await import("../../src/core/jbig2.js");
  // Run with referenceCorner = 0 (bottom‐left).
  const tables0 = createFakeHuffmanTables();
  const huffmanInput0 = createFakeHuffmanInput();
  const bitmap0 = decodeTextRegion(
    params.huffman,
    params.refinement,
    params.width,
    params.height,
    params.defaultPixelValue,
    params.numberOfSymbolInstances,
    params.stripSize,
    params.inputSymbols,
    params.symbolCodeLength,
    params.transposed,
    params.dsOffset,
    0,
    params.combinationOperator,
    tables0,
    params.refinementTemplateIndex,
    params.refinementAt,
    params.decodingContext,
    params.logStripSize,
    huffmanInput0
  );
  // Run with referenceCorner = 2 (bottom‐right).
  const tables2 = createFakeHuffmanTables();
  const huffmanInput2 = createFakeHuffmanInput();
  const bitmap2 = decodeTextRegion(
    params.huffman,
    params.refinement,
    params.width,
    params.height,
    params.defaultPixelValue,
    params.numberOfSymbolInstances,
    params.stripSize,
    params.inputSymbols,
    params.symbolCodeLength,
    params.transposed,
    params.dsOffset,
    2,
    params.combinationOperator,
    tables2,
    params.refinementTemplateIndex,
    params.refinementAt,
    params.decodingContext,
    params.logStripSize,
    huffmanInput2
  );
  // Convert bitmap to a string representation for easy comparison.
  const bitmapToString = (bmp) =>
    bmp.map((row) => Array.from(row).join(",")).join("|");
  if (bitmapToString(bitmap0) !== bitmapToString(bitmap2)) {
    throw new Error("Decoded bitmaps differ between reference corners");
  }
});

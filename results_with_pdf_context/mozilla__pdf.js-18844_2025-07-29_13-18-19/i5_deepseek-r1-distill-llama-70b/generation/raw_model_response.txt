<think>
Okay, I need to write a regression test for the issue where the text layer and canvas don't always match in the PDF viewer on Windows. The patch provided modifies the TextLayer class to adjust the font family based on the platform and browser, specifically for Windows and Firefox.

First, I should understand what the patch does. It adds a static method fontFamilyMap which checks if the platform is Windows and the browser is Firefox. If so, it prepends specific fonts to the sans-serif and monospace font families. This is a workaround for a known bug.

My test needs to fail before the patch and pass after. So, I'll create a test that checks if the font family is correctly adjusted on Windows and Firefox. 

I'll start by mocking the platform using FeatureTest.platform. I'll set isWindows and isFirefox to true. Then, I'll create a TextLayer instance and check if the fontFamilyMap returns the expected adjusted font families.

I'll import the necessary modules, set up the mock, create the TextLayer, and then assert that the font families are as expected. This should cover the scenario where the bug occurs and ensure the patch fixes it.
</think>

```javascript
it("should adjust font family on Windows and Firefox", async () => {
  const { TextLayer, FeatureTest } = await import("../../src/display/text_layer.js");
  
  // Mock platform detection
  const originalPlatform = FeatureTest.platform;
  FeatureTest.platform = () => ({
    isMac: false,
    isWindows: true,
    isFirefox: true,
  });

  const textLayer = new TextLayer(null, null, null);
  
  // Expected font families after adjustment
  const expectedSansSerif = "Calibri, sans-serif";
  const expectedMonospace = "Lucida Console, monospace";
  
  // Actual font families from the adjusted map
  const actualSansSerif = TextLayer.fontFamilyMap.get("sans-serif");
  const actualMonospace = TextLayer.fontFamilyMap.get("monospace");
  
  // Cleanup
  FeatureTest.platform = originalPlatform;
  
  expect(actualSansSerif).toBe(expectedSansSerif);
  expect(actualMonospace).toBe(expectedMonospace);
});
```
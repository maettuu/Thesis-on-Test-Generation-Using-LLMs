<think>
Okay, I need to write a regression test for the issue where the text layer and canvas don't always match in the PDF viewer on Windows. The patch provided makes changes to the TextLayer class and the FeatureTest platform detection. 

First, I should understand what the patch does. It looks like the patch introduces a fontFamilyMap that adjusts the font family based on whether the platform is Windows and Firefox. This is done to fix font rendering inconsistencies.

So, the test needs to verify that the fontFamily is correctly set when running on Windows with Firefox. I'll need to mock the platform and browser detection to simulate a Windows Firefox environment.

I'll start by importing the necessary modules: FeatureTest from util.js and TextLayer from text_layer.js. Then, I'll mock the platform property in FeatureTest to return isWindows and isFirefox as true.

Next, I'll create a sample text layer with a dummy div element as the container. I'll set the font family to 'sans-serif' and check if the applied font family includes 'Calibri' as expected on Windows Firefox.

If everything is set up correctly, the test should fail before the patch because the font family wouldn't include 'Calibri', and pass after the patch because it would.

I need to make sure the test is self-contained and only uses the provided imports. I'll structure the test with Jest syntax, using it and expect statements. 

Finally, I'll write the test code, ensuring it's concise and directly tests the behavior fixed by the patch.
</think>

```javascript
it("should use correct font family on Windows Firefox", async () => {
  const { FeatureTest } = await import("../../src/shared/util.js");
  const { TextLayer } = await import("../../src/display/text_layer.js");
  
  // Mock platform detection
  const originalPlatform = FeatureTest.platform;
  FeatureTest.platform = () => ({
    isWindows: true,
    isFirefox: true,
  });

  const container = document.createElement("div");
  const textLayer = new TextLayer({
    textContentSource: new ReadableStream({
      start(controller) {
        controller.enqueue("Test");
        controller.close();
      },
    }),
    container,
    viewport: {
      scale: 1,
      rotation: 0,
      rawDims: { pageWidth: 100, pageHeight: 100, pageX: 0, pageY: 0 },
    },
  });

  const style = {
    fontFamily: 'sans-serif',
    fontSubstitution: 'sans-serif',
    vertical: false,
  };

  const fontFamily = TextLayer.fontFamilyMap.get(style.fontFamily) || style.fontFamily;
  expect(fontFamily).toContain("Calibri");
});
```
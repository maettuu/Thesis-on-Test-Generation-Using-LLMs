<think>
Okay, so I need to write a regression test for the issue where the text layer and canvas don't always match in the PDF viewer on Windows. The patch provided is supposed to fix this, so my test should fail before the patch and pass after.

First, I'll look at the changes in the patch. The main changes are in `text_layer.js` where they added a `fontFamilyMap` that adjusts the font family based on the platform, specifically for Windows and Firefox. They also updated `util.js` to include `isWindows` and `isFirefox` in the platform checks.

So, the problem is that on Windows, especially in Firefox, the fonts used in the text layer might not match the canvas, causing misalignment. The patch adds prefixes to the font family for certain cases, which should fix this mismatch.

To test this, I'll create a test that checks if the font family is correctly adjusted when running on Windows and Firefox. I'll use the `FeatureTest` class to get the platform info and then check if the `fontFamilyMap` returns the expected font string.

I'll structure the test using Jest. I'll import `TextLayer` and `FeatureTest`. Then, I'll mock the platform to be Windows and Firefox. After that, I'll get the `fontFamilyMap` and check if the expected font string is returned for 'sans-serif' and 'monospace' cases.

So, the steps are:

1. Import the necessary modules.
2. Set up the platform using `FeatureTest.platform`.
3. Get the `fontFamilyMap` from `TextLayer`.
4. Check the font family strings for 'sans-serif' and 'monospace' to ensure they include the correct fonts for Windows/Firefox.

I need to make sure the test is self-contained and doesn't rely on any external dependencies beyond the provided imports. Also, since it's a Node.js environment, I'll use dynamic imports.

Finally, the test will assert that the font families match the expected strings, ensuring the patch works as intended.
</think>

```javascript
it("should adjust font family for Windows and Firefox", async () => {
  const { TextLayer } = await import("../../src/display/text_layer.js");
  const { FeatureTest } = await import("../../shared/util.js");

  // Mock the platform as Windows and Firefox
  const platform = {
    isMac: false,
    isWindows: true,
    isFirefox: true,
  };
  FeatureTest.platform = shadow(FeatureTest, "platform", platform);

  // Get the font family map
  const fontFamilyMap = TextLayer.fontFamilyMap;

  // Expected font family strings
  const expectedSansSerif = "Calibri, sans-serif";
  const expectedMonospace = "Lucida Console, monospace";

  // Get actual font family strings
  const actualSansSerif = fontFamilyMap.get("sans-serif");
  const actualMonospace = fontFamilyMap.get("monospace");

  // Verify the font families match expectations
  expect(actualSansSerif).toBe(expectedSansSerif);
  expect(actualMonospace).toBe(expectedMonospace);
});
```
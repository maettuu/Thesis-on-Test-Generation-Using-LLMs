<think>
Okay, I need to write a regression test for the issue where the JPX fuzzer was spamming the output with "OpenJPEG: Unknown format" logs. The patch provided changes the error handling in the JpxImage.decode method. 

First, I'll look at the patch. Before, when imageData was falsy, it threw a generic JpxError. Now, it checks if imageData is a string and throws JpxError with that string. So, the goal is to ensure that the error message is properly passed and that the logs are no longer printed.

I need to create a test that fails before the patch and passes after. The test should check that the decode method throws the correct error without extra logs.

I'll use a test that provides an invalid JPX data buffer. The test will check if the decode method throws a JpxError with the expected message.

I'll import JpxImage from the correct path. Then, create a buffer with invalid data. Call decode and expect it to throw an error. The error message should match the one from the patch, like "JPX decode failed".

I should also ensure that the test doesn't rely on any external logging, just the error being thrown. That way, it directly tests the behavior change from the patch.

So, the test will be an async function using Jest's it syntax. It will import JpxImage, set up the data, and use expect with toThrow and the specific error message.
</think>

```javascript
it("should throw JpxError with correct message when decoding invalid JPX data", async () => {
  const { JpxImage } = await import("../../src/core/jpx.js");
  const invalidData = new Uint8Array([0x00, 0x00, 0x00, 0x00]); // Invalid JPX data

  await expect(JpxImage.decode(invalidData, false)).rejects.toThrow(
    "JpxError: JPX decode failed"
  );
});
```
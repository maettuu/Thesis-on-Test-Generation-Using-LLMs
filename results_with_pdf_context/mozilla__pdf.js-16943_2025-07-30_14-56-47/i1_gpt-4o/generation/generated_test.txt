it("should apply correct border line width and position adjustment for selected editor", async () => {
  const { AnnotationEditor } = await import("../../src/display/editor/editor.js");
  const { FreeTextEditor } = await import("../../src/display/editor/freetext.js");
  const { InkEditor } = await import("../../src/display/editor/ink.js");

  // Mock getComputedStyle to return a specific outline width
  global.getComputedStyle = () => ({
    getPropertyValue: () => "2px",
  });

  // Initialize editors
  AnnotationEditor.initialize({});
  FreeTextEditor.initialize({});
  InkEditor.initialize({});

  // Create a mock parent with necessary properties
  const mockParent = {
    pageIndex: 0,
    viewport: {
      rotation: 0,
      rawDims: { pageWidth: 100, pageHeight: 100, pageX: 0, pageY: 0 },
    },
  };

  // Create instances of editors
  const freeTextEditor = new FreeTextEditor({
    parent: mockParent,
    id: "freeTextEditor1",
    x: 10,
    y: 10,
    uiManager: {},
  });

  const inkEditor = new InkEditor({
    parent: mockParent,
    id: "inkEditor1",
    x: 10,
    y: 10,
    uiManager: {},
  });

  // Expected border line width
  const expectedBorderLineWidth = 2;

  // Check if the border line width is set correctly
  expect(AnnotationEditor._borderLineWidth).toBe(expectedBorderLineWidth);

  // Check if the position is adjusted correctly
  const [bx, by] = freeTextEditor.#getBaseTranslation();
  expect(bx).toBeCloseTo(-expectedBorderLineWidth / 100);
  expect(by).toBeCloseTo(-expectedBorderLineWidth / 100);

  const [bxInk, byInk] = inkEditor.#getBaseTranslation();
  expect(bxInk).toBeCloseTo(-expectedBorderLineWidth / 100);
  expect(byInk).toBeCloseTo(-expectedBorderLineWidth / 100);
});
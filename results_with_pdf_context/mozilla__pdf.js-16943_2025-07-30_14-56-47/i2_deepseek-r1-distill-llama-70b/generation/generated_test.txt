describe("Editor Resizer Style", () => {
  it("should adjust editor position accounting for border width", async () => {
    const { AnnotationEditor } = await import("../../src/display/editor/editor.js");
    const { FreeTextEditor } = await import("../../src/display/editor/freetext.js");

    // Set up test page with CSS variable
    const html = `
      <html>
        <head>
          <style>
            :root {
              --outline-width: 2px;
            }
          </style>
        </head>
        <body></body>
      </html>
    `;
    const page = await browser.newPage({ content: html });

    // Initialize editor
    const editor = new FreeTextEditor({
      parent: { viewport: { rotation: 0, width: 100, height: 100 } },
      uiManager: {},
      id: "test-editor"
    });

    // Mock getBoundingClientRect to simulate movement
    editor.div.getBoundingClientRect = () => ({ x: 10, y: 20 });

    // Trigger position update
    editor.drag(5, 5);
    editor.fixAndSetPosition();

    // Verify position includes border width adjustment
    const expectedLeft = (10 + 2) / 100; // Border width is 2px
    const expectedTop = (20 + 2) / 100;

    assert.strictEqual(editor.div.style.left, `${expectedLeft.toFixed(2)}%`);
    assert.strictEqual(editor.div.style.top, `${expectedTop.toFixed(2)}%`);
  });
});
it("should change the style of the line and the resizers around a selected editor", async () => {
  const { AnnotationEditor } = await import("../../src/display/editor/editor.js");
  const { FreeTextEditor } = await import("../../src/display/editor/freetext.js");
  const { InkEditor } = await import("../../src/display/editor/ink.js");

  // Mocking necessary elements
  document.documentElement.style.setProperty("--outline-width", "2px");
  const l10n = { get: (str) => Promise.resolve(str) };
  AnnotationEditor.initialize(l10n);
  FreeTextEditor.initialize(l10n);
  InkEditor.initialize(l10n);

  // Create a FreeTextEditor instance
  const freeTextEditor = new FreeTextEditor({
    parent: { pageIndex: 0, viewport: { rotation: 0, rawDims: { pageWidth: 100, pageHeight: 100, pageX: 0, pageY: 0 } } },
    id: "freeTextEditor1",
    uiManager: { viewParameters: { rotation: 0 } },
    x: 10,
    y: 10,
  });

  // Create an InkEditor instance
  const inkEditor = new InkEditor({
    parent: { pageIndex: 0, viewport: { rotation: 0, rawDims: { pageWidth: 100, pageHeight: 100, pageX: 0, pageY: 0 } } },
    id: "inkEditor1",
    uiManager: { viewParameters: { rotation: 0 } },
    x: 10,
    y: 10,
  });

  // Render editors
  const freeTextDiv = freeTextEditor.render();
  const inkDiv = inkEditor.render();

  // Simulate selection
  freeTextEditor.select();
  inkEditor.select();

  // Expected styles
  const expectedBorderWidth = "2px";

  // Actual styles
  const actualFreeTextBorderWidth = getComputedStyle(freeTextDiv).borderWidth;
  const actualInkBorderWidth = getComputedStyle(inkDiv).borderWidth;

  // Assertions
  expect(actualFreeTextBorderWidth).toBe(expectedBorderWidth);
  expect(actualInkBorderWidth).toBe(expectedBorderWidth);
});
it("should change the style of the bounding box and resizers around a selected editor", async () => {
  const { AnnotationEditor } = await import("../../src/display/editor/editor.js");
  const { FreeTextEditor } = await import("../../src/display/editor/freetext.js");
  const { InkEditor } = await import("../../src/display/editor/ink.js");

  // Initialize the editors
  const l10n = { get: (str) => Promise.resolve(str) };
  AnnotationEditor.initialize(l10n);
  FreeTextEditor.initialize(l10n);
  InkEditor.initialize(l10n);

  // Create a mock parent with necessary properties
  const mockParent = {
    pageIndex: 0,
    viewport: {
      rotation: 0,
      rawDims: { pageWidth: 100, pageHeight: 100, pageX: 0, pageY: 0 },
    },
  };

  // Create instances of editors
  const freeTextEditor = new FreeTextEditor({ parent: mockParent, id: "1", x: 10, y: 10 });
  const inkEditor = new InkEditor({ parent: mockParent, id: "2", x: 20, y: 20 });

  // Mock the div element and its style
  freeTextEditor.div = { style: { left: "", top: "" }, scrollIntoView: () => {} };
  inkEditor.div = { style: { left: "", top: "" }, scrollIntoView: () => {} };

  // Set positions
  freeTextEditor.fixAndSetPosition();
  inkEditor.fixAndSetPosition();

  // Expected positions after applying the patch
  const expectedFreeTextLeft = `${(100 * (10 - AnnotationEditor._borderLineWidth / 100)).toFixed(2)}%`;
  const expectedFreeTextTop = `${(100 * (10 - AnnotationEditor._borderLineWidth / 100)).toFixed(2)}%`;
  const expectedInkLeft = `${(100 * (20 - AnnotationEditor._borderLineWidth / 100)).toFixed(2)}%`;
  const expectedInkTop = `${(100 * (20 - AnnotationEditor._borderLineWidth / 100)).toFixed(2)}%`;

  // Compare expected with actual
  expect(freeTextEditor.div.style.left).toBe(expectedFreeTextLeft);
  expect(freeTextEditor.div.style.top).toBe(expectedFreeTextTop);
  expect(inkEditor.div.style.left).toBe(expectedInkLeft);
  expect(inkEditor.div.style.top).toBe(expectedInkTop);
});
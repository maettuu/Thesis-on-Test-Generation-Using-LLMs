it("should render password fields as password inputs", async () => {
  const { getDocument } = await import("../../src/display/api.js");
  const { buildGetDocumentParams } = await import("./test_utils.js");
  const loadingTask = getDocument(buildGetDocumentParams('issue19389.pdf'));

  const { numPages, dests } = await loadingTask;
  const page = await loadingTask.getPage(1);
  const annotations = await page.getAnnotations();

  const textWidgetAnnotation = annotations.find(annotation => 
    annotation instanceof TextWidgetAnnotation &&
    annotation.data.fieldType === 'Btn' && // Assuming password field is of type Btn
    annotation.hasFieldFlag(AnnotationFieldFlag.PASSWORD)
  );

  if (!textWidgetAnnotation) {
    throw new Error("Password field annotation not found");
  }

  const annotationStorage = new (await import("./annotation_storage.js")).AnnotationStorage();
  const element = await textWidgetAnnotation.render({
    renderForms: true,
    annotationStorage,
    data: textWidgetAnnotation.data
  });

  const inputElement = element.querySelector("input");
  if (!inputElement) {
    throw new Error("Input element not found");
  }

  expect(inputElement.type).toBe("password");
});
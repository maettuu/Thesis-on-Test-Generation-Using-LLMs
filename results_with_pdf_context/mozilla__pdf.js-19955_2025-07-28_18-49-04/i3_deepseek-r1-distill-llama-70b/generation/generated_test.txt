it("should generate text layer for issuepdf", async () => {
  const { PartialEvaluator } = await import("../../src/core/evaluator.js");
  const { getDocument } = await import("../../src/display/api.js");
  const { buildGetDocumentParams } = await import("./test_utils.js");

  const xref = new XRefMock();
  const evaluator = new PartialEvaluator({
    xref,
    handler: {
      send: () => {},
      sendWithPromise: () => Promise.resolve(),
    },
    pageIndex: 0,
    idFactory: createIdFactory(),
    fontCache: new Map(),
    builtInCMapCache: new Map(),
    standardFontDataCache: new Map(),
    globalColorSpaceCache: new Map(),
    globalImageCache: new Map(),
    systemFontCache: new Map(),
    options: {
      useSystemFonts: false,
    },
  });

  const fontDict = new Dict({
    Type: "Font",
    Subtype: "Type3",
    FontBBox: [0, 0, 0, 0],
    FontName: new Name("TestFont"),
  });

  const loadingTask = getDocument(buildGetDocumentParams('issue19954.pdf'));
  const doc = await loadingTask;
  const page = await doc.getPage(1);
  const textContent = await page.getTextContent({
    disableNormalization: true,
  });

  expect(textContent.items.length).toBeGreaterThan(0);
});
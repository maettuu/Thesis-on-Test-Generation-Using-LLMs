it("should load font without throwing an error", async () => {
  const { getDocument } = await import('../../src/display/api.js');
  const { buildGetDocumentParams } = await import('./test_utils.js');
  const loadingTask = getDocument(buildGetDocumentParams('21_10_2024_FAMI_INVERSION_SAS_901060703_inicial.pdf'));
  const pdfDocument = await loadingTask.promise;
  const pdfPage = await pdfDocument.getPage(1);
  const operatorList = new (await import('../../src/core/operator_list.js')).OperatorList();
  const partialEvaluator = new (await import('../../src/core/evaluator.js')).PartialEvaluator({
    xref: pdfDocument.xref,
    handler: null,
    pageIndex: 0,
    idFactory: pdfDocument.idFactory,
    fontCache: new (await import('../../src/core/evaluator.js')).RefSetCache(),
    builtInCMapCache: new (await import('../../src/core/cmap.js')).CMapCache(),
    standardFontDataCache: new (await import('../../src/core/evaluator.js')).RefSetCache(),
    globalImageCache: new (await import('../../src/core/image_utils.js')).GlobalImageCache(),
    systemFontCache: new (await import('../../src/core/font_substitutions.js')).SystemFontCache(),
  });
  const font = await partialEvaluator.loadFont('Arial', null, pdfPage.resources, null, null);
  expect(font).not.toBeNull();
});
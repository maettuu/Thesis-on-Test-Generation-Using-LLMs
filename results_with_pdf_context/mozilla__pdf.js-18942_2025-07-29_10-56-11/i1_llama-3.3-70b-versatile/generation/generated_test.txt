it("should translate font without throwing TypeError when fontFile is a Dict", async () => {
  const { getDocument } = await import('../../src/display/api.js');
  const { buildGetDocumentParams } = await import('./test_utils.js');
  const loadingTask = await getDocument(buildGetDocumentParams('issue18941.pdf'));
  const pdfDocument = await loadingTask.promise;
  const page = await pdfDocument.getPage(1);
  const operatorList = await page.getOperatorList();
  const partialEvaluator = new (await import('../../src/core/evaluator.js')).PartialEvaluator({
    xref: pdfDocument.xref,
    handler: null,
    pageIndex: 0,
    idFactory: await import('./test_utils.js').then(module => module.createIdFactory()),
    fontCache: {},
    builtInCMapCache: {},
    standardFontDataCache: {},
    globalImageCache: {},
    systemFontCache: {},
    options: {}
  });
  const fontDescriptor = new (await import('../../src/core/primitives.js')).Dict();
  fontDescriptor.set("FontFile", new (await import('../../src/core/primitives.js')).Dict());
  const font = await partialEvaluator.translateFont({
    descriptor: fontDescriptor,
    dict: new (await import('../../src/core/primitives.js')).Dict(),
    baseDict: new (await import('../../src/core/primitives.js')).Dict(),
    composite: false,
    type: "Type1",
    firstChar: 0,
    lastChar: 0,
    toUnicode: null,
    cssFontInfo: null,
  });
  expect(font).toBeInstanceOf((await import('../../src/core/evaluator.js')).Font);
});
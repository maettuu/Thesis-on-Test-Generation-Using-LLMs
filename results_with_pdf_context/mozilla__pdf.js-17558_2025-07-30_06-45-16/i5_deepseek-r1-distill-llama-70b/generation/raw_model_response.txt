<think>
Okay, I need to write a regression test for the issue where emojis aren't shown in PDFs. The patch provided makes some changes to the code, so I should figure out what the test needs to check.

First, I'll look at the patch. It modifies the FreeTextAnnotation class and removes the FakeUnicodeFont's toUnicodeRef. It also adds a codePointIter function. So the issue is probably related to how Unicode characters, especially emojis, are handled when generating PDFs.

The test should check if emojis are correctly rendered. I'll need to create a PDF with an emoji and see if it's displayed properly.

I'll use the provided PDF file, bug1669097.pdf. The test will load this PDF and check the text in the first page. If the emoji is rendered correctly, the text should include the emoji character.

Before the patch, the test would fail because the emoji isn't shown. After the patch, it should pass.

So the test will:
1. Load the PDF using getDocument.
2. Get the first page.
3. Get the text content of the page.
4. Check if the text includes the emoji (like "ðŸ‘‹").

I need to write this as a JavaScript test using the provided imports. I'll structure it as an async test block.

I should make sure to import the necessary modules dynamically and handle any potential errors, but since it's a test, I can assume the PDF loads correctly.

The test will look something like this: load the PDF, extract the text, and assert that the emoji is present.

I think that's all. Now, I'll write the code accordingly.
</think>

```javascript
it("should display emojis in PDFs", async () => {
  const { getDocument } = await import('../../src/display/api.js');
  const { buildGetDocumentParams } = await import('./test_utils.js');
  
  const loadingTask = getDocument(buildGetDocumentParams('bug1669097.pdf'));
  const pdf = await loadingTask.promise;
  const page = await pdf.getPage(1);
  const textContent = await page.getTextContent();
  
  const expectedEmoji = "ðŸ‘‹"; // Or the specific emoji present in the PDF
  assert.include(textContent.items[0].str, expectedEmoji);
});
```
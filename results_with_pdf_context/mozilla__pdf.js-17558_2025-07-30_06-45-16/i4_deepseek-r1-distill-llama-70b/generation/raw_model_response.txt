<think>
Okay, I need to write a test that checks if the patch fixes the issue where emojis aren't shown in PDFs. The issue is related to the FreeTextAnnotation, so I'll focus on that.

First, I'll import the necessary modules. I'll use getDocument from the display API and buildGetDocumentParams from test_utils.js to load the test PDF.

Next, I'll load the PDF file, bug1669097.pdf, using these imports. I'll create a loading task and wait for it to resolve, then get the first page.

I'll retrieve the annotations from the first page. Since the issue is with emojis, I'll look for a FreeTextAnnotation. I'll loop through the annotations and find the one with the correct subtype.

Once I have the annotation, I'll extract its text content. Before the patch, this might not include emojis correctly, so I'll check if the text includes the expected emoji.

If the text includes the emoji, the test passes; otherwise, it fails. This will ensure that the patch correctly renders emojis in PDFs.
</think>

```javascript
it("should correctly render emojis in FreeTextAnnotations", async () => {
  const { getDocument } = await import("../../src/display/api.js");
  const { buildGetDocumentParams } = await import("./test_utils.js");
  const loadingTask = getDocument(buildGetDocumentParams('bug1669097.pdf'));
  
  const pdfDoc = await loadingTask;
  const page = await pdfDoc.getPage(0);
  const annotations = await page.getAnnotations();
  
  const freeTextAnnotation = annotations.find(annotation => annotation instanceof MarkupAnnotation && annotation.data.annotationType === "FreeText");
  const textContent = await freeTextAnnotation.extractTextContent({ task: {} });
  
  expect(textContent.textContent).toContain("üëç");
});
```
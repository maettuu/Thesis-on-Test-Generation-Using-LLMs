Before you begin:
- Keep going until the job is completely solved — don’t stop halfway.
- If you’re unsure about the behavior, reread the provided patch carefully; do not hallucinate.
- Plan your approach before writing code by reflecting on whether the test truly fails before and passes after.

Issue:
<issue>
Only allow supported image types when selecting an image in the stamp annotation
</issue>

Patch:
<patch>
diff --git a/src/display/editor/stamp.js b/src/display/editor/stamp.js
--- a/src/display/editor/stamp.js
+++ b/src/display/editor/stamp.js
@@ -13,8 +13,8 @@
  * limitations under the License.
  */
 
+import { AnnotationEditorType, shadow } from "../../shared/util.js";
 import { AnnotationEditor } from "./editor.js";
-import { AnnotationEditorType } from "../../shared/util.js";
 import { PixelsPerInch } from "../display_utils.js";
 import { StampAnnotationElement } from "../annotation_layer.js";
 
@@ -45,6 +45,27 @@ class StampEditor extends AnnotationEditor {
     this.#bitmapUrl = params.bitmapUrl;
   }
 
+  static get supportedTypes() {
+    // See https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types
+    // to know which types are supported by the browser.
+    const types = [
+      "apng",
+      "avif",
+      "bmp",
+      "gif",
+      "jpeg",
+      "png",
+      "svg+xml",
+      "webp",
+      "x-icon",
+    ];
+    return shadow(
+      this,
+      "supportedTypes",
+      types.map(type => `image/${type}`).join(",")
+    );
+  }
+
   #getBitmap() {
     if (this.#bitmapId) {
       this._uiManager.imageManager.getFromId(this.#bitmapId).then(data => {
@@ -86,7 +107,7 @@ class StampEditor extends AnnotationEditor {
       document.body.append(input);
     }
     input.type = "file";
-    input.accept = "image/*";
+    input.accept = StampEditor.supportedTypes;
     this.#bitmapPromise = new Promise(resolve => {
       input.addEventListener("change", async () => {
         this.#bitmapPromise = null;


</patch>

Imports:
<imports>
Available Packages
Dev Dependencies:
- @babel/core: ^7.22.9
- @babel/plugin-transform-modules-commonjs: ^7.22.5
- @babel/preset-env: ^7.22.9
- @babel/runtime: ^7.22.6
- @javascript-obfuscator/escodegen: 2.3.0
- acorn: ^8.10.0
- autoprefixer: ^10.4.14
- babel-loader: ^9.1.3
- caniuse-lite: ^1.0.30001517
- canvas: ^2.11.2
- core-js: ^3.31.1
- cross-env: ^7.0.3
- es-module-shims: 1.4.7
- eslint: ^8.45.0
- eslint-config-prettier: ^8.8.0
- eslint-plugin-fetch-options: ^0.0.5
- eslint-plugin-html: ^7.1.0
- eslint-plugin-import: ^2.27.5
- eslint-plugin-json: ^3.1.0
- eslint-plugin-mozilla: ^3.1.0
- eslint-plugin-no-unsanitized: ^4.0.2
- eslint-plugin-prettier: ^5.0.0
- eslint-plugin-sort-exports: ^0.8.0
- eslint-plugin-unicorn: ^48.0.0
- globals: ^13.20.0
- gulp: ^4.0.2
- gulp-postcss: ^9.0.1
- gulp-rename: ^2.0.0
- gulp-replace: ^1.1.4
- gulp-zip: ^5.1.0
- jasmine: ^5.1.0
- jsdoc: ^4.0.2
- jstransformer-markdown-it: ^3.0.0
- merge-stream: ^2.0.0
- mkdirp: ^3.0.1
- needle: ^3.2.0
- path2d-polyfill: ^2.0.1
- pngjs: ^7.0.0
- postcss: ^8.4.27
- postcss-dir-pseudo-class: ^8.0.0
- prettier: ^3.0.0
- puppeteer: ^20.9.0
- rimraf: ^3.0.2
- streamqueue: ^1.1.2
- stylelint: ^15.10.2
- stylelint-prettier: ^4.0.0
- terser: ^5.19.2
- through2: ^4.0.2
- ttest: ^4.0.0
- typescript: ^5.1.6
- typogr: ^0.6.8
- vinyl: ^3.0.0
- webpack: ^5.88.2
- webpack-stream: ^7.0.0
- wintersmith: ^2.5.0
- yargs: ^17.7.2

Engines:
- node: >=18

Available Relative Imports:
- `../../src/core/annotation.js`: Annotation, AnnotationBorderStyle, AnnotationFactory, MarkupAnnotation, getQuadPoints
- `../../src/core/bidi.js`: bidi
- `../../src/core/cff_parser.js`: CFFCharset, CFFCompiler, CFFFDSelect, CFFParser, CFFStrings
- `../../src/core/cmap.js`: CMap, CMapFactory, IdentityCMap
- `../../src/core/colorspace.js`: ColorSpace
- `../../src/core/core_utils.js`: arrayBuffersToBytes, encodeToXmlString, escapePDFName, escapeString, getInheritableProperty, isAscii, isWhiteSpace, log2, numberToString, parseXFAPath, recoverJsURL, stringToUTF16HexString, stringToUTF16String, toRomanNumerals, validateCSSFont
- `../../src/core/crypto.js`: AES128Cipher, AES256Cipher, ARCFourCipher, CipherTransformFactory, PDF17, PDF20, calculateMD5, calculateSHA256, calculateSHA384, calculateSHA512
- `../../src/core/default_appearance.js`: createDefaultAppearance, parseAppearanceStream, parseDefaultAppearance
- `../../src/core/document.js`: PDFDocument, Page
- `../../src/core/encodings.js`: getEncoding
- `../../src/core/evaluator.js`: PartialEvaluator
- `../../src/core/font_substitutions.js`: getFontSubstitution
- `../../src/core/fonts_utils.js`: SEAC_ANALYSIS_ENABLED
- `../../src/core/function.js`: PDFFunctionFactory, PostScriptCompiler, PostScriptEvaluator
- `../../src/core/glyphlist.js`: getDingbatsGlyphsUnicode, getGlyphsUnicode
- `../../src/core/image_utils.js`: GlobalImageCache, LocalColorSpaceCache
- `../../src/core/jbig2.js`: Jbig2Image
- `../../src/core/jpg.js`: JpegImage
- `../../src/core/jpx.js`: JpxImage
- `../../src/core/metadata_parser.js`: MetadataParser
- `../../src/core/operator_list.js`: OperatorList
- `../../src/core/parser.js`: Lexer, Linearization, Parser
- `../../src/core/predictor_stream.js`: PredictorStream
- `../../src/core/primitives.js`: Cmd, Dict, EOF, Name, Ref, RefSet, RefSetCache, isCmd, isDict, isName, isRefsEqual
- `../../src/core/ps_parser.js`: PostScriptLexer, PostScriptParser
- `../../src/core/stream.js`: NullStream, Stream, StringStream
- `../../src/core/type1_parser.js`: Type1Parser
- `../../src/core/unicode.js`: getCharUnicodeCategory, getUnicodeForGlyph, getUnicodeRangeFor, mapSpecialUnicodeValues
- `../../src/core/worker.js`: WorkerMessageHandler, WorkerTask
- `../../src/core/writer.js`: incrementalUpdate, writeDict
- `../../src/core/xfa/bind.js`: Binder
- `../../src/core/xfa/data.js`: DataHandler
- `../../src/core/xfa/factory.js`: XFAFactory
- `../../src/core/xfa/formcalc_lexer.js`: Lexer, TOKEN, Token
- `../../src/core/xfa/formcalc_parser.js`: Errors, Parser
- `../../src/core/xfa/parser.js`: XFAParser
- `../../src/core/xfa/som.js`: searchNode
- `../../src/core/xfa/symbol_utils.js`: $dump, $getChildren, $getChildrenByClass, $getChildrenByName, $text, $uid
- `../../src/core/xml_parser.js`: SimpleXMLParser, XMLParserBase
- `../../src/display/annotation_layer.js`: AnnotationLayer
- `../../src/display/annotation_storage.js`: AnnotationStorage
- `../../src/display/api.js`: DefaultCMapReaderFactory, DefaultCanvasFactory, DefaultStandardFontDataFactory, LoopbackPort, PDFDataRangeTransport, PDFDocumentLoadingTask, PDFDocumentProxy, PDFPageProxy, PDFWorker, PDFWorkerUtil, RenderTask, SVGGraphics, build, getDocument, version
- `../../src/display/display_utils.js`: DOMCanvasFactory, DOMSVGFactory, PDFDateString, PageViewport, PixelsPerInch, RenderingCancelledException, StatTimer, getFilenameFromUrl, getPdfFilenameFromUrl, getXfaPageViewport, isDataScheme, isPdfFile, isValidFetchUrl, loadScript, setLayerDimensions
- `../../src/display/editor/annotation_editor_layer.js`: AnnotationEditorLayer
- `../../src/display/editor/tools.js`: AnnotationEditorUIManager, CommandManager
- `../../src/display/fetch_stream.js`: PDFFetchStream
- `../../src/display/metadata.js`: Metadata
- `../../src/display/network.js`: PDFNetworkStream
- `../../src/display/network_utils.js`: createResponseStatusError, extractFilenameFromHeader, validateRangeRequestCapabilities, validateResponseStatus
- `../../src/display/node_stream.js`: PDFNodeStream
- `../../src/display/svg.js`: SVGGraphics
- `../../src/display/text_layer.js`: TextLayerRenderTask, renderTextLayer, updateTextLayer
- `../../src/display/worker_options.js`: GlobalWorkerOptions
- `../../src/display/xfa_layer.js`: XfaLayer
- `../../src/shared/message_handler.js`: MessageHandler
- `../../src/shared/murmurhash3.js`: MurmurHash3_64
- `../../src/shared/util.js`: AbortException, AnnotationBorderStyleType, AnnotationEditorParamsType, AnnotationEditorType, AnnotationFieldFlag, AnnotationFlag, AnnotationMode, AnnotationType, CMapCompressionType, FeatureTest, FormatError, ImageKind, InvalidPDFException, MissingPDFException, OPS, PasswordException, PasswordResponses, PermissionFlag, PromiseCapability, RenderingIntentFlag, UnexpectedResponseException, UnknownErrorException, Util, VerbosityLevel, bytesToString, createValidAbsoluteUrl, getModificationDate, getVerbosityLevel, isArrayBuffer, isNodeJS, normalizeUnicode, objectSize, setVerbosityLevel, shadow, string32, stringToBytes, stringToPDFString, stringToUTF8String
- `../../web/annotation_layer_builder.js`: AnnotationLayerBuilder
- `../../web/download_manager.js`: DownloadManager
- `../../web/event_utils.js`: EventBus, WaitOnType, waitOnEventOrTimeout
- `../../web/genericl10n.js`: GenericL10n
- `../../web/l10n_utils.js`: NullL10n
- `../../web/pdf_find_controller.js`: FindState, PDFFindController
- `../../web/pdf_find_utils.js`: CharacterType, getCharacterType
- `../../web/pdf_history.js`: PDFHistory, isDestArraysEqual, isDestHashesEqual
- `../../web/pdf_link_service.js`: LinkTarget, PDFLinkService, SimpleLinkService
- `../../web/pdf_page_view.js`: PDFPageView
- `../../web/pdf_scripting_manager.component.js`: PDFScriptingManager
- `../../web/pdf_single_page_viewer.js`: PDFSinglePageViewer
- `../../web/pdf_viewer.js`: PDFPageViewBuffer, PDFViewer
- `../../web/struct_tree_layer_builder.js`: StructTreeLayerBuilder
- `../../web/text_layer_builder.js`: TextLayerBuilder
- `../../web/ui_utils.js`: AutoPrintRegExp, ProgressBar, RenderingStates, ScrollMode, SpreadMode, backtrackBeforeAllVisibleElements, binarySearchFirstItem, getPageSizeInches, getVisibleElements, isPortraitOrientation, isValidRotation, parseQueryString, removeNullCharacters
- `../../web/xfa_layer_builder.js`: XfaLayerBuilder
- `./test_utils.js`: CMAP_URL, DefaultFileReaderFactory, STANDARD_FONT_DATA_URL, TEST_PDFS_PATH, XRefMock, buildGetDocumentParams, createIdFactory
- `./testreporter.js`: TestReporter
</imports>

Code:
<code>
File:
src/display/editor/stamp.js
1 /* Copyright 2022 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 import { AnnotationEditor } from "./editor.js";
17 import { AnnotationEditorType } from "../../shared/util.js";
18 import { PixelsPerInch } from "../display_utils.js";
19 import { StampAnnotationElement } from "../annotation_layer.js";
20 
21 /**
22  * Basic text editor in order to create a FreeTex annotation.
23  */
24 class StampEditor extends AnnotationEditor {
25   #bitmap = null;
26 
27   #bitmapId = null;
28 
29   #bitmapPromise = null;
30 
31   #bitmapUrl = null;
32 
33   #canvas = null;
34 
35   #observer = null;
36 
37   #resizeTimeoutId = null;
38 
39   #isSvg = false;
40 
41   static _type = "stamp";
42 
43   constructor(params) {
44     super({ ...params, name: "stampEditor" });
45     this.#bitmapUrl = params.bitmapUrl;
46   }
47 
48   #getBitmap() {
49     if (this.#bitmapId) {
50       this._uiManager.imageManager.getFromId(this.#bitmapId).then(data => {
51         if (!data) {
52           this.remove();
53           return;
54         }
55         this.#bitmap = data.bitmap;
56         this.#createCanvas();
57       });
58       return;
59     }
60 
61     if (this.#bitmapUrl) {
62       const url = this.#bitmapUrl;
63       this.#bitmapUrl = null;
64       this.#bitmapPromise = this._uiManager.imageManager
65         .getFromUrl(url)
66         .then(data => {
67           this.#bitmapPromise = null;
68           if (!data) {
69             this.remove();
70             return;
71           }
72           ({
73             bitmap: this.#bitmap,
74             id: this.#bitmapId,
75             isSvg: this.#isSvg,
76           } = data);
77           this.#createCanvas();
78         });
79       return;
80     }
81 
82     const input = document.createElement("input");
83     if (typeof PDFJSDev !== "undefined" && PDFJSDev.test("TESTING")) {
84       input.hidden = true;
85       input.id = "stampEditorFileInput";
86       document.body.append(input);
87     }
88     input.type = "file";
89     input.accept = "image/*";
90     this.#bitmapPromise = new Promise(resolve => {
91       input.addEventListener("change", async () => {
92         this.#bitmapPromise = null;
93         if (!input.files || input.files.length === 0) {
94           this.remove();
95         } else {
96           const data = await this._uiManager.imageManager.getFromFile(
97             input.files[0]
98           );
99           if (!data) {
100             this.remove();
101             return;
102           }
103           ({
104             bitmap: this.#bitmap,
105             id: this.#bitmapId,
106             isSvg: this.#isSvg,
107           } = data);
108           this.#createCanvas();
109         }
110         if (typeof PDFJSDev !== "undefined" && PDFJSDev.test("TESTING")) {
111           input.remove();
112         }
113         resolve();
114       });
115       input.addEventListener("cancel", () => {
116         this.#bitmapPromise = null;
117         this.remove();
118         resolve();
119       });
120     });
121     if (typeof PDFJSDev === "undefined" || !PDFJSDev.test("TESTING")) {
122       input.click();
123     }
124   }
125 
126   /** @inheritdoc */
127   remove() {
128     if (this.#bitmapId) {
129       this.#bitmap = null;
130       this._uiManager.imageManager.deleteId(this.#bitmapId);
131       this.#canvas?.remove();
132       this.#canvas = null;
133       this.#observer?.disconnect();
134       this.#observer = null;
135     }
136     super.remove();
137   }
138 
139   /** @inheritdoc */
140   rebuild() {
141     super.rebuild();
142     if (this.div === null) {
143       return;
144     }
145 
146     if (this.#bitmapId) {
147       this.#getBitmap();
148     }
149 
150     if (!this.isAttachedToDOM) {
151       // At some point this editor was removed and we're rebuilting it,
152       // hence we must add it to its parent.
153       this.parent.add(this);
154     }
155   }
156 
157   /** @inheritdoc */
158   onceAdded() {
159     this.div.draggable = true;
160     this.parent.addUndoableEditor(this);
161     this.div.focus();
162   }
163 
164   /** @inheritdoc */
165   isEmpty() {
166     return (
167       this.#bitmapPromise === null &&
168       this.#bitmap === null &&
169       this.#bitmapUrl === null
170     );
171   }
172 
173   /** @inheritdoc */
174   get isResizable() {
175     return true;
176   }
177 
178   /** @inheritdoc */
179   render() {
180     if (this.div) {
181       return this.div;
182     }
183 
184     let baseX, baseY;
185     if (this.width) {
186       baseX = this.x;
187       baseY = this.y;
188     }
189 
190     super.render();
191 
192     if (this.#bitmap) {
193       this.#createCanvas();
194     } else {
195       this.div.classList.add("loading");
196       this.#getBitmap();
197     }
198 
199     if (this.width) {
200       // This editor was created in using copy (ctrl+c).
201       const [parentWidth, parentHeight] = this.parentDimensions;
202       this.setAt(
203         baseX * parentWidth,
204         baseY * parentHeight,
205         this.width * parentWidth,
206         this.height * parentHeight
207       );
208     }
209 
210     return this.div;
211   }
212 
213   #createCanvas() {
214     const { div } = this;
215     let { width, height } = this.#bitmap;
216     const [pageWidth, pageHeight] = this.pageDimensions;
217     const MAX_RATIO = 0.75;
218     if (this.width) {
219       width = this.width * pageWidth;
220       height = this.height * pageHeight;
221     } else if (
222       width > MAX_RATIO * pageWidth ||
223       height > MAX_RATIO * pageHeight
224     ) {
225       // If the the image is too big compared to the page dimensions
226       // (more than MAX_RATIO) then we scale it down.
227       const factor = Math.min(
228         (MAX_RATIO * pageWidth) / width,
229         (MAX_RATIO * pageHeight) / height
230       );
231       width *= factor;
232       height *= factor;
233     }
234     const [parentWidth, parentHeight] = this.parentDimensions;
235     this.setDims(
236       (width * parentWidth) / pageWidth,
237       (height * parentHeight) / pageHeight
238     );
239 
240     const canvas = (this.#canvas = document.createElement("canvas"));
241     div.append(canvas);
242     this.#drawBitmap(width, height);
243     this.#createObserver();
244     div.classList.remove("loading");
245   }
246 
247   /**
248    * When the dimensions of the div change the inner canvas must
249    * renew its dimensions, hence it must redraw its own contents.
250    * @param {number} width - the new width of the div
251    * @param {number} height - the new height of the div
252    * @returns
253    */
254   #setDimensions(width, height) {
255     const [parentWidth, parentHeight] = this.parentDimensions;
256     this.width = width / parentWidth;
257     this.height = height / parentHeight;
258     this.setDims(width, height);
259     this.fixAndSetPosition();
260     if (this.#resizeTimeoutId !== null) {
261       clearTimeout(this.#resizeTimeoutId);
262     }
263     // When the user is resizing the editor we just use CSS to scale the image
264     // to avoid redrawing it too often.
265     // And once the user stops resizing the editor we redraw the image in
266     // rescaling it correctly (see this.#scaleBitmap).
267     const TIME_TO_WAIT = 200;
268     this.#resizeTimeoutId = setTimeout(() => {
269       this.#resizeTimeoutId = null;
270       this.#drawBitmap(width, height);
271     }, TIME_TO_WAIT);
272   }
273 
274   #scaleBitmap(width, height) {
275     const { width: bitmapWidth, height: bitmapHeight } = this.#bitmap;
276 
277     let newWidth = bitmapWidth;
278     let newHeight = bitmapHeight;
279     let bitmap = this.#bitmap;
280     while (newWidth > 2 * width || newHeight > 2 * height) {
281       const prevWidth = newWidth;
282       const prevHeight = newHeight;
283 
284       if (newWidth > 2 * width) {
285         // See bug 1820511 (Windows specific bug).
286         // TODO: once the above bug is fixed we could revert to:
287         // newWidth = Math.ceil(newWidth / 2);
288         newWidth =
289           newWidth >= 16384
290             ? Math.floor(newWidth / 2) - 1
291             : Math.ceil(newWidth / 2);
292       }
293       if (newHeight > 2 * height) {
294         newHeight =
295           newHeight >= 16384
296             ? Math.floor(newHeight / 2) - 1
297             : Math.ceil(newHeight / 2);
298       }
299 
300       const offscreen = new OffscreenCanvas(newWidth, newHeight);
301       const ctx = offscreen.getContext("2d");
302       ctx.drawImage(
303         bitmap,
304         0,
305         0,
306         prevWidth,
307         prevHeight,
308         0,
309         0,
310         newWidth,
311         newHeight
312       );
313       bitmap = offscreen.transferToImageBitmap();
314     }
315 
316     return bitmap;
317   }
318 
319   #drawBitmap(width, height) {
320     const canvas = this.#canvas;
321     if (!canvas || (canvas.width === width && canvas.height === height)) {
322       return;
323     }
324     canvas.width = width;
325     canvas.height = height;
326     const bitmap = this.#isSvg
327       ? this.#bitmap
328       : this.#scaleBitmap(width, height);
329     const ctx = canvas.getContext("2d");
330     ctx.filter = this._uiManager.hcmFilter;
331     ctx.drawImage(
332       bitmap,
333       0,
334       0,
335       bitmap.width,
336       bitmap.height,
337       0,
338       0,
339       width,
340       height
341     );
342   }
343 
344   #serializeBitmap(toUrl) {
345     if (toUrl) {
346       if (this.#isSvg) {
347         const url = this._uiManager.imageManager.getSvgUrl(this.#bitmapId);
348         if (url) {
349           return url;
350         }
351       }
352       // We convert to a data url because it's sync and the url can live in the
353       // clipboard.
354       const canvas = document.createElement("canvas");
355       ({ width: canvas.width, height: canvas.height } = this.#bitmap);
356       const ctx = canvas.getContext("2d");
357       ctx.drawImage(this.#bitmap, 0, 0);
358 
359       return canvas.toDataURL();
360     }
361 
362     if (this.#isSvg) {
363       const [pageWidth, pageHeight] = this.pageDimensions;
364       // Multiply by PixelsPerInch.PDF_TO_CSS_UNITS in order to increase the
365       // image resolution when rasterizing it.
366       const width = Math.round(
367         this.width * pageWidth * PixelsPerInch.PDF_TO_CSS_UNITS
368       );
369       const height = Math.round(
370         this.height * pageHeight * PixelsPerInch.PDF_TO_CSS_UNITS
371       );
372       const offscreen = new OffscreenCanvas(width, height);
373       const ctx = offscreen.getContext("2d");
374       ctx.drawImage(
375         this.#bitmap,
376         0,
377         0,
378         this.#bitmap.width,
379         this.#bitmap.height,
380         0,
381         0,
382         width,
383         height
384       );
385       return offscreen.transferToImageBitmap();
386     }
387 
388     return structuredClone(this.#bitmap);
389   }
390 
391   /**
392    * Create the resize observer.
393    */
394   #createObserver() {
395     this.#observer = new ResizeObserver(entries => {
396       const rect = entries[0].contentRect;
397       if (rect.width && rect.height) {
398         this.#setDimensions(rect.width, rect.height);
399       }
400     });
401     this.#observer.observe(this.div);
402   }
403 
404   /** @inheritdoc */
405   static deserialize(data, parent, uiManager) {
406     if (data instanceof StampAnnotationElement) {
407       return null;
408     }
409     const editor = super.deserialize(data, parent, uiManager);
410     const { rect, bitmapUrl, bitmapId, isSvg } = data;
411     if (bitmapId && uiManager.imageManager.isValidId(bitmapId)) {
412       editor.#bitmapId = bitmapId;
413     } else {
414       editor.#bitmapUrl = bitmapUrl;
415     }
416     editor.#isSvg = isSvg;
417 
418     const [parentWidth, parentHeight] = editor.pageDimensions;
419     editor.width = (rect[2] - rect[0]) / parentWidth;
420     editor.height = (rect[3] - rect[1]) / parentHeight;
421 
422     return editor;
423   }
424 
425   /** @inheritdoc */
426   serialize(isForCopying = false, context = null) {
427     if (this.isEmpty()) {
428       return null;
429     }
430 
431     const serialized = {
432       annotationType: AnnotationEditorType.STAMP,
433       bitmapId: this.#bitmapId,
434       pageIndex: this.pageIndex,
435       rect: this.getRect(0, 0),
436       rotation: this.rotation,
437       isSvg: this.#isSvg,
438     };
439 
440     if (isForCopying) {
441       // We don't know what's the final destination (this pdf or another one)
442       // of this annotation and the clipboard doesn't support ImageBitmaps,
443       // hence we serialize the bitmap to a data url.
444       serialized.bitmapUrl = this.#serializeBitmap(/* toUrl = */ true);
445       return serialized;
446     }
447 
448     if (context === null) {
449       return serialized;
450     }
451 
452     context.stamps ||= new Map();
453     const area = this.#isSvg
454       ? (serialized.rect[2] - serialized.rect[0]) *
455         (serialized.rect[3] - serialized.rect[1])
456       : null;
457     if (!context.stamps.has(this.#bitmapId)) {
458       // We don't want to have multiple copies of the same bitmap in the
459       // annotationMap, hence we only add the bitmap the first time we meet it.
460       context.stamps.set(this.#bitmapId, { area, serialized });
461       serialized.bitmap = this.#serializeBitmap(/* toUrl = */ false);
462     } else if (this.#isSvg) {
463       // If we have multiple copies of the same svg but with different sizes,
464       // then we want to keep the biggest one.
465       const prevData = context.stamps.get(this.#bitmapId);
466       if (area > prevData.area) {
467         prevData.area = area;
468         prevData.serialized.bitmap.close();
469         prevData.serialized.bitmap = this.#serializeBitmap(/* toUrl = */ false);
470       }
471     }
472     return serialized;
473   }
474 }
475 
476 export { StampEditor };
</code>

Your task:
You are a software tester at pdf.js.
1. Create a new test file that includes:
   - All necessary imports (use only the provided imports and respect the paths exactly how they are given) — no new dependencies.).
   - A top-level `describe("<brief suite name>", () => {{ ... }})`.
   - Exactly one `it("...", async () => {{ ... }})` inside that block.
2. The `it` test must fail on the code before the patch, and pass after, hence the test will verify that the patch resolves the issue.
3. Keep the file self-contained — no external dependencies beyond those you import here.
4. Return only the full JavaScript file contents (no comments explanations).

Example structure:
import { example } from "../../src/core/example.js";

describe("<describe purpose>", () => {
  it("<describe behavior>", async () => {
    <initialize required variables>;
    <define expected variable>;
    <generate actual variables>;
    <compare expected with actual>;
  });
});


it("should render text when browserdisplayusedocumentfonts is disabled", async () => {
  const { getDocument } = await import("../../src/display/api.js");
  const { buildGetDocumentParams } = await import("./test_utils.js");

  const loadingTask = getDocument(buildGetDocumentParams('issue20065.pdf'));

  const pdf = await loadingTask;
  const page = await pdf.getPage(1);

  const canvas = {
    getContext: () => ({
      measureText: () => ({ width: 0 }),
      fillText: () => {},
      strokeText: () => {},
      getTransform: () => ({
        a: 1,
        b: 0,
        c: 0,
        d: 1,
        e: 0,
        f: 0
      }),
      setTransform: () => {},
      save: () => {},
      restore: () => {},
      translate: () => {},
      scale: () => {},
      clip: () => {},
      beginPath: () => {},
      closePath: () => {},
      lineTo: () => {},
      moveTo: () => {},
      addPath: () => {},
      rect: () => {},
      transform: () => {},
      rotate: () => {},
      resetTransform: () => {},
      createLinearGradient: () => ({
        addColorStop: () => {}
      }),
      createPattern: () => ({
        setTransform: () => {}
      })
    })
  };

  const mockCanvas = () => canvas;

  global.HTMLCanvasElement = mockCanvas;

  const viewport = page.getViewport({ scale: 1 });

  await page.render({
    canvasContext: canvas.getContext('2d'),
    viewport: viewport
  });

  const text = await page.getTextContent();
  expect(text.items[0].str).toContain('2025');
});
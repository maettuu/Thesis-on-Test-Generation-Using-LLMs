it("should create a free highlight on an image", async () => {
  const { PDFDocument } = await import("../../src/core/pdf_document.js");
  const { PDFPageProxy } = await import("../../src/core/pdf_page.js");
  const { DrawLayer } = await import("../../src/display/draw_layer.js");
  const { AnnotationEditorLayer } = await import("../../src/display/editor/annotation_editor_layer.js");
  const { HighlightEditor } = await import("../../src/display/editor/highlight.js");

  // Initialize PDF viewer with a sample PDF containing an image
  const pdf = await PDFDocument.load(
    await fetch("test.pdf").then(res => res.arrayBuffer())
  );
  const page = await pdf.getPage(1);
  const viewport = page.getViewPort({ scale: 1 });

  // Set up draw layer and editor layer
  const drawLayer = new DrawLayer({ pageIndex: 0 });
  const editorLayer = new AnnotationEditorLayer({
    uiManager: { getMode: () => AnnotationEditorType.HIGHLIGHT },
    pageIndex: 0,
    div: document.createElement("div"),
    drawLayer: drawLayer,
  });

  // Simulate pointer events on the image
  const pointerDown = new PointerEvent("pointerdown", {
    bubbles: true,
    cancelable: true,
    clientX: 100,
    clientY: 100,
  });
  const pointerMove = new PointerEvent("pointermove", {
    bubbles: true,
    cancelable: true,
    clientX: 150,
    clientY: 150,
  });
  const pointerUp = new PointerEvent("pointerup", {
    bubbles: true,
    cancelable: true,
  });

  // Add event listeners
  editorLayer.div.addEventListener("pointerdown", e => {
    editorLayer.pointerdown(e);
  });
  editorLayer.div.addEventListener("pointermove", e => {
    editorLayer.pointermove(e);
  });
  editorLayer.div.addEventListener("pointerup", e => {
    editorLayer.pointerup(e);
  });

  // Trigger events
  editorLayer.div.dispatchEvent(pointerDown);
  editorLayer.div.dispatchEvent(pointerMove);
  editorLayer.div.dispatchEvent(pointerUp);

  // Verify highlight was created
  const highlights = drawLayer._mapping.size;
  expect(highlights).toBeGreaterThan(0);
});
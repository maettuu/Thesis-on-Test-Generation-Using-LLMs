<think>
Okay, I need to write a regression test for the issue where highlighting images of text wasn't supported. The patch adds support for this, so the test should fail before the patch and pass after.

First, I'll create a test that checks if both text and image highlights are correctly handled. I'll use a sample PDF that has both text and an image. 

I'll start by importing the necessary modules like PDFDocument, PDFPage, and getDocument from the display/api.js. Then, I'll load the test PDF using getDocument.

Next, I'll create a DrawLayer instance and set up the highlight editor. I'll simulate highlighting over both text and an image. 

I'll add a text highlight and check if it's drawn correctly. Then, I'll add an image highlight and verify that it's also drawn without errors. 

The test should ensure that both highlights are successfully created and that no exceptions are thrown during the process. 

I'll structure the test with try-catch blocks to handle any errors that might occur during highlighting. If any step fails, the test will fail, indicating that the issue isn't resolved.

Finally, I'll return the test code as a JavaScript string, ensuring it's self-contained and only uses the provided imports.
</think>

```javascript
it("should support highlighting images of text", async () => {
  const { PDFDocument, PDFPage, getDocument } = await import("../../src/display/api.js");
  const { DrawLayer } = await import("../../src/display/draw_layer.js");
  const { HighlightEditor } = await import("../../src/display/editor/highlight.js");

  // Load test PDF with both text and image
  const pdf = await getDocument({
    data: await fetch("../../src/display/test_files/annotation_test.pdf").then(r => r.arrayBuffer()),
    cMapLoader: () => Promise.resolve(new Uint8Array())
  });

  const page = await pdf.getPage(1);
  const viewport = page.getViewPort({ scale: 1 });
  const drawLayer = new DrawLayer({ pageIndex: 0 });

  // Create highlight editor
  const highlightEditor = new HighlightEditor({
    parent: {
      drawLayer,
      viewport,
      add: () => {},
      remove: () => {},
      scale: 1
    },
    color: "rgb(255, 0, 0)",
    opacity: 0.5
  });

  try {
    // Highlight text
    const textHighlight = highlightEditor.highlight([
      { x: 100, y: 100, width: 200, height: 50 }
    ], "rgb(255, 0, 0)", 0.5);
    
    // Highlight image
    const imageHighlight = highlightEditor.highlight([
      { x: 300, y: 300, width: 150, height: 100 }
    ], "rgb(0, 255, 0)", 0.5);

    expect(textHighlight).toBeTruthy();
    expect(imageHighlight).toBeTruthy();
  } catch (error) {
    throw new Error("Highlighting failed", { cause: error });
  }
});
```
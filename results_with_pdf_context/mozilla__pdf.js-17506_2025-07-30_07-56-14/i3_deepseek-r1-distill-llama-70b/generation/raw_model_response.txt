<think>
Okay, I need to write a test for the issue where highlighting images of text wasn't supported. The patch adds support for this, so the test should fail before the patch and pass after.

First, I'll look at the existing test file. It imports various modules, including AnnotationEditorLayer and DrawLayer, which are relevant here.

The test should create a scenario where a user highlights text, and then check if the highlight is correctly applied, especially when the text is part of an image. But since it's hard to test with actual images, I'll simulate the behavior.

I'll set up a mock text layer and an annotation editor layer. Then, I'll simulate a selection on the text layer and create a highlight. I'll check if the highlight is added to the draw layer.

Before the patch, the test should fail because the highlight isn't applied to text in images. After the patch, it should pass.

I'll write the test using Jest. I'll import the necessary modules, set up the mock elements, and simulate the events. Then, I'll assert that the highlight was created and added to the draw layer.

I'll structure the test with async/await for any promises, like initializing the annotation editor. I'll also make sure to clean up any created elements after the test to avoid interference.

Finally, I'll ensure the test is self-contained and only tests the specific behavior without relying on other parts of the code.
</think>

```javascript
it("should support highlighting images of text", async () => {
  const { AnnotationEditorLayer, DrawLayer } = await import("../../src/display/editor/annotation_editor_layer.js");
  const textLayer = document.createElement("div");
  const drawLayer = new DrawLayer({ pageIndex: 0 });
  const annotationEditorLayer = new AnnotationEditorLayer({
    div: document.createElement("div"),
    uiManager: {},
    pageIndex: 0,
    drawLayer: drawLayer,
    textLayer: textLayer,
    viewport: { rawDims: [100, 100] }
  });

  const mockEvent = { offsetX: 0, offsetY: 0 };
  const highlightEditor = await annotationEditorLayer.#createAndAddNewEditor(mockEvent, false, {});
  
  expect(drawLayer.#mapping.size).toBeGreaterThan(0);
});
```
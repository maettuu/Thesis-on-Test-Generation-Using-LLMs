it("should support highlighting images of text in addition to text", async () => {
  const { AnnotationEditorLayer } = await import("../../src/display/editor/annotation_editor_layer.js");
  const { HighlightEditor } = await import("../../src/display/editor/highlight.js");
  const { DrawLayer } = await import("../../src/display/draw_layer.js");

  const mockUIManager = { registerEditorTypes: () => {}, addLayer: () => {}, getMode: () => "HIGHLIGHT" };
  const mockViewport = { rotation: 0 };
  const mockTextLayer = { div: document.createElement("div") };
  const mockDrawLayer = new DrawLayer({ pageIndex: 0 });

  const annotationEditorLayer = new AnnotationEditorLayer({
    uiManager: mockUIManager,
    pageIndex: 0,
    div: document.createElement("div"),
    accessibilityManager: null,
    annotationLayer: null,
    drawLayer: mockDrawLayer,
    textLayer: mockTextLayer,
    viewport: mockViewport,
    l10n: null,
  });

  const event = new PointerEvent("pointerdown", { clientX: 50, clientY: 50 });
  mockTextLayer.div.dispatchEvent(event);

  const highlightEditor = new HighlightEditor({
    parent: annotationEditorLayer,
    highlightId: 1,
    highlight: { getOutlines: () => ({ box: { x: 0, y: 0, width: 1, height: 1 } }) },
    clipPathId: "clipPathId",
  });

  const expected = true;
  const actual = highlightEditor.render().classList.contains("free");

  expect(actual).toBe(expected);
});
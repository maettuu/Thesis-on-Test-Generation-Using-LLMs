it("should support highlighting images of text in addition to text", async () => {
  const { PDFWorker, build, getDocument } = await import("../../src/display/api.js");
  const { DOMSVGFactory } = await import("../../src/display/display_utils.js");
  const { AnnotationEditorLayer } = await import("../../src/display/editor/annotation_editor_layer.js");
  const { Outliner } = await import("../../src/display/editor/outliner.js");
  const { DrawLayer } = await import("../../src/display/draw_layer.js");

  const pdfWorker = new PDFWorker();
  const pdfDoc = await getDocument({ url: "path/to/example.pdf", cMapUrl: "path/to/cmap", pdfWorker });
  const pdfPage = await pdfDoc.getPage(1);
  const viewport = pdfPage.getViewPort({ scale: 1 });
  const div = document.createElement("div");
  const annotationEditorLayer = new AnnotationEditorLayer({
    uiManager: new AnnotationEditorUIManager(),
    pageIndex: 0,
    div,
    accessibilityManager: null,
    annotationLayer: null,
    drawLayer: new DrawLayer({ pageIndex: 0 }),
    textLayer: null,
    viewport,
    l10n: null,
  });

  const outliner = new Outliner();
  const highlight = outliner.getOutlines(true);
  const id = annotationEditorLayer.drawLayer.highlight(highlight, "yellow", 0.5);

  const expectedSvgPath = highlight.toSVGPath();
  const actualSvgPath = annotationEditorLayer.drawLayer.#mapping.get(id).querySelector("path").getAttribute("d");

  expect(actualSvgPath).toBe(expectedSvgPath);
});
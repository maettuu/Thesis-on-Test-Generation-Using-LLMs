it("should redo using metashiftz on mac", async () => {
  const { AnnotationEditorUIManager } = await import("../../src/display/editor/tools.js");
  const { KeyboardManager } = await import("../../src/shared/keyboard/keyboard.js");

  const container = {
    addEventListener: () => {},
    removeEventListener: () => {}
  };

  const eventBus = {
    _on: () => {},
    _off: () => {}
  };

  const pdfDocument = {
    annotationStorage: {},
    filterFactory: {}
  };

  const pageColors = {};

  const manager = new AnnotationEditorUIManager(container, eventBus, pdfDocument, pageColors);

  const editor = {
    type: "text",
    id: "test-editor",
    redo: () => {}
  };

  manager.addEditor(editor);

  // Mock the redo method
  const redoSpy = jest.spyOn(editor, 'redo');

  // Simulate an undo first
  manager.undo();

  // Test meta+shift+z
  const event = {
    key: 'z',
    code: 'MetaLeft',
    ctrlKey: false,
    metaKey: true,
    shiftKey: true,
    preventDefault: () => {}
  };

  manager._handleKeyboardEvent(event);

  expect(redoSpy).toHaveBeenCalled();

  redoSpy.mockClear();

  // Test meta+shift+Z
  const event2 = {
    key: 'Z',
    code: 'MetaLeft',
    ctrlKey: false,
    metaKey: true,
    shiftKey: true,
    preventDefault: () => {}
  };

  manager._handleKeyboardEvent(event2);

  expect(redoSpy).toHaveBeenCalled();
});
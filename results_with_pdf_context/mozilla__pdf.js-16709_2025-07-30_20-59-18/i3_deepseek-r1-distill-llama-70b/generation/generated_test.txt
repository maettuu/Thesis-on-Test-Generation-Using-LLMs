it("should redo an annotation using keyboard shortcuts", async () => {
  const { AnnotationEditorUIManager, CommandManager } = await import("../../src/display/editor/tools.js");
  const { AnnotationFactory, MarkupAnnotation } = await import("../../src/core/annotation.js");

  // Setup mock objects
  const mockLayer = {
    addOrRebuild: jest.fn(),
    deserialize: jest.fn(),
  };

  const mockEditor = {
    commit: jest.fn(),
    isEmpty: jest.fn(() => false),
    id: "test-editor",
    pageIndex: 0,
  };

  const uiManager = new AnnotationEditorUIManager({
    addEventListener: jest.fn(),
    removeEventListener: jest.fn(),
  }, {
    _on: jest.fn(),
    _off: jest.fn(),
  }, {
    annotationStorage: {
      has: jest.fn(),
      setValue: jest.fn(),
      remove: jest.fn(),
    }
  }, {});

  uiManager.currentLayer = mockLayer;
  uiManager.addEditor(mockEditor);

  // Add initial command
  uiManager.addCommands({
    cmd: () => {},
    undo: () => {},
  });

  // Test undo first
  uiManager.undo();
  expect(uiManager.commandManager.position).toBe(0);

  // Simulate redo keyboard event
  const event = {
    key: "Z",
    ctrlKey: true,
    shiftKey: true,
    metaKey: true,
  };

  uiManager.keydown(event);

  // Verify redo was executed
  expect(uiManager.commandManager.position).toBe(1);
});
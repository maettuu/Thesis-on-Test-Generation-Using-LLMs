it("should redo an added imagetextdrawing to the PDF file using Keyboard shortcuts", async () => {
  const { AnnotationEditorUIManager, CommandManager, KeyboardManager } = await import("../../src/display/editor/tools.js");
  const { AnnotationEditorPrefix, AnnotationEditorType, Util } = await import("../../shared/util.js");
  const { DefaultCMapReaderFactory, DefaultStandardFontDataFactory } = await import("../../src/display/api.js");

  const container = { addEventListener: () => {}, removeEventListener: () => {} };
  const eventBus = { _on: () => {}, _off: () => {}, dispatch: () => {} };
  const pdfDocument = { annotationStorage: {}, filterFactory: {} };
  const pageColors = {};

  const annotationEditorUIManager = new AnnotationEditorUIManager(container, eventBus, pdfDocument, pageColors);

  const editor = { id: Util.getUuid(), pageIndex: 0, isEmpty: () => false, commitOrRemove: () => {}, remove: () => {} };
  annotationEditorUIManager.addEditor(editor);

  annotationEditorUIManager.updateMode(AnnotationEditorType.FREE_TEXT);
  annotationEditorUIManager.setSelected(editor);

  const keyboardManager = new KeyboardManager([
    [["ctrl+z", "mac+meta+z"], annotationEditorUIManager.undo],
    [["ctrl+y", "ctrl+shift+z", "mac+meta+shift+z", "ctrl+shift+Z", "mac+meta+shift+Z"], annotationEditorUIManager.redo],
  ]);

  keyboardManager.exec(annotationEditorUIManager, { key: "z", ctrlKey: true });
  expect(annotationEditorUIManager.getMode()).toBe(AnnotationEditorType.NONE);

  keyboardManager.exec(annotationEditorUIManager, { key: "y", ctrlKey: true });
  expect(annotationEditorUIManager.getMode()).toBe(AnnotationEditorType.FREE_TEXT);
});
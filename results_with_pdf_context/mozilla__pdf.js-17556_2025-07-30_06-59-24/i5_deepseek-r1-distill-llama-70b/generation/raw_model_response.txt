<think>
Okay, I need to write a regression test for the issue where PDF.js incorrectly treats `toString` as a valid operator. The patch changes the `opMap` to use a null-prototype object, so the test should verify that after the patch, `toString` is no longer recognized as a valid operator.

First, I'll set up the test using the provided PDF file. The test should load the PDF and check if it parses without errors. Before the patch, the presence of `toString` in the stream would cause an exception because it's treated as a valid operator but doesn't have the required properties. After the patch, the `opMap` won't have `toString`, so the parser should ignore it and not throw an error.

I'll structure the test using Jest. I'll import the necessary functions: `getDocument` from `../../src/display/api.js` and `buildGetDocumentParams` from the test utils. Then, I'll create a loading task for the PDF.

The test should use `expect().resolves.not.toThrow()` to ensure that loading the PDF doesn't result in an error. This will fail before the patch because the parser would throw an exception, and pass after the patch since the exception is resolved.

I need to make sure the test is self-contained and doesn't include any extra dependencies. Also, I should only return the JavaScript code without any comments or explanations.
</think>

```javascript
it("should ignore non-operator tokens like toString in the stream", async () => {
  const { getDocument } = await import('../../src/display/api.js');
  const { buildGetDocumentParams } = await import('./test_utils.js');
  const loadingTask = getDocument(buildGetDocumentParams('issue17554.pdf'));
  await expect(loadingTask).resolves.not.toThrow();
});
```
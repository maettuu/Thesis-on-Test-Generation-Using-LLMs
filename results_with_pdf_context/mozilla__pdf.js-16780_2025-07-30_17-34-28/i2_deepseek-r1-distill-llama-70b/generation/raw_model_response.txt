<think>
Okay, I need to write a regression test for the issue where SVG images can't be resized horizontally or vertically in pdf.js. The patch adds a method to check if SVGs can fit without preserving the aspect ratio, so the test should verify that after the patch, resizing works correctly.

First, I'll create an SVG image to test. It should be a red rectangle, maybe 1x1. I'll use a data URL for simplicity.

Next, I'll create an OffscreenCanvas to draw the image. The canvas should be taller than the image to test vertical resizing. I'll choose a size like 1x3 pixels.

I'll load the SVG image and draw it on the canvas. Without the patch, the image might retain its aspect ratio, so it won't stretch to fill the canvas. After the patch, it should resize correctly.

I'll use the `getImageData` method to check the color of the drawn pixels. If the image resizes properly, the red color (0xFF0000) should cover the entire canvas area. I'll check the top and bottom pixels to ensure it's fully covered.

In the test, I'll import the necessary modules, create the SVG, set up the canvas, and draw the image. Then, I'll compare the pixel data to see if it matches the expected red color. If it does, the test passes, indicating the patch works.

I need to make sure the test is self-contained and uses the correct imports. I'll structure the test using `it` from Jest, and ensure it's async to handle the image loading and drawing.

So, putting it all together, the test creates an SVG, draws it on a canvas, and checks if the resizing works as expected after the patch.
</think>

```javascript
it("should resize SVG images without preserving aspect ratio", async () => {
  const { ImageManager } = await import("../../src/display/editor/tools.js");
  const { Util } = await import("../../shared/util.js");

  // Create a test SVG image
  const svg = `data:image/svg+xml;charset=UTF-8,<svg viewBox="0 0 1 1" width="1" height="1" xmlns="http://www.w3.org/2000/svg"><rect width="1" height="1" style="fill:red;"/></svg>`;
  const image = new Image();
  image.src = svg;
  await image.decode();

  // Create a canvas to test resizing
  const canvas = new OffscreenCanvas(1, 3);
  const ctx = canvas.getContext("2d");
  
  // Draw the image on canvas
  ctx.drawImage(image, 0, 0, 1, 1, 0, 0, 1, 3);
  
  // Check if the image fills the canvas without preserving aspect ratio
  const pixels = ctx.getImageData(0, 0, 1, 3).data;
  const expectedColor = 0xFF0000; // Red color
  
  // Verify top and bottom pixels to ensure proper resizing
  const topPixel = new Uint32Array(pixels.buffer)[0];
  const bottomPixel = new Uint32Array(pixels.buffer)[pixels.length / 4 - 1];
  
  expect(topPixel).toBe(expectedColor);
  expect(bottomPixel).toBe(expectedColor);
});
```
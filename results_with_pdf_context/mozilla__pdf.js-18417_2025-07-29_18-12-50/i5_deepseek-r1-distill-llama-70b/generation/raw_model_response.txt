<think>
Okay, I need to write a regression test for the issue where adding a `<base href>` tag breaks transparency filters in Firefox using pdf.js. The patch provided modifies the `display_utils.js` file to adjust how URLs are created for filters. 

First, I should understand the problem. The bug occurs when a `<base href>` is present, causing incorrect rendering of drop shadows. The patch introduces a `createUrl` method that adjusts the URL based on the presence of a `<base>` tag.

To test this, I'll create a test that checks if the filter URLs are correctly generated. The test should fail before the patch and pass after.

I'll use `it` from Jasmine. I'll import `display_utils.js` and set up a mock document and window to simulate the presence of a `<base href>`. 

I'll create a `DOMFilterFactory` instance and call `createFilter` to generate a filter. Then, I'll check if the generated URL includes the correct base. Without the patch, the URL should not include the base, causing the test to fail. After the patch, the URL should include the base, making the test pass.

I'll structure the test to mock the necessary document properties and assert the expected URL format. This way, the test will validate the fix effectively.
</think>

```javascript
it("should generate correct filter URLs with <base> href", async () => {
  const { DOMFilterFactory } = await import("../../src/display/display_utils.js");
  
  // Mock document and window to simulate <base href> presence
  const mockDocument = {
    URL: "http://example.com/",
    baseURI: "http://example.com/other",
    createElement: () => ({})
  };
  const mockWindow = { document: mockDocument };
  
  // Create filter factory with mocked window
  const factory = new DOMFilterFactory(mockWindow);
  
  // Create a test filter
  const filter = await factory.createFilter({});

  // Verify the URL includes the base href
  expect(filter.url).toMatch(/http:\/\/example.com\/#/);
});
```
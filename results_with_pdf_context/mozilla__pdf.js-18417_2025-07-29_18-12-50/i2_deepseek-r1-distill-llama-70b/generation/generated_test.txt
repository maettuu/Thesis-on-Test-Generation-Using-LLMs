it("should correctly generate filter URLs when base element is present", async () => {
  const { DOMFilterFactory } = await import("../../src/display/display_utils.js");

  // Create a mock document with a base element
  const mockDocument = {
    URL: "http://example.com",
    baseURI: "http://example.com",
    createElement: () => ({ tagName: "BASE" })
  };

  const factory = new DOMFilterFactory({
    docId: "test",
    ownerDocument: mockDocument
  });

  // Test with base href present
  const filter1 = await factory.addFilter([0, 1]);
  const alphaFilter1 = await factory.addAlphaFilter([0, 1]);

  // Verify that URLs are correctly prefixed with the base URL
  expect(filter1).toMatch(/^url\(http:\/\/example\.com#.+?\)$/);
  expect(alphaFilter1).toMatch(/^url\(http:\/\/example\.com#.+?\)$/);

  // Test without base href
  const factoryWithoutBase = new DOMFilterFactory({
    docId: "test",
    ownerDocument: { URL: "http://example.com", baseURI: "http://example.com" }
  });

  const filter2 = await factoryWithoutBase.addFilter([0, 1]);
  const alphaFilter2 = await factoryWithoutBase.addAlphaFilter([0, 1]);

  // Verify that URLs are relative when no base element is present
  expect(filter2).toMatch(/^url\(#.+?\)$/);
  expect(alphaFilter2).toMatch(/^url\(#.+?\)$/);
});
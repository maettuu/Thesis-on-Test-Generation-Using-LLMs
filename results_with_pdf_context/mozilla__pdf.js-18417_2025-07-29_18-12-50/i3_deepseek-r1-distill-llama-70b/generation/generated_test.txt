it("should handle transparency filters with base href", async () => {
  const { PDFDocument } = await import("../../src/display/api.js");
  const { fetchData } = await import("../../src/display/display_utils.js");

  // Setup test HTML structure
  const baseTag = document.createElement("base");
  baseTag.href = ".";
  document.head.appendChild(baseTag);

  try {
    // Fetch test PDF
    const testPdf = await fetchData("test.pdf");
    const pdf = await PDFDocument.load(testPdf);

    // Get first page
    const page = await pdf.getPage(1);
    const viewport = page.getViewPort({ scale: 1 });

    // Create canvas factory and render page
    const canvasFactory = new DOMCanvasFactory();
    const renderTask = page.render({
      canvasFactory: canvasFactory,
      viewport: viewport,
      renderInteractive: false,
    });

    await renderTask.promise;

    // Verify filter URLs include base href
    const svgFilters = document.querySelectorAll("filter");
    const filterUrls = Array.from(svgFilters).map(filter => {
      const urlAttr = filter.getAttribute("id");
      return `url(.#${urlAttr})`;
    });

    expect(filterUrls.length).toBeGreaterThan(0);
  } finally {
    document.head.removeChild(baseTag);
  }
});


it("should handle transparency filters with base href", async () => {
  const { PDFDocument } = await import("../../src/display/api.js");
  const { fetchData } = await import("../../src/display/display_utils.js");

  // Setup test HTML structure
  const baseTag = document.createElement("base");
  baseTag.href = ".";
  document.head.appendChild(baseTag);

  try {
    // Fetch test PDF
    const testPdf = await fetchData("test.pdf");
    const pdf = await PDFDocument.load(testPdf);

    // Get first page
    const page = await pdf.getPage(1);
    const viewport = page.getViewPort({ scale: 1 });

    // Create canvas factory and render page
    const canvasFactory = new DOMCanvasFactory();
    const renderTask = page.render({
      canvasFactory: canvasFactory,
      viewport: viewport,
      renderInteractive: false,
    });

    await renderTask.promise;

    // Verify filter URLs include base href
    const svgFilters = document.querySelectorAll("filter");
    const filterUrls = Array.from(svgFilters).map(filter => {
      const urlAttr = filter.getAttribute("id");
      return `url(.#${urlAttr})`;
    });

    expect(filterUrls.length).toBeGreaterThan(0);
  } finally {
    document.head.removeChild(baseTag);
  }
});
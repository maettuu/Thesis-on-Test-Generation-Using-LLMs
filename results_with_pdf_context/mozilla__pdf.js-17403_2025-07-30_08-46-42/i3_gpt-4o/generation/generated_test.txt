it("should process messages in the correct order and handle cancellations", async () => {
  const { MessageHandler } = await import("../../src/shared/message_handler.js");
  const { LoopbackPort } = await import("../../src/display/api.js");

  const port = new LoopbackPort();
  const messageHandler = new MessageHandler("main", "worker", port);

  const results = [];
  messageHandler.on("testAction", data => {
    results.push(data);
  });

  port.postMessage({ targetName: "main", action: "testAction", data: 1 });
  port.postMessage({ targetName: "main", action: "testAction", data: 2 });
  port.postMessage({ targetName: "main", stream: 1, streamId: 1 });
  port.postMessage({ targetName: "main", action: "testAction", data: 3 });

  await new Promise(resolve => setTimeout(resolve, 10));

  expect(results).toEqual([1, 2, 3]);
});
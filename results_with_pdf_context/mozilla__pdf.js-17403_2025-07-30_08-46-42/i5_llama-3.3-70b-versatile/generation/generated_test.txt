it("should render a PDF with many pages without slowing down", async () => {
  const { PDFDocument, PDFPageProxy } = await import("../../src/display/api.js");
  const { PDFFetchStream } = await import("../../src/display/fetch_stream.js");
  const { MessageHandler } = await import("../../src/shared/message_handler.js");

  const pdfUrl = "./test.pdf";
  const pdfStream = new PDFFetchStream(pdfUrl);
  const pdfDocument = await PDFDocument.load({ cMapUrl: "./cmap", cMapPacked: true, pdf: pdfStream });
  const messageHandler = new MessageHandler("test", "test", { postMessage: () => {} });

  const startTime = Date.now();
  for (let i = 0; i < pdfDocument.numPages; i++) {
    const page = await pdfDocument.getPage(i + 1);
    await page.render({ canvasContext: null, viewport: null });
  }
  const endTime = Date.now();

  const renderTime = endTime - startTime;
  const expectedRenderTime = 5000; // 5 seconds

  expect(renderTime).toBeLessThan(expectedRenderTime);
});
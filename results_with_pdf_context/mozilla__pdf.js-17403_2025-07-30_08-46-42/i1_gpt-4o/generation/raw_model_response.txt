```javascript
it("should process messages efficiently with postponed execution", async () => {
  const { MessageHandler } = await import("../../src/shared/message_handler.js");
  const { LoopbackPort } = await import("../../src/display/api.js");

  const port = new LoopbackPort();
  const messageHandler = new MessageHandler("main", "worker", port);

  let processedMessages = [];
  messageHandler.on("GetOperatorList", data => {
    processedMessages.push(data);
  });

  port.postMessage({ targetName: "main", action: "GetOperatorList", data: "page1" });
  port.postMessage({ targetName: "main", action: "GetOperatorList", data: "page2" });
  port.postMessage({ targetName: "main", action: "GetOperatorList", data: "page3" });

  await new Promise(resolve => setTimeout(resolve, 100));

  expect(processedMessages).toEqual(["page1", "page2", "page3"]);
});
```
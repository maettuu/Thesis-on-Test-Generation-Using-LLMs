it("should correctly render images with masks", async () => {
  const { XRefMock, createIdFactory } = await import("./test_utils.js");
  const xref = new XRefMock();
  const handler = {
    send: jest.fn(),
    sendWithPromise: jest.fn(),
  };
  const idFactory = createIdFactory();

  const evaluator = new PartialEvaluator({
    xref,
    handler,
    pageIndex: 0,
    idFactory,
    fontCache: new Map(),
    builtInCMapCache: new Map(),
    standardFontDataCache: new Map(),
    globalImageCache: new Map(),
    systemFontCache: new Map(),
    options: DefaultPartialEvaluatorOptions,
  });

  const operatorList = new OperatorList();
  const imageRef = "123";
  const maskRef = "456";

  // Mock image data
  const imageData = {
    objId: imageRef,
    width: 100,
    height: 100,
    data: new Uint8Array(100 * 100 * 4),
  };

  // Mock mask data
  const maskData = {
    objId: maskRef,
    width: 100,
    height: 100,
    data: new Uint8Array(100 * 100 * 4),
  };

  // Add image operations with mask
  operatorList.addImageOps(OPS.paintImageXObject, [imageData], undefined, true);

  // Verify the operator list includes save and restore operations
  expect(operatorList.fnArray).toContain(OPS.save);
  expect(operatorList.fnArray).toContain(OPS.restore);
});
it("should correctly handle images with SMask", async () => {
  const xref = new XRefMock();
  const idFactory = createIdFactory();
  const operatorList = new OperatorList();
  const evaluator = new PartialEvaluator({
    xref,
    handler: new WorkerTask(),
    pageIndex: 0,
    idFactory,
    fontCache: new Map(),
    builtInCMapCache: new Map(),
    standardFontDataCache: new Map(),
    globalImageCache: new Map(),
    systemFontCache: new Map(),
  });

  const dict = new Dict();
  dict.set("Subtype", new Name("Image"));
  dict.set("SMask", new Name("Mask"));
  const image = new Stream(new StringStream(" "), dict);

  await evaluator.buildPaintImageXObject({
    resources: new Dict(),
    image,
    operatorList,
    cacheKey: "test",
    localImageCache: new Map(),
    localColorSpaceCache: new Map(),
  });

  const ops = operatorList.fnArray;
  const expectedOps = [
    OPS.save,
    OPS.setGState,
    OPS.paintImageXObject,
    OPS.restore,
  ];

  assert.deepEqual(ops, expectedOps);
});
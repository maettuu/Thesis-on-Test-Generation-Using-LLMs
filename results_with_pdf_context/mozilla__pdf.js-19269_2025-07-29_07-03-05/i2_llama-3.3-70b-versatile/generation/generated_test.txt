it("should display top and bottom images in pdf file", async () => {
  const { PDFDocument } = await import("../../src/core/document.js");
  const { PDFPage } = await import("../../src/core/document.js");
  const { PartialEvaluator } = await import("../../src/core/evaluator.js");
  const { OperatorList } = await import("../../src/core/operator_list.js");
  const { PDFImage } = await import("../../src/core/image.js");

  const pdfDoc = await PDFDocument.load(await (await import("../../web/pdf_stream.js")).PDFStreamFactory.loadFromBytes(new Uint8Array([/* pdf bytes */])));
  const page = pdfDoc.getPage(1);
  const operatorList = new OperatorList();
  const evaluator = new PartialEvaluator({
    xref: pdfDoc.xref,
    handler: null,
    pageIndex: page.index,
    idFactory: null,
    fontCache: null,
    builtInCMapCache: null,
    standardFontDataCache: null,
    globalImageCache: null,
    systemFontCache: null,
  });

  await evaluator.getOperatorList({
    stream: page.stream,
    task: null,
    resources: page.resources,
    operatorList,
  });

  const expectedOps = [
    "save",
    "setGState",
    "paintImageXObject",
    "restore",
  ];

  const actualOps = operatorList.fnArray;

  expect(actualOps).toEqual(expect.arrayContaining(expectedOps));
});
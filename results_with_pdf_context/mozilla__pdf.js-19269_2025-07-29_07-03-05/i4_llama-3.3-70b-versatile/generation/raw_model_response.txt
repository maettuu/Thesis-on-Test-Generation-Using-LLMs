```javascript
it("should render top and bottom images in pdf file", async () => {
  const { PartialEvaluator } = await import("../../src/core/evaluator.js");
  const { OperatorList } = await import("../../src/core/operator_list.js");
  const evaluator = new PartialEvaluator({
    xref: {},
    handler: {},
    pageIndex: 0,
    idFactory: {},
    fontCache: {},
    builtInCMapCache: {},
    standardFontDataCache: {},
    globalImageCache: {},
    systemFontCache: {},
    options: {},
  });
  const operatorList = new OperatorList();
  const image = {
    dict: {
      get: () => ({
        get: () => "SMask",
      }),
    },
  };
  const args = ["img", 100, 100];
  const optionalContent = {};
  evaluator.buildPaintImageXObject({
    resources: {},
    image,
    isInline: false,
    operatorList,
    cacheKey: "cacheKey",
    localImageCache: {},
    localColorSpaceCache: {},
  });
  const hasMask = true;
  operatorList.addImageOps(
    "paintImageXObject",
    args,
    optionalContent,
    hasMask
  );
  const expected = [
    "save",
    "setGState",
    ["SMask", false],
    "paintImageXObject",
    "restore",
  ];
  const actual = operatorList.getIR().fnArray;
  actual.forEach((fn, index) => {
    if (index === 1) {
      expect(fn).toBe("setGState");
      expect(operatorList.getIR().argsArray[index]).toEqual(expected[index]);
    } else {
      expect(fn).toBe(expected[index]);
    }
  });
});
```
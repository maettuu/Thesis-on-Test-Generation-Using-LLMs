```javascript
it("should highlight and comment the text selection in a pdf", async () => {
  const { AnnotationEditorUIManager } = await import("../../src/display/editor/tools.js");
  const { FloatingToolbar } = await import("../../src/display/editor/toolbar.js");
  const { noContextMenu } = await import("../../src/display/display_utils.js");

  // Initialize required variables
  const uiManager = new AnnotationEditorUIManager();
  const floatingToolbar = new FloatingToolbar(uiManager);
  const selection = {
    isCollapsed: false,
    anchorNode: document.createElement("div"),
    anchorOffset: 0,
    focusNode: document.createElement("div"),
    focusOffset: 1,
  };
  document.getSelection = () => selection;

  // Define expected behavior
  const expectedHighlight = true;
  const expectedComment = true;

  // Simulate the context menu action
  const contextMenuEvent = new Event("contextmenu");
  const highlightButton = document.createElement("button");
  highlightButton.classList.add("basic", "highlightButton");
  highlightButton.addEventListener("contextmenu", noContextMenu);
  highlightButton.addEventListener("click", () => {
    uiManager.highlightSelection("context_menu", true);
  });
  floatingToolbar.show(selection.anchorNode, [{ x: 0, y: 0, width: 100, height: 20 }], true);
  highlightButton.dispatchEvent(contextMenuEvent);

  // Generate actual behavior
  const actualHighlight = uiManager.highlightSelection("context_menu");
  const actualComment = uiManager.commentSelection("context_menu");

  // Compare expected with actual
  expect(actualHighlight).toBe(expectedHighlight);
  expect(actualComment).toBe(expectedComment);
});
```
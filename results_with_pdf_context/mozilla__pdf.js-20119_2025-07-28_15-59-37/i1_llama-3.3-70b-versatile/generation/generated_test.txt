it("should add an entry in the context menu to highlight and comment the text selection in a pdf", async () => {
  const { PDFDocument, PDFPageProxy } = await import("../../src/display/api.js");
  const { AnnotationEditorUIManager } = await import("../../src/display/editor/tools.js");
  const pdfDoc = await PDFDocument.load(await fetchData("test.pdf"));
  const page = await pdfDoc.getPage(1);
  const annotationEditorUIManager = new AnnotationEditorUIManager(null, null, null, null, null, null, null, null, null, null, null, null, null);
  const contextMenuEntriesBeforePatch = annotationEditorUIManager._eventBus._on("editingaction");
  const highlightSelectionEntryBeforePatch = contextMenuEntriesBeforePatch.find(entry => entry.name === "highlightSelection");
  const commentSelectionEntryBeforePatch = contextMenuEntriesBeforePatch.find(entry => entry.name === "commentSelection");
  expect(highlightSelectionEntryBeforePatch).toBeDefined();
  expect(commentSelectionEntryBeforePatch).toBeUndefined();

  // Apply the patch
  annotationEditorUIManager.destroy();
  annotationEditorUIManager = new AnnotationEditorUIManager(null, null, null, null, null, null, null, null, null, null, null, null, null);
  const contextMenuEntriesAfterPatch = annotationEditorUIManager._eventBus._on("editingaction");
  const highlightSelectionEntryAfterPatch = contextMenuEntriesAfterPatch.find(entry => entry.name === "highlightSelection");
  const commentSelectionEntryAfterPatch = contextMenuEntriesAfterPatch.find(entry => entry.name === "commentSelection");
  expect(highlightSelectionEntryAfterPatch).toBeDefined();
  expect(commentSelectionEntryAfterPatch).toBeDefined();
});
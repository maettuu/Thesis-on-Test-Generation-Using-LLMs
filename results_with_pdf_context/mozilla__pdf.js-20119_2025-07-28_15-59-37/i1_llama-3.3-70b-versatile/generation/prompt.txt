Before you begin:
- Keep going until the job is completely solved — don’t stop halfway.
- If you’re unsure about the behavior, reread the provided patch carefully; do not hallucinate.
- Plan your approach before writing code by reflecting on whether the test truly fails before and passes after.

Issue:
<issue>
Add an entry in the context menu in order to highlight and comment the text selection in a pdf
</issue>

Patch:
<patch>
diff --git a/src/display/editor/toolbar.js b/src/display/editor/toolbar.js
--- a/src/display/editor/toolbar.js
+++ b/src/display/editor/toolbar.js
@@ -123,7 +123,7 @@ class EditorToolbar {
     const { editorType, _uiManager } = this.#editor;
 
     const button = document.createElement("button");
-    button.className = "delete";
+    button.classList.add("basic", "deleteButton");
     button.tabIndex = 0;
     button.setAttribute("data-l10n-id", EditorToolbar.#l10nRemove[editorType]);
     this.#addListenersToElement(button);
@@ -214,7 +214,7 @@ class EditorToolbar {
   }
 }
 
-class HighlightToolbar {
+class FloatingToolbar {
   #buttons = null;
 
   #toolbar = null;
@@ -237,7 +237,25 @@ class HighlightToolbar {
     buttons.className = "buttons";
     editToolbar.append(buttons);
 
-    this.#addHighlightButton();
+    if (this.#uiManager.hasCommentManager()) {
+      this.#makeButton(
+        "commentButton",
+        `pdfjs-comment-floating-button`,
+        "pdfjs-comment-floating-button-label",
+        () => {
+          this.#uiManager.commentSelection("floating_button");
+        }
+      );
+    }
+
+    this.#makeButton(
+      "highlightButton",
+      `pdfjs-highlight-floating-button1`,
+      "pdfjs-highlight-floating-button-label",
+      () => {
+        this.#uiManager.highlightSelection("floating_button");
+      }
+    );
 
     return editToolbar;
   }
@@ -279,26 +297,20 @@ class HighlightToolbar {
     this.#toolbar.remove();
   }
 
-  #addHighlightButton() {
+  #makeButton(buttonClass, l10nId, labelL10nId, clickHandler) {
     const button = document.createElement("button");
-    button.className = "highlightButton";
+    button.classList.add("basic", buttonClass);
     button.tabIndex = 0;
-    button.setAttribute("data-l10n-id", `pdfjs-highlight-floating-button1`);
+    button.setAttribute("data-l10n-id", l10nId);
     const span = document.createElement("span");
     button.append(span);
     span.className = "visuallyHidden";
-    span.setAttribute("data-l10n-id", "pdfjs-highlight-floating-button-label");
+    span.setAttribute("data-l10n-id", labelL10nId);
     const signal = this.#uiManager._signal;
     button.addEventListener("contextmenu", noContextMenu, { signal });
-    button.addEventListener(
-      "click",
-      () => {
-        this.#uiManager.highlightSelection("floating_button");
-      },
-      { signal }
-    );
+    button.addEventListener("click", clickHandler, { signal });
     this.#buttons.append(button);
   }
 }
 
-export { EditorToolbar, HighlightToolbar };
+export { EditorToolbar, FloatingToolbar };

diff --git a/src/display/editor/tools.js b/src/display/editor/tools.js
--- a/src/display/editor/tools.js
+++ b/src/display/editor/tools.js
@@ -34,7 +34,7 @@ import {
   PixelsPerInch,
   stopEvent,
 } from "../display_utils.js";
-import { HighlightToolbar } from "./toolbar.js";
+import { FloatingToolbar } from "./toolbar.js";
 
 function bindEvents(obj, element, names) {
   for (const name of names) {
@@ -631,7 +631,7 @@ class AnnotationEditorUIManager {
 
   #highlightWhenShiftUp = false;
 
-  #highlightToolbar = null;
+  #floatingToolbar = null;
 
   #idManager = new IdManager();
 
@@ -908,8 +908,8 @@ class AnnotationEditorUIManager {
     this.#altTextManager?.destroy();
     this.#commentManager?.destroy();
     this.#signatureManager?.destroy();
-    this.#highlightToolbar?.hide();
-    this.#highlightToolbar = null;
+    this.#floatingToolbar?.hide();
+    this.#floatingToolbar = null;
     this.#mainHighlightColorPicker?.destroy();
     this.#mainHighlightColorPicker = null;
     if (this.#focusMainContainerTimeoutId) {
@@ -1157,7 +1157,7 @@ class AnnotationEditorUIManager {
     return null;
   }
 
-  highlightSelection(methodOfCreation = "") {
+  highlightSelection(methodOfCreation = "", comment = false) {
     const selection = document.getSelection();
     if (!selection || selection.isCollapsed) {
       return;
@@ -1175,7 +1175,7 @@ class AnnotationEditorUIManager {
     const layer = this.#getLayerForTextLayer(textLayer);
     const isNoneMode = this.#mode === AnnotationEditorType.NONE;
     const callback = () => {
-      layer?.createAndAddNewEditor({ x: 0, y: 0 }, false, {
+      const editor = layer?.createAndAddNewEditor({ x: 0, y: 0 }, false, {
         methodOfCreation,
         boxes,
         anchorNode,
@@ -1187,6 +1187,9 @@ class AnnotationEditorUIManager {
       if (isNoneMode) {
         this.showAllEditors("highlight", true, /* updateButton = */ true);
       }
+      if (comment) {
+        editor?.editComment();
+      }
     };
     if (isNoneMode) {
       this.switchToMode(AnnotationEditorType.HIGHLIGHT, callback);
@@ -1195,7 +1198,11 @@ class AnnotationEditorUIManager {
     callback();
   }
 
-  #displayHighlightToolbar() {
+  commentSelection(methodOfCreation = "") {
+    this.highlightSelection(methodOfCreation, /* comment */ true);
+  }
+
+  #displayFloatingToolbar() {
     const selection = document.getSelection();
     if (!selection || selection.isCollapsed) {
       return;
@@ -1206,8 +1213,8 @@ class AnnotationEditorUIManager {
     if (!boxes) {
       return;
     }
-    this.#highlightToolbar ||= new HighlightToolbar(this);
-    this.#highlightToolbar.show(textLayer, boxes, this.direction === "ltr");
+    this.#floatingToolbar ||= new FloatingToolbar(this);
+    this.#floatingToolbar.show(textLayer, boxes, this.direction === "ltr");
   }
 
   /**
@@ -1241,7 +1248,7 @@ class AnnotationEditorUIManager {
     const selection = document.getSelection();
     if (!selection || selection.isCollapsed) {
       if (this.#selectedTextNode) {
-        this.#highlightToolbar?.hide();
+        this.#floatingToolbar?.hide();
         this.#selectedTextNode = null;
         this.#dispatchUpdateStates({
           hasSelectedText: false,
@@ -1258,7 +1265,7 @@ class AnnotationEditorUIManager {
     const textLayer = anchorElement.closest(".textLayer");
     if (!textLayer) {
       if (this.#selectedTextNode) {
-        this.#highlightToolbar?.hide();
+        this.#floatingToolbar?.hide();
         this.#selectedTextNode = null;
         this.#dispatchUpdateStates({
           hasSelectedText: false,
@@ -1267,7 +1274,7 @@ class AnnotationEditorUIManager {
       return;
     }
 
-    this.#highlightToolbar?.hide();
+    this.#floatingToolbar?.hide();
     this.#selectedTextNode = anchorNode;
     this.#dispatchUpdateStates({
       hasSelectedText: true,
@@ -1315,7 +1322,7 @@ class AnnotationEditorUIManager {
     if (this.#mode === AnnotationEditorType.HIGHLIGHT) {
       this.highlightSelection(methodOfCreation);
     } else if (this.#enableHighlightFloatingButton) {
-      this.#displayHighlightToolbar();
+      this.#displayFloatingToolbar();
     }
   }
 
@@ -1606,6 +1613,9 @@ class AnnotationEditorUIManager {
       case "highlightSelection":
         this.highlightSelection("context_menu");
         break;
+      case "commentSelection":
+        this.commentSelection("context_menu");
+        break;
     }
   }


</patch>

Imports:
<imports>
Available Packages
Dev Dependencies:
- @babel/core: ^7.28.0
- @babel/preset-env: ^7.28.0
- @babel/runtime: ^7.27.6
- @csstools/postcss-light-dark-function: ^2.0.9
- @fluent/bundle: ^0.19.1
- @fluent/dom: ^0.10.2
- @metalsmith/layouts: ^3.0.0
- @metalsmith/markdown: ^1.10.0
- @napi-rs/canvas: ^0.1.74
- @types/node: ^24.0.15
- autoprefixer: ^10.4.21
- babel-loader: ^10.0.0
- caniuse-lite: ^1.0.30001727
- core-js: ^3.44.0
- eslint: ^9.31.0
- eslint-plugin-import: ^2.32.0
- eslint-plugin-jasmine: ^4.2.2
- eslint-plugin-json: ^4.0.1
- eslint-plugin-no-unsanitized: ^4.1.2
- eslint-plugin-perfectionist: ^4.15.0
- eslint-plugin-prettier: ^5.5.3
- eslint-plugin-unicorn: ^59.0.1
- globals: ^16.3.0
- gulp: ^5.0.1
- gulp-cli: ^3.1.0
- gulp-postcss: ^10.0.0
- gulp-rename: ^2.1.0
- gulp-replace: ^1.1.4
- gulp-zip: ^6.1.0
- highlight.js: ^11.11.1
- jasmine: ^5.8.0
- jsdoc: ^4.0.4
- jstransformer-nunjucks: ^1.2.0
- metalsmith: ^2.6.3
- metalsmith-html-relative: ^2.0.7
- ordered-read-streams: ^2.0.0
- pngjs: ^7.0.0
- postcss: ^8.5.6
- postcss-dir-pseudo-class: ^9.0.1
- postcss-discard-comments: ^7.0.4
- postcss-nesting: ^13.0.2
- prettier: ^3.6.2
- puppeteer: ^24.14.0
- stylelint: ^16.22.0
- stylelint-prettier: ^5.0.3
- svglint: ^4.1.0
- terser-webpack-plugin: ^5.3.14
- tsc-alias: ^1.8.16
- ttest: ^4.0.0
- typescript: ^5.8.3
- vinyl: ^3.0.1
- webpack: ^5.100.2
- webpack-stream: ^7.0.0
- yargs: ^18.0.0

Engines:
- node: >=20.16.0 || >=22.3.0

Available Relative Imports:
- `../../src/core/annotation.js`: Annotation, AnnotationBorderStyle, AnnotationFactory, MarkupAnnotation, getQuadPoints
- `../../src/core/bidi.js`: bidi
- `../../src/core/calculate_md5.js`: calculateMD5
- `../../src/core/calculate_sha256.js`: calculateSHA256
- `../../src/core/calculate_sha_other.js`: calculateSHA384, calculateSHA512
- `../../src/core/cff_parser.js`: CFFCharset, CFFCompiler, CFFFDSelect, CFFParser, CFFStrings
- `../../src/core/cmap.js`: CMap, CMapFactory, IdentityCMap
- `../../src/core/colorspace.js`: ColorSpace
- `../../src/core/colorspace_utils.js`: ColorSpaceUtils
- `../../src/core/core_utils.js`: arrayBuffersToBytes, encodeToXmlString, escapePDFName, escapeString, getInheritableProperty, getSizeInBytes, isAscii, isWhiteSpace, log2, numberToString, parseXFAPath, recoverJsURL, stringToUTF16HexString, stringToUTF16String, toRomanNumerals, validateCSSFont
- `../../src/core/crypto.js`: AES128Cipher, AES256Cipher, ARCFourCipher, CipherTransformFactory, PDF17, PDF20
- `../../src/core/default_appearance.js`: createDefaultAppearance, parseAppearanceStream, parseDefaultAppearance
- `../../src/core/document.js`: PDFDocument, Page
- `../../src/core/encodings.js`: getEncoding
- `../../src/core/evaluator.js`: PartialEvaluator
- `../../src/core/flate_stream.js`: FlateStream
- `../../src/core/font_substitutions.js`: getFontSubstitution
- `../../src/core/fonts_utils.js`: SEAC_ANALYSIS_ENABLED
- `../../src/core/function.js`: PDFFunctionFactory, PostScriptCompiler, PostScriptEvaluator
- `../../src/core/glyphlist.js`: getDingbatsGlyphsUnicode, getGlyphsUnicode
- `../../src/core/image_utils.js`: GlobalColorSpaceCache, GlobalImageCache, LocalColorSpaceCache
- `../../src/core/jbig2.js`: Jbig2Error, Jbig2Image
- `../../src/core/jpg.js`: JpegError, JpegImage
- `../../src/core/jpx.js`: JpxError, JpxImage
- `../../src/core/metadata_parser.js`: MetadataParser
- `../../src/core/operator_list.js`: OperatorList
- `../../src/core/parser.js`: Lexer, Linearization, Parser
- `../../src/core/predictor_stream.js`: PredictorStream
- `../../src/core/primitives.js`: Cmd, Dict, EOF, Name, Ref, RefSet, RefSetCache, isCmd, isDict, isName, isRefsEqual
- `../../src/core/ps_parser.js`: PostScriptLexer, PostScriptParser
- `../../src/core/stream.js`: NullStream, Stream, StringStream
- `../../src/core/type1_parser.js`: Type1Parser
- `../../src/core/unicode.js`: getCharUnicodeCategory, getUnicodeForGlyph, getUnicodeRangeFor, mapSpecialUnicodeValues
- `../../src/core/worker.js`: WorkerMessageHandler, WorkerTask
- `../../src/core/writer.js`: incrementalUpdate, writeChanges, writeDict
- `../../src/core/xfa/bind.js`: Binder
- `../../src/core/xfa/data.js`: DataHandler
- `../../src/core/xfa/factory.js`: XFAFactory
- `../../src/core/xfa/formcalc_lexer.js`: Lexer, TOKEN, Token
- `../../src/core/xfa/formcalc_parser.js`: Errors, Parser
- `../../src/core/xfa/parser.js`: XFAParser
- `../../src/core/xfa/som.js`: searchNode
- `../../src/core/xfa/symbol_utils.js`: $dump, $getChildren, $getChildrenByClass, $getChildrenByName, $text, $uid
- `../../src/core/xml_parser.js`: SimpleXMLParser, XMLParserBase
- `../../src/display/annotation_layer.js`: AnnotationLayer
- `../../src/display/annotation_storage.js`: AnnotationStorage
- `../../src/display/api.js`: PDFDataRangeTransport, PDFDocumentLoadingTask, PDFDocumentProxy, PDFPageProxy, PDFWorker, RenderTask, build, getDocument, version
- `../../src/display/api_utils.js`: LoopbackPort, isValidExplicitDest
- `../../src/display/canvas_factory.js`: DOMCanvasFactory
- `../../src/display/cmap_reader_factory.js`: DOMCMapReaderFactory
- `../../src/display/display_utils.js`: OutputScale, PDFDateString, PageViewport, PixelsPerInch, RenderingCancelledException, StatTimer, SupportedImageMimeTypes, fetchData, getFilenameFromUrl, getPdfFilenameFromUrl, getRGB, getXfaPageViewport, isDataScheme, isPdfFile, isValidFetchUrl, noContextMenu, setLayerDimensions, stopEvent
- `../../src/display/draw_layer.js`: DrawLayer
- `../../src/display/editor/annotation_editor_layer.js`: AnnotationEditorLayer
- `../../src/display/editor/color_picker.js`: ColorPicker
- `../../src/display/editor/drawers/signaturedraw.js`: SignatureExtractor
- `../../src/display/editor/tools.js`: AnnotationEditorUIManager, CommandManager
- `../../src/display/fetch_stream.js`: PDFFetchStream
- `../../src/display/metadata.js`: Metadata
- `../../src/display/network.js`: PDFNetworkStream
- `../../src/display/network_utils.js`: createHeaders, createResponseError, extractFilenameFromHeader, validateRangeRequestCapabilities, validateResponseStatus
- `../../src/display/node_stream.js`: PDFNodeStream
- `../../src/display/node_utils.js`: NodeCMapReaderFactory, NodeStandardFontDataFactory, fetchData
- `../../src/display/standard_fontdata_factory.js`: DOMStandardFontDataFactory
- `../../src/display/svg_factory.js`: DOMSVGFactory
- `../../src/display/text_layer.js`: TextLayer
- `../../src/display/touch_manager.js`: TouchManager
- `../../src/display/worker_options.js`: GlobalWorkerOptions
- `../../src/display/xfa_layer.js`: XfaLayer
- `../../src/shared/message_handler.js`: MessageHandler
- `../../src/shared/murmurhash3.js`: MurmurHash3_64
- `../../src/shared/util.js`: AbortException, AnnotationBorderStyleType, AnnotationEditorParamsType, AnnotationEditorType, AnnotationFieldFlag, AnnotationFlag, AnnotationMode, AnnotationType, BaseException, DrawOPS, FeatureTest, FormatError, ImageKind, InvalidPDFException, MathClamp, OPS, PasswordException, PasswordResponses, PermissionFlag, RenderingIntentFlag, ResponseException, UnknownErrorException, Util, VerbosityLevel, assert, bytesToString, createValidAbsoluteUrl, getModificationDate, getUuid, getVerbosityLevel, isNodeJS, normalizeUnicode, objectSize, setVerbosityLevel, shadow, string32, stringToBytes, stringToPDFString, stringToUTF8String, toBase64Util, updateUrlHash
- `../../web/annotation_layer_builder.js`: AnnotationLayerBuilder
- `../../web/app_options.js`: AppOptions, OptionKind
- `../../web/autolinker.js`: Autolinker
- `../../web/download_manager.js`: DownloadManager
- `../../web/event_utils.js`: EventBus, WaitOnType, waitOnEventOrTimeout
- `../../web/genericl10n.js`: GenericL10n
- `../../web/pdf_find_controller.js`: FindState, PDFFindController
- `../../web/pdf_find_utils.js`: CharacterType, getCharacterType
- `../../web/pdf_history.js`: PDFHistory, isDestArraysEqual, isDestHashesEqual
- `../../web/pdf_link_service.js`: LinkTarget, PDFLinkService, SimpleLinkService
- `../../web/pdf_page_view.js`: PDFPageView
- `../../web/pdf_scripting_manager.component.js`: PDFScriptingManager
- `../../web/pdf_single_page_viewer.js`: PDFSinglePageViewer
- `../../web/pdf_viewer.js`: PDFPageViewBuffer, PDFViewer
- `../../web/struct_tree_layer_builder.js`: StructTreeLayerBuilder
- `../../web/text_layer_builder.js`: TextLayerBuilder
- `../../web/ui_utils.js`: AutoPrintRegExp, ProgressBar, RenderingStates, ScrollMode, SpreadMode, backtrackBeforeAllVisibleElements, binarySearchFirstItem, calcRound, getPageSizeInches, getVisibleElements, isPortraitOrientation, isValidRotation, parseQueryString, removeNullCharacters
- `../../web/xfa_layer_builder.js`: XfaLayerBuilder
- `../reporter.js`: TestReporter
- `./common_pdfstream_tests.js`: testCrossOriginRedirects
- `./test_utils.js`: CMAP_URL, DefaultCMapReaderFactory, DefaultFileReaderFactory, DefaultStandardFontDataFactory, STANDARD_FONT_DATA_URL, TEST_PDFS_PATH, TestPdfsServer, XRefMock, buildGetDocumentParams, createIdFactory, getCrossOriginHostname
</imports>

Code:
<code>
File:
src/display/editor/toolbar.js
1 /* Copyright 2023 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 import { noContextMenu, stopEvent } from "../display_utils.js";
17 
18 class EditorToolbar {
19   #toolbar = null;
20 
21   #colorPicker = null;
22 
23   #editor;
24 
25   #buttons = null;
26 
27   #altText = null;
28 
29   #comment = null;
30 
31   #signatureDescriptionButton = null;
32 
33   static #l10nRemove = null;
34 
35   constructor(editor) {
36     this.#editor = editor;
37 
38     EditorToolbar.#l10nRemove ||= Object.freeze({
39       freetext: "pdfjs-editor-remove-freetext-button",
40       highlight: "pdfjs-editor-remove-highlight-button",
41       ink: "pdfjs-editor-remove-ink-button",
42       stamp: "pdfjs-editor-remove-stamp-button",
43       signature: "pdfjs-editor-remove-signature-button",
44     });
45   }
46 
122   addDeleteButton() {
123     const { editorType, _uiManager } = this.#editor;
124 
125     const button = document.createElement("button");
126     button.className = "delete";
127     button.tabIndex = 0;
128     button.setAttribute("data-l10n-id", EditorToolbar.#l10nRemove[editorType]);
129     this.#addListenersToElement(button);
130     button.addEventListener(
131       "click",
132       e => {
133         _uiManager.delete();
134       },
135       { signal: _uiManager._signal }
136     );
137     this.#buttons.append(button);
138   }
139 
215 }
216 
217 class HighlightToolbar {
218   #buttons = null;
219 
220   #toolbar = null;
221 
222   #uiManager;
223 
224   constructor(uiManager) {
225     this.#uiManager = uiManager;
226   }
227 
228   #render() {
229     const editToolbar = (this.#toolbar = document.createElement("div"));
230     editToolbar.className = "editToolbar";
231     editToolbar.setAttribute("role", "toolbar");
232     editToolbar.addEventListener("contextmenu", noContextMenu, {
233       signal: this.#uiManager._signal,
234     });
235 
236     const buttons = (this.#buttons = document.createElement("div"));
237     buttons.className = "buttons";
238     editToolbar.append(buttons);
239 
240     this.#addHighlightButton();
241 
242     return editToolbar;
243   }
244 
282   #addHighlightButton() {
283     const button = document.createElement("button");
284     button.className = "highlightButton";
285     button.tabIndex = 0;
286     button.setAttribute("data-l10n-id", `pdfjs-highlight-floating-button1`);
287     const span = document.createElement("span");
288     button.append(span);
289     span.className = "visuallyHidden";
290     span.setAttribute("data-l10n-id", "pdfjs-highlight-floating-button-label");
291     const signal = this.#uiManager._signal;
292     button.addEventListener("contextmenu", noContextMenu, { signal });
293     button.addEventListener(
294       "click",
295       () => {
296         this.#uiManager.highlightSelection("floating_button");
297       },
298       { signal }
299     );
300     this.#buttons.append(button);
301   }
302 }
303 
File:
src/display/editor/tools.js
1 /* Copyright 2022 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
17 // eslint-disable-next-line max-len
19 
20 import {
21   AnnotationEditorParamsType,
22   AnnotationEditorPrefix,
23   AnnotationEditorType,
24   FeatureTest,
25   getUuid,
26   shadow,
27   Util,
28   warn,
29 } from "../../shared/util.js";
30 import {
31   fetchData,
32   getColorValues,
33   getRGB,
34   PixelsPerInch,
35   stopEvent,
36 } from "../display_utils.js";
37 import { HighlightToolbar } from "./toolbar.js";
38 
575 /**
576  * A pdf has several pages and each of them when it will rendered
577  * will have an AnnotationEditorLayer which will contain the some
578  * new Annotations associated to an editor in order to modify them.
579  *
580  * This class is used to manage all the different layers, editors and
581  * some action like copy/paste, undo/redo, ...
582  */
583 class AnnotationEditorUIManager {
584   #abortController = new AbortController();
585 
586   #activeEditor = null;
587 
588   #allEditors = new Map();
589 
590   #allLayers = new Map();
591 
592   #altTextManager = null;
593 
594   #annotationStorage = null;
595 
596   #changedExistingAnnotations = null;
597 
598   #commandManager = new CommandManager();
599 
600   #commentManager = null;
601 
602   #copyPasteAC = null;
603 
604   #currentDrawingSession = null;
605 
606   #currentPageIndex = 0;
607 
608   #deletedAnnotationsElementIds = new Set();
609 
610   #draggingEditors = null;
611 
612   #editorTypes = null;
613 
614   #editorsToRescale = new Set();
615 
616   _editorUndoBar = null;
617 
618   #enableHighlightFloatingButton = false;
619 
620   #enableUpdatedAddImage = false;
621 
622   #enableNewAltTextWhenAddingImage = false;
623 
624   #filterFactory = null;
625 
626   #focusMainContainerTimeoutId = null;
627 
628   #focusManagerAC = null;
629 
630   #highlightColors = null;
631 
632   #highlightWhenShiftUp = false;
633 
634   #highlightToolbar = null;
635 
636   #idManager = new IdManager();
637 
638   #isEnabled = false;
639 
640   #isWaiting = false;
641 
642   #keyboardManagerAC = null;
643 
644   #lastActiveElement = null;
645 
646   #mainHighlightColorPicker = null;
647 
648   #missingCanvases = null;
649 
650   #mlManager = null;
651 
652   #mode = AnnotationEditorType.NONE;
653 
654   #selectedEditors = new Set();
655 
656   #selectedTextNode = null;
657 
658   #signatureManager = null;
659 
660   #pageColors = null;
661 
662   #showAllStates = null;
663 
664   #previousStates = {
665     isEditing: false,
666     isEmpty: true,
667     hasSomethingToUndo: false,
668     hasSomethingToRedo: false,
669     hasSelectedEditor: false,
670     hasSelectedText: false,
671   };
672 
673   #translation = [0, 0];
674 
675   #translationTimeoutId = null;
676 
677   #container = null;
678 
679   #viewer = null;
680 
681   #viewerAlert = null;
682 
683   #updateModeCapability = null;
684 
685   static TRANSLATE_SMALL = 1; // page units.
686 
687   static TRANSLATE_BIG = 10; // page units.
688 
822   constructor(
823     container,
824     viewer,
825     viewerAlert,
826     altTextManager,
827     commentManager,
828     signatureManager,
829     eventBus,
830     pdfDocument,
831     pageColors,
832     highlightColors,
833     enableHighlightFloatingButton,
834     enableUpdatedAddImage,
835     enableNewAltTextWhenAddingImage,
836     mlManager,
837     editorUndoBar,
838     supportsPinchToZoom
839   ) {
840     const signal = (this._signal = this.#abortController.signal);
841     this.#container = container;
842     this.#viewer = viewer;
843     this.#viewerAlert = viewerAlert;
844     this.#altTextManager = altTextManager;
845     this.#commentManager = commentManager;
846     this.#signatureManager = signatureManager;
847     this._eventBus = eventBus;
848     eventBus._on("editingaction", this.onEditingAction.bind(this), { signal });
849     eventBus._on("pagechanging", this.onPageChanging.bind(this), { signal });
850     eventBus._on("scalechanging", this.onScaleChanging.bind(this), { signal });
851     eventBus._on("rotationchanging", this.onRotationChanging.bind(this), {
852       signal,
853     });
854     eventBus._on("setpreference", this.onSetPreference.bind(this), { signal });
855     eventBus._on(
856       "switchannotationeditorparams",
857       evt => this.updateParams(evt.type, evt.value),
858       { signal }
859     );
860     this.#addSelectionListener();
861     this.#addDragAndDropListeners();
862     this.#addKeyboardManager();
863     this.#annotationStorage = pdfDocument.annotationStorage;
864     this.#filterFactory = pdfDocument.filterFactory;
865     this.#pageColors = pageColors;
866     this.#highlightColors = highlightColors || null;
867     this.#enableHighlightFloatingButton = enableHighlightFloatingButton;
868     this.#enableUpdatedAddImage = enableUpdatedAddImage;
869     this.#enableNewAltTextWhenAddingImage = enableNewAltTextWhenAddingImage;
870     this.#mlManager = mlManager || null;
871     this.viewParameters = {
872       realScale: PixelsPerInch.PDF_TO_CSS_UNITS,
873       rotation: 0,
874     };
875     this.isShiftKeyDown = false;
876     this._editorUndoBar = editorUndoBar || null;
877     this._supportsPinchToZoom = supportsPinchToZoom !== false;
878 
879     if (typeof PDFJSDev !== "undefined" && PDFJSDev.test("TESTING")) {
880       Object.defineProperty(this, "reset", {
881         value: () => {
882           this.selectAll();
883           this.delete();
884           this.#idManager.reset();
885         },
886       });
887     }
888   }
889 
890   destroy() {
891     this.#updateModeCapability?.resolve();
892     this.#updateModeCapability = null;
893 
894     this.#abortController?.abort();
895     this.#abortController = null;
896     this._signal = null;
897 
898     for (const layer of this.#allLayers.values()) {
899       layer.destroy();
900     }
901     this.#allLayers.clear();
902     this.#allEditors.clear();
903     this.#editorsToRescale.clear();
904     this.#missingCanvases?.clear();
905     this.#activeEditor = null;
906     this.#selectedEditors.clear();
907     this.#commandManager.destroy();
908     this.#altTextManager?.destroy();
909     this.#commentManager?.destroy();
910     this.#signatureManager?.destroy();
911     this.#highlightToolbar?.hide();
912     this.#highlightToolbar = null;
913     this.#mainHighlightColorPicker?.destroy();
914     this.#mainHighlightColorPicker = null;
915     if (this.#focusMainContainerTimeoutId) {
916       clearTimeout(this.#focusMainContainerTimeoutId);
917       this.#focusMainContainerTimeoutId = null;
918     }
919     if (this.#translationTimeoutId) {
920       clearTimeout(this.#translationTimeoutId);
921       this.#translationTimeoutId = null;
922     }
923     this._editorUndoBar?.destroy();
924   }
925 
1160   highlightSelection(methodOfCreation = "") {
1161     const selection = document.getSelection();
1162     if (!selection || selection.isCollapsed) {
1163       return;
1164     }
1165     const { anchorNode, anchorOffset, focusNode, focusOffset } = selection;
1166     const text = selection.toString();
1167     const anchorElement = this.#getAnchorElementForSelection(selection);
1168     const textLayer = anchorElement.closest(".textLayer");
1169     const boxes = this.getSelectionBoxes(textLayer);
1170     if (!boxes) {
1171       return;
1172     }
1173     selection.empty();
1174 
1175     const layer = this.#getLayerForTextLayer(textLayer);
1176     const isNoneMode = this.#mode === AnnotationEditorType.NONE;
1177     const callback = () => {
1178       layer?.createAndAddNewEditor({ x: 0, y: 0 }, false, {
1179         methodOfCreation,
1180         boxes,
1181         anchorNode,
1182         anchorOffset,
1183         focusNode,
1184         focusOffset,
1185         text,
1186       });
1187       if (isNoneMode) {
1188         this.showAllEditors("highlight", true, /* updateButton = */ true);
1189       }
1190     };
1191     if (isNoneMode) {
1192       this.switchToMode(AnnotationEditorType.HIGHLIGHT, callback);
1193       return;
1194     }
1195     callback();
1196   }
1197 
1198   #displayHighlightToolbar() {
1199     const selection = document.getSelection();
1200     if (!selection || selection.isCollapsed) {
1201       return;
1202     }
1203     const anchorElement = this.#getAnchorElementForSelection(selection);
1204     const textLayer = anchorElement.closest(".textLayer");
1205     const boxes = this.getSelectionBoxes(textLayer);
1206     if (!boxes) {
1207       return;
1208     }
1209     this.#highlightToolbar ||= new HighlightToolbar(this);
1210     this.#highlightToolbar.show(textLayer, boxes, this.direction === "ltr");
1211   }
1212 
1240   #selectionChange() {
1241     const selection = document.getSelection();
1242     if (!selection || selection.isCollapsed) {
1243       if (this.#selectedTextNode) {
1244         this.#highlightToolbar?.hide();
1245         this.#selectedTextNode = null;
1246         this.#dispatchUpdateStates({
1247           hasSelectedText: false,
1248         });
1249       }
1250       return;
1251     }
1252     const { anchorNode } = selection;
1253     if (anchorNode === this.#selectedTextNode) {
1254       return;
1255     }
1256 
1257     const anchorElement = this.#getAnchorElementForSelection(selection);
1258     const textLayer = anchorElement.closest(".textLayer");
1259     if (!textLayer) {
1260       if (this.#selectedTextNode) {
1261         this.#highlightToolbar?.hide();
1262         this.#selectedTextNode = null;
1263         this.#dispatchUpdateStates({
1264           hasSelectedText: false,
1265         });
1266       }
1267       return;
1268     }
1269 
1270     this.#highlightToolbar?.hide();
1271     this.#selectedTextNode = anchorNode;
1272     this.#dispatchUpdateStates({
1273       hasSelectedText: true,
1274     });
1275 
1276     if (
1277       this.#mode !== AnnotationEditorType.HIGHLIGHT &&
1278       this.#mode !== AnnotationEditorType.NONE
1279     ) {
1280       return;
1281     }
1282 
1283     if (this.#mode === AnnotationEditorType.HIGHLIGHT) {
1284       this.showAllEditors("highlight", true, /* updateButton = */ true);
1285     }
1286 
1287     this.#highlightWhenShiftUp = this.isShiftKeyDown;
1288     if (!this.isShiftKeyDown) {
1289       const activeLayer =
1290         this.#mode === AnnotationEditorType.HIGHLIGHT
1291           ? this.#getLayerForTextLayer(textLayer)
1292           : null;
1293       activeLayer?.toggleDrawing();
1294 
1295       const ac = new AbortController();
1296       const signal = this.combinedSignal(ac);
1297 
1298       const pointerup = e => {
1299         if (e.type === "pointerup" && e.button !== 0) {
1300           // Do nothing on right click.
1301           return;
1302         }
1303         ac.abort();
1304         activeLayer?.toggleDrawing(true);
1305         if (e.type === "pointerup") {
1306           this.#onSelectEnd("main_toolbar");
1307         }
1308       };
1309       window.addEventListener("pointerup", pointerup, { signal });
1310       window.addEventListener("blur", pointerup, { signal });
1311     }
1312   }
1313 
1314   #onSelectEnd(methodOfCreation = "") {
1315     if (this.#mode === AnnotationEditorType.HIGHLIGHT) {
1316       this.highlightSelection(methodOfCreation);
1317     } else if (this.#enableHighlightFloatingButton) {
1318       this.#displayHighlightToolbar();
1319     }
1320   }
1321 
1593   /**
1594    * Execute an action for a given name.
1595    * For example, the user can click on the "Undo" entry in the context menu
1596    * and it'll trigger the undo action.
1597    */
1598   onEditingAction({ name }) {
1599     switch (name) {
1600       case "undo":
1601       case "redo":
1602       case "delete":
1603       case "selectAll":
1604         this[name]();
1605         break;
1606       case "highlightSelection":
1607         this.highlightSelection("context_menu");
1608         break;
1609     }
1610   }
1611 
2630 }
2631 
</code>

Test file:
<test_file>
File:
test/unit/pdf_spec.js
/* Copyright 2023 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import {
  AbortException,
  AnnotationEditorParamsType,
  AnnotationEditorType,
  AnnotationMode,
  AnnotationType,
  createValidAbsoluteUrl,
  FeatureTest,
  getUuid,
  ImageKind,
  InvalidPDFException,
  MathClamp,
  normalizeUnicode,
  OPS,
  PasswordResponses,
  PermissionFlag,
  ResponseException,
  shadow,
  updateUrlHash,
  Util,
  VerbosityLevel,
} from "../../src/shared/util.js";
import {
  build,
  getDocument,
  PDFDataRangeTransport,
  PDFWorker,
  version,
} from "../../src/display/api.js";
import {
  fetchData,
  getFilenameFromUrl,
  getPdfFilenameFromUrl,
  getRGB,
  getXfaPageViewport,
  isDataScheme,
  isPdfFile,
  noContextMenu,
  OutputScale,
  PDFDateString,
  PixelsPerInch,
  RenderingCancelledException,
  setLayerDimensions,
  stopEvent,
  SupportedImageMimeTypes,
} from "../../src/display/display_utils.js";
import { AnnotationEditorLayer } from "../../src/display/editor/annotation_editor_layer.js";
import { AnnotationEditorUIManager } from "../../src/display/editor/tools.js";
import { AnnotationLayer } from "../../src/display/annotation_layer.js";
import { ColorPicker } from "../../src/display/editor/color_picker.js";
import { DOMSVGFactory } from "../../src/display/svg_factory.js";
import { DrawLayer } from "../../src/display/draw_layer.js";
import { GlobalWorkerOptions } from "../../src/display/worker_options.js";
import { isValidExplicitDest } from "../../src/display/api_utils.js";
import { SignatureExtractor } from "../../src/display/editor/drawers/signaturedraw.js";
import { TextLayer } from "../../src/display/text_layer.js";
import { TouchManager } from "../../src/display/touch_manager.js";
import { XfaLayer } from "../../src/display/xfa_layer.js";
const expectedAPI = Object.freeze({
  AbortException,
  AnnotationEditorLayer,
  AnnotationEditorParamsType,
  AnnotationEditorType,
  AnnotationEditorUIManager,
  AnnotationLayer,
  AnnotationMode,
  AnnotationType,
  build,
  ColorPicker,
  createValidAbsoluteUrl,
  DOMSVGFactory,
  DrawLayer,
  FeatureTest,
  fetchData,
  getDocument,
  getFilenameFromUrl,
  getPdfFilenameFromUrl,
  getRGB,
  getUuid,
  getXfaPageViewport,
  GlobalWorkerOptions,
  ImageKind,
  InvalidPDFException,
  isDataScheme,
  isPdfFile,
  isValidExplicitDest,
  MathClamp,
  noContextMenu,
  normalizeUnicode,
  OPS,
  OutputScale,
  PasswordResponses,
  PDFDataRangeTransport,
  PDFDateString,
  PDFWorker,
  PermissionFlag,
  PixelsPerInch,
  RenderingCancelledException,
  ResponseException,
  setLayerDimensions,
  shadow,
  SignatureExtractor,
  stopEvent,
  SupportedImageMimeTypes,
  TextLayer,
  TouchManager,
  updateUrlHash,
  Util,
  VerbosityLevel,
  version,
  XfaLayer,
});
</test_file>

Your task:
You are a software tester at pdf.js.
1. Examine the existing test file. You may reuse any imports, helpers or setup blocks it already has.
2. Write exactly one javascript test `it("...", async () => {...})` block.
3. Your test must fail on the code before the patch, and pass after, hence the test will verify that the patch resolves the issue.
4. The test must be self-contained and to-the-point.
5. If you need something new use only the provided imports (respect the paths exactly how they are given) by importing dynamically for compatibility with Node.js — no new dependencies. 
6. Return only the javascript code for the new `it(...)` block (no comments or explanations).

Example structure:
it("should <describe behavior>", async () => {
  const { example } = await import("../../src/core/example.js");
  <initialize required variables>;
  <define expected variable>;
  <generate actual variables>;
  <compare expected with actual>;
});


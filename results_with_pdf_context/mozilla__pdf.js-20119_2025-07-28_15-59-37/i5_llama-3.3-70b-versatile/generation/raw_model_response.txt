```javascript
it("should add an entry in the context menu to highlight and comment the text selection in a pdf", async () => {
  const { PDFPageProxy, PDFDocumentProxy } = await import("../../src/display/api.js");
  const { PDFDataRangeTransport } = await import("../../src/display/api.js");
  const { AnnotationEditorUIManager } = await import("../../src/display/editor/tools.js");
  const { PDFDocumentLoadingTask } = await import("../../src/display/api.js");

  const pdfData = await import("./test_utils.js").then(({ TEST_PDFS_PATH }) => fetch(TEST_PDFS_PATH + "/annotation-test.pdf").then(response => response.arrayBuffer()));
  const pdfDocument = await PDFDocumentProxy.load({ cMapUrl: "", cMapPacked: true, pdfData: new Uint8Array(pdfData) });
  const pdfPage = await pdfDocument.getPage(1);
  const annotationEditorUIManager = new AnnotationEditorUIManager({});

  const contextMenuEntriesBefore = annotationEditorUIManager.getContextMenuEntries();
  expect(contextMenuEntriesBefore).not.toContainEqual({ id: "highlightSelection" });
  expect(contextMenuEntriesBefore).not.toContainEqual({ id: "commentSelection" });

  await import("../../src/display/editor/toolbar.js");
  await import("../../src/display/editor/tools.js");

  const contextMenuEntriesAfter = annotationEditorUIManager.getContextMenuEntries();
  expect(contextMenuEntriesAfter).toContainEqual({ id: "highlightSelection" });
  expect(contextMenuEntriesAfter).toContainEqual({ id: "commentSelection" });
});
```
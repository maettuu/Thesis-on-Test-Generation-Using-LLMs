it("should add highlight and comment context menu entries for text selection", async () => {
  const { AnnotationEditorUIManager } = await import("../../src/display/editor/tools.js");
  const { DOMCanvasFactory } = await import("../../src/display/canvas_factory.js");
  const { DOMCMapReaderFactory } = await import("../../src/display/cmap_reader_factory.js");
  const { PDFDocumentProxy } = await import("../../src/display/api.js");

  // Setup fake PDF document and viewer
  const pdfDocument = new PDFDocumentProxy({
    numPages: 1,
    get pages() {
      return [new (class Page {})()];
    },
  });

  const viewer = {
    get pages() {
      return [new (class Page {})()];
    },
  };

  // Create UI manager with necessary dependencies
  const uiManager = new AnnotationEditorUIManager(
    document.createElement("div"),
    viewer,
    document.createElement("div"),
    null,
    null,
    null,
    null,
    pdfDocument,
    null,
    null,
    false,
    false,
    false,
    null,
    null,
    null
  );

  // Simulate text selection
  const selection = document.getSelection();
  const range = document.createRange();
  range.selectNodeContents(document.createElement("div"));
  selection.addRange(range);

  // Trigger context menu
  const contextMenuEvent = new Event("contextmenu");
  document.dispatchEvent(contextMenuEvent);

  // Verify both highlight and comment options are present
  const expectedMethods = ["highlightSelection", "commentSelection"];
  const actualMethods = Object.getOwnPropertyNames(uiManager)
    .filter(name => expectedMethods.includes(name))
    .sort();

  expect(actualMethods).toEqual(expectedMethods);
});
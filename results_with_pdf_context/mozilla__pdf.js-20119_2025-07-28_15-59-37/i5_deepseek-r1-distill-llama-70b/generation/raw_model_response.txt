<think>
Okay, so I need to write a regression test for the issue where a context menu entry was added to highlight and comment text selection in a PDF. The patch provided makes some changes to the toolbar and UI manager classes. 

First, I'll look at the changes in the patch. The main changes are in the toolbar.js and tools.js files. The HighlightToolbar was renamed to FloatingToolbar, and new methods were added for handling comments. 

The test should check if both highlighting and commenting are available when right-clicking on selected text. I'll need to simulate a text selection and a context menu event. Then, I'll check if the appropriate methods are called.

I'll use Jest for the test and jsdom for simulating DOM events. I'll import the necessary modules like PDFDocument, PDFPage, AnnotationEditorUIManager, etc., from their respective paths.

In the test, I'll create a PDF document, get the first page, and create a text layer. Then, I'll simulate text selection and trigger a context menu event. I'll check if the context menu has the expected items for highlighting and commenting.

I'll mock the methods in the UI manager to track if they're called. After triggering the context menu, I'll assert that both methods were called, ensuring the new functionality works as intended.

I need to make sure the test is self-contained and doesn't rely on external dependencies beyond what's provided. Also, I'll structure the test with clear setup, execution, and verification steps.
</think>

```javascript
it("should add highlight and comment entries in context menu", async () => {
  const { PDFDocument } = await import("../../src/core/pdf_document.js");
  const { PDFPage } = await import("../../src/core/pdf_page.js");
  const { TextLayer } = await import("../../src/display/text_layer.js");
  const { AnnotationEditorUIManager } = await import("../../src/display/editor/tools.js");
  
  const pdf = await PDFDocument.load(await fetch("test.pdf"));
  const page = await pdf.getPage(1);
  const textLayer = new TextLayer({
    page,
    viewport: page.getViewport({ scale: 1 }),
    textSelection: true
  });

  const uiManager = new AnnotationEditorUIManager();
  const mockHighlight = jest.fn();
  const mockComment = jest.fn();
  
  uiManager.highlightSelection = mockHighlight;
  uiManager.commentSelection = mockComment;

  const selection = document.getSelection();
  selection.removeAllRanges();
  const range = document.createRange();
  range.selectNodeContents(textLayer.div);
  selection.addRange(range);

  const contextMenuEvent = new Event("contextmenu", { bubbles: true, cancelable: true });
  textLayer.div.dispatchEvent(contextMenuEvent);

  expect(mockHighlight).toHaveBeenCalled();
  expect(mockComment).toHaveBeenCalled();
});
```
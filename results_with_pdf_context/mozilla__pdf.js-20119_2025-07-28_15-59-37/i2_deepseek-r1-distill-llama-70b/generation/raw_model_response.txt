<think>
Okay, I need to write a regression test for the issue where a context menu entry was added to highlight and comment text selection in a PDF. The test should fail before the patch and pass after. 

First, I'll look at the patch provided. It seems the main changes are in the toolbar.js and tools.js files. The HighlightToolbar was renamed to FloatingToolbar, and a new method commentSelection was added. 

So, the test should check if clicking the context menu entry for commentSelection triggers the correct behavior. 

I'll structure the test using Jest. I'll create a mock UIManager and simulate the context menu click. Then, I'll check if the commentSelection method was called.

I'll need to import the necessary modules, set up mocks for the UIManager and eventBus, and then simulate the editing action. 

After the patch, the onEditingAction method should handle 'commentSelection' and call the method. So, in the test, after triggering the action, I'll assert that the method was called.

I'll make sure the test is self-contained, uses dynamic imports, and doesn't add any new dependencies. 

Finally, I'll write the test code, ensuring it's concise and only tests the specific behavior.
</think>

```javascript
it("should add comment selection to context menu and trigger commentSelection", async () => {
  const { AnnotationEditorUIManager } = await import("../../display/editor/tools.js");
  const { Util } = await import("../../shared/util.js");
  
  const eventBus = {
    _on: jest.fn(),
    once: jest.fn(),
  };
  
  const uiManager = {
    _signal: Symbol(),
    highlightSelection: jest.fn(),
    commentSelection: jest.fn(),
    delete: jest.fn(),
    onEditingAction: jest.fn(),
  };
  
  const params = {
    container: document.createElement("div"),
    viewer: {},
    viewerAlert: {},
    altTextManager: {},
    commentManager: {},
    signatureManager: {},
    eventBus,
    pdfDocument: {},
    pageColors: {},
    highlightColors: {},
    enableHighlightFloatingButton: true,
    enableUpdatedAddImage: false,
    enableNewAltTextWhenAddingImage: false,
    mlManager: null,
    editorUndoBar: null,
    supportsPinchToZoom: false,
  };
  
  const manager = new AnnotationEditorUIManager(...Object.values(params));
  
  const editingAction = {
    name: "commentSelection",
  };
  
  manager.onEditingAction(editingAction);
  
  expect(uiManager.commentSelection).toHaveBeenCalled();
});
```
<think>
Okay, I need to write a test for the new context menu entry that highlights and comments on text selection in a PDF. Let me see what the patch does.

The patch adds a new button to the toolbar, which is the FloatingToolbar. It checks if the UI manager has a comment manager and then adds a button that triggers the commentSelection method.

So, the test should verify that when the context menu is used, the commentSelection method is called. It should fail before the patch because the method didn't exist, and pass after.

I'll create a test that initializes the necessary components. I'll mock the UI manager and the comment manager. Then, I'll simulate a context menu event and check if commentSelection is called.

I'll import the required modules, set up mocks, and use Jest to check if the method was called.
</think>

```javascript
it("should add comment when using context menu on text selection", async () => {
  const { AnnotationEditorUIManager } = await import("../../src/display/editor/tools.js");
  const { TextLayer } = await import("../../src/display/text_layer.js");
  const { createIdFactory } = await import("../../src/core/core_utils.js");
  
  const idFactory = createIdFactory();
  const textLayer = {
    closest: () => ({
      getBoundingClientRect: () => ({ x: 0, y: 0, width: 100, height: 100 })
    }),
    getAttribute: () => "ltr"
  };
  
  const mockCommentManager = {
    commentSelection: jest.fn(),
    hasCommentManager: () => true
  };
  
  const uiManager = new AnnotationEditorUIManager(
    document.createElement("div"),
    document.createElement("div"),
    document.createElement("div"),
    null,
    mockCommentManager,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null
  );
  
  const event = new Event("contextmenu");
  const selection = {
    toString: () => "test selection",
    getRangeAt: () => ({
      getClientRects: () => [{ x: 0, y: 0, width: 100, height: 100 }]
    })
  };
  
  document.getSelection = () => selection;
  
  uiManager.onEditingAction({ name: "commentSelection" });
  
  expect(mockCommentManager.commentSelection).toHaveBeenCalled();
});
```
it("should use ImageDecoder for JPEG images when supported", async () => {
  const { JpegStream } = await import("../../src/core/jpeg_stream.js");
  const { BaseStream } = await import("../../src/core/base_stream.js");
  const { shadow } = await import("../../src/shared/util.js");

  const mockStream = new BaseStream();
  const jpegStream = new JpegStream(mockStream, null, new Dict());

  const originalCanUseImageDecoder = JpegStream.canUseImageDecoder;
  JpegStream.canUseImageDecoder = Promise.resolve(true);

  const mockImageDecoder = {
    decode: () => Promise.resolve({ image: "decodedImage" }),
    close: () => {},
  };

  global.ImageDecoder = function () {
    return mockImageDecoder;
  };

  const result = await jpegStream.getTransferableImage();
  expect(result).toEqual("decodedImage");

  JpegStream.canUseImageDecoder = originalCanUseImageDecoder;
  delete global.ImageDecoder;
});
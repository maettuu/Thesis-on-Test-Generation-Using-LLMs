it("should change the mouse cursor state according to the edge we resize from for added images and drawings in PDF documents", async () => {
  const { AnnotationEditor, AnnotationEditorUIManager } = await import("../../src/display/editor/editor.js");
  const { AnnotationEditorType } = await import("../../shared/util.js");
  const { InkEditor } = await import("../../src/display/editor/ink.js");
  const { StampEditor } = await import("../../src/display/editor/stamp.js");

  const annotationEditorUIManager = new AnnotationEditorUIManager();
  const inkEditor = new InkEditor({ uiManager: annotationEditorUIManager });
  const stampEditor = new StampEditor({ uiManager: annotationEditorUIManager });

  inkEditor.makeResizable();
  stampEditor.makeResizable();

  const inkResizers = inkEditor.div.querySelectorAll(".resizer");
  const stampResizers = stampEditor.div.querySelectorAll(".resizer");

  expect(inkResizers.length).toBe(8);
  expect(stampResizers.length).toBe(8);

  const mouseCursorStates = [
    "nwse-resize",
    "nesw-resize",
    "nwse-resize",
    "nesw-resize",
    "ns-resize",
    "ew-resize",
    "ns-resize",
    "ew-resize",
  ];

  inkResizers.forEach((resizer, index) => {
    resizer.dispatchEvent(new MouseEvent("pointerdown", { buttons: 1 }));
    expect(document.body.style.cursor).toBe(mouseCursorStates[index]);
  });

  stampResizers.forEach((resizer, index) => {
    resizer.dispatchEvent(new MouseEvent("pointerdown", { buttons: 1 }));
    expect(document.body.style.cursor).toBe(mouseCursorStates[index]);
  });
});
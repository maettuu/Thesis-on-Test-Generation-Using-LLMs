it("should change cursor when resizing from different edges", async () => {
  const { AnnotationEditor, InkEditor, StampEditor } = await import("../../src/display/editor/editor.js");
  const { AnnotationEditorUIManager } = await import("../../src/display/editor/tools.js");

  // Setup test HTML content
  const htmlContent = `
    <html>
      <head>
        <style>
          .resizer {
            width: 15px;
            height: 15px;
            position: absolute;
            z-index: 100;
          }
          .resizer.topLeft { cursor: nw-resize; }
          .resizer.topRight { cursor: ne-resize; }
          .resizer.bottomRight { cursor: se-resize; }
          .resizer.bottomLeft { cursor: sw-resize; }
          .resizer.topMiddle { cursor: n-resize; }
          .resizer.middleRight { cursor: e-resize; }
          .resizer.bottomMiddle { cursor: s-resize; }
          .resizer.middleLeft { cursor: w-resize; }
        </style>
      </head>
      <body></body>
    </html>
  `;

  // Create test page and editor
  const page = await new Promise(resolve => {
    const server = require('http').createServer((req, res) => {
      res.writeHead(200, {'Content-Type': 'text/html'});
      res.end(htmlContent);
    }).listen(0, 'localhost', () => {
      const port = server.address().port;
      resolve(`http://localhost:${port}`);
    });
  });

  // Initialize editor and page
  const editor = new StampEditor({
    parent: {},
    id: 'test-editor',
    x: 0,
    y: 0,
    width: 100,
    height: 100,
    rotation: 0,
    pageDimensions: [100, 100],
    pageTranslation: [0, 0]
  });

  // Test cursor changes
  const puppeteer = require('puppeteer');
  const browser = await puppeteer.launch();
  const context = await browser.newContext();
  const page = await context.newPage();
  await page.goto(page);

  // Click to activate editor
  await page.click('#test-editor');

  // Test top edge
  await page.hover('.resizers .topLeft');
  const topCursor = await page.evaluate(() => window.getComputedStyle(document.querySelector('.resizers .topLeft')).cursor);
  expect(topCursor).toBe('nw-resize');

  // Test right edge
  await page.hover('.resizers .topRight');
  const rightCursor = await page.evaluate(() => window.getComputedStyle(document.querySelector('.resizers .topRight')).cursor);
  expect(rightCursor).toBe('ne-resize');

  // Test bottom edge
  await page.hover('.resizers .bottomRight');
  const bottomCursor = await page.evaluate(() => window.getComputedStyle(document.querySelector('.resizers .bottomRight')).cursor);
  expect(bottomCursor).toBe('se-resize');

  // Test left edge
  await page.hover('.resizers .bottomLeft');
  const leftCursor = await page.evaluate(() => window.getComputedStyle(document.querySelector('.resizers .bottomLeft')).cursor);
  expect(leftCursor).toBe('sw-resize');

  // Cleanup
  await browser.close();
});
it("should change mouse cursor state according to the edge when resizing images and drawings", async () => {
  const { AnnotationEditorUIManager } = await import("../../src/display/editor/tools.js");
  const { AnnotationEditor } = await import("../../src/display/editor/editor.js");
  const { InkEditor } = await import("../../src/display/editor/ink.js");
  const { StampEditor } = await import("../../src/display/editor/stamp.js");

  const uiManager = new AnnotationEditorUIManager(null, null, { annotationStorage: {}, filterFactory: {} }, null);
  const inkEditor = new InkEditor({ parent: { pageIndex: 0, viewport: { rotation: 0, rawDims: { pageWidth: 100, pageHeight: 100, pageX: 0, pageY: 0 } } }, uiManager });
  const stampEditor = new StampEditor({ parent: { pageIndex: 0, viewport: { rotation: 0, rawDims: { pageWidth: 100, pageHeight: 100, pageX: 0, pageY: 0 } } }, uiManager, bitmapUrl: "" });

  inkEditor.select();
  stampEditor.select();

  const inkResizers = inkEditor.div.querySelectorAll(".resizer");
  const stampResizers = stampEditor.div.querySelectorAll(".resizer");

  const expectedCursorStyles = ["nwse-resize", "nesw-resize", "nwse-resize", "nesw-resize", "ns-resize", "ew-resize", "ns-resize", "ew-resize"];
  const actualInkCursorStyles = Array.from(inkResizers).map(resizer => getComputedStyle(resizer).cursor);
  const actualStampCursorStyles = Array.from(stampResizers).map(resizer => getComputedStyle(resizer).cursor);

  expect(actualInkCursorStyles).toEqual(expectedCursorStyles);
  expect(actualStampCursorStyles).toEqual(expectedCursorStyles);
});
<think>
Okay, I need to write a regression test for the issue where the mouse cursor doesn't change its state correctly when resizing images or drawings in PDF documents. The patch provided modifies the editor.js, ink.js, stamp.js, and tools.js files to handle resizer cursors.

First, I should understand what the patch does. It looks like the patch adds resizers to the editor, allowing resizing from different edges, and changes the cursor based on the edge being resized. The test needs to ensure that before the patch, the cursor doesn't change, and after the patch, it does.

I'll use Jest for the test. I'll create a test that initializes an editor, adds a stamp or ink annotation, and checks the cursor style when hovering over the resizers.

I'll import the necessary modules: AnnotationEditor from editor.js, StampEditor from stamp.js, and InkEditor from ink.js. I'll set up a mock DOM environment with a div element to attach the editor.

I'll create instances of both StampEditor and InkEditor. Then, I'll select them to make the resizers visible. Using querySelector, I'll find the resizer elements and check their cursor styles.

Before the patch, the cursor shouldn't change, so the test should fail. After the patch, the cursors should match the expected styles, so the test should pass.

I need to make sure the test is self-contained and only uses the provided imports. I'll structure the test with async/await for dynamic imports and use Jest's toMatchObject for assertions.

Finally, I'll write the test block, ensuring it's concise and directly tests the cursor behavior after the patch.
</think>

```javascript
it("should change cursor shape when resizing from different edges", async () => {
  const { AnnotationEditor } = await import("../../src/display/editor/editor.js");
  const { StampEditor } = await import("../../src/display/editor/stamp.js");
  const { InkEditor } = await import("../../src/display/editor/ink.js");

  const div = document.createElement("div");
  document.body.appendChild(div);

  const stampEditor = new StampEditor({
    uiManager: {
      stopUndoAccumulation: () => {},
      commandManager: {
        stopUndoAccumulation: () => {},
      },
    },
  });
  stampEditor.select();
  stampEditor.render();

  const inkEditor = new InkEditor({
    uiManager: {
      stopUndoAccumulation: () => {},
      commandManager: {
        stopUndoAccumulation: () => {},
      },
    },
  });
  inkEditor.select();
  inkEditor.render();

  const resizerTL = div.querySelector(".resizer.topLeft");
  const resizerTR = div.querySelector(".resizer.topRight");
  const resizerBR = div.querySelector(".resizer.bottomRight");
  const resizerBL = div.querySelector(".resizer.bottomLeft");

  expect(resizerTL.style.cursor).toBe("nwse-resize");
  expect(resizerTR.style.cursor).toBe("nesw-resize");
  expect(resizerBR.style.cursor).toBe("se-resize");
  expect(resizerBL.style.cursor).toBe("sw-resize");
});
```
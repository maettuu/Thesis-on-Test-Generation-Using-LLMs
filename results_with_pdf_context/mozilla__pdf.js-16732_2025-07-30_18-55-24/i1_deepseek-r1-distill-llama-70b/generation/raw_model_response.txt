<think>
Okay, I need to write a regression test for the issue where the mouse cursor doesn't change correctly when resizing images or drawings in PDF documents. The patch provided makes several changes to the editor.js, ink.js, stamp.js, tools.js, and util.js files. 

First, I should understand what the patch does. It looks like the patch introduces resizers for the editor, allowing the cursor to change based on the edge being resized. It adds methods like #createResizers, #resizerPointerdown, and #resizerPointermove. These methods handle the resizing events and update the cursor accordingly.

The test needs to ensure that before the patch, the cursor doesn't change as expected, and after the patch, it does. So, the test will check if the cursor changes to the correct type when hovering over different resizer elements.

I'll start by importing the necessary classes. Since the test is in unit/editor_spec.js, I'll import AnnotationEditor from "../../src/display/editor/editor.js" and the necessary types from "../../shared/util.js".

Next, I'll set up a test environment. I'll create a mock parent element with page dimensions and a viewport. Then, I'll instantiate an AnnotationEditor, making sure it's resizable by setting _willKeepAspectRatio to true.

I'll need to simulate the creation of resizers and trigger pointer events. Using Jest's jest.spyOn, I'll mock the addEventListener method to track when the resizer elements are added. Then, I'll check the data attributes set on these resizer elements to see if they correspond to the correct cursor types.

For each resizer position (like topLeft, topRight, etc.), I'll check if the data-cursor attribute is set correctly. For example, topLeft should have 'nwse-resize', and middleRight should have 'col-resize'.

After setting up the editor and creating the resizers, I'll assert that each resizer has the correct cursor type. This ensures that the patch correctly sets the cursor based on the resizer edge.

I need to make sure the test is self-contained and doesn't rely on any external dependencies beyond what's provided. Also, the test should be concise and directly target the regression issue without unnecessary fluff.

Finally, I'll structure the test using async/await for any asynchronous operations, like creating the resizers. The test will fail before the patch because the resizers won't have the correct cursor attributes, and it will pass after the patch since the attributes are set correctly.
</think>

```javascript
it("should change mouse cursor when hovering over different resizer edges", async () => {
  const { AnnotationEditor } = await import("../../src/display/editor/editor.js");
  const { AnnotationEditorParamsType } = await import("../../shared/util.js");

  const parent = {
    pageDimensions: [100, 100],
    viewport: {
      rawDims: { pageWidth: 100, pageHeight: 100, pageX: 0, pageY: 0 },
      rotation: 0,
    },
  };

  const editor = new AnnotationEditor({
    parent,
    id: "testEditor",
    uiManager: {},
    name: "testEditor",
  });

  editor._willKeepAspectRatio = true;
  editor.makeResizable();

  const resizers = editor.#resizersDiv.children;
  const resizerPositions = ["topLeft", "topRight", "bottomRight", "bottomLeft"];

  expect(editor.#resizersDiv?.children).toHaveLength(8);

  for (const resizer of resizers) {
    const position = resizer.classList[1];
    if (position === "topLeft" || position === "bottomRight") {
      expect(resizer.dataset.cursor).toBe("nwse-resize");
    } else if (position === "topRight" || position === "bottomLeft") {
      expect(resizer.dataset.cursor).toBe("nesw-resize");
    } else if (position === "topMiddle") {
      expect(resizer.dataset.cursor).toBe("n-resize");
    } else if (position === "middleRight") {
      expect(resizer.dataset.cursor).toBe("e-resize");
    } else if (position === "bottomMiddle") {
      expect(resizer.dataset.cursor).toBe("s-resize");
    } else if (position === "middleLeft") {
      expect(resizer.dataset.cursor).toBe("w-resize");
    }
  }
});
```
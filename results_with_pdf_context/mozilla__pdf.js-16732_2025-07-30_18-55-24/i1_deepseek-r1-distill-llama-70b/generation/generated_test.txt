it("should change mouse cursor when hovering over different resizer edges", async () => {
  const { AnnotationEditor } = await import("../../src/display/editor/editor.js");
  const { AnnotationEditorParamsType } = await import("../../shared/util.js");

  const parent = {
    pageDimensions: [100, 100],
    viewport: {
      rawDims: { pageWidth: 100, pageHeight: 100, pageX: 0, pageY: 0 },
      rotation: 0,
    },
  };

  const editor = new AnnotationEditor({
    parent,
    id: "testEditor",
    uiManager: {},
    name: "testEditor",
  });

  editor._willKeepAspectRatio = true;
  editor.makeResizable();

  const resizers = editor.#resizersDiv.children;
  const resizerPositions = ["topLeft", "topRight", "bottomRight", "bottomLeft"];

  expect(editor.#resizersDiv?.children).toHaveLength(8);

  for (const resizer of resizers) {
    const position = resizer.classList[1];
    if (position === "topLeft" || position === "bottomRight") {
      expect(resizer.dataset.cursor).toBe("nwse-resize");
    } else if (position === "topRight" || position === "bottomLeft") {
      expect(resizer.dataset.cursor).toBe("nesw-resize");
    } else if (position === "topMiddle") {
      expect(resizer.dataset.cursor).toBe("n-resize");
    } else if (position === "middleRight") {
      expect(resizer.dataset.cursor).toBe("e-resize");
    } else if (position === "bottomMiddle") {
      expect(resizer.dataset.cursor).toBe("s-resize");
    } else if (position === "middleLeft") {
      expect(resizer.dataset.cursor).toBe("w-resize");
    }
  }
});
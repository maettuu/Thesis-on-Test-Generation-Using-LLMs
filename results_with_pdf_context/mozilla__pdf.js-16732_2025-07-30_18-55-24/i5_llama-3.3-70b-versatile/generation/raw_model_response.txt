```javascript
it("should change the mouse cursor state according to the edge we resize it from for added images and drawings in PDF documents", async () => {
  const { AnnotationEditor } = await import("../../src/display/editor/editor.js");
  const { AnnotationEditorUIManager } = await import("../../src/display/editor/tools.js");
  const { PDFDocument } = await import("../../src/core/document.js");
  const { PDFPage } = await import("../../src/core/document.js");
  const { PDFViewer } = await import("../../web/pdf_viewer.js");

  const pdfDocument = await PDFDocument.load(await fetch("example.pdf").then(response => response.arrayBuffer()));
  const pdfPage = pdfDocument.getPage(1);
  const pdfViewer = new PDFViewer();
  const annotationEditorUIManager = new AnnotationEditorUIManager(pdfViewer);
  const annotationEditor = new AnnotationEditor({ uiManager: annotationEditorUIManager });

  annotationEditorUIManager.addEditor(annotationEditor);
  annotationEditor.makeResizable();

  const resizerDiv = annotationEditor.#resizersDiv;
  const resizerElements = resizerDiv.children;

  const expectedCursorStyles = {
    "topLeft": "nwse-resize",
    "topMiddle": "ns-resize",
    "topRight": "nesw-resize",
    "middleRight": "ew-resize",
    "bottomRight": "nwse-resize",
    "bottomMiddle": "ns-resize",
    "bottomLeft": "nesw-resize",
    "middleLeft": "ew-resize",
  };

  for (const resizerElement of resizerElements) {
    const className = resizerElement.classList[1];
    const expectedCursorStyle = expectedCursorStyles[className];

    resizerElement.dispatchEvent(new MouseEvent("pointerover", { bubbles: true }));
    const actualCursorStyle = globalThis.getComputedStyle(resizerElement).cursor;

    if (actualCursorStyle !== expectedCursorStyle) {
      throw new Error(`Expected cursor style '${expectedCursorStyle}' but got '${actualCursorStyle}' for resizer '${className}'`);
    }
  }
});
```
it("should change cursor when hovering over resizers", async () => {
  const { AnnotationEditor, AnnotationEditorUIManager } = await import("./editor.js");
  const { AnnotationEditorUIManager: UIManager } = await import("./tools.js");

  const container = document.createElement("div");
  document.body.appendChild(container);

  const uiManager = new UIManager(container, null, null, null);
  const editor = new AnnotationEditor({
    parent: {
      pageWidth: 100,
      pageHeight: 100,
      viewport: {
        rotation: 0,
        rawDims: { pageWidth: 100, pageHeight: 100 }
      },
      addInkEditorIfNeeded: () => {}
    },
    parentDimensions: [100, 100],
    uiManager: uiManager,
    id: "test",
    name: "testEditor"
  });

  editor.makeResizable();

  const expectedCursors = {
    topLeft: "nwse-resize",
    topRight: "nesw-resize",
    topMiddle: "ns-resize",
    middleRight: "ew-resize",
    bottomRight: "nwse-resize",
    bottomMiddle: "ns-resize",
    bottomLeft: "nesw-resize",
    middleLeft: "ew-resize"
  };

  const resizers = editor.#resizersDiv.querySelectorAll(".resizer");

  for (const [name, cursor] of Object.entries(expectedCursors)) {
    const resizer = resizers.namedItem(name);
    jest.spyOn(resizer, "style", {
      get: () => ({ cursor: "" })
    });

    const event = new PointerEvent("pointerenter", {
      bubbles: true,
      cancelable: true
    });

    await new Promise(resolve => {
      resizer.addEventListener("pointerenter", () => {
        expect(resizer.style.cursor).toBe(cursor);
        resolve();
      });

      resizer.dispatchEvent(event);

      jest.setTimeout(resolve, 100);
    });
  }

  document.body.removeChild(container);
});
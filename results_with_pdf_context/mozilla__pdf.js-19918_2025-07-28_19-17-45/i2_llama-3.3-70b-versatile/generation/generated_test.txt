it("should decode cmyk jpeg images using ImageDecoder", async () => {
  const { JpegStream, JpegImage } = await import("./jpeg_stream.js");
  const { readUint16 } = await import("./core_utils.js");

  const cmykJpegData = new Uint8Array([
    0xff, 0xd8, 0xff, 0xe1, 0x00, 0x00, 0x00, 0x00, 
    0x45, 0x78, 0x69, 0x66, 0x00, 0x00, 0x4d, 0x4d, 
    0x00, 0x2a, 0x00, 0x00, 0x00, 0x08, 0x00, 0x02, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xff, 0xc0, 0x00, 0x00, 0x00, 0x11, 0x08, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xff, 0xd9
  ]);

  const stream = { dict: {}, async getBytes() { return cmykJpegData; } };
  const jpegStream = new JpegStream(stream, null, { colorTransform: -1 });
  const useImageDecoder = await JpegImage.canUseImageDecoder(cmykJpegData);

  const expected = { cmyk: true, exifStart: 14, exifEnd: 30 };
  const actual = useImageDecoder;

  expect(actual).toEqual(expected);
});
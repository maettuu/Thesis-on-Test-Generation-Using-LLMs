Before you begin:
- Keep going until the job is completely solved — don’t stop halfway.
- If you’re unsure about the behavior, reread the provided patch carefully; do not hallucinate.
- Plan your approach before writing code by reflecting on whether the test truly fails before and passes after.

Issue:
<issue>
[Bug]: Rendering regression after PR 18467
### Attach (recommended) or Link to PDF file

[issue18400.pdf](https://github.com/user-attachments/files/17355578/issue18400.pdf)


### Web browser and its version

N/A

### Operating system and its version

N/A

### PDF.js version

Any version after https://github.com/mozilla/pdf.js/pull/18467

### Is the bug present in the latest PDF.js version?

Yes

### Is a browser extension

No

### Steps to reproduce the problem

Load the attached PDF document in the viewer.

### What is the expected behavior?

That the gray square is visible.

![good](https://github.com/user-attachments/assets/aba58ff8-4581-4a52-9f7b-3765bd740f66)

### What went wrong?

The page is completely blank.

![bad](https://github.com/user-attachments/assets/9034dcd9-5b61-4a2f-91ec-647612423b25)


### Link to a viewer

_No response_

### Additional context

```
$ git bisect bad
482994cc040ffa95c70e0fcf644d2d02ec15c351 is the first bad commit
commit 482994cc040ffa95c70e0fcf644d2d02ec15c351
Author: Calixte Denizet <calixte.denizet@gmail.com>
Date:   Sat Jul 20 14:45:25 2024 +0200

    Use a transparent color when setting fill/stroke colors in a pattern context but with no colorspace

 src/core/evaluator.js         | 46 +++++++++++++++++++++++++++++++++----------
 src/display/canvas.js         | 21 ++++++++++++++------
 src/shared/util.js            |  2 ++
 test/pdfs/issue18466.pdf.link |  1 +
 test/test_manifest.json       |  8 ++++++++
 5 files changed, 62 insertions(+), 16 deletions(-)
 create mode 100644 test/pdfs/issue18466.pdf.link
```

/cc @calixteman 
</issue>

PDF File:
<pdf>
issue18894.pdf
</pdf>

Patch:
<patch>
diff --git a/src/core/evaluator.js b/src/core/evaluator.js
--- a/src/core/evaluator.js
+++ b/src/core/evaluator.js
@@ -2079,6 +2079,11 @@ class PartialEvaluator {
           case OPS.setFillColorN:
             cs = stateManager.state.patternFillColorSpace;
             if (!cs) {
+              if (isNumberArray(args, null)) {
+                args = ColorSpace.singletons.gray.getRgb(args, 0);
+                fn = OPS.setFillRGBColor;
+                break;
+              }
               args = [];
               fn = OPS.setFillTransparent;
               break;
@@ -2106,6 +2111,11 @@ class PartialEvaluator {
           case OPS.setStrokeColorN:
             cs = stateManager.state.patternStrokeColorSpace;
             if (!cs) {
+              if (isNumberArray(args, null)) {
+                args = ColorSpace.singletons.gray.getRgb(args, 0);
+                fn = OPS.setStrokeRGBColor;
+                break;
+              }
               args = [];
               fn = OPS.setStrokeTransparent;
               break;


</patch>

Imports:
<imports>
Available Packages
Dev Dependencies:
- @babel/core: ^7.25.7
- @babel/preset-env: ^7.25.7
- @babel/runtime: ^7.25.7
- @fluent/bundle: ^0.18.0
- @fluent/dom: ^0.10.0
- @jazzer.js/core: ^2.1.0
- @metalsmith/layouts: ^2.7.0
- @metalsmith/markdown: ^1.10.0
- autoprefixer: ^10.4.20
- babel-loader: ^9.2.1
- caniuse-lite: ^1.0.30001667
- canvas: ^2.11.2
- core-js: ^3.38.1
- eslint: ^8.57.1
- eslint-config-prettier: ^9.1.0
- eslint-plugin-fetch-options: ^0.0.5
- eslint-plugin-html: ^8.1.2
- eslint-plugin-import: ^2.31.0
- eslint-plugin-jasmine: ^4.2.2
- eslint-plugin-json: ^3.1.0
- eslint-plugin-no-unsanitized: ^4.1.2
- eslint-plugin-prettier: ^5.2.1
- eslint-plugin-sort-exports: ^0.9.1
- eslint-plugin-unicorn: ^56.0.0
- gulp: ^5.0.0
- gulp-cli: ^3.0.0
- gulp-postcss: ^10.0.0
- gulp-rename: ^2.0.0
- gulp-replace: ^1.1.4
- gulp-zip: ^6.0.0
- highlight.js: ^11.10.0
- jasmine: ^5.3.1
- jsdoc: ^4.0.3
- jstransformer-nunjucks: ^1.2.0
- metalsmith: ^2.6.3
- metalsmith-html-relative: ^2.0.4
- ordered-read-streams: ^2.0.0
- path2d: ^0.2.1
- pngjs: ^7.0.0
- postcss: ^8.4.47
- postcss-dark-theme-class: ^1.3.0
- postcss-dir-pseudo-class: ^9.0.0
- postcss-discard-comments: ^7.0.3
- postcss-nesting: ^13.0.0
- prettier: ^3.3.3
- puppeteer: 23.3.1
- stylelint: ^16.9.0
- stylelint-prettier: ^5.0.2
- svglint: ^3.0.0
- terser-webpack-plugin: ^5.3.10
- tsc-alias: ^1.8.10
- ttest: ^4.0.0
- typescript: ^5.6.2
- vinyl: ^3.0.0
- webpack: ^5.95.0
- webpack-stream: ^7.0.0
- yargs: ^17.7.2

Engines:
- node: >=18

Available Relative Imports:
- `../../src/core/annotation.js`: Annotation, AnnotationBorderStyle, AnnotationFactory, MarkupAnnotation, getQuadPoints
- `../../src/core/bidi.js`: bidi
- `../../src/core/cff_parser.js`: CFFCharset, CFFCompiler, CFFFDSelect, CFFParser, CFFStrings
- `../../src/core/cmap.js`: CMap, CMapFactory, IdentityCMap
- `../../src/core/colorspace.js`: ColorSpace
- `../../src/core/core_utils.js`: arrayBuffersToBytes, encodeToXmlString, escapePDFName, escapeString, getInheritableProperty, getSizeInBytes, isAscii, isWhiteSpace, log2, numberToString, parseXFAPath, recoverJsURL, stringToUTF16HexString, stringToUTF16String, toRomanNumerals, validateCSSFont
- `../../src/core/crypto.js`: AES128Cipher, AES256Cipher, ARCFourCipher, CipherTransformFactory, PDF17, PDF20, calculateMD5, calculateSHA256, calculateSHA384, calculateSHA512
- `../../src/core/default_appearance.js`: createDefaultAppearance, parseAppearanceStream, parseDefaultAppearance
- `../../src/core/document.js`: PDFDocument, Page
- `../../src/core/encodings.js`: getEncoding
- `../../src/core/evaluator.js`: PartialEvaluator
- `../../src/core/flate_stream.js`: FlateStream
- `../../src/core/font_substitutions.js`: getFontSubstitution
- `../../src/core/fonts_utils.js`: SEAC_ANALYSIS_ENABLED
- `../../src/core/function.js`: PDFFunctionFactory, PostScriptCompiler, PostScriptEvaluator
- `../../src/core/glyphlist.js`: getDingbatsGlyphsUnicode, getGlyphsUnicode
- `../../src/core/image_utils.js`: GlobalImageCache, LocalColorSpaceCache
- `../../src/core/jbig2.js`: Jbig2Error, Jbig2Image
- `../../src/core/jpg.js`: JpegError, JpegImage
- `../../src/core/jpx.js`: JpxError, JpxImage
- `../../src/core/metadata_parser.js`: MetadataParser
- `../../src/core/operator_list.js`: OperatorList
- `../../src/core/parser.js`: Lexer, Linearization, Parser
- `../../src/core/predictor_stream.js`: PredictorStream
- `../../src/core/primitives.js`: Cmd, Dict, EOF, Name, Ref, RefSet, RefSetCache, isCmd, isDict, isName, isRefsEqual
- `../../src/core/ps_parser.js`: PostScriptLexer, PostScriptParser
- `../../src/core/stream.js`: NullStream, Stream, StringStream
- `../../src/core/type1_parser.js`: Type1Parser
- `../../src/core/unicode.js`: getCharUnicodeCategory, getUnicodeForGlyph, getUnicodeRangeFor, mapSpecialUnicodeValues
- `../../src/core/worker.js`: WorkerMessageHandler, WorkerTask
- `../../src/core/writer.js`: incrementalUpdate, writeDict
- `../../src/core/xfa/bind.js`: Binder
- `../../src/core/xfa/data.js`: DataHandler
- `../../src/core/xfa/factory.js`: XFAFactory
- `../../src/core/xfa/formcalc_lexer.js`: Lexer, TOKEN, Token
- `../../src/core/xfa/formcalc_parser.js`: Errors, Parser
- `../../src/core/xfa/parser.js`: XFAParser
- `../../src/core/xfa/som.js`: searchNode
- `../../src/core/xfa/symbol_utils.js`: $dump, $getChildren, $getChildrenByClass, $getChildrenByName, $text, $uid
- `../../src/core/xml_parser.js`: SimpleXMLParser, XMLParserBase
- `../../src/display/annotation_layer.js`: AnnotationLayer
- `../../src/display/annotation_storage.js`: AnnotationStorage
- `../../src/display/api.js`: DefaultCMapReaderFactory, DefaultCanvasFactory, DefaultStandardFontDataFactory, LoopbackPort, PDFDataRangeTransport, PDFDocumentLoadingTask, PDFDocumentProxy, PDFPageProxy, PDFWorker, RenderTask, build, getDocument, version
- `../../src/display/display_utils.js`: DOMCanvasFactory, DOMSVGFactory, OutputScale, PDFDateString, PageViewport, PixelsPerInch, RenderingCancelledException, StatTimer, fetchData, getFilenameFromUrl, getPdfFilenameFromUrl, getXfaPageViewport, isDataScheme, isPdfFile, isValidFetchUrl, noContextMenu, setLayerDimensions
- `../../src/display/draw_layer.js`: DrawLayer
- `../../src/display/editor/annotation_editor_layer.js`: AnnotationEditorLayer
- `../../src/display/editor/color_picker.js`: ColorPicker
- `../../src/display/editor/tools.js`: AnnotationEditorUIManager, CommandManager
- `../../src/display/fetch_stream.js`: PDFFetchStream
- `../../src/display/metadata.js`: Metadata
- `../../src/display/network.js`: PDFNetworkStream
- `../../src/display/network_utils.js`: createHeaders, createResponseStatusError, extractFilenameFromHeader, validateRangeRequestCapabilities, validateResponseStatus
- `../../src/display/node_stream.js`: PDFNodeStream
- `../../src/display/node_utils.js`: NodePackages
- `../../src/display/text_layer.js`: TextLayer
- `../../src/display/worker_options.js`: GlobalWorkerOptions
- `../../src/display/xfa_layer.js`: XfaLayer
- `../../src/shared/message_handler.js`: MessageHandler
- `../../src/shared/murmurhash3.js`: MurmurHash3_64
- `../../src/shared/util.js`: AbortException, AnnotationBorderStyleType, AnnotationEditorParamsType, AnnotationEditorType, AnnotationFieldFlag, AnnotationFlag, AnnotationMode, AnnotationType, BaseException, CMapCompressionType, FeatureTest, FormatError, ImageKind, InvalidPDFException, MissingPDFException, OPS, PasswordException, PasswordResponses, PermissionFlag, RenderingIntentFlag, UnexpectedResponseException, UnknownErrorException, Util, VerbosityLevel, assert, bytesToString, createValidAbsoluteUrl, getModificationDate, getVerbosityLevel, isNodeJS, normalizeUnicode, objectSize, setVerbosityLevel, shadow, string32, stringToBytes, stringToPDFString, stringToUTF8String
- `../../web/annotation_layer_builder.js`: AnnotationLayerBuilder
- `../../web/app_options.js`: AppOptions, OptionKind
- `../../web/download_manager.js`: DownloadManager
- `../../web/event_utils.js`: EventBus, WaitOnType, waitOnEventOrTimeout
- `../../web/genericl10n.js`: GenericL10n
- `../../web/pdf_find_controller.js`: FindState, PDFFindController
- `../../web/pdf_find_utils.js`: CharacterType, getCharacterType
- `../../web/pdf_history.js`: PDFHistory, isDestArraysEqual, isDestHashesEqual
- `../../web/pdf_link_service.js`: LinkTarget, PDFLinkService, SimpleLinkService
- `../../web/pdf_page_view.js`: PDFPageView
- `../../web/pdf_scripting_manager.component.js`: PDFScriptingManager
- `../../web/pdf_single_page_viewer.js`: PDFSinglePageViewer
- `../../web/pdf_viewer.js`: PDFPageViewBuffer, PDFViewer
- `../../web/struct_tree_layer_builder.js`: StructTreeLayerBuilder
- `../../web/text_layer_builder.js`: TextLayerBuilder
- `../../web/ui_utils.js`: AutoPrintRegExp, ProgressBar, RenderingStates, ScrollMode, SpreadMode, backtrackBeforeAllVisibleElements, binarySearchFirstItem, calcRound, getPageSizeInches, getVisibleElements, isPortraitOrientation, isValidRotation, parseQueryString, removeNullCharacters
- `../../web/xfa_layer_builder.js`: XfaLayerBuilder
- `./test_utils.js`: CMAP_URL, DefaultFileReaderFactory, STANDARD_FONT_DATA_URL, TEST_PDFS_PATH, XRefMock, buildGetDocumentParams, createIdFactory, createTemporaryNodeServer
- `./testreporter.js`: TestReporter
</imports>

Code:
<code>
File:
src/core/evaluator.js
1 /* Copyright 2012 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 /* eslint-disable no-var */
16 
17 import {
18   AbortException,
19   assert,
20   CMapCompressionType,
21   FONT_IDENTITY_MATRIX,
22   FormatError,
23   IDENTITY_MATRIX,
24   info,
25   isArrayEqual,
26   normalizeUnicode,
27   OPS,
28   shadow,
29   stringToPDFString,
30   TextRenderingMode,
31   Util,
32   warn,
33 } from "../shared/util.js";
34 import { CMapFactory, IdentityCMap } from "./cmap.js";
35 import { Cmd, Dict, EOF, isName, Name, Ref, RefSet } from "./primitives.js";
36 import { ErrorFont, Font } from "./fonts.js";
37 import {
38   getEncoding,
39   MacRomanEncoding,
40   StandardEncoding,
41   SymbolSetEncoding,
42   WinAnsiEncoding,
43   ZapfDingbatsEncoding,
44 } from "./encodings.js";
45 import {
46   getFontNameToFileMap,
47   getSerifFonts,
48   getStandardFontName,
49   getStdFontMap,
50   getSymbolsFonts,
51   isKnownFontName,
52 } from "./standard_fonts.js";
53 import { getTilingPatternIR, Pattern } from "./pattern.js";
54 import { getXfaFontDict, getXfaFontName } from "./xfa_fonts.js";
55 import { IdentityToUnicodeMap, ToUnicodeMap } from "./to_unicode_map.js";
56 import { isNumberArray, lookupMatrix, lookupNormalRect } from "./core_utils.js";
57 import { isPDFFunction, PDFFunctionFactory } from "./function.js";
58 import { Lexer, Parser } from "./parser.js";
59 import {
60   LocalColorSpaceCache,
61   LocalGStateCache,
62   LocalImageCache,
63   LocalTilingPatternCache,
64   RegionalImageCache,
65 } from "./image_utils.js";
66 import { NullStream, Stream } from "./stream.js";
67 import { BaseStream } from "./base_stream.js";
68 import { bidi } from "./bidi.js";
69 import { ColorSpace } from "./colorspace.js";
70 import { DecodeStream } from "./decode_stream.js";
71 import { FontFlags } from "./fonts_utils.js";
72 import { getFontSubstitution } from "./font_substitutions.js";
73 import { getGlyphsUnicode } from "./glyphlist.js";
74 import { getMetrics } from "./metrics.js";
75 import { getUnicodeForGlyph } from "./unicode.js";
76 import { ImageResizer } from "./image_resizer.js";
77 import { MurmurHash3_64 } from "../shared/murmurhash3.js";
78 import { OperatorList } from "./operator_list.js";
79 import { PDFImage } from "./image.js";
80 
81 const DefaultPartialEvaluatorOptions = Object.freeze({
82   maxImageSize: -1,
83   disableFontFace: false,
84   ignoreErrors: false,
85   isEvalSupported: true,
86   isOffscreenCanvasSupported: false,
87   canvasMaxAreaInBytes: -1,
88   fontExtraProperties: false,
89   useSystemFonts: true,
90   cMapUrl: null,
91   standardFontDataUrl: null,
92 });
93 
94 const PatternType = {
95   TILING: 1,
96   SHADING: 2,
97 };
98 
99 // Optionally avoid sending individual, or very few, text chunks to reduce
100 // `postMessage` overhead with ReadableStream (see issue 13962).
101 //
102 // PLEASE NOTE: This value should *not* be too large (it's used as a lower limit
103 // in `enqueueChunk`), since that would cause streaming of textContent to become
104 // essentially useless in practice by sending all (or most) chunks at once.
105 // Also, a too large value would (indirectly) affect the main-thread `textLayer`
106 // building negatively by forcing all textContent to be handled at once, which
107 // could easily end up hurting *overall* performance (e.g. rendering as well).
108 const TEXT_CHUNK_BATCH_SIZE = 10;
109 
110 const deferred = Promise.resolve();
111 
112 // Convert PDF blend mode names to HTML5 blend mode names.
113 function normalizeBlendMode(value, parsingArray = false) {
114   if (Array.isArray(value)) {
115     // Use the first *supported* BM value in the Array (fixes issue11279.pdf).
116     for (const val of value) {
117       const maybeBM = normalizeBlendMode(val, /* parsingArray = */ true);
118       if (maybeBM) {
119         return maybeBM;
120       }
121     }
122     warn(`Unsupported blend mode Array: ${value}`);
123     return "source-over";
124   }
125 
126   if (!(value instanceof Name)) {
127     if (parsingArray) {
128       return null;
129     }
130     return "source-over";
131   }
132   switch (value.name) {
133     case "Normal":
134     case "Compatible":
135       return "source-over";
136     case "Multiply":
137       return "multiply";
138     case "Screen":
139       return "screen";
140     case "Overlay":
141       return "overlay";
142     case "Darken":
143       return "darken";
144     case "Lighten":
145       return "lighten";
146     case "ColorDodge":
147       return "color-dodge";
148     case "ColorBurn":
149       return "color-burn";
150     case "HardLight":
151       return "hard-light";
152     case "SoftLight":
153       return "soft-light";
154     case "Difference":
155       return "difference";
156     case "Exclusion":
157       return "exclusion";
158     case "Hue":
159       return "hue";
160     case "Saturation":
161       return "saturation";
162     case "Color":
163       return "color";
164     case "Luminosity":
165       return "luminosity";
166   }
167   if (parsingArray) {
168     return null;
169   }
170   warn(`Unsupported blend mode: ${value.name}`);
171   return "source-over";
172 }
173 
174 function addLocallyCachedImageOps(opList, data) {
175   if (data.objId) {
176     opList.addDependency(data.objId);
177   }
178   opList.addImageOps(data.fn, data.args, data.optionalContent);
179 
180   if (data.fn === OPS.paintImageMaskXObject && data.args[0]?.count > 0) {
181     data.args[0].count++;
182   }
183 }
184 
185 // Trying to minimize Date.now() usage and check every 100 time.
186 class TimeSlotManager {
187   static TIME_SLOT_DURATION_MS = 20;
188 
189   static CHECK_TIME_EVERY = 100;
190 
191   constructor() {
192     this.reset();
193   }
194 
195   check() {
196     if (++this.checked < TimeSlotManager.CHECK_TIME_EVERY) {
197       return false;
198     }
199     this.checked = 0;
200     return this.endTime <= Date.now();
201   }
202 
203   reset() {
204     this.endTime = Date.now() + TimeSlotManager.TIME_SLOT_DURATION_MS;
205     this.checked = 0;
206   }
207 }
208 
209 class PartialEvaluator {
210   constructor({
211     xref,
212     handler,
213     pageIndex,
214     idFactory,
215     fontCache,
216     builtInCMapCache,
217     standardFontDataCache,
218     globalImageCache,
219     systemFontCache,
220     options = null,
221   }) {
222     this.xref = xref;
223     this.handler = handler;
224     this.pageIndex = pageIndex;
225     this.idFactory = idFactory;
226     this.fontCache = fontCache;
227     this.builtInCMapCache = builtInCMapCache;
228     this.standardFontDataCache = standardFontDataCache;
229     this.globalImageCache = globalImageCache;
230     this.systemFontCache = systemFontCache;
231     this.options = options || DefaultPartialEvaluatorOptions;
232     this.type3FontRefs = null;
233 
234     this._regionalImageCache = new RegionalImageCache();
235     this._fetchBuiltInCMapBound = this.fetchBuiltInCMap.bind(this);
236     ImageResizer.setMaxArea(this.options.canvasMaxAreaInBytes);
237   }
238 
239   /**
240    * Since Functions are only cached (locally) by reference, we can share one
241    * `PDFFunctionFactory` instance within this `PartialEvaluator` instance.
242    */
243   get _pdfFunctionFactory() {
244     const pdfFunctionFactory = new PDFFunctionFactory({
245       xref: this.xref,
246       isEvalSupported: this.options.isEvalSupported,
247     });
248     return shadow(this, "_pdfFunctionFactory", pdfFunctionFactory);
249   }
250 
251   get parsingType3Font() {
252     return !!this.type3FontRefs;
253   }
254 
255   clone(newOptions = null) {
256     const newEvaluator = Object.create(this);
257     newEvaluator.options = Object.assign(
258       Object.create(null),
259       this.options,
260       newOptions
261     );
262     return newEvaluator;
263   }
264 
265   hasBlendModes(resources, nonBlendModesSet) {
266     if (!(resources instanceof Dict)) {
267       return false;
268     }
269     if (resources.objId && nonBlendModesSet.has(resources.objId)) {
270       return false;
271     }
272 
273     const processed = new RefSet(nonBlendModesSet);
274     if (resources.objId) {
275       processed.put(resources.objId);
276     }
277 
278     const nodes = [resources],
279       xref = this.xref;
280     while (nodes.length) {
281       const node = nodes.shift();
282       // First check the current resources for blend modes.
283       const graphicStates = node.get("ExtGState");
284       if (graphicStates instanceof Dict) {
285         for (let graphicState of graphicStates.getRawValues()) {
286           if (graphicState instanceof Ref) {
287             if (processed.has(graphicState)) {
288               continue; // The ExtGState has already been processed.
289             }
290             try {
291               graphicState = xref.fetch(graphicState);
292             } catch (ex) {
293               // Avoid parsing a corrupt ExtGState more than once.
294               processed.put(graphicState);
295 
296               info(`hasBlendModes - ignoring ExtGState: "${ex}".`);
297               continue;
298             }
299           }
300           if (!(graphicState instanceof Dict)) {
301             continue;
302           }
303           if (graphicState.objId) {
304             processed.put(graphicState.objId);
305           }
306 
307           const bm = graphicState.get("BM");
308           if (bm instanceof Name) {
309             if (bm.name !== "Normal") {
310               return true;
311             }
312             continue;
313           }
314           if (bm !== undefined && Array.isArray(bm)) {
315             for (const element of bm) {
316               if (element instanceof Name && element.name !== "Normal") {
317                 return true;
318               }
319             }
320           }
321         }
322       }
323       // Descend into the XObjects to look for more resources and blend modes.
324       const xObjects = node.get("XObject");
325       if (!(xObjects instanceof Dict)) {
326         continue;
327       }
328       for (let xObject of xObjects.getRawValues()) {
329         if (xObject instanceof Ref) {
330           if (processed.has(xObject)) {
331             // The XObject has already been processed, and by avoiding a
332             // redundant `xref.fetch` we can *significantly* reduce the load
333             // time for badly generated PDF files (fixes issue6961.pdf).
334             continue;
335           }
336           try {
337             xObject = xref.fetch(xObject);
338           } catch (ex) {
339             // Avoid parsing a corrupt XObject more than once.
340             processed.put(xObject);
341 
342             info(`hasBlendModes - ignoring XObject: "${ex}".`);
343             continue;
344           }
345         }
346         if (!(xObject instanceof BaseStream)) {
347           continue;
348         }
349         if (xObject.dict.objId) {
350           processed.put(xObject.dict.objId);
351         }
352         const xResources = xObject.dict.get("Resources");
353         if (!(xResources instanceof Dict)) {
354           continue;
355         }
356         // Checking objId to detect an infinite loop.
357         if (xResources.objId && processed.has(xResources.objId)) {
358           continue;
359         }
360 
361         nodes.push(xResources);
362         if (xResources.objId) {
363           processed.put(xResources.objId);
364         }
365       }
366     }
367 
368     // When no blend modes exist, there's no need re-fetch/re-parse any of the
369     // processed `Ref`s again for subsequent pages. This helps reduce redundant
370     // `XRef.fetch` calls for some documents (e.g. issue6961.pdf).
371     for (const ref of processed) {
372       nonBlendModesSet.put(ref);
373     }
374     return false;
375   }
376 
377   async fetchBuiltInCMap(name) {
378     const cachedData = this.builtInCMapCache.get(name);
379     if (cachedData) {
380       return cachedData;
381     }
382     let data;
383 
384     if (this.options.cMapUrl !== null) {
385       // Only compressed CMaps are (currently) supported here.
386       const url = `${this.options.cMapUrl}${name}.bcmap`;
387       const response = await fetch(url);
388       if (!response.ok) {
389         throw new Error(
390           `fetchBuiltInCMap: failed to fetch file "${url}" with "${response.statusText}".`
391         );
392       }
393       data = {
394         cMapData: new Uint8Array(await response.arrayBuffer()),
395         compressionType: CMapCompressionType.BINARY,
396       };
397     } else {
398       // Get the data on the main-thread instead.
399       data = await this.handler.sendWithPromise("FetchBuiltInCMap", { name });
400     }
401 
402     if (data.compressionType !== CMapCompressionType.NONE) {
403       // Given the size of uncompressed CMaps, only cache compressed ones.
404       this.builtInCMapCache.set(name, data);
405     }
406     return data;
407   }
408 
409   async fetchStandardFontData(name) {
410     const cachedData = this.standardFontDataCache.get(name);
411     if (cachedData) {
412       return new Stream(cachedData);
413     }
414 
415     // The symbol fonts are not consistent across platforms, always load the
416     // standard font data for them.
417     if (
418       this.options.useSystemFonts &&
419       name !== "Symbol" &&
420       name !== "ZapfDingbats"
421     ) {
422       return null;
423     }
424 
425     const standardFontNameToFileName = getFontNameToFileMap(),
426       filename = standardFontNameToFileName[name];
427     let data;
428 
429     if (this.options.standardFontDataUrl !== null) {
430       const url = `${this.options.standardFontDataUrl}${filename}`;
431       const response = await fetch(url);
432       if (!response.ok) {
433         warn(
434           `fetchStandardFontData: failed to fetch file "${url}" with "${response.statusText}".`
435         );
436       } else {
437         data = new Uint8Array(await response.arrayBuffer());
438       }
439     } else {
440       // Get the data on the main-thread instead.
441       try {
442         data = await this.handler.sendWithPromise("FetchStandardFontData", {
443           filename,
444         });
445       } catch (e) {
446         warn(
447           `fetchStandardFontData: failed to fetch file "${filename}" with "${e}".`
448         );
449       }
450     }
451 
452     if (!data) {
453       return null;
454     }
455     // Cache the "raw" standard font data, to avoid fetching it repeatedly
456     // (see e.g. issue 11399).
457     this.standardFontDataCache.set(name, data);
458 
459     return new Stream(data);
460   }
461 
462   async buildFormXObject(
463     resources,
464     xobj,
465     smask,
466     operatorList,
467     task,
468     initialState,
469     localColorSpaceCache
470   ) {
471     const dict = xobj.dict;
472     const matrix = lookupMatrix(dict.getArray("Matrix"), null);
473     const bbox = lookupNormalRect(dict.getArray("BBox"), null);
474 
475     let optionalContent, groupOptions;
476     if (dict.has("OC")) {
477       optionalContent = await this.parseMarkedContentProps(
478         dict.get("OC"),
479         resources
480       );
481     }
482     if (optionalContent !== undefined) {
483       operatorList.addOp(OPS.beginMarkedContentProps, ["OC", optionalContent]);
484     }
485     const group = dict.get("Group");
486     if (group) {
487       groupOptions = {
488         matrix,
489         bbox,
490         smask,
491         isolated: false,
492         knockout: false,
493       };
494 
495       const groupSubtype = group.get("S");
496       let colorSpace = null;
497       if (isName(groupSubtype, "Transparency")) {
498         groupOptions.isolated = group.get("I") || false;
499         groupOptions.knockout = group.get("K") || false;
500         if (group.has("CS")) {
501           const cs = group.getRaw("CS");
502 
503           const cachedColorSpace = ColorSpace.getCached(
504             cs,
505             this.xref,
506             localColorSpaceCache
507           );
508           if (cachedColorSpace) {
509             colorSpace = cachedColorSpace;
510           } else {
511             colorSpace = await this.parseColorSpace({
512               cs,
513               resources,
514               localColorSpaceCache,
515             });
516           }
517         }
518       }
519 
520       if (smask?.backdrop) {
521         colorSpace ||= ColorSpace.singletons.rgb;
522         smask.backdrop = colorSpace.getRgb(smask.backdrop, 0);
523       }
524 
525       operatorList.addOp(OPS.beginGroup, [groupOptions]);
526     }
527 
528     // If it's a group, a new canvas will be created that is the size of the
529     // bounding box and translated to the correct position so we don't need to
530     // apply the bounding box to it.
531     const args = group ? [matrix, null] : [matrix, bbox];
532     operatorList.addOp(OPS.paintFormXObjectBegin, args);
533 
534     await this.getOperatorList({
535       stream: xobj,
536       task,
537       resources: dict.get("Resources") || resources,
538       operatorList,
539       initialState,
540     });
541     operatorList.addOp(OPS.paintFormXObjectEnd, []);
542 
543     if (group) {
544       operatorList.addOp(OPS.endGroup, [groupOptions]);
545     }
546 
547     if (optionalContent !== undefined) {
548       operatorList.addOp(OPS.endMarkedContent, []);
549     }
550   }
551 
552   _sendImgData(objId, imgData, cacheGlobally = false) {
553     if (
554       (typeof PDFJSDev === "undefined" || PDFJSDev.test("TESTING")) &&
555       imgData
556     ) {
557       assert(Number.isInteger(imgData.dataLen), "Expected dataLen to be set.");
558     }
559     const transfers = imgData ? [imgData.bitmap || imgData.data.buffer] : null;
560 
561     if (this.parsingType3Font || cacheGlobally) {
562       return this.handler.send(
563         "commonobj",
564         [objId, "Image", imgData],
565         transfers
566       );
567     }
568     return this.handler.send(
569       "obj",
570       [objId, this.pageIndex, "Image", imgData],
571       transfers
572     );
573   }
574 
575   async buildPaintImageXObject({
576     resources,
577     image,
578     isInline = false,
579     operatorList,
580     cacheKey,
581     localImageCache,
582     localColorSpaceCache,
583   }) {
584     const dict = image.dict;
585     const imageRef = dict.objId;
586     const w = dict.get("W", "Width");
587     const h = dict.get("H", "Height");
588 
589     if (!(w && typeof w === "number") || !(h && typeof h === "number")) {
590       warn("Image dimensions are missing, or not numbers.");
591       return;
592     }
593     const maxImageSize = this.options.maxImageSize;
594     if (maxImageSize !== -1 && w * h > maxImageSize) {
595       const msg = "Image exceeded maximum allowed size and was removed.";
596 
597       if (this.options.ignoreErrors) {
598         warn(msg);
599         return;
600       }
601       throw new Error(msg);
602     }
603 
604     let optionalContent;
605     if (dict.has("OC")) {
606       optionalContent = await this.parseMarkedContentProps(
607         dict.get("OC"),
608         resources
609       );
610     }
611 
612     const imageMask = dict.get("IM", "ImageMask") || false;
613     let imgData, args;
614     if (imageMask) {
615       // This depends on a tmpCanvas being filled with the
616       // current fillStyle, such that processing the pixel
617       // data can't be done here. Instead of creating a
618       // complete PDFImage, only read the information needed
619       // for later.
620       const interpolate = dict.get("I", "Interpolate");
621       const bitStrideLength = (w + 7) >> 3;
622       const imgArray = image.getBytes(bitStrideLength * h);
623       const decode = dict.getArray("D", "Decode");
624 
625       if (this.parsingType3Font) {
626         imgData = PDFImage.createRawMask({
627           imgArray,
628           width: w,
629           height: h,
630           imageIsFromDecodeStream: image instanceof DecodeStream,
631           inverseDecode: decode?.[0] > 0,
632           interpolate,
633         });
634 
635         imgData.cached = !!cacheKey;
636         args = [imgData];
637 
638         operatorList.addImageOps(
639           OPS.paintImageMaskXObject,
640           args,
641           optionalContent
642         );
643 
644         if (cacheKey) {
645           const cacheData = {
646             fn: OPS.paintImageMaskXObject,
647             args,
648             optionalContent,
649           };
650           localImageCache.set(cacheKey, imageRef, cacheData);
651 
652           if (imageRef) {
653             this._regionalImageCache.set(
654               /* name = */ null,
655               imageRef,
656               cacheData
657             );
658           }
659         }
660         return;
661       }
662 
663       imgData = await PDFImage.createMask({
664         imgArray,
665         width: w,
666         height: h,
667         imageIsFromDecodeStream: image instanceof DecodeStream,
668         inverseDecode: decode?.[0] > 0,
669         interpolate,
670         isOffscreenCanvasSupported: this.options.isOffscreenCanvasSupported,
671       });
672 
673       if (imgData.isSingleOpaquePixel) {
674         // Handles special case of mainly LaTeX documents which use image
675         // masks to draw lines with the current fill style.
676         operatorList.addImageOps(
677           OPS.paintSolidColorImageMask,
678           [],
679           optionalContent
680         );
681 
682         if (cacheKey) {
683           const cacheData = {
684             fn: OPS.paintSolidColorImageMask,
685             args: [],
686             optionalContent,
687           };
688           localImageCache.set(cacheKey, imageRef, cacheData);
689 
690           if (imageRef) {
691             this._regionalImageCache.set(
692               /* name = */ null,
693               imageRef,
694               cacheData
695             );
696           }
697         }
698         return;
699       }
700 
701       const objId = `mask_${this.idFactory.createObjId()}`;
702       operatorList.addDependency(objId);
703 
704       imgData.dataLen = imgData.bitmap
705         ? imgData.width * imgData.height * 4
706         : imgData.data.length;
707       this._sendImgData(objId, imgData);
708 
709       args = [
710         {
711           data: objId,
712           width: imgData.width,
713           height: imgData.height,
714           interpolate: imgData.interpolate,
715           count: 1,
716         },
717       ];
718       operatorList.addImageOps(
719         OPS.paintImageMaskXObject,
720         args,
721         optionalContent
722       );
723 
724       if (cacheKey) {
725         const cacheData = {
726           objId,
727           fn: OPS.paintImageMaskXObject,
728           args,
729           optionalContent,
730         };
731         localImageCache.set(cacheKey, imageRef, cacheData);
732 
733         if (imageRef) {
734           this._regionalImageCache.set(/* name = */ null, imageRef, cacheData);
735         }
736       }
737       return;
738     }
739 
740     const SMALL_IMAGE_DIMENSIONS = 200;
741     // Inlining small images into the queue as RGB data
742     if (
743       isInline &&
744       w + h < SMALL_IMAGE_DIMENSIONS &&
745       !dict.has("SMask") &&
746       !dict.has("Mask")
747     ) {
748       try {
749         const imageObj = new PDFImage({
750           xref: this.xref,
751           res: resources,
752           image,
753           isInline,
754           pdfFunctionFactory: this._pdfFunctionFactory,
755           localColorSpaceCache,
756         });
757         // We force the use of RGBA_32BPP images here, because we can't handle
758         // any other kind.
759         imgData = await imageObj.createImageData(
760           /* forceRGBA = */ true,
761           /* isOffscreenCanvasSupported = */ false
762         );
763         operatorList.isOffscreenCanvasSupported =
764           this.options.isOffscreenCanvasSupported;
765         operatorList.addImageOps(
766           OPS.paintInlineImageXObject,
767           [imgData],
768           optionalContent
769         );
770       } catch (reason) {
771         const msg = `Unable to decode inline image: "${reason}".`;
772 
773         if (!this.options.ignoreErrors) {
774           throw new Error(msg);
775         }
776         warn(msg);
777       }
778       return;
779     }
780 
781     // If there is no imageMask, create the PDFImage and a lot
782     // of image processing can be done here.
783     let objId = `img_${this.idFactory.createObjId()}`,
784       cacheGlobally = false;
785 
786     if (this.parsingType3Font) {
787       objId = `${this.idFactory.getDocId()}_type3_${objId}`;
788     } else if (cacheKey && imageRef) {
789       cacheGlobally = this.globalImageCache.shouldCache(
790         imageRef,
791         this.pageIndex
792       );
793 
794       if (cacheGlobally) {
795         assert(!isInline, "Cannot cache an inline image globally.");
796 
797         objId = `${this.idFactory.getDocId()}_${objId}`;
798       }
799     }
800 
801     // Ensure that the dependency is added before the image is decoded.
802     operatorList.addDependency(objId);
803     args = [objId, w, h];
804     operatorList.addImageOps(OPS.paintImageXObject, args, optionalContent);
805 
806     if (cacheGlobally) {
807       if (this.globalImageCache.hasDecodeFailed(imageRef)) {
808         this.globalImageCache.setData(imageRef, {
809           objId,
810           fn: OPS.paintImageXObject,
811           args,
812           optionalContent,
813           byteSize: 0, // Data is `null`, since decoding failed previously.
814         });
815 
816         this._sendImgData(objId, /* imgData = */ null, cacheGlobally);
817         return;
818       }
819 
820       // For large (at least 500x500) or more complex images that we'll cache
821       // globally, check if the image is still cached locally on the main-thread
822       // to avoid having to re-parse the image (since that can be slow).
823       if (w * h > 250000 || dict.has("SMask") || dict.has("Mask")) {
824         const localLength = await this.handler.sendWithPromise("commonobj", [
825           objId,
826           "CopyLocalImage",
827           { imageRef },
828         ]);
829 
830         if (localLength) {
831           this.globalImageCache.setData(imageRef, {
832             objId,
833             fn: OPS.paintImageXObject,
834             args,
835             optionalContent,
836             byteSize: 0, // Temporary entry, to avoid `setData` returning early.
837           });
838           this.globalImageCache.addByteSize(imageRef, localLength);
839           return;
840         }
841       }
842     }
843 
844     PDFImage.buildImage({
845       xref: this.xref,
846       res: resources,
847       image,
848       isInline,
849       pdfFunctionFactory: this._pdfFunctionFactory,
850       localColorSpaceCache,
851     })
852       .then(async imageObj => {
853         imgData = await imageObj.createImageData(
854           /* forceRGBA = */ false,
855           /* isOffscreenCanvasSupported = */ this.options
856             .isOffscreenCanvasSupported
857         );
858         imgData.dataLen = imgData.bitmap
859           ? imgData.width * imgData.height * 4
860           : imgData.data.length;
861         imgData.ref = imageRef;
862 
863         if (cacheGlobally) {
864           this.globalImageCache.addByteSize(imageRef, imgData.dataLen);
865         }
866         return this._sendImgData(objId, imgData, cacheGlobally);
867       })
868       .catch(reason => {
869         warn(`Unable to decode image "${objId}": "${reason}".`);
870 
871         if (imageRef) {
872           this.globalImageCache.addDecodeFailed(imageRef);
873         }
874         return this._sendImgData(objId, /* imgData = */ null, cacheGlobally);
875       });
876 
877     if (cacheKey) {
878       const cacheData = {
879         objId,
880         fn: OPS.paintImageXObject,
881         args,
882         optionalContent,
883       };
884       localImageCache.set(cacheKey, imageRef, cacheData);
885 
886       if (imageRef) {
887         this._regionalImageCache.set(/* name = */ null, imageRef, cacheData);
888 
889         if (cacheGlobally) {
890           this.globalImageCache.setData(imageRef, {
891             objId,
892             fn: OPS.paintImageXObject,
893             args,
894             optionalContent,
895             byteSize: 0, // Temporary entry, note `addByteSize` above.
896           });
897         }
898       }
899     }
900   }
901 
902   handleSMask(
903     smask,
904     resources,
905     operatorList,
906     task,
907     stateManager,
908     localColorSpaceCache
909   ) {
910     const smaskContent = smask.get("G");
911     const smaskOptions = {
912       subtype: smask.get("S").name,
913       backdrop: smask.get("BC"),
914     };
915 
916     // The SMask might have a alpha/luminosity value transfer function --
917     // we will build a map of integer values in range 0..255 to be fast.
918     const transferObj = smask.get("TR");
919     if (isPDFFunction(transferObj)) {
920       const transferFn = this._pdfFunctionFactory.create(transferObj);
921       const transferMap = new Uint8Array(256);
922       const tmp = new Float32Array(1);
923       for (let i = 0; i < 256; i++) {
924         tmp[0] = i / 255;
925         transferFn(tmp, 0, tmp, 0);
926         transferMap[i] = (tmp[0] * 255) | 0;
927       }
928       smaskOptions.transferMap = transferMap;
929     }
930 
931     return this.buildFormXObject(
932       resources,
933       smaskContent,
934       smaskOptions,
935       operatorList,
936       task,
937       stateManager.state.clone(),
938       localColorSpaceCache
939     );
940   }
941 
942   handleTransferFunction(tr) {
943     let transferArray;
944     if (Array.isArray(tr)) {
945       transferArray = tr;
946     } else if (isPDFFunction(tr)) {
947       transferArray = [tr];
948     } else {
949       return null; // Not a valid transfer function entry.
950     }
951 
952     const transferMaps = [];
953     let numFns = 0,
954       numEffectfulFns = 0;
955     for (const entry of transferArray) {
956       const transferObj = this.xref.fetchIfRef(entry);
957       numFns++;
958 
959       if (isName(transferObj, "Identity")) {
960         transferMaps.push(null);
961         continue;
962       } else if (!isPDFFunction(transferObj)) {
963         return null; // Not a valid transfer function object.
964       }
965 
966       const transferFn = this._pdfFunctionFactory.create(transferObj);
967       const transferMap = new Uint8Array(256),
968         tmp = new Float32Array(1);
969       for (let j = 0; j < 256; j++) {
970         tmp[0] = j / 255;
971         transferFn(tmp, 0, tmp, 0);
972         transferMap[j] = (tmp[0] * 255) | 0;
973       }
974       transferMaps.push(transferMap);
975       numEffectfulFns++;
976     }
977 
978     if (!(numFns === 1 || numFns === 4)) {
979       return null; // Only 1 or 4 functions are supported, by the specification.
980     }
981     if (numEffectfulFns === 0) {
982       return null; // Only /Identity transfer functions found, which are no-ops.
983     }
984     return transferMaps;
985   }
986 
987   handleTilingType(
988     fn,
989     color,
990     resources,
991     pattern,
992     patternDict,
993     operatorList,
994     task,
995     localTilingPatternCache
996   ) {
997     // Create an IR of the pattern code.
998     const tilingOpList = new OperatorList();
999     // Merge the available resources, to prevent issues when the patternDict
1000     // is missing some /Resources entries (fixes issue6541.pdf).
1001     const patternResources = Dict.merge({
1002       xref: this.xref,
1003       dictArray: [patternDict.get("Resources"), resources],
1004     });
1005 
1006     return this.getOperatorList({
1007       stream: pattern,
1008       task,
1009       resources: patternResources,
1010       operatorList: tilingOpList,
1011     })
1012       .then(function () {
1013         const operatorListIR = tilingOpList.getIR();
1014         const tilingPatternIR = getTilingPatternIR(
1015           operatorListIR,
1016           patternDict,
1017           color
1018         );
1019         // Add the dependencies to the parent operator list so they are
1020         // resolved before the sub operator list is executed synchronously.
1021         operatorList.addDependencies(tilingOpList.dependencies);
1022         operatorList.addOp(fn, tilingPatternIR);
1023 
1024         if (patternDict.objId) {
1025           localTilingPatternCache.set(/* name = */ null, patternDict.objId, {
1026             operatorListIR,
1027             dict: patternDict,
1028           });
1029         }
1030       })
1031       .catch(reason => {
1032         if (reason instanceof AbortException) {
1033           return;
1034         }
1035         if (this.options.ignoreErrors) {
1036           warn(`handleTilingType - ignoring pattern: "${reason}".`);
1037           return;
1038         }
1039         throw reason;
1040       });
1041   }
1042 
1043   async handleSetFont(
1044     resources,
1045     fontArgs,
1046     fontRef,
1047     operatorList,
1048     task,
1049     state,
1050     fallbackFontDict = null,
1051     cssFontInfo = null
1052   ) {
1053     const fontName = fontArgs?.[0] instanceof Name ? fontArgs[0].name : null;
1054 
1055     let translated = await this.loadFont(
1056       fontName,
1057       fontRef,
1058       resources,
1059       fallbackFontDict,
1060       cssFontInfo
1061     );
1062 
1063     if (translated.font.isType3Font) {
1064       try {
1065         await translated.loadType3Data(this, resources, task);
1066         // Add the dependencies to the parent operatorList so they are
1067         // resolved before Type3 operatorLists are executed synchronously.
1068         operatorList.addDependencies(translated.type3Dependencies);
1069       } catch (reason) {
1070         translated = new TranslatedFont({
1071           loadedName: "g_font_error",
1072           font: new ErrorFont(`Type3 font load error: ${reason}`),
1073           dict: translated.font,
1074           evaluatorOptions: this.options,
1075         });
1076       }
1077     }
1078 
1079     state.font = translated.font;
1080     translated.send(this.handler);
1081     return translated.loadedName;
1082   }
1083 
1084   handleText(chars, state) {
1085     const font = state.font;
1086     const glyphs = font.charsToGlyphs(chars);
1087 
1088     if (font.data) {
1089       const isAddToPathSet = !!(
1090         state.textRenderingMode & TextRenderingMode.ADD_TO_PATH_FLAG
1091       );
1092       if (
1093         isAddToPathSet ||
1094         state.fillColorSpace.name === "Pattern" ||
1095         font.disableFontFace ||
1096         this.options.disableFontFace
1097       ) {
1098         PartialEvaluator.buildFontPaths(
1099           font,
1100           glyphs,
1101           this.handler,
1102           this.options
1103         );
1104       }
1105     }
1106     return glyphs;
1107   }
1108 
1109   ensureStateFont(state) {
1110     if (state.font) {
1111       return;
1112     }
1113     const reason = new FormatError(
1114       "Missing setFont (Tf) operator before text rendering operator."
1115     );
1116 
1117     if (this.options.ignoreErrors) {
1118       warn(`ensureStateFont: "${reason}".`);
1119       return;
1120     }
1121     throw reason;
1122   }
1123 
1124   async setGState({
1125     resources,
1126     gState,
1127     operatorList,
1128     cacheKey,
1129     task,
1130     stateManager,
1131     localGStateCache,
1132     localColorSpaceCache,
1133   }) {
1134     const gStateRef = gState.objId;
1135     let isSimpleGState = true;
1136     // This array holds the converted/processed state data.
1137     const gStateObj = [];
1138     let promise = Promise.resolve();
1139     for (const key of gState.getKeys()) {
1140       const value = gState.get(key);
1141       switch (key) {
1142         case "Type":
1143           break;
1144         case "LW":
1145         case "LC":
1146         case "LJ":
1147         case "ML":
1148         case "D":
1149         case "RI":
1150         case "FL":
1151         case "CA":
1152         case "ca":
1153           gStateObj.push([key, value]);
1154           break;
1155         case "Font":
1156           isSimpleGState = false;
1157 
1158           promise = promise.then(() =>
1159             this.handleSetFont(
1160               resources,
1161               null,
1162               value[0],
1163               operatorList,
1164               task,
1165               stateManager.state
1166             ).then(function (loadedName) {
1167               operatorList.addDependency(loadedName);
1168               gStateObj.push([key, [loadedName, value[1]]]);
1169             })
1170           );
1171           break;
1172         case "BM":
1173           gStateObj.push([key, normalizeBlendMode(value)]);
1174           break;
1175         case "SMask":
1176           if (isName(value, "None")) {
1177             gStateObj.push([key, false]);
1178             break;
1179           }
1180           if (value instanceof Dict) {
1181             isSimpleGState = false;
1182 
1183             promise = promise.then(() =>
1184               this.handleSMask(
1185                 value,
1186                 resources,
1187                 operatorList,
1188                 task,
1189                 stateManager,
1190                 localColorSpaceCache
1191               )
1192             );
1193             gStateObj.push([key, true]);
1194           } else {
1195             warn("Unsupported SMask type");
1196           }
1197           break;
1198         case "TR":
1199           const transferMaps = this.handleTransferFunction(value);
1200           gStateObj.push([key, transferMaps]);
1201           break;
1202         // Only generate info log messages for the following since
1203         // they are unlikely to have a big impact on the rendering.
1204         case "OP":
1205         case "op":
1206         case "OPM":
1207         case "BG":
1208         case "BG2":
1209         case "UCR":
1210         case "UCR2":
1211         case "TR2":
1212         case "HT":
1213         case "SM":
1214         case "SA":
1215         case "AIS":
1216         case "TK":
1217           // TODO implement these operators.
1218           info("graphic state operator " + key);
1219           break;
1220         default:
1221           info("Unknown graphic state operator " + key);
1222           break;
1223       }
1224     }
1225     await promise;
1226 
1227     if (gStateObj.length > 0) {
1228       operatorList.addOp(OPS.setGState, [gStateObj]);
1229     }
1230 
1231     if (isSimpleGState) {
1232       localGStateCache.set(cacheKey, gStateRef, gStateObj);
1233     }
1234   }
1235 
1236   loadFont(
1237     fontName,
1238     font,
1239     resources,
1240     fallbackFontDict = null,
1241     cssFontInfo = null
1242   ) {
1243     // eslint-disable-next-line arrow-body-style
1244     const errorFont = async () => {
1245       return new TranslatedFont({
1246         loadedName: "g_font_error",
1247         font: new ErrorFont(`Font "${fontName}" is not available.`),
1248         dict: font,
1249         evaluatorOptions: this.options,
1250       });
1251     };
1252 
1253     let fontRef;
1254     if (font) {
1255       // Loading by ref.
1256       if (font instanceof Ref) {
1257         fontRef = font;
1258       }
1259     } else {
1260       // Loading by name.
1261       const fontRes = resources.get("Font");
1262       if (fontRes) {
1263         fontRef = fontRes.getRaw(fontName);
1264       }
1265     }
1266     if (fontRef) {
1267       if (this.type3FontRefs?.has(fontRef)) {
1268         return errorFont();
1269       }
1270 
1271       if (this.fontCache.has(fontRef)) {
1272         return this.fontCache.get(fontRef);
1273       }
1274 
1275       try {
1276         font = this.xref.fetchIfRef(fontRef);
1277       } catch (ex) {
1278         warn(`loadFont - lookup failed: "${ex}".`);
1279       }
1280     }
1281 
1282     if (!(font instanceof Dict)) {
1283       if (!this.options.ignoreErrors && !this.parsingType3Font) {
1284         warn(`Font "${fontName}" is not available.`);
1285         return errorFont();
1286       }
1287       warn(
1288         `Font "${fontName}" is not available -- attempting to fallback to a default font.`
1289       );
1290 
1291       // Falling back to a default font to avoid completely broken rendering,
1292       // but note that there're no guarantees that things will look "correct".
1293       font = fallbackFontDict || PartialEvaluator.fallbackFontDict;
1294     }
1295 
1296     // We are holding `font.cacheKey` references only for `fontRef`s that
1297     // are not actually `Ref`s, but rather `Dict`s. See explanation below.
1298     if (font.cacheKey && this.fontCache.has(font.cacheKey)) {
1299       return this.fontCache.get(font.cacheKey);
1300     }
1301 
1302     const { promise, resolve } = Promise.withResolvers();
1303 
1304     let preEvaluatedFont;
1305     try {
1306       preEvaluatedFont = this.preEvaluateFont(font);
1307       preEvaluatedFont.cssFontInfo = cssFontInfo;
1308     } catch (reason) {
1309       warn(`loadFont - preEvaluateFont failed: "${reason}".`);
1310       return errorFont();
1311     }
1312     const { descriptor, hash } = preEvaluatedFont;
1313 
1314     const fontRefIsRef = fontRef instanceof Ref;
1315     let fontID;
1316 
1317     if (hash && descriptor instanceof Dict) {
1318       const fontAliases = (descriptor.fontAliases ||= Object.create(null));
1319 
1320       if (fontAliases[hash]) {
1321         const aliasFontRef = fontAliases[hash].aliasRef;
1322         if (fontRefIsRef && aliasFontRef && this.fontCache.has(aliasFontRef)) {
1323           this.fontCache.putAlias(fontRef, aliasFontRef);
1324           return this.fontCache.get(fontRef);
1325         }
1326       } else {
1327         fontAliases[hash] = {
1328           fontID: this.idFactory.createFontId(),
1329         };
1330       }
1331 
1332       if (fontRefIsRef) {
1333         fontAliases[hash].aliasRef = fontRef;
1334       }
1335       fontID = fontAliases[hash].fontID;
1336     } else {
1337       fontID = this.idFactory.createFontId();
1338     }
1339     assert(
1340       fontID?.startsWith("f"),
1341       'The "fontID" must be (correctly) defined.'
1342     );
1343 
1344     // Workaround for bad PDF generators that reference fonts incorrectly,
1345     // where `fontRef` is a `Dict` rather than a `Ref` (fixes bug946506.pdf).
1346     // In this case we cannot put the font into `this.fontCache` (which is
1347     // a `RefSetCache`), since it's not possible to use a `Dict` as a key.
1348     //
1349     // However, if we don't cache the font it's not possible to remove it
1350     // when `cleanup` is triggered from the API, which causes issues on
1351     // subsequent rendering operations (see issue7403.pdf) and would force us
1352     // to unnecessarily load the same fonts over and over.
1353     //
1354     // Instead, we cheat a bit by using a modified `fontID` as a key in
1355     // `this.fontCache`, to allow the font to be cached.
1356     // NOTE: This works because `RefSetCache` calls `toString()` on provided
1357     //       keys. Also, since `fontRef` is used when getting cached fonts,
1358     //       we'll not accidentally match fonts cached with the `fontID`.
1359     if (fontRefIsRef) {
1360       this.fontCache.put(fontRef, promise);
1361     } else {
1362       font.cacheKey = `cacheKey_${fontID}`;
1363       this.fontCache.put(font.cacheKey, promise);
1364     }
1365 
1366     // Keep track of each font we translated so the caller can
1367     // load them asynchronously before calling display on a page.
1368     font.loadedName = `${this.idFactory.getDocId()}_${fontID}`;
1369 
1370     this.translateFont(preEvaluatedFont)
1371       .then(translatedFont => {
1372         resolve(
1373           new TranslatedFont({
1374             loadedName: font.loadedName,
1375             font: translatedFont,
1376             dict: font,
1377             evaluatorOptions: this.options,
1378           })
1379         );
1380       })
1381       .catch(reason => {
1382         // TODO reject?
1383         warn(`loadFont - translateFont failed: "${reason}".`);
1384 
1385         resolve(
1386           new TranslatedFont({
1387             loadedName: font.loadedName,
1388             font: new ErrorFont(
1389               reason instanceof Error ? reason.message : reason
1390             ),
1391             dict: font,
1392             evaluatorOptions: this.options,
1393           })
1394         );
1395       });
1396     return promise;
1397   }
1398 
1399   buildPath(operatorList, fn, args, parsingText = false) {
1400     const lastIndex = operatorList.length - 1;
1401     if (!args) {
1402       args = [];
1403     }
1404     if (
1405       lastIndex < 0 ||
1406       operatorList.fnArray[lastIndex] !== OPS.constructPath
1407     ) {
1408       // Handle corrupt PDF documents that contains path operators inside of
1409       // text objects, which may shift subsequent text, by enclosing the path
1410       // operator in save/restore operators (fixes issue10542_reduced.pdf).
1411       //
1412       // Note that this will effectively disable the optimization in the
1413       // `else` branch below, but given that this type of corruption is
1414       // *extremely* rare that shouldn't really matter much in practice.
1415       if (parsingText) {
1416         warn(`Encountered path operator "${fn}" inside of a text object.`);
1417         operatorList.addOp(OPS.save, null);
1418       }
1419 
1420       let minMax;
1421       switch (fn) {
1422         case OPS.rectangle:
1423           const x = args[0] + args[2];
1424           const y = args[1] + args[3];
1425           minMax = [
1426             Math.min(args[0], x),
1427             Math.min(args[1], y),
1428             Math.max(args[0], x),
1429             Math.max(args[1], y),
1430           ];
1431           break;
1432         case OPS.moveTo:
1433         case OPS.lineTo:
1434           minMax = [args[0], args[1], args[0], args[1]];
1435           break;
1436         default:
1437           minMax = [Infinity, Infinity, -Infinity, -Infinity];
1438           break;
1439       }
1440       operatorList.addOp(OPS.constructPath, [[fn], args, minMax]);
1441 
1442       if (parsingText) {
1443         operatorList.addOp(OPS.restore, null);
1444       }
1445     } else {
1446       const opArgs = operatorList.argsArray[lastIndex];
1447       opArgs[0].push(fn);
1448       opArgs[1].push(...args);
1449       const minMax = opArgs[2];
1450 
1451       // Compute min/max in the worker instead of the main thread.
1452       // If the current matrix (when drawing) is a scaling one
1453       // then min/max can be easily computed in using those values.
1454       // Only rectangle, lineTo and moveTo are handled here since
1455       // Bezier stuff requires to have the starting point.
1456       switch (fn) {
1457         case OPS.rectangle:
1458           const x = args[0] + args[2];
1459           const y = args[1] + args[3];
1460           minMax[0] = Math.min(minMax[0], args[0], x);
1461           minMax[1] = Math.min(minMax[1], args[1], y);
1462           minMax[2] = Math.max(minMax[2], args[0], x);
1463           minMax[3] = Math.max(minMax[3], args[1], y);
1464           break;
1465         case OPS.moveTo:
1466         case OPS.lineTo:
1467           minMax[0] = Math.min(minMax[0], args[0]);
1468           minMax[1] = Math.min(minMax[1], args[1]);
1469           minMax[2] = Math.max(minMax[2], args[0]);
1470           minMax[3] = Math.max(minMax[3], args[1]);
1471           break;
1472       }
1473     }
1474   }
1475 
1476   parseColorSpace({ cs, resources, localColorSpaceCache }) {
1477     return ColorSpace.parseAsync({
1478       cs,
1479       xref: this.xref,
1480       resources,
1481       pdfFunctionFactory: this._pdfFunctionFactory,
1482       localColorSpaceCache,
1483     }).catch(reason => {
1484       if (reason instanceof AbortException) {
1485         return null;
1486       }
1487       if (this.options.ignoreErrors) {
1488         warn(`parseColorSpace - ignoring ColorSpace: "${reason}".`);
1489         return null;
1490       }
1491       throw reason;
1492     });
1493   }
1494 
1495   parseShading({
1496     shading,
1497     resources,
1498     localColorSpaceCache,
1499     localShadingPatternCache,
1500   }) {
1501     // Shadings and patterns may be referenced by the same name but the resource
1502     // dictionary could be different so we can't use the name for the cache key.
1503     let id = localShadingPatternCache.get(shading);
1504     if (id) {
1505       return id;
1506     }
1507     let patternIR;
1508 
1509     try {
1510       const shadingFill = Pattern.parseShading(
1511         shading,
1512         this.xref,
1513         resources,
1514         this._pdfFunctionFactory,
1515         localColorSpaceCache
1516       );
1517       patternIR = shadingFill.getIR();
1518     } catch (reason) {
1519       if (reason instanceof AbortException) {
1520         return null;
1521       }
1522       if (this.options.ignoreErrors) {
1523         warn(`parseShading - ignoring shading: "${reason}".`);
1524 
1525         localShadingPatternCache.set(shading, null);
1526         return null;
1527       }
1528       throw reason;
1529     }
1530 
1531     id = `pattern_${this.idFactory.createObjId()}`;
1532     if (this.parsingType3Font) {
1533       id = `${this.idFactory.getDocId()}_type3_${id}`;
1534     }
1535     localShadingPatternCache.set(shading, id);
1536 
1537     if (this.parsingType3Font) {
1538       this.handler.send("commonobj", [id, "Pattern", patternIR]);
1539     } else {
1540       this.handler.send("obj", [id, this.pageIndex, "Pattern", patternIR]);
1541     }
1542     return id;
1543   }
1544 
1545   handleColorN(
1546     operatorList,
1547     fn,
1548     args,
1549     cs,
1550     patterns,
1551     resources,
1552     task,
1553     localColorSpaceCache,
1554     localTilingPatternCache,
1555     localShadingPatternCache
1556   ) {
1557     // compile tiling patterns
1558     const patternName = args.pop();
1559     // SCN/scn applies patterns along with normal colors
1560     if (patternName instanceof Name) {
1561       const rawPattern = patterns.getRaw(patternName.name);
1562 
1563       const localTilingPattern =
1564         rawPattern instanceof Ref &&
1565         localTilingPatternCache.getByRef(rawPattern);
1566       if (localTilingPattern) {
1567         try {
1568           const color = cs.base ? cs.base.getRgb(args, 0) : null;
1569           const tilingPatternIR = getTilingPatternIR(
1570             localTilingPattern.operatorListIR,
1571             localTilingPattern.dict,
1572             color
1573           );
1574           operatorList.addOp(fn, tilingPatternIR);
1575           return undefined;
1576         } catch {
1577           // Handle any errors during normal TilingPattern parsing.
1578         }
1579       }
1580 
1581       const pattern = this.xref.fetchIfRef(rawPattern);
1582       if (pattern) {
1583         const dict = pattern instanceof BaseStream ? pattern.dict : pattern;
1584         const typeNum = dict.get("PatternType");
1585 
1586         if (typeNum === PatternType.TILING) {
1587           const color = cs.base ? cs.base.getRgb(args, 0) : null;
1588           return this.handleTilingType(
1589             fn,
1590             color,
1591             resources,
1592             pattern,
1593             dict,
1594             operatorList,
1595             task,
1596             localTilingPatternCache
1597           );
1598         } else if (typeNum === PatternType.SHADING) {
1599           const shading = dict.get("Shading");
1600           const objId = this.parseShading({
1601             shading,
1602             resources,
1603             localColorSpaceCache,
1604             localShadingPatternCache,
1605           });
1606           if (objId) {
1607             const matrix = lookupMatrix(dict.getArray("Matrix"), null);
1608             operatorList.addOp(fn, ["Shading", objId, matrix]);
1609           }
1610           return undefined;
1611         }
1612         throw new FormatError(`Unknown PatternType: ${typeNum}`);
1613       }
1614     }
1615     throw new FormatError(`Unknown PatternName: ${patternName}`);
1616   }
1617 
1618   _parseVisibilityExpression(array, nestingCounter, currentResult) {
1619     const MAX_NESTING = 10;
1620     if (++nestingCounter > MAX_NESTING) {
1621       warn("Visibility expression is too deeply nested");
1622       return;
1623     }
1624     const length = array.length;
1625     const operator = this.xref.fetchIfRef(array[0]);
1626     if (length < 2 || !(operator instanceof Name)) {
1627       warn("Invalid visibility expression");
1628       return;
1629     }
1630     switch (operator.name) {
1631       case "And":
1632       case "Or":
1633       case "Not":
1634         currentResult.push(operator.name);
1635         break;
1636       default:
1637         warn(`Invalid operator ${operator.name} in visibility expression`);
1638         return;
1639     }
1640     for (let i = 1; i < length; i++) {
1641       const raw = array[i];
1642       const object = this.xref.fetchIfRef(raw);
1643       if (Array.isArray(object)) {
1644         const nestedResult = [];
1645         currentResult.push(nestedResult);
1646         // Recursively parse a subarray.
1647         this._parseVisibilityExpression(object, nestingCounter, nestedResult);
1648       } else if (raw instanceof Ref) {
1649         // Reference to an OCG dictionary.
1650         currentResult.push(raw.toString());
1651       }
1652     }
1653   }
1654 
1655   async parseMarkedContentProps(contentProperties, resources) {
1656     let optionalContent;
1657     if (contentProperties instanceof Name) {
1658       const properties = resources.get("Properties");
1659       optionalContent = properties.get(contentProperties.name);
1660     } else if (contentProperties instanceof Dict) {
1661       optionalContent = contentProperties;
1662     } else {
1663       throw new FormatError("Optional content properties malformed.");
1664     }
1665 
1666     const optionalContentType = optionalContent.get("Type")?.name;
1667     if (optionalContentType === "OCG") {
1668       return {
1669         type: optionalContentType,
1670         id: optionalContent.objId,
1671       };
1672     } else if (optionalContentType === "OCMD") {
1673       const expression = optionalContent.get("VE");
1674       if (Array.isArray(expression)) {
1675         const result = [];
1676         this._parseVisibilityExpression(expression, 0, result);
1677         if (result.length > 0) {
1678           return {
1679             type: "OCMD",
1680             expression: result,
1681           };
1682         }
1683       }
1684 
1685       const optionalContentGroups = optionalContent.get("OCGs");
1686       if (
1687         Array.isArray(optionalContentGroups) ||
1688         optionalContentGroups instanceof Dict
1689       ) {
1690         const groupIds = [];
1691         if (Array.isArray(optionalContentGroups)) {
1692           for (const ocg of optionalContentGroups) {
1693             groupIds.push(ocg.toString());
1694           }
1695         } else {
1696           // Dictionary, just use the obj id.
1697           groupIds.push(optionalContentGroups.objId);
1698         }
1699 
1700         return {
1701           type: optionalContentType,
1702           ids: groupIds,
1703           policy:
1704             optionalContent.get("P") instanceof Name
1705               ? optionalContent.get("P").name
1706               : null,
1707           expression: null,
1708         };
1709       } else if (optionalContentGroups instanceof Ref) {
1710         return {
1711           type: optionalContentType,
1712           id: optionalContentGroups.toString(),
1713         };
1714       }
1715     }
1716     return null;
1717   }
1718 
1719   getOperatorList({
1720     stream,
1721     task,
1722     resources,
1723     operatorList,
1724     initialState = null,
1725     fallbackFontDict = null,
1726   }) {
1727     // Ensure that `resources`/`initialState` is correctly initialized,
1728     // even if the provided parameter is e.g. `null`.
1729     resources ||= Dict.empty;
1730     initialState ||= new EvalState();
1731 
1732     if (!operatorList) {
1733       throw new Error('getOperatorList: missing "operatorList" parameter');
1734     }
1735 
1736     const self = this;
1737     const xref = this.xref;
1738     let parsingText = false;
1739     const localImageCache = new LocalImageCache();
1740     const localColorSpaceCache = new LocalColorSpaceCache();
1741     const localGStateCache = new LocalGStateCache();
1742     const localTilingPatternCache = new LocalTilingPatternCache();
1743     const localShadingPatternCache = new Map();
1744 
1745     const xobjs = resources.get("XObject") || Dict.empty;
1746     const patterns = resources.get("Pattern") || Dict.empty;
1747     const stateManager = new StateManager(initialState);
1748     const preprocessor = new EvaluatorPreprocessor(stream, xref, stateManager);
1749     const timeSlotManager = new TimeSlotManager();
1750 
1751     function closePendingRestoreOPS(argument) {
1752       for (let i = 0, ii = preprocessor.savedStatesDepth; i < ii; i++) {
1753         operatorList.addOp(OPS.restore, []);
1754       }
1755     }
1756 
1757     return new Promise(function promiseBody(resolve, reject) {
1758       const next = function (promise) {
1759         Promise.all([promise, operatorList.ready]).then(function () {
1760           try {
1761             promiseBody(resolve, reject);
1762           } catch (ex) {
1763             reject(ex);
1764           }
1765         }, reject);
1766       };
1767       task.ensureNotTerminated();
1768       timeSlotManager.reset();
1769 
1770       const operation = {};
1771       let stop, i, ii, cs, name, isValidName;
1772       while (!(stop = timeSlotManager.check())) {
1773         // The arguments parsed by read() are used beyond this loop, so we
1774         // cannot reuse the same array on each iteration. Therefore we pass
1775         // in |null| as the initial value (see the comment on
1776         // EvaluatorPreprocessor_read() for why).
1777         operation.args = null;
1778         if (!preprocessor.read(operation)) {
1779           break;
1780         }
1781         let args = operation.args;
1782         let fn = operation.fn;
1783 
1784         switch (fn | 0) {
1785           case OPS.paintXObject:
1786             // eagerly compile XForm objects
1787             isValidName = args[0] instanceof Name;
1788             name = args[0].name;
1789 
1790             if (isValidName) {
1791               const localImage = localImageCache.getByName(name);
1792               if (localImage) {
1793                 addLocallyCachedImageOps(operatorList, localImage);
1794                 args = null;
1795                 continue;
1796               }
1797             }
1798 
1799             next(
1800               new Promise(function (resolveXObject, rejectXObject) {
1801                 if (!isValidName) {
1802                   throw new FormatError("XObject must be referred to by name.");
1803                 }
1804 
1805                 let xobj = xobjs.getRaw(name);
1806                 if (xobj instanceof Ref) {
1807                   const localImage =
1808                     localImageCache.getByRef(xobj) ||
1809                     self._regionalImageCache.getByRef(xobj);
1810                   if (localImage) {
1811                     addLocallyCachedImageOps(operatorList, localImage);
1812                     resolveXObject();
1813                     return;
1814                   }
1815 
1816                   const globalImage = self.globalImageCache.getData(
1817                     xobj,
1818                     self.pageIndex
1819                   );
1820                   if (globalImage) {
1821                     operatorList.addDependency(globalImage.objId);
1822                     operatorList.addImageOps(
1823                       globalImage.fn,
1824                       globalImage.args,
1825                       globalImage.optionalContent
1826                     );
1827 
1828                     resolveXObject();
1829                     return;
1830                   }
1831 
1832                   xobj = xref.fetch(xobj);
1833                 }
1834 
1835                 if (!(xobj instanceof BaseStream)) {
1836                   throw new FormatError("XObject should be a stream");
1837                 }
1838 
1839                 const type = xobj.dict.get("Subtype");
1840                 if (!(type instanceof Name)) {
1841                   throw new FormatError("XObject should have a Name subtype");
1842                 }
1843 
1844                 if (type.name === "Form") {
1845                   stateManager.save();
1846                   self
1847                     .buildFormXObject(
1848                       resources,
1849                       xobj,
1850                       null,
1851                       operatorList,
1852                       task,
1853                       stateManager.state.clone(),
1854                       localColorSpaceCache
1855                     )
1856                     .then(function () {
1857                       stateManager.restore();
1858                       resolveXObject();
1859                     }, rejectXObject);
1860                   return;
1861                 } else if (type.name === "Image") {
1862                   self
1863                     .buildPaintImageXObject({
1864                       resources,
1865                       image: xobj,
1866                       operatorList,
1867                       cacheKey: name,
1868                       localImageCache,
1869                       localColorSpaceCache,
1870                     })
1871                     .then(resolveXObject, rejectXObject);
1872                   return;
1873                 } else if (type.name === "PS") {
1874                   // PostScript XObjects are unused when viewing documents.
1875                   // See section 4.7.1 of Adobe's PDF reference.
1876                   info("Ignored XObject subtype PS");
1877                 } else {
1878                   throw new FormatError(
1879                     `Unhandled XObject subtype ${type.name}`
1880                   );
1881                 }
1882                 resolveXObject();
1883               }).catch(function (reason) {
1884                 if (reason instanceof AbortException) {
1885                   return;
1886                 }
1887                 if (self.options.ignoreErrors) {
1888                   warn(`getOperatorList - ignoring XObject: "${reason}".`);
1889                   return;
1890                 }
1891                 throw reason;
1892               })
1893             );
1894             return;
1895           case OPS.setFont:
1896             var fontSize = args[1];
1897             // eagerly collect all fonts
1898             next(
1899               self
1900                 .handleSetFont(
1901                   resources,
1902                   args,
1903                   null,
1904                   operatorList,
1905                   task,
1906                   stateManager.state,
1907                   fallbackFontDict
1908                 )
1909                 .then(function (loadedName) {
1910                   operatorList.addDependency(loadedName);
1911                   operatorList.addOp(OPS.setFont, [loadedName, fontSize]);
1912                 })
1913             );
1914             return;
1915           case OPS.beginText:
1916             parsingText = true;
1917             break;
1918           case OPS.endText:
1919             parsingText = false;
1920             break;
1921           case OPS.endInlineImage:
1922             var cacheKey = args[0].cacheKey;
1923             if (cacheKey) {
1924               const localImage = localImageCache.getByName(cacheKey);
1925               if (localImage) {
1926                 addLocallyCachedImageOps(operatorList, localImage);
1927                 args = null;
1928                 continue;
1929               }
1930             }
1931             next(
1932               self.buildPaintImageXObject({
1933                 resources,
1934                 image: args[0],
1935                 isInline: true,
1936                 operatorList,
1937                 cacheKey,
1938                 localImageCache,
1939                 localColorSpaceCache,
1940               })
1941             );
1942             return;
1943           case OPS.showText:
1944             if (!stateManager.state.font) {
1945               self.ensureStateFont(stateManager.state);
1946               continue;
1947             }
1948             args[0] = self.handleText(args[0], stateManager.state);
1949             break;
1950           case OPS.showSpacedText:
1951             if (!stateManager.state.font) {
1952               self.ensureStateFont(stateManager.state);
1953               continue;
1954             }
1955             var combinedGlyphs = [];
1956             var state = stateManager.state;
1957             for (const arrItem of args[0]) {
1958               if (typeof arrItem === "string") {
1959                 combinedGlyphs.push(...self.handleText(arrItem, state));
1960               } else if (typeof arrItem === "number") {
1961                 combinedGlyphs.push(arrItem);
1962               }
1963             }
1964             args[0] = combinedGlyphs;
1965             fn = OPS.showText;
1966             break;
1967           case OPS.nextLineShowText:
1968             if (!stateManager.state.font) {
1969               self.ensureStateFont(stateManager.state);
1970               continue;
1971             }
1972             operatorList.addOp(OPS.nextLine);
1973             args[0] = self.handleText(args[0], stateManager.state);
1974             fn = OPS.showText;
1975             break;
1976           case OPS.nextLineSetSpacingShowText:
1977             if (!stateManager.state.font) {
1978               self.ensureStateFont(stateManager.state);
1979               continue;
1980             }
1981             operatorList.addOp(OPS.nextLine);
1982             operatorList.addOp(OPS.setWordSpacing, [args.shift()]);
1983             operatorList.addOp(OPS.setCharSpacing, [args.shift()]);
1984             args[0] = self.handleText(args[0], stateManager.state);
1985             fn = OPS.showText;
1986             break;
1987           case OPS.setTextRenderingMode:
1988             stateManager.state.textRenderingMode = args[0];
1989             break;
1990 
1991           case OPS.setFillColorSpace: {
1992             const cachedColorSpace = ColorSpace.getCached(
1993               args[0],
1994               xref,
1995               localColorSpaceCache
1996             );
1997             if (cachedColorSpace) {
1998               stateManager.state.fillColorSpace = cachedColorSpace;
1999               continue;
2000             }
2001 
2002             next(
2003               self
2004                 .parseColorSpace({
2005                   cs: args[0],
2006                   resources,
2007                   localColorSpaceCache,
2008                 })
2009                 .then(function (colorSpace) {
2010                   stateManager.state.fillColorSpace =
2011                     colorSpace || ColorSpace.singletons.gray;
2012                 })
2013             );
2014             return;
2015           }
2016           case OPS.setStrokeColorSpace: {
2017             const cachedColorSpace = ColorSpace.getCached(
2018               args[0],
2019               xref,
2020               localColorSpaceCache
2021             );
2022             if (cachedColorSpace) {
2023               stateManager.state.strokeColorSpace = cachedColorSpace;
2024               continue;
2025             }
2026 
2027             next(
2028               self
2029                 .parseColorSpace({
2030                   cs: args[0],
2031                   resources,
2032                   localColorSpaceCache,
2033                 })
2034                 .then(function (colorSpace) {
2035                   stateManager.state.strokeColorSpace =
2036                     colorSpace || ColorSpace.singletons.gray;
2037                 })
2038             );
2039             return;
2040           }
2041           case OPS.setFillColor:
2042             cs = stateManager.state.fillColorSpace;
2043             args = cs.getRgb(args, 0);
2044             fn = OPS.setFillRGBColor;
2045             break;
2046           case OPS.setStrokeColor:
2047             cs = stateManager.state.strokeColorSpace;
2048             args = cs.getRgb(args, 0);
2049             fn = OPS.setStrokeRGBColor;
2050             break;
2051           case OPS.setFillGray:
2052             stateManager.state.fillColorSpace = ColorSpace.singletons.gray;
2053             args = ColorSpace.singletons.gray.getRgb(args, 0);
2054             fn = OPS.setFillRGBColor;
2055             break;
2056           case OPS.setStrokeGray:
2057             stateManager.state.strokeColorSpace = ColorSpace.singletons.gray;
2058             args = ColorSpace.singletons.gray.getRgb(args, 0);
2059             fn = OPS.setStrokeRGBColor;
2060             break;
2061           case OPS.setFillCMYKColor:
2062             stateManager.state.fillColorSpace = ColorSpace.singletons.cmyk;
2063             args = ColorSpace.singletons.cmyk.getRgb(args, 0);
2064             fn = OPS.setFillRGBColor;
2065             break;
2066           case OPS.setStrokeCMYKColor:
2067             stateManager.state.strokeColorSpace = ColorSpace.singletons.cmyk;
2068             args = ColorSpace.singletons.cmyk.getRgb(args, 0);
2069             fn = OPS.setStrokeRGBColor;
2070             break;
2071           case OPS.setFillRGBColor:
2072             stateManager.state.fillColorSpace = ColorSpace.singletons.rgb;
2073             args = ColorSpace.singletons.rgb.getRgb(args, 0);
2074             break;
2075           case OPS.setStrokeRGBColor:
2076             stateManager.state.strokeColorSpace = ColorSpace.singletons.rgb;
2077             args = ColorSpace.singletons.rgb.getRgb(args, 0);
2078             break;
2079           case OPS.setFillColorN:
2080             cs = stateManager.state.patternFillColorSpace;
2081             if (!cs) {
2082               args = [];
2083               fn = OPS.setFillTransparent;
2084               break;
2085             }
2086             if (cs.name === "Pattern") {
2087               next(
2088                 self.handleColorN(
2089                   operatorList,
2090                   OPS.setFillColorN,
2091                   args,
2092                   cs,
2093                   patterns,
2094                   resources,
2095                   task,
2096                   localColorSpaceCache,
2097                   localTilingPatternCache,
2098                   localShadingPatternCache
2099                 )
2100               );
2101               return;
2102             }
2103             args = cs.getRgb(args, 0);
2104             fn = OPS.setFillRGBColor;
2105             break;
2106           case OPS.setStrokeColorN:
2107             cs = stateManager.state.patternStrokeColorSpace;
2108             if (!cs) {
2109               args = [];
2110               fn = OPS.setStrokeTransparent;
2111               break;
2112             }
2113             if (cs.name === "Pattern") {
2114               next(
2115                 self.handleColorN(
2116                   operatorList,
2117                   OPS.setStrokeColorN,
2118                   args,
2119                   cs,
2120                   patterns,
2121                   resources,
2122                   task,
2123                   localColorSpaceCache,
2124                   localTilingPatternCache,
2125                   localShadingPatternCache
2126                 )
2127               );
2128               return;
2129             }
2130             args = cs.getRgb(args, 0);
2131             fn = OPS.setStrokeRGBColor;
2132             break;
2133 
2134           case OPS.shadingFill:
2135             let shading;
2136             try {
2137               const shadingRes = resources.get("Shading");
2138               if (!shadingRes) {
2139                 throw new FormatError("No shading resource found");
2140               }
2141 
2142               shading = shadingRes.get(args[0].name);
2143               if (!shading) {
2144                 throw new FormatError("No shading object found");
2145               }
2146             } catch (reason) {
2147               if (reason instanceof AbortException) {
2148                 continue;
2149               }
2150               if (self.options.ignoreErrors) {
2151                 warn(`getOperatorList - ignoring Shading: "${reason}".`);
2152                 continue;
2153               }
2154               throw reason;
2155             }
2156             const patternId = self.parseShading({
2157               shading,
2158               resources,
2159               localColorSpaceCache,
2160               localShadingPatternCache,
2161             });
2162             if (!patternId) {
2163               continue;
2164             }
2165             args = [patternId];
2166             fn = OPS.shadingFill;
2167             break;
2168           case OPS.setGState:
2169             isValidName = args[0] instanceof Name;
2170             name = args[0].name;
2171 
2172             if (isValidName) {
2173               const localGStateObj = localGStateCache.getByName(name);
2174               if (localGStateObj) {
2175                 if (localGStateObj.length > 0) {
2176                   operatorList.addOp(OPS.setGState, [localGStateObj]);
2177                 }
2178                 args = null;
2179                 continue;
2180               }
2181             }
2182 
2183             next(
2184               new Promise(function (resolveGState, rejectGState) {
2185                 if (!isValidName) {
2186                   throw new FormatError("GState must be referred to by name.");
2187                 }
2188 
2189                 const extGState = resources.get("ExtGState");
2190                 if (!(extGState instanceof Dict)) {
2191                   throw new FormatError("ExtGState should be a dictionary.");
2192                 }
2193 
2194                 const gState = extGState.get(name);
2195                 // TODO: Attempt to lookup cached GStates by reference as well,
2196                 //       if and only if there are PDF documents where doing so
2197                 //       would significantly improve performance.
2198                 if (!(gState instanceof Dict)) {
2199                   throw new FormatError("GState should be a dictionary.");
2200                 }
2201 
2202                 self
2203                   .setGState({
2204                     resources,
2205                     gState,
2206                     operatorList,
2207                     cacheKey: name,
2208                     task,
2209                     stateManager,
2210                     localGStateCache,
2211                     localColorSpaceCache,
2212                   })
2213                   .then(resolveGState, rejectGState);
2214               }).catch(function (reason) {
2215                 if (reason instanceof AbortException) {
2216                   return;
2217                 }
2218                 if (self.options.ignoreErrors) {
2219                   warn(`getOperatorList - ignoring ExtGState: "${reason}".`);
2220                   return;
2221                 }
2222                 throw reason;
2223               })
2224             );
2225             return;
2226           case OPS.moveTo:
2227           case OPS.lineTo:
2228           case OPS.curveTo:
2229           case OPS.curveTo2:
2230           case OPS.curveTo3:
2231           case OPS.closePath:
2232           case OPS.rectangle:
2233             self.buildPath(operatorList, fn, args, parsingText);
2234             continue;
2235           case OPS.markPoint:
2236           case OPS.markPointProps:
2237           case OPS.beginCompat:
2238           case OPS.endCompat:
2239             // Ignore operators where the corresponding handlers are known to
2240             // be no-op in CanvasGraphics (display/canvas.js). This prevents
2241             // serialization errors and is also a bit more efficient.
2242             // We could also try to serialize all objects in a general way,
2243             // e.g. as done in https://github.com/mozilla/pdf.js/pull/6266,
2244             // but doing so is meaningless without knowing the semantics.
2245             continue;
2246           case OPS.beginMarkedContentProps:
2247             if (!(args[0] instanceof Name)) {
2248               warn(`Expected name for beginMarkedContentProps arg0=${args[0]}`);
2249               operatorList.addOp(OPS.beginMarkedContentProps, ["OC", null]);
2250               continue;
2251             }
2252             if (args[0].name === "OC") {
2253               next(
2254                 self
2255                   .parseMarkedContentProps(args[1], resources)
2256                   .then(data => {
2257                     operatorList.addOp(OPS.beginMarkedContentProps, [
2258                       "OC",
2259                       data,
2260                     ]);
2261                   })
2262                   .catch(reason => {
2263                     if (reason instanceof AbortException) {
2264                       return;
2265                     }
2266                     if (self.options.ignoreErrors) {
2267                       warn(
2268                         `getOperatorList - ignoring beginMarkedContentProps: "${reason}".`
2269                       );
2270                       operatorList.addOp(OPS.beginMarkedContentProps, [
2271                         "OC",
2272                         null,
2273                       ]);
2274                       return;
2275                     }
2276                     throw reason;
2277                   })
2278               );
2279               return;
2280             }
2281             // Other marked content types aren't supported yet.
2282             args = [
2283               args[0].name,
2284               args[1] instanceof Dict ? args[1].get("MCID") : null,
2285             ];
2286 
2287             break;
2288           case OPS.beginMarkedContent:
2289           case OPS.endMarkedContent:
2290           default:
2291             // Note: Ignore the operator if it has `Dict` arguments, since
2292             // those are non-serializable, otherwise postMessage will throw
2293             // "An object could not be cloned.".
2294             if (args !== null) {
2295               for (i = 0, ii = args.length; i < ii; i++) {
2296                 if (args[i] instanceof Dict) {
2297                   break;
2298                 }
2299               }
2300               if (i < ii) {
2301                 warn("getOperatorList - ignoring operator: " + fn);
2302                 continue;
2303               }
2304             }
2305         }
2306         operatorList.addOp(fn, args);
2307       }
2308       if (stop) {
2309         next(deferred);
2310         return;
2311       }
2312       // Some PDFs don't close all restores inside object/form.
2313       // Closing those for them.
2314       closePendingRestoreOPS();
2315       resolve();
2316     }).catch(reason => {
2317       if (reason instanceof AbortException) {
2318         return;
2319       }
2320       if (this.options.ignoreErrors) {
2321         warn(
2322           `getOperatorList - ignoring errors during "${task.name}" ` +
2323             `task: "${reason}".`
2324         );
2325 
2326         closePendingRestoreOPS();
2327         return;
2328       }
2329       throw reason;
2330     });
2331   }
2332 
2333   getTextContent({
2334     stream,
2335     task,
2336     resources,
2337     stateManager = null,
2338     includeMarkedContent = false,
2339     sink,
2340     seenStyles = new Set(),
2341     viewBox,
2342     lang = null,
2343     markedContentData = null,
2344     disableNormalization = false,
2345     keepWhiteSpace = false,
2346   }) {
2347     // Ensure that `resources`/`stateManager` is correctly initialized,
2348     // even if the provided parameter is e.g. `null`.
2349     resources ||= Dict.empty;
2350     stateManager ||= new StateManager(new TextState());
2351 
2352     if (includeMarkedContent) {
2353       markedContentData ||= { level: 0 };
2354     }
2355 
2356     const textContent = {
2357       items: [],
2358       styles: Object.create(null),
2359       lang,
2360     };
2361     const textContentItem = {
2362       initialized: false,
2363       str: [],
2364       totalWidth: 0,
2365       totalHeight: 0,
2366       width: 0,
2367       height: 0,
2368       vertical: false,
2369       prevTransform: null,
2370       textAdvanceScale: 0,
2371       spaceInFlowMin: 0,
2372       spaceInFlowMax: 0,
2373       trackingSpaceMin: Infinity,
2374       negativeSpaceMax: -Infinity,
2375       notASpace: -Infinity,
2376       transform: null,
2377       fontName: null,
2378       hasEOL: false,
2379     };
2380 
2381     // Use a circular buffer (length === 2) to save the last chars in the
2382     // text stream.
2383     // This implementation of the circular buffer is using a fixed array
2384     // and the position of the next element:
2385     // function addElement(x) {
2386     //   buffer[pos] = x;
2387     //   pos = (pos + 1) % buffer.length;
2388     // }
2389     // It's a way faster than:
2390     // function addElement(x) {
2391     //   buffer.push(x);
2392     //   buffer.shift();
2393     // }
2394     //
2395     // It's useful to know when we need to add a whitespace in the
2396     // text chunk.
2397     const twoLastChars = [" ", " "];
2398     let twoLastCharsPos = 0;
2399 
2400     /**
2401      * Save the last char.
2402      * @param {string} char
2403      * @returns {boolean} true when the two last chars before adding the new one
2404      * are a non-whitespace followed by a whitespace.
2405      */
2406     function saveLastChar(char) {
2407       const nextPos = (twoLastCharsPos + 1) % 2;
2408       const ret =
2409         twoLastChars[twoLastCharsPos] !== " " && twoLastChars[nextPos] === " ";
2410       twoLastChars[twoLastCharsPos] = char;
2411       twoLastCharsPos = nextPos;
2412 
2413       return !keepWhiteSpace && ret;
2414     }
2415 
2416     function shouldAddWhitepsace() {
2417       return (
2418         !keepWhiteSpace &&
2419         twoLastChars[twoLastCharsPos] !== " " &&
2420         twoLastChars[(twoLastCharsPos + 1) % 2] === " "
2421       );
2422     }
2423 
2424     function resetLastChars() {
2425       twoLastChars[0] = twoLastChars[1] = " ";
2426       twoLastCharsPos = 0;
2427     }
2428 
2429     // Used in addFakeSpaces.
2430 
2431     // A white <= fontSize * TRACKING_SPACE_FACTOR is a tracking space
2432     // so it doesn't count as a space.
2433     const TRACKING_SPACE_FACTOR = 0.102;
2434 
2435     // When a white <= fontSize * NOT_A_SPACE_FACTOR, there is no space
2436     // even if one is present in the text stream.
2437     const NOT_A_SPACE_FACTOR = 0.03;
2438 
2439     // A negative white < fontSize * NEGATIVE_SPACE_FACTOR induces
2440     // a break (a new chunk of text is created).
2441     // It doesn't change anything when the text is copied but
2442     // it improves potential mismatch between text layer and canvas.
2443     const NEGATIVE_SPACE_FACTOR = -0.2;
2444 
2445     // A white with a width in [fontSize * MIN_FACTOR; fontSize * MAX_FACTOR]
2446     // is a space which will be inserted in the current flow of words.
2447     // If the width is outside of this range then the flow is broken
2448     // (which means a new span in the text layer).
2449     // It's useful to adjust the best as possible the span in the layer
2450     // to what is displayed in the canvas.
2451     const SPACE_IN_FLOW_MIN_FACTOR = 0.102;
2452     const SPACE_IN_FLOW_MAX_FACTOR = 0.6;
2453 
2454     // If a char is too high/too low compared to the previous we just create
2455     // a new chunk.
2456     // If the advance isn't in the +/-VERTICAL_SHIFT_RATIO * height range then
2457     // a new chunk is created.
2458     const VERTICAL_SHIFT_RATIO = 0.25;
2459 
2460     const self = this;
2461     const xref = this.xref;
2462     const showSpacedTextBuffer = [];
2463 
2464     // The xobj is parsed iff it's needed, e.g. if there is a `DO` cmd.
2465     let xobjs = null;
2466     const emptyXObjectCache = new LocalImageCache();
2467     const emptyGStateCache = new LocalGStateCache();
2468 
2469     const preprocessor = new EvaluatorPreprocessor(stream, xref, stateManager);
2470 
2471     let textState;
2472 
2473     function pushWhitespace({
2474       width = 0,
2475       height = 0,
2476       transform = textContentItem.prevTransform,
2477       fontName = textContentItem.fontName,
2478     }) {
2479       textContent.items.push({
2480         str: " ",
2481         dir: "ltr",
2482         width,
2483         height,
2484         transform,
2485         fontName,
2486         hasEOL: false,
2487       });
2488     }
2489 
2490     function getCurrentTextTransform() {
2491       // 9.4.4 Text Space Details
2492       const font = textState.font;
2493       const tsm = [
2494         textState.fontSize * textState.textHScale,
2495         0,
2496         0,
2497         textState.fontSize,
2498         0,
2499         textState.textRise,
2500       ];
2501 
2502       if (
2503         font.isType3Font &&
2504         (textState.fontSize <= 1 || font.isCharBBox) &&
2505         !isArrayEqual(textState.fontMatrix, FONT_IDENTITY_MATRIX)
2506       ) {
2507         const glyphHeight = font.bbox[3] - font.bbox[1];
2508         if (glyphHeight > 0) {
2509           tsm[3] *= glyphHeight * textState.fontMatrix[3];
2510         }
2511       }
2512 
2513       return Util.transform(
2514         textState.ctm,
2515         Util.transform(textState.textMatrix, tsm)
2516       );
2517     }
2518 
2519     function ensureTextContentItem() {
2520       if (textContentItem.initialized) {
2521         return textContentItem;
2522       }
2523       const { font, loadedName } = textState;
2524       if (!seenStyles.has(loadedName)) {
2525         seenStyles.add(loadedName);
2526         textContent.styles[loadedName] = {
2527           fontFamily: font.fallbackName,
2528           ascent: font.ascent,
2529           descent: font.descent,
2530           vertical: font.vertical,
2531         };
2532         if (self.options.fontExtraProperties && font.systemFontInfo) {
2533           const style = textContent.styles[loadedName];
2534           style.fontSubstitution = font.systemFontInfo.css;
2535           style.fontSubstitutionLoadedName = font.systemFontInfo.loadedName;
2536         }
2537       }
2538       textContentItem.fontName = loadedName;
2539 
2540       const trm = (textContentItem.transform = getCurrentTextTransform());
2541       if (!font.vertical) {
2542         textContentItem.width = textContentItem.totalWidth = 0;
2543         textContentItem.height = textContentItem.totalHeight = Math.hypot(
2544           trm[2],
2545           trm[3]
2546         );
2547         textContentItem.vertical = false;
2548       } else {
2549         textContentItem.width = textContentItem.totalWidth = Math.hypot(
2550           trm[0],
2551           trm[1]
2552         );
2553         textContentItem.height = textContentItem.totalHeight = 0;
2554         textContentItem.vertical = true;
2555       }
2556 
2557       const scaleLineX = Math.hypot(
2558         textState.textLineMatrix[0],
2559         textState.textLineMatrix[1]
2560       );
2561       const scaleCtmX = Math.hypot(textState.ctm[0], textState.ctm[1]);
2562       textContentItem.textAdvanceScale = scaleCtmX * scaleLineX;
2563 
2564       const { fontSize } = textState;
2565       textContentItem.trackingSpaceMin = fontSize * TRACKING_SPACE_FACTOR;
2566       textContentItem.notASpace = fontSize * NOT_A_SPACE_FACTOR;
2567       textContentItem.negativeSpaceMax = fontSize * NEGATIVE_SPACE_FACTOR;
2568       textContentItem.spaceInFlowMin = fontSize * SPACE_IN_FLOW_MIN_FACTOR;
2569       textContentItem.spaceInFlowMax = fontSize * SPACE_IN_FLOW_MAX_FACTOR;
2570       textContentItem.hasEOL = false;
2571 
2572       textContentItem.initialized = true;
2573       return textContentItem;
2574     }
2575 
2576     function updateAdvanceScale() {
2577       if (!textContentItem.initialized) {
2578         return;
2579       }
2580 
2581       const scaleLineX = Math.hypot(
2582         textState.textLineMatrix[0],
2583         textState.textLineMatrix[1]
2584       );
2585       const scaleCtmX = Math.hypot(textState.ctm[0], textState.ctm[1]);
2586       const scaleFactor = scaleCtmX * scaleLineX;
2587       if (scaleFactor === textContentItem.textAdvanceScale) {
2588         return;
2589       }
2590 
2591       if (!textContentItem.vertical) {
2592         textContentItem.totalWidth +=
2593           textContentItem.width * textContentItem.textAdvanceScale;
2594         textContentItem.width = 0;
2595       } else {
2596         textContentItem.totalHeight +=
2597           textContentItem.height * textContentItem.textAdvanceScale;
2598         textContentItem.height = 0;
2599       }
2600 
2601       textContentItem.textAdvanceScale = scaleFactor;
2602     }
2603 
2604     function runBidiTransform(textChunk) {
2605       let text = textChunk.str.join("");
2606       if (!disableNormalization) {
2607         text = normalizeUnicode(text);
2608       }
2609       const bidiResult = bidi(text, -1, textChunk.vertical);
2610       return {
2611         str: bidiResult.str,
2612         dir: bidiResult.dir,
2613         width: Math.abs(textChunk.totalWidth),
2614         height: Math.abs(textChunk.totalHeight),
2615         transform: textChunk.transform,
2616         fontName: textChunk.fontName,
2617         hasEOL: textChunk.hasEOL,
2618       };
2619     }
2620 
2621     async function handleSetFont(fontName, fontRef) {
2622       const translated = await self.loadFont(fontName, fontRef, resources);
2623 
2624       if (translated.font.isType3Font) {
2625         try {
2626           await translated.loadType3Data(self, resources, task);
2627         } catch {
2628           // Ignore Type3-parsing errors, since we only use `loadType3Data`
2629           // here to ensure that we'll always obtain a useful /FontBBox.
2630         }
2631       }
2632 
2633       textState.loadedName = translated.loadedName;
2634       textState.font = translated.font;
2635       textState.fontMatrix = translated.font.fontMatrix || FONT_IDENTITY_MATRIX;
2636     }
2637 
2638     function applyInverseRotation(x, y, matrix) {
2639       const scale = Math.hypot(matrix[0], matrix[1]);
2640       return [
2641         (matrix[0] * x + matrix[1] * y) / scale,
2642         (matrix[2] * x + matrix[3] * y) / scale,
2643       ];
2644     }
2645 
2646     function compareWithLastPosition(glyphWidth) {
2647       const currentTransform = getCurrentTextTransform();
2648       let posX = currentTransform[4];
2649       let posY = currentTransform[5];
2650 
2651       // Check if the glyph is in the viewbox.
2652       if (textState.font?.vertical) {
2653         if (
2654           posX < viewBox[0] ||
2655           posX > viewBox[2] ||
2656           posY + glyphWidth < viewBox[1] ||
2657           posY > viewBox[3]
2658         ) {
2659           return false;
2660         }
2661       } else if (
2662         posX + glyphWidth < viewBox[0] ||
2663         posX > viewBox[2] ||
2664         posY < viewBox[1] ||
2665         posY > viewBox[3]
2666       ) {
2667         return false;
2668       }
2669 
2670       if (!textState.font || !textContentItem.prevTransform) {
2671         return true;
2672       }
2673 
2674       let lastPosX = textContentItem.prevTransform[4];
2675       let lastPosY = textContentItem.prevTransform[5];
2676 
2677       if (lastPosX === posX && lastPosY === posY) {
2678         return true;
2679       }
2680 
2681       let rotate = -1;
2682       // Take into account the rotation is the current transform.
2683       if (
2684         currentTransform[0] &&
2685         currentTransform[1] === 0 &&
2686         currentTransform[2] === 0
2687       ) {
2688         rotate = currentTransform[0] > 0 ? 0 : 180;
2689       } else if (
2690         currentTransform[1] &&
2691         currentTransform[0] === 0 &&
2692         currentTransform[3] === 0
2693       ) {
2694         rotate = currentTransform[1] > 0 ? 90 : 270;
2695       }
2696 
2697       switch (rotate) {
2698         case 0:
2699           break;
2700         case 90:
2701           [posX, posY] = [posY, posX];
2702           [lastPosX, lastPosY] = [lastPosY, lastPosX];
2703           break;
2704         case 180:
2705           [posX, posY, lastPosX, lastPosY] = [
2706             -posX,
2707             -posY,
2708             -lastPosX,
2709             -lastPosY,
2710           ];
2711           break;
2712         case 270:
2713           [posX, posY] = [-posY, -posX];
2714           [lastPosX, lastPosY] = [-lastPosY, -lastPosX];
2715           break;
2716         default:
2717           // This is not a 0, 90, 180, 270 rotation so:
2718           //  - remove the scale factor from the matrix to get a rotation matrix
2719           //  - apply the inverse (which is the transposed) to the positions
2720           // and we can then compare positions of the glyphes to detect
2721           // a whitespace.
2722           [posX, posY] = applyInverseRotation(posX, posY, currentTransform);
2723           [lastPosX, lastPosY] = applyInverseRotation(
2724             lastPosX,
2725             lastPosY,
2726             textContentItem.prevTransform
2727           );
2728       }
2729 
2730       if (textState.font.vertical) {
2731         const advanceY = (lastPosY - posY) / textContentItem.textAdvanceScale;
2732         const advanceX = posX - lastPosX;
2733 
2734         // When the total height of the current chunk is negative
2735         // then we're writing from bottom to top.
2736         const textOrientation = Math.sign(textContentItem.height);
2737         if (advanceY < textOrientation * textContentItem.negativeSpaceMax) {
2738           if (
2739             Math.abs(advanceX) >
2740             0.5 * textContentItem.width /* not the same column */
2741           ) {
2742             appendEOL();
2743             return true;
2744           }
2745 
2746           resetLastChars();
2747           flushTextContentItem();
2748           return true;
2749         }
2750 
2751         if (Math.abs(advanceX) > textContentItem.width) {
2752           appendEOL();
2753           return true;
2754         }
2755 
2756         if (advanceY <= textOrientation * textContentItem.notASpace) {
2757           // The real spacing between 2 consecutive chars is thin enough to be
2758           // considered a non-space.
2759           resetLastChars();
2760         }
2761 
2762         if (advanceY <= textOrientation * textContentItem.trackingSpaceMin) {
2763           if (shouldAddWhitepsace()) {
2764             // The space is very thin, hence it deserves to have its own span in
2765             // order to avoid too much shift between the canvas and the text
2766             // layer.
2767             resetLastChars();
2768             flushTextContentItem();
2769             pushWhitespace({ height: Math.abs(advanceY) });
2770           } else {
2771             textContentItem.height += advanceY;
2772           }
2773         } else if (
2774           !addFakeSpaces(
2775             advanceY,
2776             textContentItem.prevTransform,
2777             textOrientation
2778           )
2779         ) {
2780           if (textContentItem.str.length === 0) {
2781             resetLastChars();
2782             pushWhitespace({ height: Math.abs(advanceY) });
2783           } else {
2784             textContentItem.height += advanceY;
2785           }
2786         }
2787 
2788         if (Math.abs(advanceX) > textContentItem.width * VERTICAL_SHIFT_RATIO) {
2789           flushTextContentItem();
2790         }
2791 
2792         return true;
2793       }
2794 
2795       const advanceX = (posX - lastPosX) / textContentItem.textAdvanceScale;
2796       const advanceY = posY - lastPosY;
2797 
2798       // When the total width of the current chunk is negative
2799       // then we're writing from right to left.
2800       const textOrientation = Math.sign(textContentItem.width);
2801       if (advanceX < textOrientation * textContentItem.negativeSpaceMax) {
2802         if (
2803           Math.abs(advanceY) >
2804           0.5 * textContentItem.height /* not the same line */
2805         ) {
2806           appendEOL();
2807           return true;
2808         }
2809 
2810         // We're moving back so in case the last char was a whitespace
2811         // we cancel it: it doesn't make sense to insert it.
2812         resetLastChars();
2813         flushTextContentItem();
2814         return true;
2815       }
2816 
2817       if (Math.abs(advanceY) > textContentItem.height) {
2818         appendEOL();
2819         return true;
2820       }
2821 
2822       if (advanceX <= textOrientation * textContentItem.notASpace) {
2823         // The real spacing between 2 consecutive chars is thin enough to be
2824         // considered a non-space.
2825         resetLastChars();
2826       }
2827 
2828       if (advanceX <= textOrientation * textContentItem.trackingSpaceMin) {
2829         if (shouldAddWhitepsace()) {
2830           // The space is very thin, hence it deserves to have its own span in
2831           // order to avoid too much shift between the canvas and the text
2832           // layer.
2833           resetLastChars();
2834           flushTextContentItem();
2835           pushWhitespace({ width: Math.abs(advanceX) });
2836         } else {
2837           textContentItem.width += advanceX;
2838         }
2839       } else if (
2840         !addFakeSpaces(advanceX, textContentItem.prevTransform, textOrientation)
2841       ) {
2842         if (textContentItem.str.length === 0) {
2843           resetLastChars();
2844           pushWhitespace({ width: Math.abs(advanceX) });
2845         } else {
2846           textContentItem.width += advanceX;
2847         }
2848       }
2849 
2850       if (Math.abs(advanceY) > textContentItem.height * VERTICAL_SHIFT_RATIO) {
2851         flushTextContentItem();
2852       }
2853 
2854       return true;
2855     }
2856 
2857     function buildTextContentItem({ chars, extraSpacing }) {
2858       const font = textState.font;
2859       if (!chars) {
2860         // Just move according to the space we have.
2861         const charSpacing = textState.charSpacing + extraSpacing;
2862         if (charSpacing) {
2863           if (!font.vertical) {
2864             textState.translateTextMatrix(
2865               charSpacing * textState.textHScale,
2866               0
2867             );
2868           } else {
2869             textState.translateTextMatrix(0, -charSpacing);
2870           }
2871         }
2872 
2873         if (keepWhiteSpace) {
2874           compareWithLastPosition(0);
2875         }
2876 
2877         return;
2878       }
2879 
2880       const glyphs = font.charsToGlyphs(chars);
2881       const scale = textState.fontMatrix[0] * textState.fontSize;
2882 
2883       for (let i = 0, ii = glyphs.length; i < ii; i++) {
2884         const glyph = glyphs[i];
2885         const { category } = glyph;
2886 
2887         if (category.isInvisibleFormatMark) {
2888           continue;
2889         }
2890         let charSpacing =
2891           textState.charSpacing + (i + 1 === ii ? extraSpacing : 0);
2892 
2893         let glyphWidth = glyph.width;
2894         if (font.vertical) {
2895           glyphWidth = glyph.vmetric ? glyph.vmetric[0] : -glyphWidth;
2896         }
2897         let scaledDim = glyphWidth * scale;
2898 
2899         if (!keepWhiteSpace && category.isWhitespace) {
2900           // Don't push a " " in the textContentItem
2901           // (except when it's between two non-spaces chars),
2902           // it will be done (if required) in next call to
2903           // compareWithLastPosition.
2904           // This way we can merge real spaces and spaces due to cursor moves.
2905           if (!font.vertical) {
2906             charSpacing += scaledDim + textState.wordSpacing;
2907             textState.translateTextMatrix(
2908               charSpacing * textState.textHScale,
2909               0
2910             );
2911           } else {
2912             charSpacing += -scaledDim + textState.wordSpacing;
2913             textState.translateTextMatrix(0, -charSpacing);
2914           }
2915           saveLastChar(" ");
2916           continue;
2917         }
2918 
2919         if (
2920           !category.isZeroWidthDiacritic &&
2921           !compareWithLastPosition(scaledDim)
2922         ) {
2923           // The glyph is not in page so just skip it but move the cursor.
2924           if (!font.vertical) {
2925             textState.translateTextMatrix(scaledDim * textState.textHScale, 0);
2926           } else {
2927             textState.translateTextMatrix(0, scaledDim);
2928           }
2929           continue;
2930         }
2931 
2932         // Must be called after compareWithLastPosition because
2933         // the textContentItem could have been flushed.
2934         const textChunk = ensureTextContentItem();
2935         if (category.isZeroWidthDiacritic) {
2936           scaledDim = 0;
2937         }
2938 
2939         if (!font.vertical) {
2940           scaledDim *= textState.textHScale;
2941           textState.translateTextMatrix(scaledDim, 0);
2942           textChunk.width += scaledDim;
2943         } else {
2944           textState.translateTextMatrix(0, scaledDim);
2945           scaledDim = Math.abs(scaledDim);
2946           textChunk.height += scaledDim;
2947         }
2948 
2949         if (scaledDim) {
2950           // Save the position of the last visible character.
2951           textChunk.prevTransform = getCurrentTextTransform();
2952         }
2953 
2954         const glyphUnicode = glyph.unicode;
2955         if (saveLastChar(glyphUnicode)) {
2956           // The two last chars are a non-whitespace followed by a whitespace
2957           // and then this non-whitespace, so we insert a whitespace here.
2958           // Replaces all whitespaces with standard spaces (0x20), to avoid
2959           // alignment issues between the textLayer and the canvas if the text
2960           // contains e.g. tabs (fixes issue6612.pdf).
2961           textChunk.str.push(" ");
2962         }
2963         textChunk.str.push(glyphUnicode);
2964 
2965         if (charSpacing) {
2966           if (!font.vertical) {
2967             textState.translateTextMatrix(
2968               charSpacing * textState.textHScale,
2969               0
2970             );
2971           } else {
2972             textState.translateTextMatrix(0, -charSpacing);
2973           }
2974         }
2975       }
2976     }
2977 
2978     function appendEOL() {
2979       resetLastChars();
2980       if (textContentItem.initialized) {
2981         textContentItem.hasEOL = true;
2982         flushTextContentItem();
2983       } else {
2984         textContent.items.push({
2985           str: "",
2986           dir: "ltr",
2987           width: 0,
2988           height: 0,
2989           transform: getCurrentTextTransform(),
2990           fontName: textState.loadedName,
2991           hasEOL: true,
2992         });
2993       }
2994     }
2995 
2996     function addFakeSpaces(width, transf, textOrientation) {
2997       if (
2998         textOrientation * textContentItem.spaceInFlowMin <= width &&
2999         width <= textOrientation * textContentItem.spaceInFlowMax
3000       ) {
3001         if (textContentItem.initialized) {
3002           resetLastChars();
3003           textContentItem.str.push(" ");
3004         }
3005         return false;
3006       }
3007 
3008       const fontName = textContentItem.fontName;
3009 
3010       let height = 0;
3011       if (textContentItem.vertical) {
3012         height = width;
3013         width = 0;
3014       }
3015 
3016       flushTextContentItem();
3017       resetLastChars();
3018       pushWhitespace({
3019         width: Math.abs(width),
3020         height: Math.abs(height),
3021         transform: transf || getCurrentTextTransform(),
3022         fontName,
3023       });
3024 
3025       return true;
3026     }
3027 
3028     function flushTextContentItem() {
3029       if (!textContentItem.initialized || !textContentItem.str) {
3030         return;
3031       }
3032 
3033       // Do final text scaling.
3034       if (!textContentItem.vertical) {
3035         textContentItem.totalWidth +=
3036           textContentItem.width * textContentItem.textAdvanceScale;
3037       } else {
3038         textContentItem.totalHeight +=
3039           textContentItem.height * textContentItem.textAdvanceScale;
3040       }
3041 
3042       textContent.items.push(runBidiTransform(textContentItem));
3043       textContentItem.initialized = false;
3044       textContentItem.str.length = 0;
3045     }
3046 
3047     function enqueueChunk(batch = false) {
3048       const length = textContent.items.length;
3049       if (length === 0) {
3050         return;
3051       }
3052       if (batch && length < TEXT_CHUNK_BATCH_SIZE) {
3053         return;
3054       }
3055       sink.enqueue(textContent, length);
3056       textContent.items = [];
3057       textContent.styles = Object.create(null);
3058     }
3059 
3060     const timeSlotManager = new TimeSlotManager();
3061 
3062     return new Promise(function promiseBody(resolve, reject) {
3063       const next = function (promise) {
3064         enqueueChunk(/* batch = */ true);
3065         Promise.all([promise, sink.ready]).then(function () {
3066           try {
3067             promiseBody(resolve, reject);
3068           } catch (ex) {
3069             reject(ex);
3070           }
3071         }, reject);
3072       };
3073       task.ensureNotTerminated();
3074       timeSlotManager.reset();
3075 
3076       const operation = {};
3077       let stop,
3078         args = [];
3079       while (!(stop = timeSlotManager.check())) {
3080         // The arguments parsed by read() are not used beyond this loop, so
3081         // we can reuse the same array on every iteration, thus avoiding
3082         // unnecessary allocations.
3083         args.length = 0;
3084         operation.args = args;
3085         if (!preprocessor.read(operation)) {
3086           break;
3087         }
3088 
3089         const previousState = textState;
3090         textState = stateManager.state;
3091         const fn = operation.fn;
3092         args = operation.args;
3093 
3094         switch (fn | 0) {
3095           case OPS.setFont:
3096             // Optimization to ignore multiple identical Tf commands.
3097             var fontNameArg = args[0].name,
3098               fontSizeArg = args[1];
3099             if (
3100               textState.font &&
3101               fontNameArg === textState.fontName &&
3102               fontSizeArg === textState.fontSize
3103             ) {
3104               break;
3105             }
3106 
3107             flushTextContentItem();
3108             textState.fontName = fontNameArg;
3109             textState.fontSize = fontSizeArg;
3110             next(handleSetFont(fontNameArg, null));
3111             return;
3112           case OPS.setTextRise:
3113             textState.textRise = args[0];
3114             break;
3115           case OPS.setHScale:
3116             textState.textHScale = args[0] / 100;
3117             break;
3118           case OPS.setLeading:
3119             textState.leading = args[0];
3120             break;
3121           case OPS.moveText:
3122             textState.translateTextLineMatrix(args[0], args[1]);
3123             textState.textMatrix = textState.textLineMatrix.slice();
3124             break;
3125           case OPS.setLeadingMoveText:
3126             textState.leading = -args[1];
3127             textState.translateTextLineMatrix(args[0], args[1]);
3128             textState.textMatrix = textState.textLineMatrix.slice();
3129             break;
3130           case OPS.nextLine:
3131             textState.carriageReturn();
3132             break;
3133           case OPS.setTextMatrix:
3134             textState.setTextMatrix(
3135               args[0],
3136               args[1],
3137               args[2],
3138               args[3],
3139               args[4],
3140               args[5]
3141             );
3142             textState.setTextLineMatrix(
3143               args[0],
3144               args[1],
3145               args[2],
3146               args[3],
3147               args[4],
3148               args[5]
3149             );
3150             updateAdvanceScale();
3151             break;
3152           case OPS.setCharSpacing:
3153             textState.charSpacing = args[0];
3154             break;
3155           case OPS.setWordSpacing:
3156             textState.wordSpacing = args[0];
3157             break;
3158           case OPS.beginText:
3159             textState.textMatrix = IDENTITY_MATRIX.slice();
3160             textState.textLineMatrix = IDENTITY_MATRIX.slice();
3161             break;
3162           case OPS.showSpacedText:
3163             if (!stateManager.state.font) {
3164               self.ensureStateFont(stateManager.state);
3165               continue;
3166             }
3167 
3168             const spaceFactor =
3169               ((textState.font.vertical ? 1 : -1) * textState.fontSize) / 1000;
3170             const elements = args[0];
3171             for (let i = 0, ii = elements.length; i < ii; i++) {
3172               const item = elements[i];
3173               if (typeof item === "string") {
3174                 showSpacedTextBuffer.push(item);
3175               } else if (typeof item === "number" && item !== 0) {
3176                 // PDF Specification 5.3.2 states:
3177                 // The number is expressed in thousandths of a unit of text
3178                 // space.
3179                 // This amount is subtracted from the current horizontal or
3180                 // vertical coordinate, depending on the writing mode.
3181                 // In the default coordinate system, a positive adjustment
3182                 // has the effect of moving the next glyph painted either to
3183                 // the left or down by the given amount.
3184                 const str = showSpacedTextBuffer.join("");
3185                 showSpacedTextBuffer.length = 0;
3186                 buildTextContentItem({
3187                   chars: str,
3188                   extraSpacing: item * spaceFactor,
3189                 });
3190               }
3191             }
3192 
3193             if (showSpacedTextBuffer.length > 0) {
3194               const str = showSpacedTextBuffer.join("");
3195               showSpacedTextBuffer.length = 0;
3196               buildTextContentItem({
3197                 chars: str,
3198                 extraSpacing: 0,
3199               });
3200             }
3201             break;
3202           case OPS.showText:
3203             if (!stateManager.state.font) {
3204               self.ensureStateFont(stateManager.state);
3205               continue;
3206             }
3207             buildTextContentItem({
3208               chars: args[0],
3209               extraSpacing: 0,
3210             });
3211             break;
3212           case OPS.nextLineShowText:
3213             if (!stateManager.state.font) {
3214               self.ensureStateFont(stateManager.state);
3215               continue;
3216             }
3217             textState.carriageReturn();
3218             buildTextContentItem({
3219               chars: args[0],
3220               extraSpacing: 0,
3221             });
3222             break;
3223           case OPS.nextLineSetSpacingShowText:
3224             if (!stateManager.state.font) {
3225               self.ensureStateFont(stateManager.state);
3226               continue;
3227             }
3228             textState.wordSpacing = args[0];
3229             textState.charSpacing = args[1];
3230             textState.carriageReturn();
3231             buildTextContentItem({
3232               chars: args[2],
3233               extraSpacing: 0,
3234             });
3235             break;
3236           case OPS.paintXObject:
3237             flushTextContentItem();
3238             if (!xobjs) {
3239               xobjs = resources.get("XObject") || Dict.empty;
3240             }
3241 
3242             var isValidName = args[0] instanceof Name;
3243             var name = args[0].name;
3244 
3245             if (isValidName && emptyXObjectCache.getByName(name)) {
3246               break;
3247             }
3248 
3249             next(
3250               new Promise(function (resolveXObject, rejectXObject) {
3251                 if (!isValidName) {
3252                   throw new FormatError("XObject must be referred to by name.");
3253                 }
3254 
3255                 let xobj = xobjs.getRaw(name);
3256                 if (xobj instanceof Ref) {
3257                   if (emptyXObjectCache.getByRef(xobj)) {
3258                     resolveXObject();
3259                     return;
3260                   }
3261 
3262                   const globalImage = self.globalImageCache.getData(
3263                     xobj,
3264                     self.pageIndex
3265                   );
3266                   if (globalImage) {
3267                     resolveXObject();
3268                     return;
3269                   }
3270 
3271                   xobj = xref.fetch(xobj);
3272                 }
3273 
3274                 if (!(xobj instanceof BaseStream)) {
3275                   throw new FormatError("XObject should be a stream");
3276                 }
3277 
3278                 const type = xobj.dict.get("Subtype");
3279                 if (!(type instanceof Name)) {
3280                   throw new FormatError("XObject should have a Name subtype");
3281                 }
3282 
3283                 if (type.name !== "Form") {
3284                   emptyXObjectCache.set(name, xobj.dict.objId, true);
3285 
3286                   resolveXObject();
3287                   return;
3288                 }
3289 
3290                 // Use a new `StateManager` to prevent incorrect positioning
3291                 // of textItems *after* the Form XObject, since errors in the
3292                 // data can otherwise prevent `restore` operators from
3293                 // executing.
3294                 // NOTE: Only an issue when `options.ignoreErrors === true`.
3295                 const currentState = stateManager.state.clone();
3296                 const xObjStateManager = new StateManager(currentState);
3297 
3298                 const matrix = lookupMatrix(xobj.dict.getArray("Matrix"), null);
3299                 if (matrix) {
3300                   xObjStateManager.transform(matrix);
3301                 }
3302 
3303                 // Enqueue the `textContent` chunk before parsing the /Form
3304                 // XObject.
3305                 enqueueChunk();
3306                 const sinkWrapper = {
3307                   enqueueInvoked: false,
3308 
3309                   enqueue(chunk, size) {
3310                     this.enqueueInvoked = true;
3311                     sink.enqueue(chunk, size);
3312                   },
3313 
3314                   get desiredSize() {
3315                     return sink.desiredSize;
3316                   },
3317 
3318                   get ready() {
3319                     return sink.ready;
3320                   },
3321                 };
3322 
3323                 self
3324                   .getTextContent({
3325                     stream: xobj,
3326                     task,
3327                     resources: xobj.dict.get("Resources") || resources,
3328                     stateManager: xObjStateManager,
3329                     includeMarkedContent,
3330                     sink: sinkWrapper,
3331                     seenStyles,
3332                     viewBox,
3333                     lang,
3334                     markedContentData,
3335                     disableNormalization,
3336                     keepWhiteSpace,
3337                   })
3338                   .then(function () {
3339                     if (!sinkWrapper.enqueueInvoked) {
3340                       emptyXObjectCache.set(name, xobj.dict.objId, true);
3341                     }
3342                     resolveXObject();
3343                   }, rejectXObject);
3344               }).catch(function (reason) {
3345                 if (reason instanceof AbortException) {
3346                   return;
3347                 }
3348                 if (self.options.ignoreErrors) {
3349                   // Error(s) in the XObject -- allow text-extraction to
3350                   // continue.
3351                   warn(`getTextContent - ignoring XObject: "${reason}".`);
3352                   return;
3353                 }
3354                 throw reason;
3355               })
3356             );
3357             return;
3358           case OPS.setGState:
3359             isValidName = args[0] instanceof Name;
3360             name = args[0].name;
3361 
3362             if (isValidName && emptyGStateCache.getByName(name)) {
3363               break;
3364             }
3365 
3366             next(
3367               new Promise(function (resolveGState, rejectGState) {
3368                 if (!isValidName) {
3369                   throw new FormatError("GState must be referred to by name.");
3370                 }
3371 
3372                 const extGState = resources.get("ExtGState");
3373                 if (!(extGState instanceof Dict)) {
3374                   throw new FormatError("ExtGState should be a dictionary.");
3375                 }
3376 
3377                 const gState = extGState.get(name);
3378                 // TODO: Attempt to lookup cached GStates by reference as well,
3379                 //       if and only if there are PDF documents where doing so
3380                 //       would significantly improve performance.
3381                 if (!(gState instanceof Dict)) {
3382                   throw new FormatError("GState should be a dictionary.");
3383                 }
3384 
3385                 const gStateFont = gState.get("Font");
3386                 if (!gStateFont) {
3387                   emptyGStateCache.set(name, gState.objId, true);
3388 
3389                   resolveGState();
3390                   return;
3391                 }
3392                 flushTextContentItem();
3393 
3394                 textState.fontName = null;
3395                 textState.fontSize = gStateFont[1];
3396                 handleSetFont(null, gStateFont[0]).then(
3397                   resolveGState,
3398                   rejectGState
3399                 );
3400               }).catch(function (reason) {
3401                 if (reason instanceof AbortException) {
3402                   return;
3403                 }
3404                 if (self.options.ignoreErrors) {
3405                   // Error(s) in the ExtGState -- allow text-extraction to
3406                   // continue.
3407                   warn(`getTextContent - ignoring ExtGState: "${reason}".`);
3408                   return;
3409                 }
3410                 throw reason;
3411               })
3412             );
3413             return;
3414           case OPS.beginMarkedContent:
3415             flushTextContentItem();
3416             if (includeMarkedContent) {
3417               markedContentData.level++;
3418 
3419               textContent.items.push({
3420                 type: "beginMarkedContent",
3421                 tag: args[0] instanceof Name ? args[0].name : null,
3422               });
3423             }
3424             break;
3425           case OPS.beginMarkedContentProps:
3426             flushTextContentItem();
3427             if (includeMarkedContent) {
3428               markedContentData.level++;
3429 
3430               let mcid = null;
3431               if (args[1] instanceof Dict) {
3432                 mcid = args[1].get("MCID");
3433               }
3434               textContent.items.push({
3435                 type: "beginMarkedContentProps",
3436                 id: Number.isInteger(mcid)
3437                   ? `${self.idFactory.getPageObjId()}_mc${mcid}`
3438                   : null,
3439                 tag: args[0] instanceof Name ? args[0].name : null,
3440               });
3441             }
3442             break;
3443           case OPS.endMarkedContent:
3444             flushTextContentItem();
3445             if (includeMarkedContent) {
3446               if (markedContentData.level === 0) {
3447                 // Handle unbalanced beginMarkedContent/endMarkedContent
3448                 // operators (fixes issue15629.pdf).
3449                 break;
3450               }
3451               markedContentData.level--;
3452 
3453               textContent.items.push({
3454                 type: "endMarkedContent",
3455               });
3456             }
3457             break;
3458           case OPS.restore:
3459             if (
3460               previousState &&
3461               (previousState.font !== textState.font ||
3462                 previousState.fontSize !== textState.fontSize ||
3463                 previousState.fontName !== textState.fontName)
3464             ) {
3465               flushTextContentItem();
3466             }
3467             break;
3468         } // switch
3469         if (textContent.items.length >= sink.desiredSize) {
3470           // Wait for ready, if we reach highWaterMark.
3471           stop = true;
3472           break;
3473         }
3474       } // while
3475       if (stop) {
3476         next(deferred);
3477         return;
3478       }
3479       flushTextContentItem();
3480       enqueueChunk();
3481       resolve();
3482     }).catch(reason => {
3483       if (reason instanceof AbortException) {
3484         return;
3485       }
3486       if (this.options.ignoreErrors) {
3487         // Error(s) in the TextContent -- allow text-extraction to continue.
3488         warn(
3489           `getTextContent - ignoring errors during "${task.name}" ` +
3490             `task: "${reason}".`
3491         );
3492 
3493         flushTextContentItem();
3494         enqueueChunk();
3495         return;
3496       }
3497       throw reason;
3498     });
3499   }
3500 
3501   async extractDataStructures(dict, properties) {
3502     const xref = this.xref;
3503     let cidToGidBytes;
3504     // 9.10.2
3505     const toUnicodePromise = this.readToUnicode(properties.toUnicode);
3506 
3507     if (properties.composite) {
3508       // CIDSystemInfo helps to match CID to glyphs
3509       const cidSystemInfo = dict.get("CIDSystemInfo");
3510       if (cidSystemInfo instanceof Dict) {
3511         properties.cidSystemInfo = {
3512           registry: stringToPDFString(cidSystemInfo.get("Registry")),
3513           ordering: stringToPDFString(cidSystemInfo.get("Ordering")),
3514           supplement: cidSystemInfo.get("Supplement"),
3515         };
3516       }
3517 
3518       try {
3519         const cidToGidMap = dict.get("CIDToGIDMap");
3520         if (cidToGidMap instanceof BaseStream) {
3521           cidToGidBytes = cidToGidMap.getBytes();
3522         }
3523       } catch (ex) {
3524         if (!this.options.ignoreErrors) {
3525           throw ex;
3526         }
3527         warn(`extractDataStructures - ignoring CIDToGIDMap data: "${ex}".`);
3528       }
3529     }
3530 
3531     // Based on 9.6.6 of the spec the encoding can come from multiple places
3532     // and depends on the font type. The base encoding and differences are
3533     // read here, but the encoding that is actually used is chosen during
3534     // glyph mapping in the font.
3535     // TODO: Loading the built in encoding in the font would allow the
3536     // differences to be merged in here not require us to hold on to it.
3537     const differences = [];
3538     let baseEncodingName = null;
3539     let encoding;
3540     if (dict.has("Encoding")) {
3541       encoding = dict.get("Encoding");
3542       if (encoding instanceof Dict) {
3543         baseEncodingName = encoding.get("BaseEncoding");
3544         baseEncodingName =
3545           baseEncodingName instanceof Name ? baseEncodingName.name : null;
3546         // Load the differences between the base and original
3547         if (encoding.has("Differences")) {
3548           const diffEncoding = encoding.get("Differences");
3549           let index = 0;
3550           for (const entry of diffEncoding) {
3551             const data = xref.fetchIfRef(entry);
3552             if (typeof data === "number") {
3553               index = data;
3554             } else if (data instanceof Name) {
3555               differences[index++] = data.name;
3556             } else {
3557               throw new FormatError(
3558                 `Invalid entry in 'Differences' array: ${data}`
3559               );
3560             }
3561           }
3562         }
3563       } else if (encoding instanceof Name) {
3564         baseEncodingName = encoding.name;
3565       } else {
3566         const msg = "Encoding is not a Name nor a Dict";
3567 
3568         if (!this.options.ignoreErrors) {
3569           throw new FormatError(msg);
3570         }
3571         warn(msg);
3572       }
3573       // According to table 114 if the encoding is a named encoding it must be
3574       // one of these predefined encodings.
3575       if (
3576         baseEncodingName !== "MacRomanEncoding" &&
3577         baseEncodingName !== "MacExpertEncoding" &&
3578         baseEncodingName !== "WinAnsiEncoding"
3579       ) {
3580         baseEncodingName = null;
3581       }
3582     }
3583 
3584     const nonEmbeddedFont = !properties.file || properties.isInternalFont,
3585       isSymbolsFontName = getSymbolsFonts()[properties.name];
3586     // Ignore an incorrectly specified named encoding for non-embedded
3587     // symbol fonts (fixes issue16464.pdf).
3588     if (baseEncodingName && nonEmbeddedFont && isSymbolsFontName) {
3589       baseEncodingName = null;
3590     }
3591 
3592     if (baseEncodingName) {
3593       properties.defaultEncoding = getEncoding(baseEncodingName);
3594     } else {
3595       const isSymbolicFont = !!(properties.flags & FontFlags.Symbolic);
3596       const isNonsymbolicFont = !!(properties.flags & FontFlags.Nonsymbolic);
3597       // According to "Table 114" in section "9.6.6.1 General" (under
3598       // "9.6.6 Character Encoding") of the PDF specification, a Nonsymbolic
3599       // font should use the `StandardEncoding` if no encoding is specified.
3600       encoding = StandardEncoding;
3601       if (properties.type === "TrueType" && !isNonsymbolicFont) {
3602         encoding = WinAnsiEncoding;
3603       }
3604       // The Symbolic attribute can be misused for regular fonts
3605       // Heuristic: we have to check if the font is a standard one also
3606       if (isSymbolicFont || isSymbolsFontName) {
3607         encoding = MacRomanEncoding;
3608         if (nonEmbeddedFont) {
3609           if (/Symbol/i.test(properties.name)) {
3610             encoding = SymbolSetEncoding;
3611           } else if (/Dingbats/i.test(properties.name)) {
3612             encoding = ZapfDingbatsEncoding;
3613           } else if (/Wingdings/i.test(properties.name)) {
3614             encoding = WinAnsiEncoding;
3615           }
3616         }
3617       }
3618       properties.defaultEncoding = encoding;
3619     }
3620 
3621     properties.differences = differences;
3622     properties.baseEncodingName = baseEncodingName;
3623     properties.hasEncoding = !!baseEncodingName || differences.length > 0;
3624     properties.dict = dict;
3625 
3626     properties.toUnicode = await toUnicodePromise;
3627 
3628     const builtToUnicode = await this.buildToUnicode(properties);
3629     properties.toUnicode = builtToUnicode;
3630 
3631     if (cidToGidBytes) {
3632       properties.cidToGidMap = this.readCidToGidMap(
3633         cidToGidBytes,
3634         builtToUnicode
3635       );
3636     }
3637     return properties;
3638   }
3639 
3640   /**
3641    * @returns {Array}
3642    * @private
3643    */
3644   _simpleFontToUnicode(properties, forceGlyphs = false) {
3645     assert(!properties.composite, "Must be a simple font.");
3646 
3647     const toUnicode = [];
3648     const encoding = properties.defaultEncoding.slice();
3649     const baseEncodingName = properties.baseEncodingName;
3650     // Merge in the differences array.
3651     const differences = properties.differences;
3652     for (const charcode in differences) {
3653       const glyphName = differences[charcode];
3654       if (glyphName === ".notdef") {
3655         // Skip .notdef to prevent rendering errors, e.g. boxes appearing
3656         // where there should be spaces (fixes issue5256.pdf).
3657         continue;
3658       }
3659       encoding[charcode] = glyphName;
3660     }
3661     const glyphsUnicodeMap = getGlyphsUnicode();
3662     for (const charcode in encoding) {
3663       // a) Map the character code to a character name.
3664       let glyphName = encoding[charcode];
3665       if (glyphName === "") {
3666         continue;
3667       }
3668       // b) Look up the character name in the Adobe Glyph List (see the
3669       //    Bibliography) to obtain the corresponding Unicode value.
3670       let unicode = glyphsUnicodeMap[glyphName];
3671       if (unicode !== undefined) {
3672         toUnicode[charcode] = String.fromCharCode(unicode);
3673         continue;
3674       }
3675       // (undocumented) c) Few heuristics to recognize unknown glyphs
3676       // NOTE: Adobe Reader does not do this step, but OSX Preview does
3677       let code = 0;
3678       switch (glyphName[0]) {
3679         case "G": // Gxx glyph
3680           if (glyphName.length === 3) {
3681             code = parseInt(glyphName.substring(1), 16);
3682           }
3683           break;
3684         case "g": // g00xx glyph
3685           if (glyphName.length === 5) {
3686             code = parseInt(glyphName.substring(1), 16);
3687           }
3688           break;
3689         case "C": // Cdd{d} glyph
3690         case "c": // cdd{d} glyph
3691           if (glyphName.length >= 3 && glyphName.length <= 4) {
3692             const codeStr = glyphName.substring(1);
3693 
3694             if (forceGlyphs) {
3695               code = parseInt(codeStr, 16);
3696               break;
3697             }
3698             // Normally the Cdd{d}/cdd{d} glyphName format will contain
3699             // regular, i.e. base 10, charCodes (see issue4550.pdf)...
3700             code = +codeStr;
3701 
3702             // ... however some PDF generators violate that assumption by
3703             // containing glyph, i.e. base 16, codes instead.
3704             // In that case we need to re-parse the *entire* encoding to
3705             // prevent broken text-selection (fixes issue9655_reduced.pdf).
3706             if (Number.isNaN(code) && Number.isInteger(parseInt(codeStr, 16))) {
3707               return this._simpleFontToUnicode(
3708                 properties,
3709                 /* forceGlyphs */ true
3710               );
3711             }
3712           }
3713           break;
3714         case "u": // 'uniXXXX'/'uXXXX{XX}' glyphs
3715           unicode = getUnicodeForGlyph(glyphName, glyphsUnicodeMap);
3716           if (unicode !== -1) {
3717             code = unicode;
3718           }
3719           break;
3720         default:
3721           // Support (some) non-standard ligatures.
3722           switch (glyphName) {
3723             case "f_h":
3724             case "f_t":
3725             case "T_h":
3726               toUnicode[charcode] = glyphName.replaceAll("_", "");
3727               continue;
3728           }
3729           break;
3730       }
3731       if (code > 0 && code <= 0x10ffff && Number.isInteger(code)) {
3732         // If `baseEncodingName` is one the predefined encodings, and `code`
3733         // equals `charcode`, using the glyph defined in the baseEncoding
3734         // seems to yield a better `toUnicode` mapping (fixes issue 5070).
3735         if (baseEncodingName && code === +charcode) {
3736           const baseEncoding = getEncoding(baseEncodingName);
3737           if (baseEncoding && (glyphName = baseEncoding[charcode])) {
3738             toUnicode[charcode] = String.fromCharCode(
3739               glyphsUnicodeMap[glyphName]
3740             );
3741             continue;
3742           }
3743         }
3744         toUnicode[charcode] = String.fromCodePoint(code);
3745       }
3746     }
3747     return toUnicode;
3748   }
3749 
3750   /**
3751    * Builds a char code to unicode map based on section 9.10 of the spec.
3752    * @param {Object} properties Font properties object.
3753    * @returns {Promise} A Promise that is resolved with a
3754    *   {ToUnicodeMap|IdentityToUnicodeMap} object.
3755    */
3756   async buildToUnicode(properties) {
3757     properties.hasIncludedToUnicodeMap = properties.toUnicode?.length > 0;
3758 
3759     // Section 9.10.2 Mapping Character Codes to Unicode Values
3760     if (properties.hasIncludedToUnicodeMap) {
3761       // Some fonts contain incomplete ToUnicode data, causing issues with
3762       // text-extraction. For simple fonts, containing encoding information,
3763       // use a fallback ToUnicode map to improve this (fixes issue8229.pdf).
3764       if (!properties.composite && properties.hasEncoding) {
3765         properties.fallbackToUnicode = this._simpleFontToUnicode(properties);
3766       }
3767       return properties.toUnicode;
3768     }
3769 
3770     // According to the spec if the font is a simple font we should only map
3771     // to unicode if the base encoding is MacRoman, MacExpert, or WinAnsi or
3772     // the differences array only contains adobe standard or symbol set names,
3773     // in pratice it seems better to always try to create a toUnicode map
3774     // based of the default encoding.
3775     if (!properties.composite /* is simple font */) {
3776       return new ToUnicodeMap(this._simpleFontToUnicode(properties));
3777     }
3778 
3779     // If the font is a composite font that uses one of the predefined CMaps
3780     // listed in Table 118 (except Identity–H and Identity–V) or whose
3781     // descendant CIDFont uses the Adobe-GB1, Adobe-CNS1, Adobe-Japan1, or
3782     // Adobe-Korea1 character collection:
3783     if (
3784       properties.composite &&
3785       ((properties.cMap.builtInCMap &&
3786         !(properties.cMap instanceof IdentityCMap)) ||
3787         // The font is supposed to have a CIDSystemInfo dictionary, but some
3788         // PDFs don't include it (fixes issue 17689), hence the `?'.
3789         (properties.cidSystemInfo?.registry === "Adobe" &&
3790           (properties.cidSystemInfo.ordering === "GB1" ||
3791             properties.cidSystemInfo.ordering === "CNS1" ||
3792             properties.cidSystemInfo.ordering === "Japan1" ||
3793             properties.cidSystemInfo.ordering === "Korea1")))
3794     ) {
3795       // Then:
3796       // a) Map the character code to a character identifier (CID) according
3797       // to the font’s CMap.
3798       // b) Obtain the registry and ordering of the character collection used
3799       // by the font’s CMap (for example, Adobe and Japan1) from its
3800       // CIDSystemInfo dictionary.
3801       const { registry, ordering } = properties.cidSystemInfo;
3802       // c) Construct a second CMap name by concatenating the registry and
3803       // ordering obtained in step (b) in the format registry–ordering–UCS2
3804       // (for example, Adobe–Japan1–UCS2).
3805       const ucs2CMapName = Name.get(`${registry}-${ordering}-UCS2`);
3806       // d) Obtain the CMap with the name constructed in step (c) (available
3807       // from the ASN Web site; see the Bibliography).
3808       const ucs2CMap = await CMapFactory.create({
3809         encoding: ucs2CMapName,
3810         fetchBuiltInCMap: this._fetchBuiltInCMapBound,
3811         useCMap: null,
3812       });
3813       const toUnicode = [],
3814         buf = [];
3815       properties.cMap.forEach(function (charcode, cid) {
3816         if (cid > 0xffff) {
3817           throw new FormatError("Max size of CID is 65,535");
3818         }
3819         // e) Map the CID obtained in step (a) according to the CMap
3820         // obtained in step (d), producing a Unicode value.
3821         const ucs2 = ucs2CMap.lookup(cid);
3822         if (ucs2) {
3823           buf.length = 0;
3824           // Support multi-byte entries (fixes issue16176.pdf).
3825           for (let i = 0, ii = ucs2.length; i < ii; i += 2) {
3826             buf.push((ucs2.charCodeAt(i) << 8) + ucs2.charCodeAt(i + 1));
3827           }
3828           toUnicode[charcode] = String.fromCharCode(...buf);
3829         }
3830       });
3831       return new ToUnicodeMap(toUnicode);
3832     }
3833 
3834     // The viewer's choice, just use an identity map.
3835     return new IdentityToUnicodeMap(properties.firstChar, properties.lastChar);
3836   }
3837 
3838   async readToUnicode(cmapObj) {
3839     if (!cmapObj) {
3840       return null;
3841     }
3842     if (cmapObj instanceof Name) {
3843       const cmap = await CMapFactory.create({
3844         encoding: cmapObj,
3845         fetchBuiltInCMap: this._fetchBuiltInCMapBound,
3846         useCMap: null,
3847       });
3848 
3849       if (cmap instanceof IdentityCMap) {
3850         return new IdentityToUnicodeMap(0, 0xffff);
3851       }
3852       return new ToUnicodeMap(cmap.getMap());
3853     }
3854     if (cmapObj instanceof BaseStream) {
3855       try {
3856         const cmap = await CMapFactory.create({
3857           encoding: cmapObj,
3858           fetchBuiltInCMap: this._fetchBuiltInCMapBound,
3859           useCMap: null,
3860         });
3861 
3862         if (cmap instanceof IdentityCMap) {
3863           return new IdentityToUnicodeMap(0, 0xffff);
3864         }
3865         const map = new Array(cmap.length);
3866         // Convert UTF-16BE
3867         // NOTE: cmap can be a sparse array, so use forEach instead of
3868         // `for(;;)` to iterate over all keys.
3869         cmap.forEach(function (charCode, token) {
3870           // Some cmaps contain *only* CID characters (fixes issue9367.pdf).
3871           if (typeof token === "number") {
3872             map[charCode] = String.fromCodePoint(token);
3873             return;
3874           }
3875           // Add back omitted leading zeros on odd length tokens
3876           // (fixes issue #18099)
3877           if (token.length % 2 !== 0) {
3878             token = "\u0000" + token;
3879           }
3880           const str = [];
3881           for (let k = 0; k < token.length; k += 2) {
3882             const w1 = (token.charCodeAt(k) << 8) | token.charCodeAt(k + 1);
3883             if ((w1 & 0xf800) !== 0xd800) {
3884               // w1 < 0xD800 || w1 > 0xDFFF
3885               str.push(w1);
3886               continue;
3887             }
3888             k += 2;
3889             const w2 = (token.charCodeAt(k) << 8) | token.charCodeAt(k + 1);
3890             str.push(((w1 & 0x3ff) << 10) + (w2 & 0x3ff) + 0x10000);
3891           }
3892           map[charCode] = String.fromCodePoint(...str);
3893         });
3894         return new ToUnicodeMap(map);
3895       } catch (reason) {
3896         if (reason instanceof AbortException) {
3897           return null;
3898         }
3899         if (this.options.ignoreErrors) {
3900           warn(`readToUnicode - ignoring ToUnicode data: "${reason}".`);
3901           return null;
3902         }
3903         throw reason;
3904       }
3905     }
3906     return null;
3907   }
3908 
3909   readCidToGidMap(glyphsData, toUnicode) {
3910     // Extract the encoding from the CIDToGIDMap
3911 
3912     // Set encoding 0 to later verify the font has an encoding
3913     const result = [];
3914     for (let j = 0, jj = glyphsData.length; j < jj; j++) {
3915       const glyphID = (glyphsData[j++] << 8) | glyphsData[j];
3916       const code = j >> 1;
3917       if (glyphID === 0 && !toUnicode.has(code)) {
3918         continue;
3919       }
3920       result[code] = glyphID;
3921     }
3922     return result;
3923   }
3924 
3925   extractWidths(dict, descriptor, properties) {
3926     const xref = this.xref;
3927     let glyphsWidths = [];
3928     let defaultWidth = 0;
3929     const glyphsVMetrics = [];
3930     let defaultVMetrics;
3931     if (properties.composite) {
3932       const dw = dict.get("DW");
3933       defaultWidth = typeof dw === "number" ? Math.ceil(dw) : 1000;
3934 
3935       const widths = dict.get("W");
3936       if (Array.isArray(widths)) {
3937         for (let i = 0, ii = widths.length; i < ii; i++) {
3938           let start = xref.fetchIfRef(widths[i++]);
3939           if (!Number.isInteger(start)) {
3940             break; // Invalid /W data.
3941           }
3942           const code = xref.fetchIfRef(widths[i]);
3943 
3944           if (Array.isArray(code)) {
3945             for (const c of code) {
3946               const width = xref.fetchIfRef(c);
3947               if (typeof width === "number") {
3948                 glyphsWidths[start] = width;
3949               }
3950               start++;
3951             }
3952           } else if (Number.isInteger(code)) {
3953             const width = xref.fetchIfRef(widths[++i]);
3954             if (typeof width !== "number") {
3955               continue;
3956             }
3957             for (let j = start; j <= code; j++) {
3958               glyphsWidths[j] = width;
3959             }
3960           } else {
3961             break; // Invalid /W data.
3962           }
3963         }
3964       }
3965 
3966       if (properties.vertical) {
3967         const dw2 = dict.getArray("DW2");
3968         let vmetrics = isNumberArray(dw2, 2) ? dw2 : [880, -1000];
3969         defaultVMetrics = [vmetrics[1], defaultWidth * 0.5, vmetrics[0]];
3970         vmetrics = dict.get("W2");
3971         if (Array.isArray(vmetrics)) {
3972           for (let i = 0, ii = vmetrics.length; i < ii; i++) {
3973             let start = xref.fetchIfRef(vmetrics[i++]);
3974             if (!Number.isInteger(start)) {
3975               break; // Invalid /W2 data.
3976             }
3977             const code = xref.fetchIfRef(vmetrics[i]);
3978 
3979             if (Array.isArray(code)) {
3980               for (let j = 0, jj = code.length; j < jj; j++) {
3981                 const vmetric = [
3982                   xref.fetchIfRef(code[j++]),
3983                   xref.fetchIfRef(code[j++]),
3984                   xref.fetchIfRef(code[j]),
3985                 ];
3986                 if (isNumberArray(vmetric, null)) {
3987                   glyphsVMetrics[start] = vmetric;
3988                 }
3989                 start++;
3990               }
3991             } else if (Number.isInteger(code)) {
3992               const vmetric = [
3993                 xref.fetchIfRef(vmetrics[++i]),
3994                 xref.fetchIfRef(vmetrics[++i]),
3995                 xref.fetchIfRef(vmetrics[++i]),
3996               ];
3997               if (!isNumberArray(vmetric, null)) {
3998                 continue;
3999               }
4000               for (let j = start; j <= code; j++) {
4001                 glyphsVMetrics[j] = vmetric;
4002               }
4003             } else {
4004               break; // Invalid /W2 data.
4005             }
4006           }
4007         }
4008       }
4009     } else {
4010       const widths = dict.get("Widths");
4011       if (Array.isArray(widths)) {
4012         let j = properties.firstChar;
4013         for (const w of widths) {
4014           const width = xref.fetchIfRef(w);
4015           if (typeof width === "number") {
4016             glyphsWidths[j] = width;
4017           }
4018           j++;
4019         }
4020         const missingWidth = descriptor.get("MissingWidth");
4021         defaultWidth = typeof missingWidth === "number" ? missingWidth : 0;
4022       } else {
4023         // Trying get the BaseFont metrics (see comment above).
4024         const baseFontName = dict.get("BaseFont");
4025         if (baseFontName instanceof Name) {
4026           const metrics = this.getBaseFontMetrics(baseFontName.name);
4027 
4028           glyphsWidths = this.buildCharCodeToWidth(metrics.widths, properties);
4029           defaultWidth = metrics.defaultWidth;
4030         }
4031       }
4032     }
4033 
4034     // Heuristic: detection of monospace font by checking all non-zero widths
4035     let isMonospace = true;
4036     let firstWidth = defaultWidth;
4037     for (const glyph in glyphsWidths) {
4038       const glyphWidth = glyphsWidths[glyph];
4039       if (!glyphWidth) {
4040         continue;
4041       }
4042       if (!firstWidth) {
4043         firstWidth = glyphWidth;
4044         continue;
4045       }
4046       if (firstWidth !== glyphWidth) {
4047         isMonospace = false;
4048         break;
4049       }
4050     }
4051     if (isMonospace) {
4052       properties.flags |= FontFlags.FixedPitch;
4053     } else {
4054       // Clear the flag.
4055       properties.flags &= ~FontFlags.FixedPitch;
4056     }
4057 
4058     properties.defaultWidth = defaultWidth;
4059     properties.widths = glyphsWidths;
4060     properties.defaultVMetrics = defaultVMetrics;
4061     properties.vmetrics = glyphsVMetrics;
4062   }
4063 
4064   isSerifFont(baseFontName) {
4065     // Simulating descriptor flags attribute
4066     const fontNameWoStyle = baseFontName.split("-", 1)[0];
4067     return (
4068       fontNameWoStyle in getSerifFonts() || /serif/gi.test(fontNameWoStyle)
4069     );
4070   }
4071 
4072   getBaseFontMetrics(name) {
4073     let defaultWidth = 0;
4074     let widths = Object.create(null);
4075     let monospace = false;
4076     const stdFontMap = getStdFontMap();
4077     let lookupName = stdFontMap[name] || name;
4078     const Metrics = getMetrics();
4079 
4080     if (!(lookupName in Metrics)) {
4081       // Use default fonts for looking up font metrics if the passed
4082       // font is not a base font
4083       lookupName = this.isSerifFont(name) ? "Times-Roman" : "Helvetica";
4084     }
4085     const glyphWidths = Metrics[lookupName];
4086 
4087     if (typeof glyphWidths === "number") {
4088       defaultWidth = glyphWidths;
4089       monospace = true;
4090     } else {
4091       widths = glyphWidths(); // expand lazy widths array
4092     }
4093 
4094     return {
4095       defaultWidth,
4096       monospace,
4097       widths,
4098     };
4099   }
4100 
4101   buildCharCodeToWidth(widthsByGlyphName, properties) {
4102     const widths = Object.create(null);
4103     const differences = properties.differences;
4104     const encoding = properties.defaultEncoding;
4105     for (let charCode = 0; charCode < 256; charCode++) {
4106       if (charCode in differences && widthsByGlyphName[differences[charCode]]) {
4107         widths[charCode] = widthsByGlyphName[differences[charCode]];
4108         continue;
4109       }
4110       if (charCode in encoding && widthsByGlyphName[encoding[charCode]]) {
4111         widths[charCode] = widthsByGlyphName[encoding[charCode]];
4112         continue;
4113       }
4114     }
4115     return widths;
4116   }
4117 
4118   preEvaluateFont(dict) {
4119     const baseDict = dict;
4120     let type = dict.get("Subtype");
4121     if (!(type instanceof Name)) {
4122       throw new FormatError("invalid font Subtype");
4123     }
4124 
4125     let composite = false;
4126     let hash;
4127     if (type.name === "Type0") {
4128       // If font is a composite
4129       //  - get the descendant font
4130       //  - set the type according to the descendant font
4131       //  - get the FontDescriptor from the descendant font
4132       const df = dict.get("DescendantFonts");
4133       if (!df) {
4134         throw new FormatError("Descendant fonts are not specified");
4135       }
4136       dict = Array.isArray(df) ? this.xref.fetchIfRef(df[0]) : df;
4137 
4138       if (!(dict instanceof Dict)) {
4139         throw new FormatError("Descendant font is not a dictionary.");
4140       }
4141       type = dict.get("Subtype");
4142       if (!(type instanceof Name)) {
4143         throw new FormatError("invalid font Subtype");
4144       }
4145       composite = true;
4146     }
4147 
4148     let firstChar = dict.get("FirstChar");
4149     if (!Number.isInteger(firstChar)) {
4150       firstChar = 0;
4151     }
4152     let lastChar = dict.get("LastChar");
4153     if (!Number.isInteger(lastChar)) {
4154       lastChar = composite ? 0xffff : 0xff;
4155     }
4156     const descriptor = dict.get("FontDescriptor");
4157     const toUnicode = dict.get("ToUnicode") || baseDict.get("ToUnicode");
4158 
4159     if (descriptor) {
4160       hash = new MurmurHash3_64();
4161 
4162       const encoding = baseDict.getRaw("Encoding");
4163       if (encoding instanceof Name) {
4164         hash.update(encoding.name);
4165       } else if (encoding instanceof Ref) {
4166         hash.update(encoding.toString());
4167       } else if (encoding instanceof Dict) {
4168         for (const entry of encoding.getRawValues()) {
4169           if (entry instanceof Name) {
4170             hash.update(entry.name);
4171           } else if (entry instanceof Ref) {
4172             hash.update(entry.toString());
4173           } else if (Array.isArray(entry)) {
4174             // 'Differences' array (fixes bug1157493.pdf).
4175             const diffLength = entry.length,
4176               diffBuf = new Array(diffLength);
4177 
4178             for (let j = 0; j < diffLength; j++) {
4179               const diffEntry = entry[j];
4180               if (diffEntry instanceof Name) {
4181                 diffBuf[j] = diffEntry.name;
4182               } else if (
4183                 typeof diffEntry === "number" ||
4184                 diffEntry instanceof Ref
4185               ) {
4186                 diffBuf[j] = diffEntry.toString();
4187               }
4188             }
4189             hash.update(diffBuf.join());
4190           }
4191         }
4192       }
4193 
4194       hash.update(`${firstChar}-${lastChar}`); // Fixes issue10665_reduced.pdf
4195 
4196       if (toUnicode instanceof BaseStream) {
4197         const stream = toUnicode.str || toUnicode;
4198         const uint8array = stream.buffer
4199           ? new Uint8Array(stream.buffer.buffer, 0, stream.bufferLength)
4200           : new Uint8Array(
4201               stream.bytes.buffer,
4202               stream.start,
4203               stream.end - stream.start
4204             );
4205         hash.update(uint8array);
4206       } else if (toUnicode instanceof Name) {
4207         hash.update(toUnicode.name);
4208       }
4209 
4210       const widths = dict.get("Widths") || baseDict.get("Widths");
4211       if (Array.isArray(widths)) {
4212         const widthsBuf = [];
4213         for (const entry of widths) {
4214           if (typeof entry === "number" || entry instanceof Ref) {
4215             widthsBuf.push(entry.toString());
4216           }
4217         }
4218         hash.update(widthsBuf.join());
4219       }
4220 
4221       if (composite) {
4222         hash.update("compositeFont");
4223 
4224         const compositeWidths = dict.get("W") || baseDict.get("W");
4225         if (Array.isArray(compositeWidths)) {
4226           const widthsBuf = [];
4227           for (const entry of compositeWidths) {
4228             if (typeof entry === "number" || entry instanceof Ref) {
4229               widthsBuf.push(entry.toString());
4230             } else if (Array.isArray(entry)) {
4231               const subWidthsBuf = [];
4232               for (const element of entry) {
4233                 if (typeof element === "number" || element instanceof Ref) {
4234                   subWidthsBuf.push(element.toString());
4235                 }
4236               }
4237               widthsBuf.push(`[${subWidthsBuf.join()}]`);
4238             }
4239           }
4240           hash.update(widthsBuf.join());
4241         }
4242 
4243         const cidToGidMap =
4244           dict.getRaw("CIDToGIDMap") || baseDict.getRaw("CIDToGIDMap");
4245         if (cidToGidMap instanceof Name) {
4246           hash.update(cidToGidMap.name);
4247         } else if (cidToGidMap instanceof Ref) {
4248           hash.update(cidToGidMap.toString());
4249         } else if (cidToGidMap instanceof BaseStream) {
4250           hash.update(cidToGidMap.peekBytes());
4251         }
4252       }
4253     }
4254 
4255     return {
4256       descriptor,
4257       dict,
4258       baseDict,
4259       composite,
4260       type: type.name,
4261       firstChar,
4262       lastChar,
4263       toUnicode,
4264       hash: hash ? hash.hexdigest() : "",
4265     };
4266   }
4267 
4268   async translateFont({
4269     descriptor,
4270     dict,
4271     baseDict,
4272     composite,
4273     type,
4274     firstChar,
4275     lastChar,
4276     toUnicode,
4277     cssFontInfo,
4278   }) {
4279     const isType3Font = type === "Type3";
4280 
4281     if (!descriptor) {
4282       if (isType3Font) {
4283         const bbox = lookupNormalRect(dict.getArray("FontBBox"), [0, 0, 0, 0]);
4284         // FontDescriptor is only required for Type3 fonts when the document
4285         // is a tagged pdf. Create a barbebones one to get by.
4286         descriptor = new Dict(null);
4287         descriptor.set("FontName", Name.get(type));
4288         descriptor.set("FontBBox", bbox);
4289       } else {
4290         // Before PDF 1.5 if the font was one of the base 14 fonts, having a
4291         // FontDescriptor was not required.
4292         // This case is here for compatibility.
4293         let baseFontName = dict.get("BaseFont");
4294         if (!(baseFontName instanceof Name)) {
4295           throw new FormatError("Base font is not specified");
4296         }
4297 
4298         // Using base font name as a font name.
4299         baseFontName = baseFontName.name.replaceAll(/[,_]/g, "-");
4300         const metrics = this.getBaseFontMetrics(baseFontName);
4301 
4302         // Simulating descriptor flags attribute
4303         const fontNameWoStyle = baseFontName.split("-", 1)[0];
4304         const flags =
4305           (this.isSerifFont(fontNameWoStyle) ? FontFlags.Serif : 0) |
4306           (metrics.monospace ? FontFlags.FixedPitch : 0) |
4307           (getSymbolsFonts()[fontNameWoStyle]
4308             ? FontFlags.Symbolic
4309             : FontFlags.Nonsymbolic);
4310 
4311         const properties = {
4312           type,
4313           name: baseFontName,
4314           loadedName: baseDict.loadedName,
4315           systemFontInfo: null,
4316           widths: metrics.widths,
4317           defaultWidth: metrics.defaultWidth,
4318           isSimulatedFlags: true,
4319           flags,
4320           firstChar,
4321           lastChar,
4322           toUnicode,
4323           xHeight: 0,
4324           capHeight: 0,
4325           italicAngle: 0,
4326           isType3Font,
4327         };
4328         const widths = dict.get("Widths");
4329 
4330         const standardFontName = getStandardFontName(baseFontName);
4331         let file = null;
4332         if (standardFontName) {
4333           file = await this.fetchStandardFontData(standardFontName);
4334           properties.isInternalFont = !!file;
4335         }
4336         if (!properties.isInternalFont && this.options.useSystemFonts) {
4337           properties.systemFontInfo = getFontSubstitution(
4338             this.systemFontCache,
4339             this.idFactory,
4340             this.options.standardFontDataUrl,
4341             baseFontName,
4342             standardFontName,
4343             type
4344           );
4345         }
4346 
4347         const newProperties = await this.extractDataStructures(
4348           dict,
4349           properties
4350         );
4351         if (Array.isArray(widths)) {
4352           const glyphWidths = [];
4353           let j = firstChar;
4354           for (const w of widths) {
4355             const width = this.xref.fetchIfRef(w);
4356             if (typeof width === "number") {
4357               glyphWidths[j] = width;
4358             }
4359             j++;
4360           }
4361           newProperties.widths = glyphWidths;
4362         } else {
4363           newProperties.widths = this.buildCharCodeToWidth(
4364             metrics.widths,
4365             newProperties
4366           );
4367         }
4368         return new Font(baseFontName, file, newProperties);
4369       }
4370     }
4371 
4372     // According to the spec if 'FontDescriptor' is declared, 'FirstChar',
4373     // 'LastChar' and 'Widths' should exist too, but some PDF encoders seem
4374     // to ignore this rule when a variant of a standard font is used.
4375     // TODO Fill the width array depending on which of the base font this is
4376     // a variant.
4377 
4378     let fontName = descriptor.get("FontName");
4379     let baseFont = dict.get("BaseFont");
4380     // Some bad PDFs have a string as the font name.
4381     if (typeof fontName === "string") {
4382       fontName = Name.get(fontName);
4383     }
4384     if (typeof baseFont === "string") {
4385       baseFont = Name.get(baseFont);
4386     }
4387 
4388     const fontNameStr = fontName?.name;
4389     const baseFontStr = baseFont?.name;
4390     if (!isType3Font && fontNameStr !== baseFontStr) {
4391       info(
4392         `The FontDescriptor's FontName is "${fontNameStr}" but ` +
4393           `should be the same as the Font's BaseFont "${baseFontStr}".`
4394       );
4395       // - Workaround for cases where e.g. fontNameStr = 'Arial' and
4396       //   baseFontStr = 'Arial,Bold' (needed when no font file is embedded).
4397       //
4398       // - Workaround for cases where e.g. fontNameStr = 'wg09np' and
4399       //   baseFontStr = 'Wingdings-Regular' (fixes issue7454.pdf).
4400       if (
4401         fontNameStr &&
4402         baseFontStr &&
4403         (baseFontStr.startsWith(fontNameStr) ||
4404           (!isKnownFontName(fontNameStr) && isKnownFontName(baseFontStr)))
4405       ) {
4406         fontName = null;
4407       }
4408     }
4409     fontName ||= baseFont;
4410 
4411     if (!(fontName instanceof Name)) {
4412       throw new FormatError("invalid font name");
4413     }
4414 
4415     let fontFile, subtype, length1, length2, length3;
4416     try {
4417       fontFile = descriptor.get("FontFile", "FontFile2", "FontFile3");
4418     } catch (ex) {
4419       if (!this.options.ignoreErrors) {
4420         throw ex;
4421       }
4422       warn(`translateFont - fetching "${fontName.name}" font file: "${ex}".`);
4423       fontFile = new NullStream();
4424     }
4425     let isInternalFont = false;
4426     let glyphScaleFactors = null;
4427     let systemFontInfo = null;
4428     if (fontFile) {
4429       if (fontFile.dict) {
4430         const subtypeEntry = fontFile.dict.get("Subtype");
4431         if (subtypeEntry instanceof Name) {
4432           subtype = subtypeEntry.name;
4433         }
4434         length1 = fontFile.dict.get("Length1");
4435         length2 = fontFile.dict.get("Length2");
4436         length3 = fontFile.dict.get("Length3");
4437       }
4438     } else if (cssFontInfo) {
4439       // We've a missing XFA font.
4440       const standardFontName = getXfaFontName(fontName.name);
4441       if (standardFontName) {
4442         cssFontInfo.fontFamily = `${cssFontInfo.fontFamily}-PdfJS-XFA`;
4443         cssFontInfo.metrics = standardFontName.metrics || null;
4444         glyphScaleFactors = standardFontName.factors || null;
4445         fontFile = await this.fetchStandardFontData(standardFontName.name);
4446         isInternalFont = !!fontFile;
4447 
4448         // We're using a substitution font but for example widths (if any)
4449         // are related to the glyph positions in the font.
4450         // So we overwrite everything here to be sure that widths are
4451         // correct.
4452         baseDict = dict = getXfaFontDict(fontName.name);
4453         composite = true;
4454       }
4455     } else if (!isType3Font) {
4456       const standardFontName = getStandardFontName(fontName.name);
4457       if (standardFontName) {
4458         fontFile = await this.fetchStandardFontData(standardFontName);
4459         isInternalFont = !!fontFile;
4460       }
4461       if (!isInternalFont && this.options.useSystemFonts) {
4462         systemFontInfo = getFontSubstitution(
4463           this.systemFontCache,
4464           this.idFactory,
4465           this.options.standardFontDataUrl,
4466           fontName.name,
4467           standardFontName,
4468           type
4469         );
4470       }
4471     }
4472 
4473     const fontMatrix = lookupMatrix(
4474       dict.getArray("FontMatrix"),
4475       FONT_IDENTITY_MATRIX
4476     );
4477     const bbox = lookupNormalRect(
4478       descriptor.getArray("FontBBox") || dict.getArray("FontBBox"),
4479       undefined
4480     );
4481     let ascent = descriptor.get("Ascent");
4482     if (typeof ascent !== "number") {
4483       ascent = undefined;
4484     }
4485     let descent = descriptor.get("Descent");
4486     if (typeof descent !== "number") {
4487       descent = undefined;
4488     }
4489     let xHeight = descriptor.get("XHeight");
4490     if (typeof xHeight !== "number") {
4491       xHeight = 0;
4492     }
4493     let capHeight = descriptor.get("CapHeight");
4494     if (typeof capHeight !== "number") {
4495       capHeight = 0;
4496     }
4497     let flags = descriptor.get("Flags");
4498     if (!Number.isInteger(flags)) {
4499       flags = 0;
4500     }
4501     let italicAngle = descriptor.get("ItalicAngle");
4502     if (typeof italicAngle !== "number") {
4503       italicAngle = 0;
4504     }
4505 
4506     const properties = {
4507       type,
4508       name: fontName.name,
4509       subtype,
4510       file: fontFile,
4511       length1,
4512       length2,
4513       length3,
4514       isInternalFont,
4515       loadedName: baseDict.loadedName,
4516       composite,
4517       fixedPitch: false,
4518       fontMatrix,
4519       firstChar,
4520       lastChar,
4521       toUnicode,
4522       bbox,
4523       ascent,
4524       descent,
4525       xHeight,
4526       capHeight,
4527       flags,
4528       italicAngle,
4529       isType3Font,
4530       cssFontInfo,
4531       scaleFactors: glyphScaleFactors,
4532       systemFontInfo,
4533     };
4534 
4535     if (composite) {
4536       const cidEncoding = baseDict.get("Encoding");
4537       if (cidEncoding instanceof Name) {
4538         properties.cidEncoding = cidEncoding.name;
4539       }
4540       const cMap = await CMapFactory.create({
4541         encoding: cidEncoding,
4542         fetchBuiltInCMap: this._fetchBuiltInCMapBound,
4543         useCMap: null,
4544       });
4545       properties.cMap = cMap;
4546       properties.vertical = properties.cMap.vertical;
4547     }
4548 
4549     const newProperties = await this.extractDataStructures(dict, properties);
4550     this.extractWidths(dict, descriptor, newProperties);
4551 
4552     return new Font(fontName.name, fontFile, newProperties);
4553   }
4554 
4555   static buildFontPaths(font, glyphs, handler, evaluatorOptions) {
4556     function buildPath(fontChar) {
4557       const glyphName = `${font.loadedName}_path_${fontChar}`;
4558       try {
4559         if (font.renderer.hasBuiltPath(fontChar)) {
4560           return;
4561         }
4562         handler.send("commonobj", [
4563           glyphName,
4564           "FontPath",
4565           font.renderer.getPathJs(fontChar),
4566         ]);
4567       } catch (reason) {
4568         if (evaluatorOptions.ignoreErrors) {
4569           warn(`buildFontPaths - ignoring ${glyphName} glyph: "${reason}".`);
4570           return;
4571         }
4572         throw reason;
4573       }
4574     }
4575 
4576     for (const glyph of glyphs) {
4577       buildPath(glyph.fontChar);
4578 
4579       // If the glyph has an accent we need to build a path for its
4580       // fontChar too, otherwise CanvasGraphics_paintChar will fail.
4581       const accent = glyph.accent;
4582       if (accent?.fontChar) {
4583         buildPath(accent.fontChar);
4584       }
4585     }
4586   }
4587 
4588   static get fallbackFontDict() {
4589     const dict = new Dict();
4590     dict.set("BaseFont", Name.get("Helvetica"));
4591     dict.set("Type", Name.get("FallbackType"));
4592     dict.set("Subtype", Name.get("FallbackType"));
4593     dict.set("Encoding", Name.get("WinAnsiEncoding"));
4594 
4595     return shadow(this, "fallbackFontDict", dict);
4596   }
4597 }
4598 
4599 class TranslatedFont {
4600   constructor({ loadedName, font, dict, evaluatorOptions }) {
4601     this.loadedName = loadedName;
4602     this.font = font;
4603     this.dict = dict;
4604     this._evaluatorOptions = evaluatorOptions || DefaultPartialEvaluatorOptions;
4605     this.type3Loaded = null;
4606     this.type3Dependencies = font.isType3Font ? new Set() : null;
4607     this.sent = false;
4608   }
4609 
4610   send(handler) {
4611     if (this.sent) {
4612       return;
4613     }
4614     this.sent = true;
4615 
4616     handler.send("commonobj", [
4617       this.loadedName,
4618       "Font",
4619       this.font.exportData(this._evaluatorOptions.fontExtraProperties),
4620     ]);
4621   }
4622 
4623   fallback(handler) {
4624     if (!this.font.data) {
4625       return;
4626     }
4627     // When font loading failed, fall back to the built-in font renderer.
4628     this.font.disableFontFace = true;
4629     // An arbitrary number of text rendering operators could have been
4630     // encountered between the point in time when the 'Font' message was sent
4631     // to the main-thread, and the point in time when the 'FontFallback'
4632     // message was received on the worker-thread.
4633     // To ensure that all 'FontPath's are available on the main-thread, when
4634     // font loading failed, attempt to resend *all* previously parsed glyphs.
4635     PartialEvaluator.buildFontPaths(
4636       this.font,
4637       /* glyphs = */ this.font.glyphCacheValues,
4638       handler,
4639       this._evaluatorOptions
4640     );
4641   }
4642 
4643   loadType3Data(evaluator, resources, task) {
4644     if (this.type3Loaded) {
4645       return this.type3Loaded;
4646     }
4647     if (!this.font.isType3Font) {
4648       throw new Error("Must be a Type3 font.");
4649     }
4650     // When parsing Type3 glyphs, always ignore them if there are errors.
4651     // Compared to the parsing of e.g. an entire page, it doesn't really
4652     // make sense to only be able to render a Type3 glyph partially.
4653     const type3Evaluator = evaluator.clone({ ignoreErrors: false });
4654     // Prevent circular references in Type3 fonts.
4655     const type3FontRefs = new RefSet(evaluator.type3FontRefs);
4656     if (this.dict.objId && !type3FontRefs.has(this.dict.objId)) {
4657       type3FontRefs.put(this.dict.objId);
4658     }
4659     type3Evaluator.type3FontRefs = type3FontRefs;
4660 
4661     const translatedFont = this.font,
4662       type3Dependencies = this.type3Dependencies;
4663     let loadCharProcsPromise = Promise.resolve();
4664     const charProcs = this.dict.get("CharProcs");
4665     const fontResources = this.dict.get("Resources") || resources;
4666     const charProcOperatorList = Object.create(null);
4667 
4668     const fontBBox = Util.normalizeRect(translatedFont.bbox || [0, 0, 0, 0]),
4669       width = fontBBox[2] - fontBBox[0],
4670       height = fontBBox[3] - fontBBox[1];
4671     const fontBBoxSize = Math.hypot(width, height);
4672 
4673     for (const key of charProcs.getKeys()) {
4674       loadCharProcsPromise = loadCharProcsPromise.then(() => {
4675         const glyphStream = charProcs.get(key);
4676         const operatorList = new OperatorList();
4677         return type3Evaluator
4678           .getOperatorList({
4679             stream: glyphStream,
4680             task,
4681             resources: fontResources,
4682             operatorList,
4683           })
4684           .then(() => {
4685             // According to the PDF specification, section "9.6.5 Type 3 Fonts"
4686             // and "Table 113":
4687             //  "A glyph description that begins with the d1 operator should
4688             //   not execute any operators that set the colour (or other
4689             //   colour-related parameters) in the graphics state;
4690             //   any use of such operators shall be ignored."
4691             if (operatorList.fnArray[0] === OPS.setCharWidthAndBounds) {
4692               this._removeType3ColorOperators(operatorList, fontBBoxSize);
4693             }
4694             charProcOperatorList[key] = operatorList.getIR();
4695 
4696             for (const dependency of operatorList.dependencies) {
4697               type3Dependencies.add(dependency);
4698             }
4699           })
4700           .catch(function (reason) {
4701             warn(`Type3 font resource "${key}" is not available.`);
4702             const dummyOperatorList = new OperatorList();
4703             charProcOperatorList[key] = dummyOperatorList.getIR();
4704           });
4705       });
4706     }
4707     this.type3Loaded = loadCharProcsPromise.then(() => {
4708       translatedFont.charProcOperatorList = charProcOperatorList;
4709       if (this._bbox) {
4710         translatedFont.isCharBBox = true;
4711         translatedFont.bbox = this._bbox;
4712       }
4713     });
4714     return this.type3Loaded;
4715   }
4716 
4717   /**
4718    * @private
4719    */
4720   _removeType3ColorOperators(operatorList, fontBBoxSize = NaN) {
4721     if (typeof PDFJSDev === "undefined" || PDFJSDev.test("TESTING")) {
4722       assert(
4723         operatorList.fnArray[0] === OPS.setCharWidthAndBounds,
4724         "Type3 glyph shall start with the d1 operator."
4725       );
4726     }
4727     const charBBox = Util.normalizeRect(operatorList.argsArray[0].slice(2)),
4728       width = charBBox[2] - charBBox[0],
4729       height = charBBox[3] - charBBox[1];
4730     const charBBoxSize = Math.hypot(width, height);
4731 
4732     if (width === 0 || height === 0) {
4733       // Skip the d1 operator when its bounds are bogus (fixes issue14953.pdf).
4734       operatorList.fnArray.splice(0, 1);
4735       operatorList.argsArray.splice(0, 1);
4736     } else if (
4737       fontBBoxSize === 0 ||
4738       Math.round(charBBoxSize / fontBBoxSize) >= 10
4739     ) {
4740       // Override the fontBBox when it's undefined/empty, or when it's at least
4741       // (approximately) one order of magnitude smaller than the charBBox
4742       // (fixes issue14999_reduced.pdf).
4743       if (!this._bbox) {
4744         this._bbox = [Infinity, Infinity, -Infinity, -Infinity];
4745       }
4746       this._bbox[0] = Math.min(this._bbox[0], charBBox[0]);
4747       this._bbox[1] = Math.min(this._bbox[1], charBBox[1]);
4748       this._bbox[2] = Math.max(this._bbox[2], charBBox[2]);
4749       this._bbox[3] = Math.max(this._bbox[3], charBBox[3]);
4750     }
4751 
4752     let i = 0,
4753       ii = operatorList.length;
4754     while (i < ii) {
4755       switch (operatorList.fnArray[i]) {
4756         case OPS.setCharWidthAndBounds:
4757           break; // Handled above.
4758         case OPS.setStrokeColorSpace:
4759         case OPS.setFillColorSpace:
4760         case OPS.setStrokeColor:
4761         case OPS.setStrokeColorN:
4762         case OPS.setFillColor:
4763         case OPS.setFillColorN:
4764         case OPS.setStrokeGray:
4765         case OPS.setFillGray:
4766         case OPS.setStrokeRGBColor:
4767         case OPS.setFillRGBColor:
4768         case OPS.setStrokeCMYKColor:
4769         case OPS.setFillCMYKColor:
4770         case OPS.shadingFill:
4771         case OPS.setRenderingIntent:
4772           operatorList.fnArray.splice(i, 1);
4773           operatorList.argsArray.splice(i, 1);
4774           ii--;
4775           continue;
4776 
4777         case OPS.setGState:
4778           const [gStateObj] = operatorList.argsArray[i];
4779           let j = 0,
4780             jj = gStateObj.length;
4781           while (j < jj) {
4782             const [gStateKey] = gStateObj[j];
4783             switch (gStateKey) {
4784               case "TR":
4785               case "TR2":
4786               case "HT":
4787               case "BG":
4788               case "BG2":
4789               case "UCR":
4790               case "UCR2":
4791                 gStateObj.splice(j, 1);
4792                 jj--;
4793                 continue;
4794             }
4795             j++;
4796           }
4797           break;
4798       }
4799       i++;
4800     }
4801   }
4802 }
4803 
4804 class StateManager {
4805   constructor(initialState = new EvalState()) {
4806     this.state = initialState;
4807     this.stateStack = [];
4808   }
4809 
4810   save() {
4811     const old = this.state;
4812     this.stateStack.push(this.state);
4813     this.state = old.clone();
4814   }
4815 
4816   restore() {
4817     const prev = this.stateStack.pop();
4818     if (prev) {
4819       this.state = prev;
4820     }
4821   }
4822 
4823   transform(args) {
4824     this.state.ctm = Util.transform(this.state.ctm, args);
4825   }
4826 }
4827 
4828 class TextState {
4829   constructor() {
4830     this.ctm = new Float32Array(IDENTITY_MATRIX);
4831     this.fontName = null;
4832     this.fontSize = 0;
4833     this.loadedName = null;
4834     this.font = null;
4835     this.fontMatrix = FONT_IDENTITY_MATRIX;
4836     this.textMatrix = IDENTITY_MATRIX.slice();
4837     this.textLineMatrix = IDENTITY_MATRIX.slice();
4838     this.charSpacing = 0;
4839     this.wordSpacing = 0;
4840     this.leading = 0;
4841     this.textHScale = 1;
4842     this.textRise = 0;
4843   }
4844 
4845   setTextMatrix(a, b, c, d, e, f) {
4846     const m = this.textMatrix;
4847     m[0] = a;
4848     m[1] = b;
4849     m[2] = c;
4850     m[3] = d;
4851     m[4] = e;
4852     m[5] = f;
4853   }
4854 
4855   setTextLineMatrix(a, b, c, d, e, f) {
4856     const m = this.textLineMatrix;
4857     m[0] = a;
4858     m[1] = b;
4859     m[2] = c;
4860     m[3] = d;
4861     m[4] = e;
4862     m[5] = f;
4863   }
4864 
4865   translateTextMatrix(x, y) {
4866     const m = this.textMatrix;
4867     m[4] = m[0] * x + m[2] * y + m[4];
4868     m[5] = m[1] * x + m[3] * y + m[5];
4869   }
4870 
4871   translateTextLineMatrix(x, y) {
4872     const m = this.textLineMatrix;
4873     m[4] = m[0] * x + m[2] * y + m[4];
4874     m[5] = m[1] * x + m[3] * y + m[5];
4875   }
4876 
4877   carriageReturn() {
4878     this.translateTextLineMatrix(0, -this.leading);
4879     this.textMatrix = this.textLineMatrix.slice();
4880   }
4881 
4882   clone() {
4883     const clone = Object.create(this);
4884     clone.textMatrix = this.textMatrix.slice();
4885     clone.textLineMatrix = this.textLineMatrix.slice();
4886     clone.fontMatrix = this.fontMatrix.slice();
4887     return clone;
4888   }
4889 }
4890 
4891 class EvalState {
4892   constructor() {
4893     this.ctm = new Float32Array(IDENTITY_MATRIX);
4894     this.font = null;
4895     this.textRenderingMode = TextRenderingMode.FILL;
4896     this._fillColorSpace = ColorSpace.singletons.gray;
4897     this._strokeColorSpace = ColorSpace.singletons.gray;
4898     this.patternFillColorSpace = null;
4899     this.patternStrokeColorSpace = null;
4900   }
4901 
4902   get fillColorSpace() {
4903     return this._fillColorSpace;
4904   }
4905 
4906   set fillColorSpace(colorSpace) {
4907     this._fillColorSpace = this.patternFillColorSpace = colorSpace;
4908   }
4909 
4910   get strokeColorSpace() {
4911     return this._strokeColorSpace;
4912   }
4913 
4914   set strokeColorSpace(colorSpace) {
4915     this._strokeColorSpace = this.patternStrokeColorSpace = colorSpace;
4916   }
4917 
4918   clone() {
4919     return Object.create(this);
4920   }
4921 }
4922 
4923 class EvaluatorPreprocessor {
4924   static get opMap() {
4925     // Specifies properties for each command
4926     //
4927     // If variableArgs === true: [0, `numArgs`] expected
4928     // If variableArgs === false: exactly `numArgs` expected
4929     return shadow(
4930       this,
4931       "opMap",
4932       Object.assign(Object.create(null), {
4933         // Graphic state
4934         w: { id: OPS.setLineWidth, numArgs: 1, variableArgs: false },
4935         J: { id: OPS.setLineCap, numArgs: 1, variableArgs: false },
4936         j: { id: OPS.setLineJoin, numArgs: 1, variableArgs: false },
4937         M: { id: OPS.setMiterLimit, numArgs: 1, variableArgs: false },
4938         d: { id: OPS.setDash, numArgs: 2, variableArgs: false },
4939         ri: { id: OPS.setRenderingIntent, numArgs: 1, variableArgs: false },
4940         i: { id: OPS.setFlatness, numArgs: 1, variableArgs: false },
4941         gs: { id: OPS.setGState, numArgs: 1, variableArgs: false },
4942         q: { id: OPS.save, numArgs: 0, variableArgs: false },
4943         Q: { id: OPS.restore, numArgs: 0, variableArgs: false },
4944         cm: { id: OPS.transform, numArgs: 6, variableArgs: false },
4945 
4946         // Path
4947         m: { id: OPS.moveTo, numArgs: 2, variableArgs: false },
4948         l: { id: OPS.lineTo, numArgs: 2, variableArgs: false },
4949         c: { id: OPS.curveTo, numArgs: 6, variableArgs: false },
4950         v: { id: OPS.curveTo2, numArgs: 4, variableArgs: false },
4951         y: { id: OPS.curveTo3, numArgs: 4, variableArgs: false },
4952         h: { id: OPS.closePath, numArgs: 0, variableArgs: false },
4953         re: { id: OPS.rectangle, numArgs: 4, variableArgs: false },
4954         S: { id: OPS.stroke, numArgs: 0, variableArgs: false },
4955         s: { id: OPS.closeStroke, numArgs: 0, variableArgs: false },
4956         f: { id: OPS.fill, numArgs: 0, variableArgs: false },
4957         F: { id: OPS.fill, numArgs: 0, variableArgs: false },
4958         "f*": { id: OPS.eoFill, numArgs: 0, variableArgs: false },
4959         B: { id: OPS.fillStroke, numArgs: 0, variableArgs: false },
4960         "B*": { id: OPS.eoFillStroke, numArgs: 0, variableArgs: false },
4961         b: { id: OPS.closeFillStroke, numArgs: 0, variableArgs: false },
4962         "b*": { id: OPS.closeEOFillStroke, numArgs: 0, variableArgs: false },
4963         n: { id: OPS.endPath, numArgs: 0, variableArgs: false },
4964 
4965         // Clipping
4966         W: { id: OPS.clip, numArgs: 0, variableArgs: false },
4967         "W*": { id: OPS.eoClip, numArgs: 0, variableArgs: false },
4968 
4969         // Text
4970         BT: { id: OPS.beginText, numArgs: 0, variableArgs: false },
4971         ET: { id: OPS.endText, numArgs: 0, variableArgs: false },
4972         Tc: { id: OPS.setCharSpacing, numArgs: 1, variableArgs: false },
4973         Tw: { id: OPS.setWordSpacing, numArgs: 1, variableArgs: false },
4974         Tz: { id: OPS.setHScale, numArgs: 1, variableArgs: false },
4975         TL: { id: OPS.setLeading, numArgs: 1, variableArgs: false },
4976         Tf: { id: OPS.setFont, numArgs: 2, variableArgs: false },
4977         Tr: { id: OPS.setTextRenderingMode, numArgs: 1, variableArgs: false },
4978         Ts: { id: OPS.setTextRise, numArgs: 1, variableArgs: false },
4979         Td: { id: OPS.moveText, numArgs: 2, variableArgs: false },
4980         TD: { id: OPS.setLeadingMoveText, numArgs: 2, variableArgs: false },
4981         Tm: { id: OPS.setTextMatrix, numArgs: 6, variableArgs: false },
4982         "T*": { id: OPS.nextLine, numArgs: 0, variableArgs: false },
4983         Tj: { id: OPS.showText, numArgs: 1, variableArgs: false },
4984         TJ: { id: OPS.showSpacedText, numArgs: 1, variableArgs: false },
4985         "'": { id: OPS.nextLineShowText, numArgs: 1, variableArgs: false },
4986         '"': {
4987           id: OPS.nextLineSetSpacingShowText,
4988           numArgs: 3,
4989           variableArgs: false,
4990         },
4991 
4992         // Type3 fonts
4993         d0: { id: OPS.setCharWidth, numArgs: 2, variableArgs: false },
4994         d1: {
4995           id: OPS.setCharWidthAndBounds,
4996           numArgs: 6,
4997           variableArgs: false,
4998         },
4999 
5000         // Color
5001         CS: { id: OPS.setStrokeColorSpace, numArgs: 1, variableArgs: false },
5002         cs: { id: OPS.setFillColorSpace, numArgs: 1, variableArgs: false },
5003         SC: { id: OPS.setStrokeColor, numArgs: 4, variableArgs: true },
5004         SCN: { id: OPS.setStrokeColorN, numArgs: 33, variableArgs: true },
5005         sc: { id: OPS.setFillColor, numArgs: 4, variableArgs: true },
5006         scn: { id: OPS.setFillColorN, numArgs: 33, variableArgs: true },
5007         G: { id: OPS.setStrokeGray, numArgs: 1, variableArgs: false },
5008         g: { id: OPS.setFillGray, numArgs: 1, variableArgs: false },
5009         RG: { id: OPS.setStrokeRGBColor, numArgs: 3, variableArgs: false },
5010         rg: { id: OPS.setFillRGBColor, numArgs: 3, variableArgs: false },
5011         K: { id: OPS.setStrokeCMYKColor, numArgs: 4, variableArgs: false },
5012         k: { id: OPS.setFillCMYKColor, numArgs: 4, variableArgs: false },
5013 
5014         // Shading
5015         sh: { id: OPS.shadingFill, numArgs: 1, variableArgs: false },
5016 
5017         // Images
5018         BI: { id: OPS.beginInlineImage, numArgs: 0, variableArgs: false },
5019         ID: { id: OPS.beginImageData, numArgs: 0, variableArgs: false },
5020         EI: { id: OPS.endInlineImage, numArgs: 1, variableArgs: false },
5021 
5022         // XObjects
5023         Do: { id: OPS.paintXObject, numArgs: 1, variableArgs: false },
5024         MP: { id: OPS.markPoint, numArgs: 1, variableArgs: false },
5025         DP: { id: OPS.markPointProps, numArgs: 2, variableArgs: false },
5026         BMC: { id: OPS.beginMarkedContent, numArgs: 1, variableArgs: false },
5027         BDC: {
5028           id: OPS.beginMarkedContentProps,
5029           numArgs: 2,
5030           variableArgs: false,
5031         },
5032         EMC: { id: OPS.endMarkedContent, numArgs: 0, variableArgs: false },
5033 
5034         // Compatibility
5035         BX: { id: OPS.beginCompat, numArgs: 0, variableArgs: false },
5036         EX: { id: OPS.endCompat, numArgs: 0, variableArgs: false },
5037 
5038         // (reserved partial commands for the lexer)
5039         BM: null,
5040         BD: null,
5041         true: null,
5042         fa: null,
5043         fal: null,
5044         fals: null,
5045         false: null,
5046         nu: null,
5047         nul: null,
5048         null: null,
5049       })
5050     );
5051   }
5052 
5053   static MAX_INVALID_PATH_OPS = 10;
5054 
5055   constructor(stream, xref, stateManager = new StateManager()) {
5056     // TODO(mduan): pass array of knownCommands rather than this.opMap
5057     // dictionary
5058     this.parser = new Parser({
5059       lexer: new Lexer(stream, EvaluatorPreprocessor.opMap),
5060       xref,
5061     });
5062     this.stateManager = stateManager;
5063     this.nonProcessedArgs = [];
5064     this._isPathOp = false;
5065     this._numInvalidPathOPS = 0;
5066   }
5067 
5068   get savedStatesDepth() {
5069     return this.stateManager.stateStack.length;
5070   }
5071 
5072   // |operation| is an object with two fields:
5073   //
5074   // - |fn| is an out param.
5075   //
5076   // - |args| is an inout param. On entry, it should have one of two values.
5077   //
5078   //   - An empty array. This indicates that the caller is providing the
5079   //     array in which the args will be stored in. The caller should use
5080   //     this value if it can reuse a single array for each call to read().
5081   //
5082   //   - |null|. This indicates that the caller needs this function to create
5083   //     the array in which any args are stored in. If there are zero args,
5084   //     this function will leave |operation.args| as |null| (thus avoiding
5085   //     allocations that would occur if we used an empty array to represent
5086   //     zero arguments). Otherwise, it will replace |null| with a new array
5087   //     containing the arguments. The caller should use this value if it
5088   //     cannot reuse an array for each call to read().
5089   //
5090   // These two modes are present because this function is very hot and so
5091   // avoiding allocations where possible is worthwhile.
5092   //
5093   read(operation) {
5094     let args = operation.args;
5095     while (true) {
5096       const obj = this.parser.getObj();
5097       if (obj instanceof Cmd) {
5098         const cmd = obj.cmd;
5099         // Check that the command is valid
5100         const opSpec = EvaluatorPreprocessor.opMap[cmd];
5101         if (!opSpec) {
5102           warn(`Unknown command "${cmd}".`);
5103           continue;
5104         }
5105 
5106         const fn = opSpec.id;
5107         const numArgs = opSpec.numArgs;
5108         let argsLength = args !== null ? args.length : 0;
5109 
5110         // If the *previous* command wasn't a path operator, reset the heuristic
5111         // used with incomplete path operators below (fixes issue14917.pdf).
5112         if (!this._isPathOp) {
5113           this._numInvalidPathOPS = 0;
5114         }
5115         this._isPathOp = fn >= OPS.moveTo && fn <= OPS.endPath;
5116 
5117         if (!opSpec.variableArgs) {
5118           // Postscript commands can be nested, e.g. /F2 /GS2 gs 5.711 Tf
5119           if (argsLength !== numArgs) {
5120             const nonProcessedArgs = this.nonProcessedArgs;
5121             while (argsLength > numArgs) {
5122               nonProcessedArgs.push(args.shift());
5123               argsLength--;
5124             }
5125             while (argsLength < numArgs && nonProcessedArgs.length !== 0) {
5126               if (args === null) {
5127                 args = [];
5128               }
5129               args.unshift(nonProcessedArgs.pop());
5130               argsLength++;
5131             }
5132           }
5133 
5134           if (argsLength < numArgs) {
5135             const partialMsg =
5136               `command ${cmd}: expected ${numArgs} args, ` +
5137               `but received ${argsLength} args.`;
5138 
5139             // Incomplete path operators, in particular, can result in fairly
5140             // chaotic rendering artifacts. Hence the following heuristics is
5141             // used to error, rather than just warn, once a number of invalid
5142             // path operators have been encountered (fixes bug1443140.pdf).
5143             if (
5144               this._isPathOp &&
5145               ++this._numInvalidPathOPS >
5146                 EvaluatorPreprocessor.MAX_INVALID_PATH_OPS
5147             ) {
5148               throw new FormatError(`Invalid ${partialMsg}`);
5149             }
5150             // If we receive too few arguments, it's not possible to execute
5151             // the command, hence we skip the command.
5152             warn(`Skipping ${partialMsg}`);
5153             if (args !== null) {
5154               args.length = 0;
5155             }
5156             continue;
5157           }
5158         } else if (argsLength > numArgs) {
5159           info(
5160             `Command ${cmd}: expected [0, ${numArgs}] args, ` +
5161               `but received ${argsLength} args.`
5162           );
5163         }
5164 
5165         // TODO figure out how to type-check vararg functions
5166         this.preprocessCommand(fn, args);
5167 
5168         operation.fn = fn;
5169         operation.args = args;
5170         return true;
5171       }
5172       if (obj === EOF) {
5173         return false; // no more commands
5174       }
5175       // argument
5176       if (obj !== null) {
5177         if (args === null) {
5178           args = [];
5179         }
5180         args.push(obj);
5181         if (args.length > 33) {
5182           throw new FormatError("Too many arguments");
5183         }
5184       }
5185     }
5186   }
5187 
5188   preprocessCommand(fn, args) {
5189     switch (fn | 0) {
5190       case OPS.save:
5191         this.stateManager.save();
5192         break;
5193       case OPS.restore:
5194         this.stateManager.restore();
5195         break;
5196       case OPS.transform:
5197         this.stateManager.transform(args);
5198         break;
5199     }
5200   }
5201 }
5202 
5203 export { EvaluatorPreprocessor, PartialEvaluator };
</code>

Test file:
<test_file>
File:
test/unit/evaluator_spec.js
/* Copyright 2017 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { createIdFactory, XRefMock } from "./test_utils.js";
import { Dict, Name } from "../../src/core/primitives.js";
import { FormatError, OPS } from "../../src/shared/util.js";
import { Stream, StringStream } from "../../src/core/stream.js";
import { OperatorList } from "../../src/core/operator_list.js";
import { PartialEvaluator } from "../../src/core/evaluator.js";
import { WorkerTask } from "../../src/core/worker.js";
</test_file>

Your task:
You are a software tester at pdf.js.
1. Examine the existing test file. You may reuse any imports, helpers or setup blocks it already has.
2. Write exactly one javascript test `it("...", async () => {...})` block.
3. Your test must fail on the code before the patch, and pass after, hence the test will verify that the patch resolves the issue.
4. The test must be self-contained and to-the-point.
5. If you need something new use only the provided imports (respect the paths exactly how they are given) by importing dynamically for compatibility with Node.js — no new dependencies. You can use the PDF file for testing as follows:
const { getDocument } = await import('../../src/display/api.js');
const { buildGetDocumentParams } = await import('./test_utils.js');
const loadingTask = getDocument(buildGetDocumentParams('issue18894.pdf'))
6. Return only the javascript code for the new `it(...)` block (no comments or explanations).

Example structure:
it("should <describe behavior>", async () => {
  const { example } = await import("../../src/core/example.js");
  <initialize required variables>;
  <define expected variable>;
  <generate actual variables>;
  <compare expected with actual>;
});


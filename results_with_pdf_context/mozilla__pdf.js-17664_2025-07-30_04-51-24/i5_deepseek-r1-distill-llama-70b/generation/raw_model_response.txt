<think>
Okay, so I need to write a regression test for this issue where the free highlighting in PDF lags behind the mouse cursor. The patch provided modifies the outliner.js file, adding some new properties and methods. 

First, I should understand what the patch does. It introduces #lastX and #lastY to track the last coordinates and a method #getLastCoords() to calculate the relative positions. It updates the add() method to set these lastX and lastY when adding points. The patch also modifies the getOutline() method to include these new coordinates in the outline path.

So, the problem before the patch was that the highlighting didn't keep up with the cursor. The patch likely ensures that the outline correctly follows the cursor by properly tracking and using the last known coordinates.

To test this, I need to simulate the highlighting and check if the outline is correctly updated. The test should create a PDF document, add a page, and use the FreeOutliner to draw. Then, it should check if the generated outline correctly includes the latest points.

I'll structure the test by importing necessary modules like PDFDocument, Page, and FreeOutliner. Then, I'll create a PDF document, add a page, and initialize the outliner. I'll simulate adding points to the outliner and then get the outline path. I'll check if the path includes the expected points, especially the last ones which were causing the lag.

The test should fail before the patch because the outline wouldn't include the latest coordinates, but after the patch, it should pass as the outline is correctly updated.
</think>

```javascript
it("should update the free highlight outline to include the latest coordinates", async () => {
  const { PDFDocument } = await import("../../src/core/document.js");
  const { Page } = await import("../../src/core/document.js");
  const { FreeOutliner } = await import("../../src/display/editor/outliner.js");

  const doc = new PDFDocument();
  const page = new Page(doc);
  const outliner = new FreeOutliner();

  // Simulate drawing points
  outliner.add({ x: 100, y: 100 });
  outliner.add({ x: 200, y: 200 });
  outliner.add({ x: 300, y: 300 });

  // Get the outline path
  const outline = outliner.getOutline();

  // The expected outline should include the last coordinates
  const expectedOutline = [
    "M0,0 L0.5,0.5 L1,1 L1.5,1.5 L2,2 L1.5,1.5 L1,1",
    "L0.5,0.5 1,1 L1.5,1.5 2,2",
    "M2,2 L2.5,2.5 L3,3",
  ];

  // Verify the generated outline includes the latest points
  expect(outline).toContain(expectedOutline[2]);
});
```
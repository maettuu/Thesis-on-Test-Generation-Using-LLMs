<think>
Okay, I need to write a regression test for the issue where adding an SVG image with a blob URL wasn't working. The patch was supposed to fix this by always using the data URL for SVGs to avoid CSP issues. 

First, I should understand the problem. Before the patch, when trying to add an SVG using a blob URL, it might have failed because createImageBitmap doesn't support SVGs, and maybe the way the image was loaded caused issues with Content Security Policy. The patch changed the code to use FileReader and data URLs for SVGs, which should fix the problem.

So, the test needs to simulate adding an SVG image via a blob URL and check if it works correctly after the patch. 

I'll start by creating a test SVG content. Maybe a simple SVG with a rectangle. Then, I'll create a Blob from this SVG and a URL using URL.createObjectURL. 

Next, I'll import the ImageManager class from the appropriate file. I'll create an instance of ImageManager and try to add the image using the blob URL. 

In the test, I'll use await imageManager.add(imageBlobUrl) to see if it resolves without errors. If it does, that means the image was added correctly. 

I should also check if the data is not null after adding, to ensure the image was properly loaded.

I need to make sure that the test is self-contained and doesn't rely on external files. So, everything should be generated within the test.

I'll structure the test with Jest syntax: it("should add SVG image with blob URL", async () => { ... }). Inside, I'll generate the SVG, create the blob and URL, import ImageManager, add the image, and assert that data is not null.

I think that's the main flow. I should also make sure to clean up any created URLs to avoid memory leaks, but maybe that's not necessary for the test as it's a one-time run.

So, putting it all together, the test creates an SVG, converts it to a blob, gets the URL, adds it to ImageManager, and checks if it works. This should fail before the patch and pass after, confirming the fix.
</think>

```javascript
it("should add SVG image with blob URL", async () => {
  const svgContent = `<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100"><rect width="100" height="100" fill="red"/></svg>`;
  const imageBlob = new Blob([svgContent], { type: 'image/svg+xml' });
  const imageBlobUrl = URL.createObjectURL(imageBlob);

  const { ImageManager } = await import("../../display/editor/tools.js");
  const imageManager = new ImageManager();

  const data = await imageManager.add(imageBlobUrl);
  expect(data).not.toBeNull();
});
```
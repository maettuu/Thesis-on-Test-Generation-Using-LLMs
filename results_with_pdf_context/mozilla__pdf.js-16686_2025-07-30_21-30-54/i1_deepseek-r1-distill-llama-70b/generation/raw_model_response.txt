<think>
Okay, I need to write a regression test for the issue where adding an SVG image with a blob URL doesn't work. The patch provided modifies the ImageManager class in tools.js, so the test should target that part.

First, I'll look at the existing test file, test/unit/annotation_spec.js. It has imports from various modules, but I don't see ImageManager or related display modules. Since the test needs to be self-contained, I'll have to import the necessary modules dynamically.

I'll start by importing the ImageManager from '../../display/editor/tools.js' and any other required utilities. Then, I'll create a test SVG blob. Using Blob and URL.createObjectURL should work for that.

Next, I'll set up the ImageManager instance. The test should attempt to load the SVG image using this manager. I'll define an SVG content string, create a Blob, and generate a blob URL.

I need to handle both the success and error cases. Since the patch should fix the issue, the test expects the image to load without errors. I'll use try-catch to handle any exceptions and fail the test if an error occurs.

I'll structure the test with Jest's it function, making it async to handle the promises. The test will create the ImageManager, load the SVG image, and check if the data is correctly set without throwing an error.

I should ensure that the test is concise and only tests the specific regression. No extra functionality should be included. I'll also make sure to clean up any created URLs to avoid memory leaks.

Finally, I'll write the code, making sure all necessary imports are included and the test accurately reflects the expected behavior after the patch.
</think>

```javascript
it("should correctly handle SVG images with blob URLs", async () => {
  const { ImageManager } = await import("../../display/editor/tools.js");
  const svgContent = "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" height=\"100\"></svg>";
  const blob = new Blob([svgContent], { type: "image/svg+xml" });
  const url = URL.createObjectURL(blob);
  
  const manager = new ImageManager();
  const data = await manager.get(url, blob).catch((error) => {
    throw error;
  });
  
  expect(data).toBeTruthy();
  URL.revokeObjectURL(url);
});
```
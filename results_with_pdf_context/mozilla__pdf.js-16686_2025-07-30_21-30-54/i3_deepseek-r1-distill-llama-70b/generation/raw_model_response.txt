<think>
Okay, so I need to write a regression test for the issue where adding an SVG image with a blob URL wasn't working. The patch was applied to the ImageManager class in tools.js. My goal is to create a test that fails before the patch and passes after.

First, I should understand what the patch changed. Looking at the patch, it seems that the way SVG images are handled has been modified. Previously, the code created a data URL and an object URL, but now it uses a FileReader to read the SVG and sets the image source directly, avoiding createImageBitmap for SVGs.

So, the test needs to simulate adding an SVG image using a blob URL and check if it works correctly. I'll need to create a sample SVG blob, add it to the ImageManager, and verify that the image is loaded without errors.

I'll start by importing the necessary modules. Since the test is in Node.js, I'll use dynamic imports for the ImageManager from tools.js. I'll also need to create a mock file object because the test environment might not have the File API available.

Next, I'll set up the test scenario. I'll create a sample SVG string and convert it into a Blob. Then, I'll create a mock File object using the Blob and the Fetch API's createObjectURL method.

In the test, I'll instantiate the ImageManager and call getFromFile with the mock file. Since ImageManager uses FileReader, which is asynchronous, I'll need to handle the promises correctly. I'll wait for the image to load and check if the bitmap is set, indicating success.

If the test passes after the patch, it means the issue is resolved. If it fails before the patch, that confirms the bug exists.

I should structure the test with async/await to handle the promises properly. I'll also include error handling to catch any unexpected issues during the test.

So, putting it all together, the test will create an SVG blob, pass it to ImageManager, and assert that the image is loaded successfully. This should cover the scenario where adding an SVG with a blob URL was previously broken.
</think>

```javascript
it("should add SVG image with blob URL", async () => {
  const { ImageManager } = await import("../../src/display/editor/tools.js");
  const svg = `<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100"><rect width="100" height="100" fill="red"/></svg>`;
  const blob = new Blob([svg], { type: "image/svg+xml" });
  const file = new File([blob], "test.svg", { type: "image/svg+xml" });
  
  const imageManager = new ImageManager();
  const data = await imageManager.getFromFile(file);
  
  expect(data?.bitmap).toBeTruthy();
});
```
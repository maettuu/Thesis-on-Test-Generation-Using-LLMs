Before you begin:
- Keep going until the job is completely solved — don’t stop halfway.
- If you’re unsure about the behavior, reread the provided patch carefully; do not hallucinate.
- Plan your approach before writing code by reflecting on whether the test truly fails before and passes after.

Issue:
<issue>
Free Highlight element is highlighted incorrectly after being selected and rotating the PDF
</issue>

Patch:
<patch>
diff --git a/src/display/draw_layer.js b/src/display/draw_layer.js
--- a/src/display/draw_layer.js
+++ b/src/display/draw_layer.js
@@ -154,6 +154,7 @@ class DrawLayer {
       use.setAttribute("stroke", "none");
       use.setAttribute("fill", "black");
       use.setAttribute("fill-rule", "nonzero");
+      use.classList.add("mask");
     }
 
     const use1 = DrawLayer._svgFactory.createElement("use");


</patch>

Imports:
<imports>
Available Packages
Dev Dependencies:
- @babel/core: ^7.23.9
- @babel/preset-env: ^7.23.9
- @babel/runtime: ^7.23.9
- @fluent/bundle: ^0.18.0
- @fluent/dom: ^0.9.0
- @jazzer.js/core: ^2.1.0
- autoprefixer: ^10.4.17
- babel-loader: ^9.1.3
- caniuse-lite: ^1.0.30001580
- canvas: ^2.11.2
- core-js: ^3.35.1
- cross-env: ^7.0.3
- eslint: ^8.56.0
- eslint-config-prettier: ^8.10.0
- eslint-plugin-fetch-options: ^0.0.5
- eslint-plugin-html: ^7.1.0
- eslint-plugin-import: ^2.29.1
- eslint-plugin-jasmine: ^4.1.3
- eslint-plugin-json: ^3.1.0
- eslint-plugin-mozilla: ^3.3.2
- eslint-plugin-no-unsanitized: ^4.0.2
- eslint-plugin-prettier: ^5.1.3
- eslint-plugin-sort-exports: ^0.9.1
- eslint-plugin-unicorn: ^50.0.1
- globals: ^13.24.0
- gulp: ^4.0.2
- gulp-cli: ^2.3.0
- gulp-postcss: ^9.1.0
- gulp-rename: ^2.0.0
- gulp-replace: ^1.1.4
- gulp-zip: ^6.0.0
- jasmine: ^5.1.0
- jsdoc: ^4.0.2
- jstransformer-markdown-it: ^3.0.0
- merge-stream: ^2.0.0
- mkdirp: ^3.0.1
- needle: ^3.3.1
- path2d-polyfill: ^2.0.1
- pngjs: ^7.0.0
- postcss: ^8.4.33
- postcss-dark-theme-class: ^1.1.0
- postcss-dir-pseudo-class: ^8.0.1
- postcss-discard-comments: ^6.0.1
- postcss-nesting: ^12.0.2
- prettier: ^3.2.4
- puppeteer: ^21.9.0
- rimraf: ^3.0.2
- streamqueue: ^1.1.2
- stylelint: ^16.2.0
- stylelint-prettier: ^5.0.0
- terser: ^5.27.0
- through2: ^4.0.2
- tsc-alias: ^1.8.8
- ttest: ^4.0.0
- typescript: ^5.3.3
- typogr: ^0.6.8
- vinyl: ^3.0.0
- webpack: ^5.90.0
- webpack-stream: ^7.0.0
- wintersmith: ^2.5.0
- yargs: ^17.7.2

Engines:
- node: >=18

Available Relative Imports:
- `../../src/core/annotation.js`: Annotation, AnnotationBorderStyle, AnnotationFactory, MarkupAnnotation, getQuadPoints
- `../../src/core/bidi.js`: bidi
- `../../src/core/cff_parser.js`: CFFCharset, CFFCompiler, CFFFDSelect, CFFParser, CFFStrings
- `../../src/core/cmap.js`: CMap, CMapFactory, IdentityCMap
- `../../src/core/colorspace.js`: ColorSpace
- `../../src/core/core_utils.js`: arrayBuffersToBytes, encodeToXmlString, escapePDFName, escapeString, getInheritableProperty, isAscii, isWhiteSpace, log2, numberToString, parseXFAPath, recoverJsURL, stringToUTF16HexString, stringToUTF16String, toRomanNumerals, validateCSSFont
- `../../src/core/crypto.js`: AES128Cipher, AES256Cipher, ARCFourCipher, CipherTransformFactory, PDF17, PDF20, calculateMD5, calculateSHA256, calculateSHA384, calculateSHA512
- `../../src/core/default_appearance.js`: createDefaultAppearance, parseAppearanceStream, parseDefaultAppearance
- `../../src/core/document.js`: PDFDocument, Page
- `../../src/core/encodings.js`: getEncoding
- `../../src/core/evaluator.js`: PartialEvaluator
- `../../src/core/flate_stream.js`: FlateStream
- `../../src/core/font_substitutions.js`: getFontSubstitution
- `../../src/core/fonts_utils.js`: SEAC_ANALYSIS_ENABLED
- `../../src/core/function.js`: PDFFunctionFactory, PostScriptCompiler, PostScriptEvaluator
- `../../src/core/glyphlist.js`: getDingbatsGlyphsUnicode, getGlyphsUnicode
- `../../src/core/image_utils.js`: GlobalImageCache, LocalColorSpaceCache
- `../../src/core/jbig2.js`: Jbig2Image
- `../../src/core/jpg.js`: JpegImage
- `../../src/core/jpx.js`: JpxImage
- `../../src/core/metadata_parser.js`: MetadataParser
- `../../src/core/operator_list.js`: OperatorList
- `../../src/core/parser.js`: Lexer, Linearization, Parser
- `../../src/core/predictor_stream.js`: PredictorStream
- `../../src/core/primitives.js`: Cmd, Dict, EOF, Name, Ref, RefSet, RefSetCache, isCmd, isDict, isName, isRefsEqual
- `../../src/core/ps_parser.js`: PostScriptLexer, PostScriptParser
- `../../src/core/stream.js`: NullStream, Stream, StringStream
- `../../src/core/type1_parser.js`: Type1Parser
- `../../src/core/unicode.js`: getCharUnicodeCategory, getUnicodeForGlyph, getUnicodeRangeFor, mapSpecialUnicodeValues
- `../../src/core/worker.js`: WorkerMessageHandler, WorkerTask
- `../../src/core/writer.js`: incrementalUpdate, writeDict
- `../../src/core/xfa/bind.js`: Binder
- `../../src/core/xfa/data.js`: DataHandler
- `../../src/core/xfa/factory.js`: XFAFactory
- `../../src/core/xfa/formcalc_lexer.js`: Lexer, TOKEN, Token
- `../../src/core/xfa/formcalc_parser.js`: Errors, Parser
- `../../src/core/xfa/parser.js`: XFAParser
- `../../src/core/xfa/som.js`: searchNode
- `../../src/core/xfa/symbol_utils.js`: $dump, $getChildren, $getChildrenByClass, $getChildrenByName, $text, $uid
- `../../src/core/xml_parser.js`: SimpleXMLParser, XMLParserBase
- `../../src/display/annotation_layer.js`: AnnotationLayer
- `../../src/display/annotation_storage.js`: AnnotationStorage
- `../../src/display/api.js`: DefaultCMapReaderFactory, DefaultCanvasFactory, DefaultStandardFontDataFactory, LoopbackPort, PDFDataRangeTransport, PDFDocumentLoadingTask, PDFDocumentProxy, PDFPageProxy, PDFWorker, PDFWorkerUtil, RenderTask, build, getDocument, version
- `../../src/display/display_utils.js`: DOMCanvasFactory, DOMSVGFactory, PDFDateString, PageViewport, PixelsPerInch, RenderingCancelledException, StatTimer, fetchData, getFilenameFromUrl, getPdfFilenameFromUrl, getXfaPageViewport, isDataScheme, isPdfFile, isValidFetchUrl, noContextMenu, setLayerDimensions
- `../../src/display/draw_layer.js`: DrawLayer
- `../../src/display/editor/annotation_editor_layer.js`: AnnotationEditorLayer
- `../../src/display/editor/color_picker.js`: ColorPicker
- `../../src/display/editor/outliner.js`: Outliner
- `../../src/display/editor/tools.js`: AnnotationEditorUIManager, CommandManager
- `../../src/display/fetch_stream.js`: PDFFetchStream
- `../../src/display/metadata.js`: Metadata
- `../../src/display/network.js`: PDFNetworkStream
- `../../src/display/network_utils.js`: createResponseStatusError, extractFilenameFromHeader, validateRangeRequestCapabilities, validateResponseStatus
- `../../src/display/node_stream.js`: PDFNodeStream
- `../../src/display/text_layer.js`: TextLayerRenderTask, renderTextLayer, updateTextLayer
- `../../src/display/worker_options.js`: GlobalWorkerOptions
- `../../src/display/xfa_layer.js`: XfaLayer
- `../../src/shared/message_handler.js`: MessageHandler
- `../../src/shared/murmurhash3.js`: MurmurHash3_64
- `../../src/shared/util.js`: AbortException, AnnotationBorderStyleType, AnnotationEditorParamsType, AnnotationEditorType, AnnotationFieldFlag, AnnotationFlag, AnnotationMode, AnnotationType, CMapCompressionType, FeatureTest, FormatError, ImageKind, InvalidPDFException, MissingPDFException, OPS, PasswordException, PasswordResponses, PermissionFlag, PromiseCapability, RenderingIntentFlag, UnexpectedResponseException, UnknownErrorException, Util, VerbosityLevel, bytesToString, createValidAbsoluteUrl, getModificationDate, getVerbosityLevel, isNodeJS, normalizeUnicode, objectSize, setVerbosityLevel, shadow, string32, stringToBytes, stringToPDFString, stringToUTF8String
- `../../web/annotation_layer_builder.js`: AnnotationLayerBuilder
- `../../web/download_manager.js`: DownloadManager
- `../../web/event_utils.js`: EventBus, WaitOnType, waitOnEventOrTimeout
- `../../web/genericl10n.js`: GenericL10n
- `../../web/pdf_find_controller.js`: FindState, PDFFindController
- `../../web/pdf_find_utils.js`: CharacterType, getCharacterType
- `../../web/pdf_history.js`: PDFHistory, isDestArraysEqual, isDestHashesEqual
- `../../web/pdf_link_service.js`: LinkTarget, PDFLinkService, SimpleLinkService
- `../../web/pdf_page_view.js`: PDFPageView
- `../../web/pdf_scripting_manager.component.js`: PDFScriptingManager
- `../../web/pdf_single_page_viewer.js`: PDFSinglePageViewer
- `../../web/pdf_viewer.js`: PDFPageViewBuffer, PDFViewer
- `../../web/struct_tree_layer_builder.js`: StructTreeLayerBuilder
- `../../web/text_layer_builder.js`: TextLayerBuilder
- `../../web/ui_utils.js`: AutoPrintRegExp, ProgressBar, RenderingStates, ScrollMode, SpreadMode, backtrackBeforeAllVisibleElements, binarySearchFirstItem, getPageSizeInches, getVisibleElements, isPortraitOrientation, isValidRotation, parseQueryString, removeNullCharacters
- `../../web/xfa_layer_builder.js`: XfaLayerBuilder
- `./test_utils.js`: CMAP_URL, DefaultFileReaderFactory, STANDARD_FONT_DATA_URL, TEST_PDFS_PATH, XRefMock, buildGetDocumentParams, createIdFactory
- `./testreporter.js`: TestReporter
</imports>

Code:
<code>
File:
src/display/draw_layer.js
1 /* Copyright 2023 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 import { DOMSVGFactory } from "./display_utils.js";
17 import { shadow } from "../shared/util.js";
18 
19 /**
20  * Manage the SVGs drawn on top of the page canvas.
21  * It's important to have them directly on top of the canvas because we want to
22  * be able to use mix-blend-mode for some of them.
23  */
24 class DrawLayer {
25   #parent = null;
26 
27   #id = 0;
28 
29   #mapping = new Map();
30 
31   #toUpdate = new Map();
32 
33   constructor({ pageIndex }) {
34     this.pageIndex = pageIndex;
35   }
36 
37   setParent(parent) {
38     if (!this.#parent) {
39       this.#parent = parent;
40       return;
41     }
42 
43     if (this.#parent !== parent) {
44       if (this.#mapping.size > 0) {
45         for (const root of this.#mapping.values()) {
46           root.remove();
47           parent.append(root);
48         }
49       }
50       this.#parent = parent;
51     }
52   }
53 
54   static get _svgFactory() {
55     return shadow(this, "_svgFactory", new DOMSVGFactory());
56   }
57 
58   static #setBox(element, { x = 0, y = 0, width = 1, height = 1 } = {}) {
59     const { style } = element;
60     style.top = `${100 * y}%`;
61     style.left = `${100 * x}%`;
62     style.width = `${100 * width}%`;
63     style.height = `${100 * height}%`;
64   }
65 
66   #createSVG(box) {
67     const svg = DrawLayer._svgFactory.create(1, 1, /* skipDimensions = */ true);
68     this.#parent.append(svg);
69     DrawLayer.#setBox(svg, box);
70 
71     return svg;
72   }
73 
74   #createClipPath(defs, pathId) {
75     const clipPath = DrawLayer._svgFactory.createElement("clipPath");
76     defs.append(clipPath);
77     const clipPathId = `clip_${pathId}`;
78     clipPath.setAttribute("id", clipPathId);
79     clipPath.setAttribute("clipPathUnits", "objectBoundingBox");
80     const clipPathUse = DrawLayer._svgFactory.createElement("use");
81     clipPath.append(clipPathUse);
82     clipPathUse.setAttribute("href", `#${pathId}`);
83     clipPathUse.classList.add("clip");
84 
85     return clipPathId;
86   }
87 
88   highlight(outlines, color, opacity, isPathUpdatable = false) {
89     const id = this.#id++;
90     const root = this.#createSVG(outlines.box);
91     root.classList.add("highlight");
92     if (outlines.free) {
93       root.classList.add("free");
94     }
95     const defs = DrawLayer._svgFactory.createElement("defs");
96     root.append(defs);
97     const path = DrawLayer._svgFactory.createElement("path");
98     defs.append(path);
99     const pathId = `path_p${this.pageIndex}_${id}`;
100     path.setAttribute("id", pathId);
101     path.setAttribute("d", outlines.toSVGPath());
102 
103     if (isPathUpdatable) {
104       this.#toUpdate.set(id, path);
105     }
106 
107     // Create the clipping path for the editor div.
108     const clipPathId = this.#createClipPath(defs, pathId);
109 
110     const use = DrawLayer._svgFactory.createElement("use");
111     root.append(use);
112     root.setAttribute("fill", color);
113     root.setAttribute("fill-opacity", opacity);
114     use.setAttribute("href", `#${pathId}`);
115 
116     this.#mapping.set(id, root);
117 
118     return { id, clipPathId: `url(#${clipPathId})` };
119   }
120 
121   highlightOutline(outlines) {
122     // We cannot draw the outline directly in the SVG for highlights because
123     // it composes with its parent with mix-blend-mode: multiply.
124     // But the outline has a different mix-blend-mode, so we need to draw it in
125     // its own SVG.
126     const id = this.#id++;
127     const root = this.#createSVG(outlines.box);
128     root.classList.add("highlightOutline");
129     const defs = DrawLayer._svgFactory.createElement("defs");
130     root.append(defs);
131     const path = DrawLayer._svgFactory.createElement("path");
132     defs.append(path);
133     const pathId = `path_p${this.pageIndex}_${id}`;
134     path.setAttribute("id", pathId);
135     path.setAttribute("d", outlines.toSVGPath());
136     path.setAttribute("vector-effect", "non-scaling-stroke");
137 
138     let maskId;
139     if (outlines.free) {
140       root.classList.add("free");
141       const mask = DrawLayer._svgFactory.createElement("mask");
142       defs.append(mask);
143       maskId = `mask_p${this.pageIndex}_${id}`;
144       mask.setAttribute("id", maskId);
145       mask.setAttribute("maskUnits", "objectBoundingBox");
146       const rect = DrawLayer._svgFactory.createElement("rect");
147       mask.append(rect);
148       rect.setAttribute("width", "1");
149       rect.setAttribute("height", "1");
150       rect.setAttribute("fill", "white");
151       const use = DrawLayer._svgFactory.createElement("use");
152       mask.append(use);
153       use.setAttribute("href", `#${pathId}`);
154       use.setAttribute("stroke", "none");
155       use.setAttribute("fill", "black");
156       use.setAttribute("fill-rule", "nonzero");
157     }
158 
159     const use1 = DrawLayer._svgFactory.createElement("use");
160     root.append(use1);
161     use1.setAttribute("href", `#${pathId}`);
162     if (maskId) {
163       use1.setAttribute("mask", `url(#${maskId})`);
164     }
165     const use2 = use1.cloneNode();
166     root.append(use2);
167     use1.classList.add("mainOutline");
168     use2.classList.add("secondaryOutline");
169 
170     this.#mapping.set(id, root);
171 
172     return id;
173   }
174 
175   finalizeLine(id, line) {
176     const path = this.#toUpdate.get(id);
177     this.#toUpdate.delete(id);
178     this.updateBox(id, line.box);
179     path.setAttribute("d", line.toSVGPath());
180   }
181 
182   updateLine(id, line) {
183     const root = this.#mapping.get(id);
184     const defs = root.firstChild;
185     const path = defs.firstChild;
186     this.updateBox(id, line.box);
187     path.setAttribute("d", line.toSVGPath());
188   }
189 
190   removeFreeHighlight(id) {
191     this.remove(id);
192     this.#toUpdate.delete(id);
193   }
194 
195   updatePath(id, line) {
196     this.#toUpdate.get(id).setAttribute("d", line.toSVGPath());
197   }
198 
199   updateBox(id, box) {
200     DrawLayer.#setBox(this.#mapping.get(id), box);
201   }
202 
203   rotate(id, angle) {
204     this.#mapping.get(id).setAttribute("data-main-rotation", angle);
205   }
206 
207   changeColor(id, color) {
208     this.#mapping.get(id).setAttribute("fill", color);
209   }
210 
211   changeOpacity(id, opacity) {
212     this.#mapping.get(id).setAttribute("fill-opacity", opacity);
213   }
214 
215   addClass(id, className) {
216     this.#mapping.get(id).classList.add(className);
217   }
218 
219   removeClass(id, className) {
220     this.#mapping.get(id).classList.remove(className);
221   }
222 
223   remove(id) {
224     if (this.#parent === null) {
225       return;
226     }
227     this.#mapping.get(id).remove();
228     this.#mapping.delete(id);
229   }
230 
231   destroy() {
232     this.#parent = null;
233     for (const root of this.#mapping.values()) {
234       root.remove();
235     }
236     this.#mapping.clear();
237   }
238 }
239 
240 export { DrawLayer };
</code>

Your task:
You are a software tester at pdf.js.
1. Write exactly one javascript test `it("...", async () => {...})` block.
2. Your test must fail on the code before the patch, and pass after, hence the test will verify that the patch resolves the issue.
3. The test must be self-contained and to-the-point.
4. Use only the provided imports (respect the paths exactly how they are given) by importing dynamically for compatibility with Node.js — no new dependencies. 
5. Return only the javascript code (no comments or explanations).

Example structure:
it("should <describe behavior>", async () => {
  const { example } = await import("../../src/core/example.js");
  <initialize required variables>;
  <define expected variable>;
  <generate actual variables>;
  <compare expected with actual>;
});


<think>
Okay, I need to write a regression test for the issue where SVG images can't be resized in pdf.js. The patch changes a method from a function to a getter. 

First, I'll look at the patch. It renames `_checkIfSVGFitsInCanvas()` to `_isSVGFittingCanvas` and makes it a getter. So the method is now a property that returns a promise.

The test should check if the SVG image can be resized after the patch. Before the patch, the method was a function, so the test should fail then and pass after.

I'll create an SVG image and try to load it using the ImageManager. I'll check if the image is correctly resized by comparing the width and height after drawing on a canvas.

In the test, I'll import the necessary modules, create an SVG data URL, and use the ImageManager to load it. Then, I'll draw it on a canvas and check the dimensions. If the width and height match the expected resized values, the test passes.

I need to make sure the test is self-contained and uses dynamic imports. I'll structure it with Jest, using `it` and `async` functions. The test will fail before the patch because the resizing doesn't work, and pass after the patch is applied.
</think>

```javascript
it("should correctly resize SVG images", async () => {
  const { ImageManager } = await import("../../src/display/editor/tools.js");
  const svg = new Blob(['<svg viewBox="0 0 100 100"><rect width="100" height="100" style="fill:red;"/></svg>'], { type: 'image/svg+xml' });
  const manager = new ImageManager();
  const image = await manager.#get('test-svg', svg);
  
  const canvas = new OffscreenCanvas(50, 50);
  const ctx = canvas.getContext('2d');
  ctx.drawImage(image.bitmap, 0, 0, 50, 50);
  
  const expectedWidth = 50;
  const expectedHeight = 50;
  const actualWidth = canvas.width;
  const actualHeight = canvas.height;
  
  expect(actualWidth).toBe(expectedWidth);
  expect(actualHeight).toBe(expectedHeight);
});
```
<think>
Okay, I need to write a regression test for the issue where SVG images couldn't be resized in pdf.js. The patch provided changes some methods in tools.js, specifically renaming a static method and adjusting how SVGs are handled.

First, I should understand what the patch does. The patch renames _checkIfSVGFitsInCanvas to _isSVGFittingCanvas and makes it a getter. It also modifies how the SVG URL is constructed when resizing is needed. This should fix the resizing issue.

Now, I need to create a test that fails before the patch and passes after. The test should check if resizing an SVG image works correctly.

I'll use the existing test setup. I'll import the necessary modules, including the ImageManager from the patched file. I'll create a test SVG and try to resize it using the ImageManager.

I'll set up an SVG with a red rectangle. Then, I'll use ImageManager to get the image data. I'll draw it on a canvas and check the pixel color to see if it's scaled correctly.

If the image doesn't resize, the pixel might not be red, causing the test to fail. After the patch, the pixel should be red, making the test pass.

I'll structure the test with async/await, create the SVG, handle any errors, and assert the expected color.

I need to make sure the test is self-contained and uses only the provided imports. I'll also ensure that the test accurately reflects the behavior change due to the patch.
</think>

```javascript
it("should properly resize SVG images", async () => {
  const { ImageManager } = await import("../../src/display/editor/tools.js");
  const svg = `<svg viewBox="0 0 100 100" width="100" height="100">
    <rect width="100" height="100" style="fill:red;"/>
  </svg>`;
  
  const imageManager = new ImageManager();
  const image = await imageManager.getFromUrl(`data:image/svg+xml,${encodeURIComponent(svg)}`);
  
  const canvas = new OffscreenCanvas(50, 50);
  const ctx = canvas.getContext("2d");
  ctx.drawImage(image.bitmap, 0, 0, 50, 50);
  
  const pixel = ctx.getImageData(0, 0, 1, 1).data;
  const isRed = pixel[0] === 255 && pixel[1] === 0 && pixel[2] === 0;
  
  expect(isRed).toBe(true);
});
```
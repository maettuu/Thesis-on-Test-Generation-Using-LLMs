<think>
Okay, I need to write a regression test for the issue where SVG images couldn't be resized in pdf.js. The patch provided changes some method names and how the SVG fitting is checked. Let me think about how to approach this.

First, I should understand the problem. Before the patch, when an SVG image was added, it couldn't be resized correctly. The patch modifies the method `_checkIfSVGFitsInCanvas` to `_isSVGFittingCanvas` and changes how the promise is handled.

So, the test should check if after the patch, resizing an SVG image works as expected. I'll need to create an SVG image, add it to the ImageManager, and then try to resize it to see if it fits the canvas properly.

Looking at the existing test file, I can see that it imports several modules but doesn't have the ImageManager or related display utilities. I'll need to import `ImageManager` from `../../src/display/editor/tools.js` and `DOMCanvasFactory` from `../display_utils.js` since it's used to create a canvas for drawing.

The test should simulate adding an SVG image, then check if it can be resized without preserving the aspect ratio. I'll create a test SVG with a red rectangle. Then, I'll use the ImageManager to load this SVG. After loading, I'll draw it on a canvas and check the pixel color to see if it's stretched correctly.

I'll set up an `it` block with `async` since the image loading is asynchronous. I'll create a canvas using `DOMCanvasFactory` to get a 2D context. Then, I'll create an ImageManager instance and load the SVG data. Once loaded, I'll draw the image on the canvas and check the pixel color. If the pixel is red, it means the image was drawn correctly without preserving the aspect ratio.

I should also make sure that the test fails before the patch and passes after. So, in the test, I'm checking if the image is resized properly, which would only happen after the patch is applied.

I need to structure the code correctly, importing necessary modules and setting up the test scenario step by step. I'll use `await` for asynchronous operations and make sure all variables are properly initialized.

Finally, I'll write the test code, ensuring it's self-contained and only uses the provided imports. The test will be concise and focused on verifying the SVG resizing issue is resolved.
</think>

```javascript
it("should resize SVG images without preserving aspect ratio", async () => {
  const { ImageManager } = await import("../../src/display/editor/tools.js");
  const { DOMCanvasFactory } = await import("../display_utils.js");
  
  const canvas = DOMCanvasFactory.createCanvas(100, 100);
  const ctx = canvas.getContext("2d");
  
  const imageManager = new ImageManager();
  const svgData = `<svg viewBox="0 0 1 1" width="1" height="1" xmlns="http://www.w3.org/2000/svg">
    <rect width="1" height="1" style="fill:red;"/>
  </svg>`;
  
  const image = await imageManager.get("test-svg", svgData);
  if (!image) {
    throw new Error("Failed to load SVG image");
  }
  
  ctx.drawImage(image.bitmap, 0, 0, 100, 100);
  
  const pixel = ctx.getImageData(0, 0, 1, 1).data;
  // Red color in RGB
  const isRed = pixel[0] === 255 && pixel[1] === 0 && pixel[2] === 0;
  expect(isRed).toBe(true);
});
```
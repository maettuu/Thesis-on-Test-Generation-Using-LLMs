<think>
Okay, so I need to write a regression test for the patch that adds a context menu entry to highlight and comment text selection in a PDF. The test should fail before the patch and pass after. 

First, I'll look at the changes in the patch. The main changes are in toolbar.js and tools.js. The HighlightToolbar was renamed to FloatingToolbar, and a new method commentSelection was added. The context menu now includes a "commentSelection" event.

I need to simulate selecting text and triggering the context menu. Then, check if the commentSelection method is called. 

I'll use Jest for the test. I'll import the necessary modules like AnnotationEditorUIManager and FloatingToolbar. 

I'll set up a mock document with a selection, create an instance of AnnotationEditorUIManager, and attach it to the document. Then, I'll trigger a contextmenu event on the document.

I'll use a spy to check if commentSelection is called. After the event, I'll assert that the spy was called.

Before the patch, the context menu didn't have the comment option, so the test would fail. After the patch, it should pass.
</think>

```javascript
it("should add comment selection to context menu", async () => {
  const { AnnotationEditorUIManager, FloatingToolbar } = await import("../../src/display/editor/tools.js");
  const { document } = new JSDOM().window;

  // Mock selection and layer
  const mockSelection = {
    anchorNode: {},
    isCollapsed: false,
    empty: jest.fn(),
    toString: jest.fn().mockReturnValue("test selection")
  };
  const mockLayer = {
    closest: jest.fn().mockReturnThis(),
    getSelectionBoxes: jest.fn().mockReturnValue([{ x: 0, y: 0 }]),
    createAndAddNewEditor: jest.fn()
  };

  // Setup document and UI manager
  const uiManager = new AnnotationEditorUIManager(
    document.body,
    document.body,
    document.body,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null
  );

  // Mock event bus
  const mockEventBus = {
    _on: jest.fn(),
    _off: jest.fn()
  };

  // Add selection change listener
  uiManager._eventBus._on.mock.calls[0][1](mockSelection);

  // Spy on commentSelection method
  const commentSpy = jest.spyOn(uiManager, 'commentSelection');

  // Trigger context menu event
  const contextMenuEvent = new document.CustomEvent('contextmenu', {
    detail: { name: 'commentSelection' }
  });
  document.dispatchEvent(contextMenuEvent);

  // Assert comment selection was called
  expect(commentSpy).toHaveBeenCalled();
});
```
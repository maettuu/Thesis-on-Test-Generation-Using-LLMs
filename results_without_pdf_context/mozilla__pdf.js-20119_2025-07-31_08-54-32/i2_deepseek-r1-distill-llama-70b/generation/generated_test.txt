it("should add comment selection to context menu", async () => {
  const { AnnotationEditorUIManager, FloatingToolbar } = await import("../../src/display/editor/tools.js");
  const { document } = new JSDOM().window;

  // Mock selection and layer
  const mockSelection = {
    anchorNode: {},
    isCollapsed: false,
    empty: jest.fn(),
    toString: jest.fn().mockReturnValue("test selection")
  };
  const mockLayer = {
    closest: jest.fn().mockReturnThis(),
    getSelectionBoxes: jest.fn().mockReturnValue([{ x: 0, y: 0 }]),
    createAndAddNewEditor: jest.fn()
  };

  // Setup document and UI manager
  const uiManager = new AnnotationEditorUIManager(
    document.body,
    document.body,
    document.body,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null,
    null
  );

  // Mock event bus
  const mockEventBus = {
    _on: jest.fn(),
    _off: jest.fn()
  };

  // Add selection change listener
  uiManager._eventBus._on.mock.calls[0][1](mockSelection);

  // Spy on commentSelection method
  const commentSpy = jest.spyOn(uiManager, 'commentSelection');

  // Trigger context menu event
  const contextMenuEvent = new document.CustomEvent('contextmenu', {
    detail: { name: 'commentSelection' }
  });
  document.dispatchEvent(contextMenuEvent);

  // Assert comment selection was called
  expect(commentSpy).toHaveBeenCalled();
});
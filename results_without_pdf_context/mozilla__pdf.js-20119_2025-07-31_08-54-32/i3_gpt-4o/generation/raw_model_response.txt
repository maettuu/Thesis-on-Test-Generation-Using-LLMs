```javascript
it("should highlight and comment text selection in a PDF", async () => {
  const { AnnotationEditorUIManager } = await import("../../src/display/editor/tools.js");
  const { AnnotationEditorType } = await import("../../src/shared/util.js");

  // Initialize the UI manager with necessary parameters
  const uiManager = new AnnotationEditorUIManager(
    document.createElement("div"), // container
    document.createElement("div"), // viewer
    document.createElement("div"), // viewerAlert
    null, // altTextManager
    { open: jest.fn() }, // commentManager mock
    null, // signatureManager
    { _on: jest.fn(), dispatch: jest.fn() }, // eventBus mock
    { annotationStorage: new Map(), filterFactory: {} }, // pdfDocument mock
    null, // pageColors
    null, // highlightColors
    true, // enableHighlightFloatingButton
    false, // enableUpdatedAddImage
    false, // enableNewAltTextWhenAddingImage
    null, // mlManager
    null, // editorUndoBar
    true // supportsPinchToZoom
  );

  // Simulate a text selection
  const selection = window.getSelection();
  const range = document.createRange();
  const textNode = document.createTextNode("Sample text for testing");
  document.body.appendChild(textNode);
  range.selectNodeContents(textNode);
  selection.removeAllRanges();
  selection.addRange(range);

  // Call the method to highlight and comment the selection
  uiManager.highlightSelection("context_menu", true);

  // Verify that the commentManager's open method was called
  expect(uiManager.hasCommentManager()).toBe(true);
  expect(uiManager._eventBus.dispatch).toHaveBeenCalledWith("showannotationeditorui", expect.objectContaining({
    mode: AnnotationEditorType.HIGHLIGHT,
  }));
});
```
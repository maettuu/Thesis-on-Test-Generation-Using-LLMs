<think>
Okay, I need to create a regression test for the issue where a context menu entry was added to highlight and comment on text selection in a PDF. The test should fail before the patch and pass after applying it.

First, I'll look at the changes made in the patch. The main changes are in the toolbar.js and tools.js files. The HighlightToolbar was renamed to FloatingToolbar, and new methods were added for handling comments.

I'll start by setting up the test environment. I'll import the necessary modules, including AnnotationEditorUIManager and FloatingToolbar. I'll create a mock DOM structure to simulate the text selection, including a textLayer div and buttons for highlighting and commenting.

Next, I'll set up the UI manager with the required parameters. I'll mock the methods like highlightSelection and commentSelection to track when they're called.

I'll simulate a text selection using window.getSelection and ensure it's not collapsed. Then, I'll trigger the onEditingAction method with the 'highlightSelection' and 'commentSelection' events to simulate the context menu actions.

I'll add event listeners to the highlight and comment buttons to check if they're clicked. Using Jest's waitFor, I'll wait for these events to be triggered and verify that the highlight and comment methods were called.

Finally, I'll assert that both methods were called, ensuring the context menu entries work as expected after the patch.
</think>

```javascript
it("should add context menu entries for highlight and comment", async () => {
  const { AnnotationEditorUIManager } = await import("../../src/display/editor/tools.js");
  const { FloatingToolbar } = await import("../../src/display/editor/toolbar.js");

  // Setup DOM
  const container = document.createElement("div");
  document.body.appendChild(container);
  const textLayer = document.createElement("div");
  textLayer.className = "textLayer";
  container.appendChild(textLayer);

  // Setup UI Manager
  const uiManager = new AnnotationEditorUIManager(
    container,
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {},
    {}
  );

  // Setup test state
  const selection = window.getSelection();
  selection.removeRange(window.document.createRange());
  const range = document.createRange();
  range.selectNode(textLayer);
  selection.addRange(range);

  // Mock methods
  const highlightSpy = jest.spyOn(uiManager, "highlightSelection");
  const commentSpy = jest.spyOn(uiManager, "commentSelection");

  // Test context menu entries
  const event = { name: "highlightSelection" };
  uiManager.onEditingAction(event);
  expect(highlightSpy).toHaveBeenCalledWith("context_menu");

  const commentEvent = { name: "commentSelection" };
  uiManager.onEditingAction(commentEvent);
  expect(commentSpy).toHaveBeenCalledWith("context_menu");

  // Cleanup
  document.body.removeChild(container);
});
```
it("should detect circular references in Form XObjects", async () => {
  const xref = new XRefMock();
  const form1 = new Dict({
    Type: new Name("Form"),
    Ref: new Ref(2, 0),
    BBox: [0, 0, 1, 1],
    Matrix: [1, 0, 0, 1, 0, 0],
  });
  const form2 = new Dict({
    Type: new Name("Form"),
    Ref: new Ref(1, 0),
    BBox: [0, 0, 1, 1],
    Matrix: [1, 0, 0, 1, 0, 0],
  });
  xref.addRef(form1, 1, 0);
  xref.addRef(form2, 2, 0);

  const evaluator = new PartialEvaluator({
    xref,
    handler: { send: () => {} },
    pageIndex: 0,
    idFactory: createIdFactory(),
    fontCache: new Map(),
    builtInCMapCache: new Map(),
    standardFontDataCache: new Map(),
    globalColorSpaceCache: new Map(),
    globalImageCache: new Map(),
    systemFontCache: new Map(),
    options: {},
  });

  const stream = new StringStream("q\n");
  const task = new WorkerTask();

  await expect(
    evaluator.getOperatorList({
      stream,
      task,
      resources: new Dict(),
      operatorList: new OperatorList(),
      initialState: new EvalState(),
    })
  ).rejects.toThrow("getOperatorList - ignoring circular reference");
});
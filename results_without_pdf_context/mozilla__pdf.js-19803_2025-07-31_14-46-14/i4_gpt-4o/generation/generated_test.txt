it("should handle circular references in Form XObjects without endless loop", async () => {
  const { PDFDocument } = await import("../../src/core/document.js");
  const { Page } = await import("../../src/core/document.js");
  const { Ref } = await import("../../src/core/primitives.js");
  const { XRef } = await import("../../src/core/xref.js");
  const { BaseStream } = await import("../../src/core/base_stream.js");

  const xref = new XRef(null, null);
  const pageDict = new Map();
  const pageIndex = 0;
  const ref = new Ref(1, 0);
  const pdfManager = {
    ensure: async (obj, prop) => obj[prop],
    ensureDoc: async (prop) => null,
    ensureCatalog: async (prop) => null,
    evaluatorOptions: {},
  };

  const page = new Page({
    pdfManager,
    xref,
    pageIndex,
    pageDict,
    ref,
    globalIdFactory: class {},
    fontCache: new Map(),
    builtInCMapCache: new Map(),
    standardFontDataCache: new Map(),
    globalColorSpaceCache: new Map(),
    globalImageCache: new Map(),
    systemFontCache: new Map(),
    nonBlendModesSet: new Set(),
    xfaFactory: null,
  });

  const contentStream = new BaseStream();
  page.getContentStream = async () => contentStream;

  const operatorList = await page.getOperatorList({
    handler: null,
    sink: null,
    task: { name: "test", ensureNotTerminated: () => {} },
    intent: 0,
  });

  const expected = { length: 0 };
  const actual = { length: operatorList.length };
  expect(actual).toEqual(expected);
});
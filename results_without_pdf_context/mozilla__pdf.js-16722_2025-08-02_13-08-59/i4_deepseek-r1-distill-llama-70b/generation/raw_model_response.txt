<think>
Okay, I need to write a test that checks if the patch resolves the issue where Firefox is slow to render poster PDFs. The patch modifies the way the canvas context's filter is handled, so I should focus on that.

First, I'll look at the patch. It changes the resetCtxToDefault function. Before, it set ctx.filter to "none" unconditionally. Now, it checks if the filter is not "none" or empty before setting it. This should prevent unnecessary filter resets, which might have caused performance issues.

I need to create a test that measures the time it takes to reset the context filter before and after the patch. If the test shows a significant improvement, it means the patch works.

I'll write a test using Mocha syntax. I'll create two canvas contexts: one before the patch and one after. I'll simulate many resetCtxToDefault calls and measure the time taken.

I'll import the necessary modules, create the canvases, and define a helper function to reset the context. Then, I'll measure the time for each case and compare them.

Finally, I'll structure the test to fail if the patched version isn't faster, ensuring the patch improves performance.
</think>

```javascript
it("should improve poster PDF rendering performance by optimizing filter handling", async () => {
  const { resetCtxToDefault } = await import("../../src/display/canvas.js");
  
  // Create test canvases
  const canvasBefore = document.createElement('canvas');
  const ctxBefore = canvasBefore.getContext('2d');
  const canvasAfter = document.createElement('canvas');
  const ctxAfter = canvasAfter.getContext('2d');
  
  // Set up initial filter state
  ctxBefore.filter = "blur(5px)";
  ctxAfter.filter = "blur(5px)";
  
  // Define test function
  function testResetFilter(ctx) {
    const start = performance.now();
    resetCtxToDefault(ctx);
    return performance.now() - start;
  }
  
  // Measure execution time before patch
  const beforeTime = testResetFilter(ctxBefore);
  
  // Measure execution time after patch
  const afterTime = testResetFilter(ctxAfter);
  
  // Verify performance improvement
  expect(afterTime).to.be.lessThan(beforeTime);
});
```
it("should improve rendering performance by avoiding unnecessary filter operations", async () => {
  const { PDFDocument } = await import("../../src/core/document.js");
  const { PDFPage } = await import("../../src/core/document.js");
  const { getBlob } = await import("../../src/shared/util.js");
  const { createIdFactory } = await import("../../src/display/canvas.js");

  // Create a test PDF with multiple pages to trigger the rendering path
  const pdfBytes = new Uint8Array([
    0x25, 0x50, 0x44, 0x46, 0x2d, 0x31, 0x2e, 0x30, 0x0a, 0x25, 0xe2, 0xe3, 0xcf, 0xd3, 0x0a, 0x31, 0x30, 0x20, 0x41, 0x5f, 0x53, 0x50, 0x4f, 0x52, 0x54, 0x0a,
    0x25, 0xe2, 0xe3, 0xcf, 0xd3, 0x0a, 0x31, 0x30, 0x20, 0x4a, 0x41, 0x53, 0x30, 0x0a, 0x0a, 0x28, 0x0a, 0x46, 0x49, 0x4c, 0x45, 0x0a,
    0x32, 0x30, 0x20, 0x4f, 0x62, 0x6a, 0x0a, 0x3c, 0x0a, 0x78, 0x0a, 0x32, 0x30, 0x20, 0x52, 0x45, 0x44, 0x0a, 0x3e, 0x0a, 0x0a,
    0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x0a, 0x3c, 0x0a, 0x78, 0x0a, 0x32, 0x30, 0x20, 0x55, 0x49, 0x44, 0x0a,
    0x3e, 0x0a
  ]);

  // Load the test PDF
  const pdf = await PDFDocument.load(getBlob(pdfBytes), { createIdFactory });

  // Measure rendering time
  const startTime = performance.now();
  const numPages = pdf.numPages;

  for (let i = 0; i < numPages; i++) {
    const page = await pdf.getPage(i + 1);
    await page.render({
      canvasContext: new Canvas(),
      viewport: page.getViewport({ scale: 1 })
    });
  }

  const endTime = performance.now();
  const renderTime = endTime - startTime;

  // The threshold is set to 500ms - adjust based on expected performance gains
  expect(renderTime).toBeLessThan(500);
});
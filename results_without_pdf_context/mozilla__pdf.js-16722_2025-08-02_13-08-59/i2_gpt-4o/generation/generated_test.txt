it("should not change the filter to none if its already none or", async () => {
  const { PDFPageProxy, getDocument } = await import("../../src/display/api.js");
  const { DOMCanvasFactory } = await import("../../src/display/display_utils.js");

  const loadingTask = getDocument("test/pdfs/sample.pdf");
  const pdfDocument = await loadingTask.promise;
  const page = await pdfDocument.getPage(1);

  const canvasFactory = new DOMCanvasFactory();
  const viewport = page.getViewport({ scale: 1.0 });
  const canvasAndContext = canvasFactory.create(viewport.width, viewport.height);
  const renderContext = {
    canvasContext: canvasAndContext.context,
    viewport: viewport,
    canvasFactory: canvasFactory,
  };

  const originalFilter = canvasAndContext.context.filter;
  await page.render(renderContext).promise;
  const finalFilter = canvasAndContext.context.filter;

  expect(finalFilter).toBe(originalFilter);
});
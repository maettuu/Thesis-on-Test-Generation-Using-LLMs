it("should respect verbosity level when handling OpenJPEG warnings", async () => {
  const { JpxImage, JpxError } = await import("../../src/core/jpx.js");
  const { VerbosityLevel, setVerbosityLevel, getVerbosityLevel } = await import("../../src/shared/util.js");

  // Mock console.warn to track warnings
  const mockConsoleWarn = jest.spyOn(console, 'warn').mockImplementation(() => {});

  try {
    // Set verbosity to error, which should suppress warnings
    setVerbosityLevel(VerbosityLevel.error);

    // Mock OpenJPEG decode to return a warning string
    const mockOpenJPEG = {
      decode: () => "Warning message",
    };
    JpxImage.decode = jest.fn(() => mockOpenJPEG.decode());

    // Test with sample data
    const testData = new Uint8Array([0xff, 0x51, 0x00, 0x00]);
    const result = await JpxImage.decode(testData);

    // Verify that no warning was logged
    expect(mockConsoleWarn).not.toHaveBeenCalled();

    // Cleanup
    JpxImage.cleanup();
  } finally {
    // Restore original console.warn and verbosity level
    mockConsoleWarn.mockRestore();
    setVerbosityLevel(getVerbosityLevel());
  }
});
it("should respect verbosity level when decoding JPX images", async () => {
  const { JpxImage, VerbosityLevel, setVerbosityLevel, getVerbosityLevel } = await import("../../src/shared/util.js");

  let warned = false;
  const originalWarn = console.warn;
  console.warn = (msg) => {
    if (msg.includes("OpenJPEG warning")) {
      warned = true;
    }
  };

  try {
    // Test with QUIET verbosity: should not warn
    setVerbosityLevel(VerbosityLevel.QUERY);
    await JpxImage.decode(new Uint8Array([0x00, 0x00, 0x00, 0x00])); // Invalid JPX data to trigger warning
    expect(warned).toBe(false);

    // Test with DEBUG verbosity: should warn
    setVerbosityLevel(VerbosityLevel.DEBUG);
    await JpxImage.decode(new Uint8Array([0x00, 0x00, 0x00, 0x00]));
    expect(warned).toBe(true);
  } finally {
    console.warn = originalWarn;
  }
});


it("should respect verbosity level when decoding JPX images", async () => {
  const { JpxImage, VerbosityLevel, setVerbosityLevel, getVerbosityLevel } = await import("../../src/shared/util.js");

  let warned = false;
  const originalWarn = console.warn;
  console.warn = (msg) => {
    if (msg.includes("OpenJPEG warning")) {
      warned = true;
    }
  };

  try {
    // Test with QUIET verbosity: should not warn
    setVerbosityLevel(VerbosityLevel.QUERY);
    await JpxImage.decode(new Uint8Array([0x00, 0x00, 0x00, 0x00])); // Invalid JPX data to trigger warning
    expect(warned).toBe(false);

    // Test with DEBUG verbosity: should warn
    setVerbosityLevel(VerbosityLevel.DEBUG);
    await JpxImage.decode(new Uint8Array([0x00, 0x00, 0x00, 0x00]));
    expect(warned).toBe(true);
  } finally {
    console.warn = originalWarn;
  }
});
it("should improve performance when applying multiple transforms", async () => {
  const { OperatorList } = await import("../../src/core/operator_list.js");
  const { Util } = await import("../../src/shared/util.js");

  const points = new Float64Array(100000);
  for (let i = 0; i < points.length; i += 2) {
    points[i] = Math.random();
    points[i + 1] = Math.random();
  }

  const transform = [0.5, 0, 0, 0.5, 10, 20];

  // Before patch: using subarray
  const beforeTime = performance.now();
  for (let i = 0; i < points.length; i += 2) {
    const p = points.subarray(i, i + 2);
    Util.applyTransform(p, transform);
  }

  // After patch: using direct access
  const afterTime = performance.now();
  for (let i = 0; i < points.length; i += 2) {
    Util.applyTransform(points, transform, i);
  }

  // The patch should make the operation significantly faster
  expect(afterTime - beforeTime).toBeLessThan(100);
});
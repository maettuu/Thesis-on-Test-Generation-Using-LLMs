it("should display FreeText annotation with popup data", async () => {
  const { PDFDocumentProxy } = await import("../../src/display/api.js");
  const { buildGetDocumentParams } = await import("./test_utils.js");
  const { AnnotationElement } = await import("../../src/display/annotation_layer.js");

  const pdfDoc = await getDocument(buildGetDocumentParams("annotation-test.pdf"));
  const page = await pdfDoc.getPage(1);
  const annotationStorage = new (await import("../../src/display/annotation_storage.js")).AnnotationStorage();
  const annotationLayer = new (await import("../../src/display/annotation_layer.js")).AnnotationLayer({
    page,
    annotationStorage,
    linkService: null,
    downloadManager: null,
    imageResourcesPath: "",
    renderForms: false,
    svgFactory: new (await import("../../src/display/display_utils.js")).DOMSVGFactory(),
    enableScripting: false,
    hasJSActions: false,
  });

  const annotations = await page.getAnnotations();
  const freeTextAnnotation = annotations.find((annotation) => annotation.subtype === "FreeText");
  const annotationElement = new AnnotationElement({
    data: freeTextAnnotation,
    layer: annotationLayer,
    linkService: null,
    downloadManager: null,
    imageResourcesPath: "",
    renderForms: false,
    svgFactory: new (await import("../../src/display/display_utils.js")).DOMSVGFactory(),
    annotationStorage,
    enableScripting: false,
    hasJSActions: false,
    parent: null,
  });

  freeTextAnnotation.titleObj = { str: "Test Title" };
  freeTextAnnotation.contentsObj = { str: "Test Contents" };

  annotationElement.render();

  expect(annotationElement.container.querySelector(".popupTriggerArea")).not.toBeNull();
});
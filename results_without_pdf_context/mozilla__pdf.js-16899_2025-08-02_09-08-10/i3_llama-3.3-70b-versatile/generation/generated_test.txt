it("should display FreeText annotation with popup data", async () => {
  const pdfDocument = await getDocument({
    url: `${TEST_PDFS_PATH}annotation-test.pdf`,
    cMapUrl: CMAP_URL,
    pdfWorker: new PDFWorker({
      workerPort: new PDFWorkerUtil(),
    }),
    pdfDataRangeTransport: new PDFDataRangeTransport(),
    pdfDocumentLoadingTask: new PDFDocumentLoadingTask(),
    disableAutoFetch: true,
    disableFontFace: true,
  });
  const pdfPage = await pdfDocument.getPage(1);
  const viewport = new PageViewport({
    pdfPage,
    scale: 1,
    rotation: 0,
    clamp: true,
  });
  const annotationStorage = new AnnotationStorage();
  const linkService = {
    eventBus: {
      dispatch: () => {},
    },
  };
  const downloadManager = {};
  const imageResourcesPath = "";
  const renderForms = true;
  const svgFactory = new DOMSVGFactory();
  const annotationLayer = new AnnotationLayer({
    div: document.createElement("div"),
    accessibilityManager: null,
    annotationCanvasMap: null,
    l10n: null,
    page: pdfPage,
    viewport: viewport,
  });
  const annotations = await pdfPage.getAnnotations();
  await annotationLayer.render({
    annotations,
    div: annotationLayer.div,
    linkService,
    downloadManager,
    imageResourcesPath,
    renderForms,
    svgFactory,
    annotationStorage,
  });
  const freeTextAnnotations = annotations.filter(
    (annotation) => annotation.annotationType === AnnotationType.FREETEXT
  );
  expect(freeTextAnnotations.length).toBeGreaterThan(0);
  const freeTextAnnotation = freeTextAnnotations[0];
  const freeTextElement = annotationLayer.div.querySelector(
    `[data-annotation-id="${freeTextAnnotation.id}"]`
  );
  expect(freeTextElement).not.toBeNull();
  const popupElement = freeTextElement.querySelector(".popup");
  expect(popupElement).not.toBeNull();
});
it("should render polygon annotation with both fill and stroke colors", async () => {
  const { TestPdfsServer } = await import("../../test_utils.js");
  const { PDFDocument, Page } = await import("../../src/core/document.js");
  const { Annotation, MarkupAnnotation } = await import("../../src/core/annotation.js");

  const server = new TestPdfsServer();
  const pdfPath = server.addPdf(
    "test.pdf",
    `
      %PDF-1.4
      1 0 obj
        <</Type /Catalog /Pages 2 0 R>>
      endobj
      2 0 obj
        <</Type /Pages /Kids [3 0 R] /Count 1>>
      endobj
      3 0 obj
        <</Type /Page /Parent 2 0 R /Resources 4 0 R /Contents []>>
      endobj
      4 0 obj
        <</Type /Resources /ExtGState <</G1 5 0 R>>>
      endobj
      5 0 obj
        <</Type /ExtGState /CA 1 /CA 1>>
      endobj
      6 0 obj
        <</Type /Annot /Subtype /Polygon /Vertices [0 0 0 1 1 1 1 0] /IC [255 0 0] /CA 0.5>>
      endobj
    `
  );

  const pdf = await PDFDocument.load(await fetch(pdfPath).then((res) => res.blob()));
  const page = await pdf.getPage(1);
  const annotation = new MarkupAnnotation();
  const render = await page.render({
    viewport: page.getViewport({ scale: 1 }),
    annotationMode: "all",
  });

  const canvas = document.createElement("canvas");
  const ctx = canvas.getContext("2d");
  await render.renderCanvas(ctx);

  const expectedFillColor = [255, 0, 0];
  const expectedStrokeColor = [0, 0, 0];
  const pixels = ctx.getImageData(0, 0, canvas.width, canvas.height).data;

  // Check fill color (red) in the center of the polygon
  const center = {
    x: canvas.width / 2,
    y: canvas.height / 2,
  };
  const centerPixel = ctx.getImageData(center.x, center.y, 1, 1).data;

  expect(centerPixel[0]).toBe(expectedFillColor[0]);
  expect(centerPixel[1]).toBe(expectedFillColor[1]);
  expect(centerPixel[2]).toBe(expectedFillColor[2]);

  // Check stroke color (black) on the border
  const edgePixel = ctx.getImageData(canvas.width - 1, canvas.height - 1, 1, 1).data;
  expect(edgePixel[0]).toBe(expectedStrokeColor[0]);
  expect(edgePixel[1]).toBe(expectedStrokeColor[1]);
  expect(edgePixel[2]).toBe(expectedStrokeColor[2]);
});
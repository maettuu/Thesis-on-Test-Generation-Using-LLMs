<think>
Okay, I need to write a regression test for the issue where the `navigator` object doesn't have the `platform` property in Node.js, causing an error when using `pdfjs-dist`. The patch modifies two files: `font_loader.js` and `util.js`. My test should fail before the patch and pass after.

First, I'll focus on the `util.js` changes because that's where the `platform` getter is defined. The patch adds a check for `navigator?.platform` and returns a default if it's not available. So, I need to simulate a Node.js environment where `navigator` is undefined or doesn't have `platform`.

I'll create a test that mocks `navigator` to be undefined. Then, I'll check if the `platform` getter returns `isMac: false` in that case. Also, I'll test the normal case where `navigator.platform` exists to ensure it works as expected.

I'll structure the test using Jest. I'll import `FeatureTest` from `../../src/shared/util.js`. Then, I'll mock `navigator` globally for each test case. 

In the first test case, I'll set `navigator` to `undefined` and check if `FeatureTest.platform.isMac` is false. In the second case, I'll mock `navigator.platform` to return "Mac" and check if `isMac` is true. This covers both scenarios before and after the patch.

I need to make sure the test is self-contained and only uses the provided imports. I'll dynamically import `util.js` and set up the mocks within the test block.

Finally, I'll write the test code, ensuring it's concise and only includes the necessary parts without any extra comments or explanations.
</think>

```javascript
it("should handle missing navigator.platform in Node.js", async () => {
  const { FeatureTest } = await import("../../src/shared/util.js");
  
  // Mock navigator for the test cases
  const originalNavigator = global.navigator;
  
  // Test case 1: navigator is undefined (Node.js environment)
  global.navigator = undefined;
  const platform1 = await FeatureTest.platform;
  expect(platform1.isMac).toBe(false);
  
  // Test case 2: navigator.platform exists (normal browser environment)
  global.navigator = { platform: "Mac" };
  const platform2 = await FeatureTest.platform;
  expect(platform2.isMac).toBe(true);
  
  // Restore original navigator
  global.navigator = originalNavigator;
});
```
<think>
Okay, so I need to write a regression test for the issue where the `navigator` object doesn't have the `platform` property in Node.js, causing an error when using `pdfjs-dist`. The user provided a patch that modifies two files: `font_loader.js` and `util.js`. 

First, I should understand what the patch does. In `util.js`, the `platform` getter in `FeatureTest` is changed to check if `navigator` exists and if `navigator.platform` is a string before using it. This should prevent the error when `navigator` isn't available, like in Node.js.

Next, I need to create a test that fails before the patch and passes after. The test should run in a Node.js environment where `navigator` isn't present. 

Looking at the existing test file `test/unit/util_spec.js`, it imports functions from `util.js`, so I can add a new test case there. 

I'll write a test that checks the `platform` property. In Node.js, since `navigator` is undefined, the `platform` getter should return `{ isMac: false }`. 

I'll use Jest to write an async test. I'll import `FeatureTest` from `../../src/shared/util.js`. Then, in the test, I'll mock `navigator` to be undefined and check if `FeatureTest.platform` returns the correct value.

So the test will look something like this: import the necessary modules, mock `navigator`, and assert that `isMac` is false. This ensures that the patch correctly handles the absence of `navigator` in Node.js.
</think>

```javascript
it("should handle missing navigator.platform in Node.js", async () => {
  const { FeatureTest } = await import("../../src/shared/util.js");
  const originalNavigator = global.navigator;
  global.navigator = undefined;
  const platform = FeatureTest.platform;
  expect(platform.isMac).toBe(false);
  global.navigator = originalNavigator;
});
```
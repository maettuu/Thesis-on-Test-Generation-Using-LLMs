it("should add dependency with objId for cached paintImageXObject", async () => {
  const idFactory = createIdFactory();
  const xref = new XRefMock();
  const handler = { sendWithPromise: () => Promise.resolve(null) };
  const options = {
    maxImageSize: 1000,
    isOffscreenCanvasSupported: false,
    canvasMaxAreaInBytes: -1,
    ignoreErrors: true,
  };
  const globalImageCache = {
    shouldCache: () => false,
    hasDecodeFailed: () => false,
    setData() {},
    addByteSize() {}
  };
  const partialEvaluator = new PartialEvaluator({
    xref,
    handler,
    pageIndex: 0,
    idFactory,
    fontCache: {},
    builtInCMapCache: {},
    standardFontDataCache: {},
    globalImageCache,
    systemFontCache: {},
    options,
  });
  // Stub _sendImgData so that buildPaintImageXObject can complete.
  partialEvaluator._sendImgData = () => Promise.resolve();
  // Create a dummy dictionary with required keys.
  const dummyDict = new (await import("../../src/core/primitives.js")).Dict();
  dummyDict.set("W", 10);
  dummyDict.set("H", 10);
  // Set a fake objId to simulate an image reference.
  dummyDict.objId = "testImgRef";
  // Create a minimal dummy image with getBytes.
  const dummyImage = {
    dict: dummyDict,
    getBytes: (n) => new Uint8Array(n),
  };
  // Override PDFImage.buildImage to simulate successful image decoding.
  const { PDFImage } = await import("../../src/core/image.js");
  PDFImage.buildImage = (params) => {
    return Promise.resolve({
      createImageData: () =>
        Promise.resolve({
          width: params.image.dict.get("W"),
          height: params.image.dict.get("H"),
          data: new Uint8Array(4 * params.image.dict.get("W") * params.image.dict.get("H")),
          bitmap: false,
        }),
    });
  };
  // Create a minimal operator list that records dependencies.
  const operatorList = new OperatorList();
  const originalAddDependency = operatorList.addDependency.bind(operatorList);
  operatorList.dependencies = [];
  operatorList.addDependency = (dep) => {
    operatorList.dependencies.push(dep);
    originalAddDependency(dep);
  };
  // Setup a simple localImageCache.
  const localImageCache = {
    _cache: {},
    set(key, ref, data) {
      this._cache[key] = data;
    },
    getByName(name) {
      return this._cache[name];
    }
  };
  const localColorSpaceCache = {};
  const cacheKey = "testCache";
  await partialEvaluator.buildPaintImageXObject({
    resources: new (await import("../../src/core/primitives.js")).Dict(),
    image: dummyImage,
    isInline: false,
    operatorList,
    cacheKey,
    localImageCache,
    localColorSpaceCache,
  });
  const cacheData = localImageCache._cache[cacheKey];
  if (!cacheData || !cacheData.objId) {
    throw new Error("Missing objId in cache data");
  }
  if (!operatorList.dependencies.includes(cacheData.objId)) {
    throw new Error("Dependency was not added with the correct objId");
  }
});
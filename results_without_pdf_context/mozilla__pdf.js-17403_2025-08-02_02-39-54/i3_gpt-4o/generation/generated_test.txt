it("should handle postponed execution and cancellation correctly", async () => {
  const { MessageHandler } = await import("../../src/shared/message_handler.js");
  const { LoopbackPort } = await import("../../src/display/api.js");

  const comObj = new LoopbackPort();
  const messageHandler = new MessageHandler("main", "worker", comObj);

  let actionExecuted = false;
  messageHandler.on("GetOperatorList", () => {
    actionExecuted = true;
  });

  comObj.postMessage({
    sourceName: "worker",
    targetName: "main",
    action: "GetOperatorList",
    stream: 0,
    streamId: 1,
  });

  comObj.postMessage({
    sourceName: "worker",
    targetName: "main",
    stream: 1, // StreamKind.CANCEL
    streamId: 1,
  });

  await new Promise(resolve => setTimeout(resolve, 10));

  expect(actionExecuted).toBe(false);
});
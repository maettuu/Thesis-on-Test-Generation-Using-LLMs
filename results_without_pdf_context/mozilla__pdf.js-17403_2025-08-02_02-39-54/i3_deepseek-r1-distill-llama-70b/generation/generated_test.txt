it("should improve performance with many pages by queueing messages", async () => {
  const { LoopbackPort } = await import("../../src/display/api.js");
  const port = new LoopbackPort();
  const messageHandler = new MessageHandler("main", "worker", port);

  const numMessages = 50;
  const messages = Array.from({ length: numMessages }, (_, i) => ({
    action: "testAction",
    data: `testData${i}`,
  }));

  const promises = [];
  const results = [];

  messages.forEach((message, index) => {
    const promise = new Promise((resolve) => {
      messageHandler.on("testAction", () => {
        results[index] = true;
        resolve();
      });
    });
    promises.push(promise);
    port.postMessage({
      sourceName: "worker",
      targetName: "main",
      action: "testAction",
      data: message.data,
    });
  });

  const startTime = Date.now();
  await Promise.all(promises);
  const totalTime = Date.now() - startTime;

  expect(totalTime).toBeLessThan(100);

  messageHandler.destroy();
});
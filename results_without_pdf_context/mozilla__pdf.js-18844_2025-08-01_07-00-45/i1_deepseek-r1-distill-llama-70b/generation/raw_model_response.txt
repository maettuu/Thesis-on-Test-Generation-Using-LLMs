<think>
Okay, I need to write a regression test for the issue where the text layer and canvas don't always match in the PDF viewer on Windows. The patch provided modifies the TextLayer class to adjust the font family based on the platform, specifically for Windows and Firefox. 

First, I should understand what the patch does. It adds a static method fontFamilyMap that checks if the platform is Windows and Firefox. If so, it prepends specific fonts to the sans-serif and monospace font families. This should fix the mismatch between the text layer and canvas.

Now, to write a test that fails before the patch and passes after. The test should check if the correct font family is used based on the platform. 

I'll use the existing test file as a structure. I'll need to mock the platform using FeatureTest. I'll create a mock where isWindows and isFirefox are true. Then, I'll create a TextLayer instance and check if the fontFamily is correctly adjusted.

In the test, I'll set up a mock for FeatureTest.platform to return isWindows and isFirefox as true. Then, I'll create a TextLayer with a sample text and check the font family used. The expected font family for sans-serif should include Calibri, and for monospace, Lucida Console.

I'll write an async test using Jest syntax. I'll import the necessary modules, set up the mock, create the TextLayer, and assert the font family is correct. This should ensure that the patch correctly adjusts the font family on Windows and Firefox.
</think>

```javascript
it("should use correct font family on Windows and Firefox", async () => {
  const { TextLayer } = await import("../../src/display/text_layer.js");
  const { FeatureTest } = await import("../../src/shared/util.js");

  // Mock the platform detection to simulate Windows and Firefox
  const mockPlatform = {
    isWindows: true,
    isFirefox: true,
  };
  jest.spyOn(FeatureTest, "platform", "get").mockReturnValue(mockPlatform);

  // Create a test text layer
  const textLayer = new TextLayer({
    textContentSource: new ReadableStream({
      start(controller) {
        controller.enqueue("Test text");
        controller.close();
      },
    }),
    container: document.createElement("div"),
    viewport: {
      scale: 1,
      rawDims: { pageWidth: 100, pageHeight: 100 },
      rotation: 0,
    },
  });

  // Check the font family for sans-serif and monospace
  const fontFamilyMap = await TextLayer.fontFamilyMap;
  expect(fontFamilyMap.get("sans-serif")).toContain("Calibri");
  expect(fontFamilyMap.get("monospace")).toContain("Lucida Console");
});
```
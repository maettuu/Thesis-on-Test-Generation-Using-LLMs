<think>
Okay, I need to write a regression test for the issue where the text layer and canvas don't always match on Windows in the PDF viewer. The patch provided is supposed to fix this by using specific fonts when possible. 

First, I should understand the problem. The issue arises because of font differences causing mismatches between the text layer and the canvas, especially on Windows with Firefox. The patch introduces a fontFamilyMap that uses Calibri and Lucida Console for sans-serif and monospace fonts respectively when on Windows and Firefox.

So, the test needs to verify that these fonts are indeed being used after the patch. It should fail before the patch and pass after.

I'll structure the test using Jest. The test will create a TextLayer instance, check the font family used, and ensure it's Calibri or Lucida Console as expected.

I need to import the necessary modules. Since the test is self-contained, I'll import TextLayer from the correct path. I'll also need to mock the platform checks to simulate Windows and Firefox.

In the test, I'll set up mocks for FeatureTest.platform to return isWindows and isFirefox as true. Then, I'll create a TextLayer instance with a simple text content. After that, I'll check the fontFamily used in the style of the text div.

I'll write the test so that it expects the fontFamily to include 'Calibri' for sans-serif and 'Lucida Console' for monospace. Since the test is async, I'll use await where necessary, especially when creating the TextLayer.

Finally, I'll structure the test within an it block, ensuring it's concise and directly tests the font family application as per the patch.
</think>

```javascript
it("should use Calibri and Lucida Console on Windows Firefox", async () => {
  const { TextLayer } = await import("../../src/display/text_layer.js");
  const { FeatureTest } = await import("../../shared/util.js");

  // Mock platform detection to simulate Windows and Firefox
  jest.spyOn(FeatureTest, "platform").mockReturnValue({
    isWindows: true,
    isFirefox: true,
  });

  // Create a test text layer with sample content
  const textContent = { items: [{ str: "Test", fontName: "sans-serif" }] };
  const textLayer = new TextLayer({
    textContentSource: textContent,
    container: document.createElement("div"),
    viewport: { scale: 1, rotation: 0, rawDims: {} },
  });

  // Check if the expected fonts are being used
  const textDiv = textLayer.#textDivs[0];
  const expectedSansSerif = "Calibri, sans-serif";
  const expectedMonospace = "Lucida Console, monospace";

  expect(textDiv.style.fontFamily).toContain(expectedSansSerif);
});
```
Before you begin:
- Keep going until the job is completely solved — don’t stop halfway.
- If you’re unsure about the behavior, reread the provided patch carefully; do not hallucinate.
- Plan your approach before writing code by reflecting on whether the test truly fails before and passes after.

Issue:
<issue>
Text layer and canvas don't always match in the pdf viewer on Windows
</issue>

Patch:
<patch>
diff --git a/src/display/text_layer.js b/src/display/text_layer.js
--- a/src/display/text_layer.js
+++ b/src/display/text_layer.js
@@ -16,7 +16,13 @@
 /** @typedef {import("./display_utils").PageViewport} PageViewport */
 /** @typedef {import("./api").TextContent} TextContent */
 
-import { AbortException, Util, warn } from "../shared/util.js";
+import {
+  AbortException,
+  FeatureTest,
+  shadow,
+  Util,
+  warn,
+} from "../shared/util.js";
 import { setLayerDimensions } from "./display_utils.js";
 
 /**
@@ -152,6 +158,24 @@ class TextLayer {
     }
   }
 
+  static get fontFamilyMap() {
+    const { isWindows, isFirefox } = FeatureTest.platform;
+    return shadow(
+      this,
+      "fontFamilyMap",
+      new Map([
+        [
+          "sans-serif",
+          `${isWindows && isFirefox ? "Calibri, " : ""}sans-serif`,
+        ],
+        [
+          "monospace",
+          `${isWindows && isFirefox ? "Lucida Console, " : ""}monospace`,
+        ],
+      ])
+    );
+  }
+
   /**
    * Render the textLayer.
    * @returns {Promise}
@@ -300,9 +324,12 @@ class TextLayer {
       angle += Math.PI / 2;
     }
 
-    const fontFamily =
+    let fontFamily =
       (this.#fontInspectorEnabled && style.fontSubstitution) ||
       style.fontFamily;
+
+    // Workaround for bug 1922063.
+    fontFamily = TextLayer.fontFamilyMap.get(fontFamily) || fontFamily;
     const fontHeight = Math.hypot(tx[2], tx[3]);
     const fontAscent =
       fontHeight * TextLayer.#getAscent(fontFamily, this.#lang);

diff --git a/src/shared/util.js b/src/shared/util.js
--- a/src/shared/util.js
+++ b/src/shared/util.js
@@ -636,9 +636,18 @@ class FeatureTest {
     ) {
       return shadow(this, "platform", {
         isMac: navigator.platform.includes("Mac"),
+        isWindows: navigator.platform.includes("Win"),
+        isFirefox:
+          (typeof PDFJSDev !== "undefined" && PDFJSDev.test("MOZCENTRAL")) ||
+          (typeof navigator?.userAgent === "string" &&
+            navigator.userAgent.includes("Firefox")),
       });
     }
-    return shadow(this, "platform", { isMac: false });
+    return shadow(this, "platform", {
+      isMac: false,
+      isWindows: false,
+      isFirefox: false,
+    });
   }
 
   static get isCSSRoundSupported() {


</patch>

Imports:
<imports>
Available Packages
Dev Dependencies:
- @babel/core: ^7.25.2
- @babel/preset-env: ^7.25.4
- @babel/runtime: ^7.25.6
- @fluent/bundle: ^0.18.0
- @fluent/dom: ^0.10.0
- @jazzer.js/core: ^2.1.0
- @metalsmith/layouts: ^2.7.0
- @metalsmith/markdown: ^1.10.0
- autoprefixer: ^10.4.20
- babel-loader: ^9.2.1
- caniuse-lite: ^1.0.30001662
- canvas: ^2.11.2
- core-js: ^3.38.1
- eslint: ^8.57.0
- eslint-config-prettier: ^9.1.0
- eslint-plugin-fetch-options: ^0.0.5
- eslint-plugin-html: ^8.1.1
- eslint-plugin-import: ^2.30.0
- eslint-plugin-jasmine: ^4.2.2
- eslint-plugin-json: ^3.1.0
- eslint-plugin-no-unsanitized: ^4.1.0
- eslint-plugin-prettier: ^5.2.1
- eslint-plugin-sort-exports: ^0.9.1
- eslint-plugin-unicorn: ^55.0.0
- gulp: ^5.0.0
- gulp-cli: ^3.0.0
- gulp-postcss: ^10.0.0
- gulp-rename: ^2.0.0
- gulp-replace: ^1.1.4
- gulp-zip: ^6.0.0
- highlight.js: ^11.10.0
- jasmine: ^5.3.0
- jsdoc: ^4.0.3
- jstransformer-nunjucks: ^1.2.0
- metalsmith: ^2.6.3
- metalsmith-html-relative: ^2.0.4
- ordered-read-streams: ^2.0.0
- path2d: ^0.2.1
- pngjs: ^7.0.0
- postcss: ^8.4.47
- postcss-dark-theme-class: ^1.3.0
- postcss-dir-pseudo-class: ^9.0.0
- postcss-discard-comments: ^7.0.3
- postcss-nesting: ^13.0.0
- prettier: ^3.3.3
- puppeteer: 23.3.1
- stylelint: ^16.9.0
- stylelint-prettier: ^5.0.2
- svglint: ^3.0.0
- terser-webpack-plugin: ^5.3.10
- tsc-alias: ^1.8.10
- ttest: ^4.0.0
- typescript: ^5.6.2
- vinyl: ^3.0.0
- webpack: ^5.94.0
- webpack-stream: ^7.0.0
- yargs: ^17.7.2

Engines:
- node: >=18

Available Relative Imports:
- `../../src/core/annotation.js`: Annotation, AnnotationBorderStyle, AnnotationFactory, MarkupAnnotation, getQuadPoints
- `../../src/core/bidi.js`: bidi
- `../../src/core/cff_parser.js`: CFFCharset, CFFCompiler, CFFFDSelect, CFFParser, CFFStrings
- `../../src/core/cmap.js`: CMap, CMapFactory, IdentityCMap
- `../../src/core/colorspace.js`: ColorSpace
- `../../src/core/core_utils.js`: arrayBuffersToBytes, encodeToXmlString, escapePDFName, escapeString, getInheritableProperty, getSizeInBytes, isAscii, isWhiteSpace, log2, numberToString, parseXFAPath, recoverJsURL, stringToUTF16HexString, stringToUTF16String, toRomanNumerals, validateCSSFont
- `../../src/core/crypto.js`: AES128Cipher, AES256Cipher, ARCFourCipher, CipherTransformFactory, PDF17, PDF20, calculateMD5, calculateSHA256, calculateSHA384, calculateSHA512
- `../../src/core/default_appearance.js`: createDefaultAppearance, parseAppearanceStream, parseDefaultAppearance
- `../../src/core/document.js`: PDFDocument, Page
- `../../src/core/encodings.js`: getEncoding
- `../../src/core/evaluator.js`: PartialEvaluator
- `../../src/core/flate_stream.js`: FlateStream
- `../../src/core/font_substitutions.js`: getFontSubstitution
- `../../src/core/fonts_utils.js`: SEAC_ANALYSIS_ENABLED
- `../../src/core/function.js`: PDFFunctionFactory, PostScriptCompiler, PostScriptEvaluator
- `../../src/core/glyphlist.js`: getDingbatsGlyphsUnicode, getGlyphsUnicode
- `../../src/core/image_utils.js`: GlobalImageCache, LocalColorSpaceCache
- `../../src/core/jbig2.js`: Jbig2Error, Jbig2Image
- `../../src/core/jpg.js`: JpegError, JpegImage
- `../../src/core/jpx.js`: JpxError, JpxImage
- `../../src/core/metadata_parser.js`: MetadataParser
- `../../src/core/operator_list.js`: OperatorList
- `../../src/core/parser.js`: Lexer, Linearization, Parser
- `../../src/core/predictor_stream.js`: PredictorStream
- `../../src/core/primitives.js`: Cmd, Dict, EOF, Name, Ref, RefSet, RefSetCache, isCmd, isDict, isName, isRefsEqual
- `../../src/core/ps_parser.js`: PostScriptLexer, PostScriptParser
- `../../src/core/stream.js`: NullStream, Stream, StringStream
- `../../src/core/type1_parser.js`: Type1Parser
- `../../src/core/unicode.js`: getCharUnicodeCategory, getUnicodeForGlyph, getUnicodeRangeFor, mapSpecialUnicodeValues
- `../../src/core/worker.js`: WorkerMessageHandler, WorkerTask
- `../../src/core/writer.js`: incrementalUpdate, writeDict
- `../../src/core/xfa/bind.js`: Binder
- `../../src/core/xfa/data.js`: DataHandler
- `../../src/core/xfa/factory.js`: XFAFactory
- `../../src/core/xfa/formcalc_lexer.js`: Lexer, TOKEN, Token
- `../../src/core/xfa/formcalc_parser.js`: Errors, Parser
- `../../src/core/xfa/parser.js`: XFAParser
- `../../src/core/xfa/som.js`: searchNode
- `../../src/core/xfa/symbol_utils.js`: $dump, $getChildren, $getChildrenByClass, $getChildrenByName, $text, $uid
- `../../src/core/xml_parser.js`: SimpleXMLParser, XMLParserBase
- `../../src/display/annotation_layer.js`: AnnotationLayer
- `../../src/display/annotation_storage.js`: AnnotationStorage
- `../../src/display/api.js`: DefaultCMapReaderFactory, DefaultCanvasFactory, DefaultStandardFontDataFactory, LoopbackPort, PDFDataRangeTransport, PDFDocumentLoadingTask, PDFDocumentProxy, PDFPageProxy, PDFWorker, RenderTask, build, getDocument, version
- `../../src/display/display_utils.js`: DOMCanvasFactory, DOMSVGFactory, OutputScale, PDFDateString, PageViewport, PixelsPerInch, RenderingCancelledException, StatTimer, fetchData, getFilenameFromUrl, getPdfFilenameFromUrl, getXfaPageViewport, isDataScheme, isPdfFile, isValidFetchUrl, noContextMenu, setLayerDimensions
- `../../src/display/draw_layer.js`: DrawLayer
- `../../src/display/editor/annotation_editor_layer.js`: AnnotationEditorLayer
- `../../src/display/editor/color_picker.js`: ColorPicker
- `../../src/display/editor/tools.js`: AnnotationEditorUIManager, CommandManager
- `../../src/display/fetch_stream.js`: PDFFetchStream
- `../../src/display/metadata.js`: Metadata
- `../../src/display/network.js`: PDFNetworkStream
- `../../src/display/network_utils.js`: createHeaders, createResponseStatusError, extractFilenameFromHeader, validateRangeRequestCapabilities, validateResponseStatus
- `../../src/display/node_stream.js`: PDFNodeStream
- `../../src/display/node_utils.js`: NodePackages
- `../../src/display/text_layer.js`: TextLayer
- `../../src/display/worker_options.js`: GlobalWorkerOptions
- `../../src/display/xfa_layer.js`: XfaLayer
- `../../src/shared/message_handler.js`: MessageHandler
- `../../src/shared/murmurhash3.js`: MurmurHash3_64
- `../../src/shared/util.js`: AbortException, AnnotationBorderStyleType, AnnotationEditorParamsType, AnnotationEditorType, AnnotationFieldFlag, AnnotationFlag, AnnotationMode, AnnotationType, BaseException, CMapCompressionType, FeatureTest, FormatError, ImageKind, InvalidPDFException, MissingPDFException, OPS, PasswordException, PasswordResponses, PermissionFlag, RenderingIntentFlag, UnexpectedResponseException, UnknownErrorException, Util, VerbosityLevel, assert, bytesToString, createValidAbsoluteUrl, getModificationDate, getVerbosityLevel, isNodeJS, normalizeUnicode, objectSize, setVerbosityLevel, shadow, string32, stringToBytes, stringToPDFString, stringToUTF8String
- `../../web/annotation_layer_builder.js`: AnnotationLayerBuilder
- `../../web/app_options.js`: AppOptions, OptionKind
- `../../web/download_manager.js`: DownloadManager
- `../../web/event_utils.js`: EventBus, WaitOnType, waitOnEventOrTimeout
- `../../web/genericl10n.js`: GenericL10n
- `../../web/pdf_find_controller.js`: FindState, PDFFindController
- `../../web/pdf_find_utils.js`: CharacterType, getCharacterType
- `../../web/pdf_history.js`: PDFHistory, isDestArraysEqual, isDestHashesEqual
- `../../web/pdf_link_service.js`: LinkTarget, PDFLinkService, SimpleLinkService
- `../../web/pdf_page_view.js`: PDFPageView
- `../../web/pdf_scripting_manager.component.js`: PDFScriptingManager
- `../../web/pdf_single_page_viewer.js`: PDFSinglePageViewer
- `../../web/pdf_viewer.js`: PDFPageViewBuffer, PDFViewer
- `../../web/struct_tree_layer_builder.js`: StructTreeLayerBuilder
- `../../web/text_layer_builder.js`: TextLayerBuilder
- `../../web/ui_utils.js`: AutoPrintRegExp, ProgressBar, RenderingStates, ScrollMode, SpreadMode, backtrackBeforeAllVisibleElements, binarySearchFirstItem, calcRound, getPageSizeInches, getVisibleElements, isPortraitOrientation, isValidRotation, parseQueryString, removeNullCharacters
- `../../web/xfa_layer_builder.js`: XfaLayerBuilder
- `./test_utils.js`: CMAP_URL, DefaultFileReaderFactory, STANDARD_FONT_DATA_URL, TEST_PDFS_PATH, XRefMock, buildGetDocumentParams, createIdFactory, createTemporaryNodeServer
- `./testreporter.js`: TestReporter
</imports>

Code:
<code>
File:
src/display/text_layer.js
1 /* Copyright 2015 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
19 import { AbortException, Util, warn } from "../shared/util.js";
20 import { setLayerDimensions } from "./display_utils.js";
21 
41 const MAX_TEXT_DIVS_TO_RENDER = 100000;
42 const DEFAULT_FONT_SIZE = 30;
43 const DEFAULT_FONT_ASCENT = 0.8;
44 
45 class TextLayer {
46   #capability = Promise.withResolvers();
47 
48   #container = null;
49 
50   #disableProcessItems = false;
51 
52   #fontInspectorEnabled = !!globalThis.FontInspector?.enabled;
53 
54   #lang = null;
55 
56   #layoutTextParams = null;
57 
58   #pageHeight = 0;
59 
60   #pageWidth = 0;
61 
62   #reader = null;
63 
64   #rootContainer = null;
65 
66   #rotation = 0;
67 
68   #scale = 0;
69 
70   #styleCache = Object.create(null);
71 
72   #textContentItemsStr = [];
73 
74   #textContentSource = null;
75 
76   #textDivs = [];
77 
78   #textDivProperties = new WeakMap();
79 
80   #transform = null;
81 
82   static #ascentCache = new Map();
83 
84   static #canvasContexts = new Map();
85 
86   static #canvasCtxFonts = new WeakMap();
87 
88   static #minFontSize = null;
89 
90   static #pendingTextLayers = new Set();
91 
92   /**
93    * @param {TextLayerParameters} options
94    */
95   constructor({ textContentSource, container, viewport }) {
96     if (textContentSource instanceof ReadableStream) {
97       this.#textContentSource = textContentSource;
98     } else if (
99       (typeof PDFJSDev === "undefined" || PDFJSDev.test("GENERIC")) &&
100       typeof textContentSource === "object"
101     ) {
102       this.#textContentSource = new ReadableStream({
103         start(controller) {
104           controller.enqueue(textContentSource);
105           controller.close();
106         },
107       });
108     } else {
109       throw new Error('No "textContentSource" parameter specified.');
110     }
111     this.#container = this.#rootContainer = container;
112 
113     this.#scale = viewport.scale * (globalThis.devicePixelRatio || 1);
114     this.#rotation = viewport.rotation;
115     this.#layoutTextParams = {
116       div: null,
117       properties: null,
118       ctx: null,
119     };
120     const { pageWidth, pageHeight, pageX, pageY } = viewport.rawDims;
121     this.#transform = [1, 0, 0, -1, -pageX, pageY + pageHeight];
122     this.#pageWidth = pageWidth;
123     this.#pageHeight = pageHeight;
124 
125     TextLayer.#ensureMinFontSizeComputed();
126 
127     setLayerDimensions(container, viewport);
128 
129     // Always clean-up the temporary canvas once rendering is no longer pending.
130     this.#capability.promise
131       .finally(() => {
132         TextLayer.#pendingTextLayers.delete(this);
133         this.#layoutTextParams = null;
134         this.#styleCache = null;
135       })
136       .catch(() => {
137         // Avoid "Uncaught promise" messages in the console.
138       });
139 
140     if (typeof PDFJSDev === "undefined" || PDFJSDev.test("TESTING")) {
141       // For testing purposes.
142       Object.defineProperty(this, "pageWidth", {
143         get() {
144           return this.#pageWidth;
145         },
146       });
147       Object.defineProperty(this, "pageHeight", {
148         get() {
149           return this.#pageHeight;
150         },
151       });
152     }
153   }
154 
284   #appendText(geom) {
285     // Initialize all used properties to keep the caches monomorphic.
286     const textDiv = document.createElement("span");
287     const textDivProperties = {
288       angle: 0,
289       canvasWidth: 0,
290       hasText: geom.str !== "",
291       hasEOL: geom.hasEOL,
292       fontSize: 0,
293     };
294     this.#textDivs.push(textDiv);
295 
296     const tx = Util.transform(this.#transform, geom.transform);
297     let angle = Math.atan2(tx[1], tx[0]);
298     const style = this.#styleCache[geom.fontName];
299     if (style.vertical) {
300       angle += Math.PI / 2;
301     }
302 
303     const fontFamily =
304       (this.#fontInspectorEnabled && style.fontSubstitution) ||
305       style.fontFamily;
306     const fontHeight = Math.hypot(tx[2], tx[3]);
307     const fontAscent =
308       fontHeight * TextLayer.#getAscent(fontFamily, this.#lang);
309 
310     let left, top;
311     if (angle === 0) {
312       left = tx[4];
313       top = tx[5] - fontAscent;
314     } else {
315       left = tx[4] + fontAscent * Math.sin(angle);
316       top = tx[5] - fontAscent * Math.cos(angle);
317     }
318 
319     const scaleFactorStr = "calc(var(--scale-factor)*";
320     const divStyle = textDiv.style;
321     // Setting the style properties individually, rather than all at once,
322     // should be OK since the `textDiv` isn't appended to the document yet.
323     if (this.#container === this.#rootContainer) {
324       divStyle.left = `${((100 * left) / this.#pageWidth).toFixed(2)}%`;
325       divStyle.top = `${((100 * top) / this.#pageHeight).toFixed(2)}%`;
326     } else {
327       // We're in a marked content span, hence we can't use percents.
328       divStyle.left = `${scaleFactorStr}${left.toFixed(2)}px)`;
329       divStyle.top = `${scaleFactorStr}${top.toFixed(2)}px)`;
330     }
331     // We multiply the font size by #minFontSize, and then #layout will
332     // scale the element by 1/#minFontSize. This allows us to effectively
333     // ignore the minimum font size enforced by the browser, so that the text
334     // layer <span>s can always match the size of the text in the canvas.
335     divStyle.fontSize = `${scaleFactorStr}${(TextLayer.#minFontSize * fontHeight).toFixed(2)}px)`;
336     divStyle.fontFamily = fontFamily;
337 
338     textDivProperties.fontSize = fontHeight;
339 
340     // Keeps screen readers from pausing on every new text span.
341     textDiv.setAttribute("role", "presentation");
342 
343     textDiv.textContent = geom.str;
344     // geom.dir may be 'ttb' for vertical texts.
345     textDiv.dir = geom.dir;
346 
347     // `fontName` is only used by the FontInspector, and we only use `dataset`
348     // here to make the font name available in the debugger.
349     if (this.#fontInspectorEnabled) {
350       textDiv.dataset.fontName =
351         style.fontSubstitutionLoadedName || geom.fontName;
352     }
353     if (angle !== 0) {
354       textDivProperties.angle = angle * (180 / Math.PI);
355     }
356     // We don't bother scaling single-char text divs, because it has very
357     // little effect on text highlighting. This makes scrolling on docs with
358     // lots of such divs a lot faster.
359     let shouldScaleText = false;
360     if (geom.str.length > 1) {
361       shouldScaleText = true;
362     } else if (geom.str !== " " && geom.transform[0] !== geom.transform[3]) {
363       const absScaleX = Math.abs(geom.transform[0]),
364         absScaleY = Math.abs(geom.transform[3]);
365       // When the horizontal/vertical scaling differs significantly, also scale
366       // even single-char text to improve highlighting (fixes issue11713.pdf).
367       if (
368         absScaleX !== absScaleY &&
369         Math.max(absScaleX, absScaleY) / Math.min(absScaleX, absScaleY) > 1.5
370       ) {
371         shouldScaleText = true;
372       }
373     }
374     if (shouldScaleText) {
375       textDivProperties.canvasWidth = style.vertical ? geom.height : geom.width;
376     }
377     this.#textDivProperties.set(textDiv, textDivProperties);
378 
379     // Finally, layout and append the text to the DOM.
380     this.#layoutTextParams.div = textDiv;
381     this.#layoutTextParams.properties = textDivProperties;
382     this.#layout(this.#layoutTextParams);
383 
384     if (textDivProperties.hasText) {
385       this.#container.append(textDiv);
386     }
387     if (textDivProperties.hasEOL) {
388       const br = document.createElement("br");
389       br.setAttribute("role", "presentation");
390       this.#container.append(br);
391     }
392   }
393 
562 }
563 
File:
src/shared/util.js
1 /* Copyright 2012 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 /* globals process */
16 
17 // NW.js / Electron is a browser context, but copies some Node.js objects; see
18 // http://docs.nwjs.io/en/latest/For%20Users/Advanced/JavaScript%20Contexts%20in%20NW.js/#access-nodejs-and-nwjs-api-in-browser-context
19 // https://www.electronjs.org/docs/api/process#processversionselectron-readonly
20 // https://www.electronjs.org/docs/api/process#processtype-readonly
21 const isNodeJS =
22   (typeof PDFJSDev === "undefined" || PDFJSDev.test("GENERIC")) &&
23   typeof process === "object" &&
24   process + "" === "[object process]" &&
25   !process.versions.nw &&
26   !(process.versions.electron && process.type && process.type !== "browser");
27 
28 const IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];
29 const FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];
30 
31 const MAX_IMAGE_SIZE_TO_CACHE = 10e6; // Ten megabytes.
32 
33 // Represent the percentage of the height of a single-line field over
34 // the font size. Acrobat seems to use this value.
35 const LINE_FACTOR = 1.35;
36 const LINE_DESCENT_FACTOR = 0.35;
37 const BASELINE_FACTOR = LINE_DESCENT_FACTOR / LINE_FACTOR;
38 
53 const RenderingIntentFlag = {
54   ANY: 0x01,
55   DISPLAY: 0x02,
56   PRINT: 0x04,
57   SAVE: 0x08,
58   ANNOTATIONS_FORMS: 0x10,
59   ANNOTATIONS_STORAGE: 0x20,
60   ANNOTATIONS_DISABLE: 0x40,
61   IS_EDITING: 0x80,
62   OPLIST: 0x100,
63 };
64 
65 const AnnotationMode = {
66   DISABLE: 0,
67   ENABLE: 1,
68   ENABLE_FORMS: 2,
69   ENABLE_STORAGE: 3,
70 };
71 
72 const AnnotationEditorPrefix = "pdfjs_internal_editor_";
73 
74 const AnnotationEditorType = {
75   DISABLE: -1,
76   NONE: 0,
77   FREETEXT: 3,
78   HIGHLIGHT: 9,
79   STAMP: 13,
80   INK: 15,
81 };
82 
83 const AnnotationEditorParamsType = {
84   RESIZE: 1,
85   CREATE: 2,
86   FREETEXT_SIZE: 11,
87   FREETEXT_COLOR: 12,
88   FREETEXT_OPACITY: 13,
89   INK_COLOR: 21,
90   INK_THICKNESS: 22,
91   INK_OPACITY: 23,
92   HIGHLIGHT_COLOR: 31,
93   HIGHLIGHT_DEFAULT_COLOR: 32,
94   HIGHLIGHT_THICKNESS: 33,
95   HIGHLIGHT_FREE: 34,
96   HIGHLIGHT_SHOW_ALL: 35,
97 };
98 
99 // Permission flags from Table 22, Section 7.6.3.2 of the PDF specification.
100 const PermissionFlag = {
101   PRINT: 0x04,
102   MODIFY_CONTENTS: 0x08,
103   COPY: 0x10,
104   MODIFY_ANNOTATIONS: 0x20,
105   FILL_INTERACTIVE_FORMS: 0x100,
106   COPY_FOR_ACCESSIBILITY: 0x200,
107   ASSEMBLE: 0x400,
108   PRINT_HIGH_QUALITY: 0x800,
109 };
110 
111 const TextRenderingMode = {
112   FILL: 0,
113   STROKE: 1,
114   FILL_STROKE: 2,
115   INVISIBLE: 3,
116   FILL_ADD_TO_PATH: 4,
117   STROKE_ADD_TO_PATH: 5,
118   FILL_STROKE_ADD_TO_PATH: 6,
119   ADD_TO_PATH: 7,
120   FILL_STROKE_MASK: 3,
121   ADD_TO_PATH_FLAG: 4,
122 };
123 
124 const ImageKind = {
125   GRAYSCALE_1BPP: 1,
126   RGB_24BPP: 2,
127   RGBA_32BPP: 3,
128 };
129 
130 const AnnotationType = {
131   TEXT: 1,
132   LINK: 2,
133   FREETEXT: 3,
134   LINE: 4,
135   SQUARE: 5,
136   CIRCLE: 6,
137   POLYGON: 7,
138   POLYLINE: 8,
139   HIGHLIGHT: 9,
140   UNDERLINE: 10,
141   SQUIGGLY: 11,
142   STRIKEOUT: 12,
143   STAMP: 13,
144   CARET: 14,
145   INK: 15,
146   POPUP: 16,
147   FILEATTACHMENT: 17,
148   SOUND: 18,
149   MOVIE: 19,
150   WIDGET: 20,
151   SCREEN: 21,
152   PRINTERMARK: 22,
153   TRAPNET: 23,
154   WATERMARK: 24,
155   THREED: 25,
156   REDACT: 26,
157 };
158 
159 const AnnotationReplyType = {
160   GROUP: "Group",
161   REPLY: "R",
162 };
163 
164 const AnnotationFlag = {
165   INVISIBLE: 0x01,
166   HIDDEN: 0x02,
167   PRINT: 0x04,
168   NOZOOM: 0x08,
169   NOROTATE: 0x10,
170   NOVIEW: 0x20,
171   READONLY: 0x40,
172   LOCKED: 0x80,
173   TOGGLENOVIEW: 0x100,
174   LOCKEDCONTENTS: 0x200,
175 };
176 
177 const AnnotationFieldFlag = {
178   READONLY: 0x0000001,
179   REQUIRED: 0x0000002,
180   NOEXPORT: 0x0000004,
181   MULTILINE: 0x0001000,
182   PASSWORD: 0x0002000,
183   NOTOGGLETOOFF: 0x0004000,
184   RADIO: 0x0008000,
185   PUSHBUTTON: 0x0010000,
186   COMBO: 0x0020000,
187   EDIT: 0x0040000,
188   SORT: 0x0080000,
189   FILESELECT: 0x0100000,
190   MULTISELECT: 0x0200000,
191   DONOTSPELLCHECK: 0x0400000,
192   DONOTSCROLL: 0x0800000,
193   COMB: 0x1000000,
194   RICHTEXT: 0x2000000,
195   RADIOSINUNISON: 0x2000000,
196   COMMITONSELCHANGE: 0x4000000,
197 };
198 
199 const AnnotationBorderStyleType = {
200   SOLID: 1,
201   DASHED: 2,
202   BEVELED: 3,
203   INSET: 4,
204   UNDERLINE: 5,
205 };
206 
207 const AnnotationActionEventType = {
208   E: "Mouse Enter",
209   X: "Mouse Exit",
210   D: "Mouse Down",
211   U: "Mouse Up",
212   Fo: "Focus",
213   Bl: "Blur",
214   PO: "PageOpen",
215   PC: "PageClose",
216   PV: "PageVisible",
217   PI: "PageInvisible",
218   K: "Keystroke",
219   F: "Format",
220   V: "Validate",
221   C: "Calculate",
222 };
223 
224 const DocumentActionEventType = {
225   WC: "WillClose",
226   WS: "WillSave",
227   DS: "DidSave",
228   WP: "WillPrint",
229   DP: "DidPrint",
230 };
231 
232 const PageActionEventType = {
233   O: "PageOpen",
234   C: "PageClose",
235 };
236 
237 const VerbosityLevel = {
238   ERRORS: 0,
239   WARNINGS: 1,
240   INFOS: 5,
241 };
242 
243 const CMapCompressionType = {
244   NONE: 0,
245   BINARY: 1,
246 };
247 
248 // All the possible operations for an operator list.
249 const OPS = {
250   // Intentionally start from 1 so it is easy to spot bad operators that will be
251   // 0's.
252   // PLEASE NOTE: We purposely keep any removed operators commented out, since
253   //              re-numbering the list would risk breaking third-party users.
254   dependency: 1,
255   setLineWidth: 2,
256   setLineCap: 3,
257   setLineJoin: 4,
258   setMiterLimit: 5,
259   setDash: 6,
260   setRenderingIntent: 7,
261   setFlatness: 8,
262   setGState: 9,
263   save: 10,
264   restore: 11,
265   transform: 12,
266   moveTo: 13,
267   lineTo: 14,
268   curveTo: 15,
269   curveTo2: 16,
270   curveTo3: 17,
271   closePath: 18,
272   rectangle: 19,
273   stroke: 20,
274   closeStroke: 21,
275   fill: 22,
276   eoFill: 23,
277   fillStroke: 24,
278   eoFillStroke: 25,
279   closeFillStroke: 26,
280   closeEOFillStroke: 27,
281   endPath: 28,
282   clip: 29,
283   eoClip: 30,
284   beginText: 31,
285   endText: 32,
286   setCharSpacing: 33,
287   setWordSpacing: 34,
288   setHScale: 35,
289   setLeading: 36,
290   setFont: 37,
291   setTextRenderingMode: 38,
292   setTextRise: 39,
293   moveText: 40,
294   setLeadingMoveText: 41,
295   setTextMatrix: 42,
296   nextLine: 43,
297   showText: 44,
298   showSpacedText: 45,
299   nextLineShowText: 46,
300   nextLineSetSpacingShowText: 47,
301   setCharWidth: 48,
302   setCharWidthAndBounds: 49,
303   setStrokeColorSpace: 50,
304   setFillColorSpace: 51,
305   setStrokeColor: 52,
306   setStrokeColorN: 53,
307   setFillColor: 54,
308   setFillColorN: 55,
309   setStrokeGray: 56,
310   setFillGray: 57,
311   setStrokeRGBColor: 58,
312   setFillRGBColor: 59,
313   setStrokeCMYKColor: 60,
314   setFillCMYKColor: 61,
315   shadingFill: 62,
316   beginInlineImage: 63,
317   beginImageData: 64,
318   endInlineImage: 65,
319   paintXObject: 66,
320   markPoint: 67,
321   markPointProps: 68,
322   beginMarkedContent: 69,
323   beginMarkedContentProps: 70,
324   endMarkedContent: 71,
325   beginCompat: 72,
326   endCompat: 73,
327   paintFormXObjectBegin: 74,
328   paintFormXObjectEnd: 75,
329   beginGroup: 76,
330   endGroup: 77,
331   // beginAnnotations: 78,
332   // endAnnotations: 79,
333   beginAnnotation: 80,
334   endAnnotation: 81,
335   // paintJpegXObject: 82,
336   paintImageMaskXObject: 83,
337   paintImageMaskXObjectGroup: 84,
338   paintImageXObject: 85,
339   paintInlineImageXObject: 86,
340   paintInlineImageXObjectGroup: 87,
341   paintImageXObjectRepeat: 88,
342   paintImageMaskXObjectRepeat: 89,
343   paintSolidColorImageMask: 90,
344   constructPath: 91,
345   setStrokeTransparent: 92,
346   setFillTransparent: 93,
347 };
348 
349 const PasswordResponses = {
350   NEED_PASSWORD: 1,
351   INCORRECT_PASSWORD: 2,
352 };
353 
354 let verbosity = VerbosityLevel.WARNINGS;
355 
366 // A notice for devs. These are good for things that are helpful to devs, such
367 // as warning that Workers were disabled, which is important to devs but not
368 // end users.
374 
375 // Non-fatal warnings.
381 
392 // Checks if URLs use one of the allowed protocols, e.g. to avoid XSS.
405 
468 const BaseException = (function BaseExceptionClosure() {
469   // eslint-disable-next-line no-shadow
470   function BaseException(message, name) {
471     if (
472       (typeof PDFJSDev === "undefined" || PDFJSDev.test("TESTING")) &&
473       this.constructor === BaseException
474     ) {
475       unreachable("Cannot initialize BaseException.");
476     }
477     this.message = message;
478     this.name = name;
479   }
480   BaseException.prototype = new Error();
481   BaseException.constructor = BaseException;
482 
483   return BaseException;
484 })();
485 
586 // Ensure that the returned Object has a `null` prototype; hence why
587 // `Object.fromEntries(...)` is not used.
595 
596 // Checks the endianness of the platform.
603 
604 // Checks if it's possible to eval JS expressions.
613 
614 class FeatureTest {
618 
631   static get platform() {
632     if (
633       (typeof PDFJSDev !== "undefined" && PDFJSDev.test("MOZCENTRAL")) ||
634       (typeof navigator !== "undefined" &&
635         typeof navigator?.platform === "string")
636     ) {
637       return shadow(this, "platform", {
638         isMac: navigator.platform.includes("Mac"),
639       });
640     }
641     return shadow(this, "platform", { isMac: false });
642   }
643 
651 }
652 
653 const hexNumbers = Array.from(Array(256).keys(), n =>
654   n.toString(16).padStart(2, "0")
655 );
656 
948 const PDFStringTranslateTable = [
949   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2d8,
950   0x2c7, 0x2c6, 0x2d9, 0x2dd, 0x2db, 0x2da, 0x2dc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
951   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
952   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
953   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
954   0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192,
955   0x2044, 0x2039, 0x203a, 0x2212, 0x2030, 0x201e, 0x201c, 0x201d, 0x2018,
956   0x2019, 0x201a, 0x2122, 0xfb01, 0xfb02, 0x141, 0x152, 0x160, 0x178, 0x17d,
957   0x131, 0x142, 0x153, 0x161, 0x17e, 0, 0x20ac,
958 ];
959 
1042 let NormalizeRegex = null;
1043 let NormalizationMap = null;
1060 
1082 const AnnotationPrefix = "pdfjs_internal_id_";
1083 
1084 const FontRenderOps = {
1085   BEZIER_CURVE_TO: 0,
1086   MOVE_TO: 1,
1087   LINE_TO: 2,
1088   QUADRATIC_CURVE_TO: 3,
1089   RESTORE: 4,
1090   SAVE: 5,
1091   SCALE: 6,
1092   TRANSFORM: 7,
1093   TRANSLATE: 8,
1094 };
1095 
</code>

Test file:
<test_file>
File:
test/unit/text_layer_spec.js
/* Copyright 2022 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { buildGetDocumentParams } from "./test_utils.js";
import { getDocument } from "../../src/display/api.js";
import { isNodeJS } from "../../src/shared/util.js";
import { TextLayer } from "../../src/display/text_layer.js";
</test_file>

Your task:
You are a software tester at pdf.js.
1. Examine the existing test file. You may reuse any imports, helpers or setup blocks it already has.
2. Write exactly one javascript test `it("...", async () => {...})` block.
3. Your test must fail on the code before the patch, and pass after, hence the test will verify that the patch resolves the issue.
4. The test must be self-contained and to-the-point.
5. If you need something new use only the provided imports (respect the paths exactly how they are given) by importing dynamically for compatibility with Node.js — no new dependencies. 
6. Return only the javascript code for the new `it(...)` block (no comments or explanations).

Example structure:
it("should <describe behavior>", async () => {
  const { example } = await import("../../src/core/example.js");
  <initialize required variables>;
  <define expected variable>;
  <generate actual variables>;
  <compare expected with actual>;
});


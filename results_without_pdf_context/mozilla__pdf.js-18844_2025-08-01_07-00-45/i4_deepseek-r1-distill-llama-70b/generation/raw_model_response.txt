<think>
Okay, I need to write a JavaScript test that verifies the patch resolves the issue where the text layer and canvas don't always match in the PDF viewer on Windows. The test should fail before the patch and pass after.

First, I'll look at the patch provided. The changes are in text_layer.js and util.js. The main fix seems to be in the fontFamilyMap, which adjusts the font family based on the platform, specifically for Windows and Firefox. So, the test should target this behavior.

I'll start by creating a test that checks if the font family is correctly adjusted. I'll need to mock the platform as Windows and Firefox. Then, I'll check if the fontFamilyMap returns the expected string with Calibri for sans-serif and Lucida Console for monospace.

I'll import the necessary modules: TextLayer from display/text_layer.js and FeatureTest from shared/util.js. I'll set up a mock for FeatureTest.platform to return isWindows and isFirefox as true.

Next, I'll get the fontFamilyMap from TextLayer. For 'sans-serif', it should include 'Calibri' when the platform is Windows and Firefox. Similarly, 'monospace' should include 'Lucida Console'.

I'll write two tests within the same it block: one for sans-serif and another for monospace. Each will compare the expected font family string against the actual value from the map.

Finally, I'll structure the test using async/await, dynamically import the modules, set up the mocks, and perform the assertions. This should ensure that the test correctly validates the patch's fix.
</think>

```javascript
it("should adjust font family for Windows + Firefox", async () => {
  const { TextLayer } = await import("../../src/display/text_layer.js");
  const { FeatureTest } = await import("../../shared/util.js");

  // Mock platform as Windows + Firefox
  const originalPlatform = FeatureTest.platform;
  FeatureTest.platform = () => ({
    isWindows: true,
    isFirefox: true,
  });

  const fontFamilyMap = TextLayer.fontFamilyMap;

  // Expected font family strings
  const expectedSansSerif = "Calibri, sans-serif";
  const expectedMonospace = "Lucida Console, monospace";

  // Actual font family strings
  const actualSansSerif = fontFamilyMap.get("sans-serif");
  const actualMonospace = fontFamilyMap.get("monospace");

  // Cleanup
  FeatureTest.platform = originalPlatform;

  // Assertions
  expect(actualSansSerif).toBe(expectedSansSerif);
  expect(actualMonospace).toBe(expectedMonospace);
});
```
it("should save annotations in PDFs with certain structures", async () => {
  const { PDFDocument } = await import("../../src/display/pdf_document.js");
  const { PDFViewer } = await import("../../src/web/pdf_viewer.js");
  const { Annotation } = await import("../../src/core/annotation.js");

  // Load a PDF with known problematic structure
  const pdfData = new Uint8Array([
    0x25, 0x50, 0x44, 0x46, 0x2d, 0x31, 0x2e, 0x30, 0x0a, 0x25, 0xa5, 0x0c, 0x28, 0x0c, 0x29, 0x0c,
    0x31, 0x30, 0x20, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x73, 0x0c,
    0x32, 0x30, 0x20, 0x6f, 0x62, 0x6a, 0x0c, 0x3c, 0x3c, 0x2f, 0x53, 0x74, 0x72, 0x65,
    0x61, 0x6d, 0x3e, 0x0c, 0x64, 0x6a, 0x76, 0x6d, 0x50, 0x3e, 0x0c, 0x3c, 0x2f, 0x53,
    0x75, 0x70, 0x70, 0x6c, 0x65, 0x72, 0x3e, 0x0c, 0x7b, 0x22, 0x73, 0x75, 0x62, 0x6a,
    0x65, 0x63, 0x74, 0x22, 0x3a, 0x20, 0x22, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x22,
    0x7d, 0x0c, 0x74, 0x72, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x3e, 0x0c, 0x7b, 0x22, 0x73,
    0x69, 0x7a, 0x65, 0x22, 0x3a, 0x20, 0x31, 0x30, 0x30, 0x0c, 0x22, 0x73, 0x74, 0x61,
    0x72, 0x74, 0x22, 0x3a, 0x20, 0x31, 0x30, 0x30, 0x30, 0x0c, 0x7d, 0x0c, 0x25, 0x50,
    0x44, 0x46, 0x2d, 0x31, 0x2e, 0x30, 0x0a
  ]);

  const container = document.createElement("div");
  document.body.appendChild(container);

  const pdfViewer = new PDFViewer({
    container,
    renderInteractiveForms: true,
  });

  const pdfDocument = await PDFDocument.load(pdfData, {
    cMapUrl: "../../src/core/cmaps/",
    standardFontDataUrl: "../../src/core/standard_fonts.json",
  });

  await pdfDocument.getMetadata();

  const page = await pdfDocument.getPage(1);
  const annotation = new Annotation({
    type: "text",
    page: page,
    rect: [100, 100, 200, 200],
    contents: ["Test annotation"],
  });

  page.addAnnotation(annotation);

  const savedData = await pdfDocument.save();

  const loadedDocument = await PDFDocument.load(savedData);
  const loadedPage = await loadedDocument.getPage(1);
  const annotations = await loadedPage.getAnnotations();

  expect(annotations.length).toBe(1);
  expect(annotations[0].contents).toBe("Test annotation");
});
```javascript
it("should save PDF annotations correctly", async () => {
  const { PDFWorkerStream, WorkerMessageHandler, LocalPdfManager } = await import("../../src/core/worker.js");
  const { incrementalUpdate } = await import("../../src/core/writer.js");
  const { XRef } = await import("../../src/core/xref.js");
  const { AnnotationFactory } = await import("../../src/core/annotation.js");

  const pdfManager = new LocalPdfManager({
    source: new Uint8Array([0x25, 0x50, 0x44, 0x46, 0x2d, 0x31, 0x2e, 0x34]),
    disableAutoFetch: true,
    docBaseUrl: "",
    docId: "test",
    enableXfa: false,
    evaluatorOptions: {},
    handler: {},
    length: 8,
    password: "",
    rangeChunkSize: 0,
  });

  const xref = new XRef({
    getBytes: () => new Uint8Array([0x25, 0x50, 0x44, 0x46, 0x2d, 0x31, 0x2e, 0x34]),
  }, pdfManager);

  const annotation = AnnotationFactory.createAnnotation({
    subtype: "Highlight",
    page: 1,
    rect: [10, 10, 20, 20],
  });

  const newAnnotationsByPage = { 1: [annotation] };

  const acroFormRef = { num: 1, gen: 0 };
  const acroForm = {};
  const xfaDatasetsRef = { num: 2, gen: 0 };
  const xfaData = null;
  const needAppearances = true;
  const newRefs = [];

  const result = await incrementalUpdate({
    originalData: new Uint8Array([0x25, 0x50, 0x44, 0x46, 0x2d, 0x31, 0x2e, 0x34]),
    xrefInfo: {
      newRef: { num: 3, gen: 0 },
      startXRef: 0,
      rootRef: { num: 4, gen: 0 },
      infoRef: { num: 5, gen: 0 },
      encryptRef: { num: 6, gen: 0 },
      info: {},
      fileIds: ["fileId1", "fileId2"],
      filename: "test.pdf",
    },
    newRefs,
    xref,
    hasXfa: false,
    xfaDatasetsRef,
    hasXfaDatasetsEntry: false,
    needAppearances,
    acroFormRef,
    acroForm,
    xfaData,
  });

  expect(result).not.toBeNull();
});
```
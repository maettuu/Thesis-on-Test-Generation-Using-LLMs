Before you begin:
- Keep going until the job is completely solved — don’t stop halfway.
- If you’re unsure about the behavior, reread the provided patch carefully; do not hallucinate.
- Plan your approach before writing code by reflecting on whether the test truly fails before and passes after.

Issue:
<issue>
NVDA reads out loud extra text when reaching an Added image with Alt text while Add image button is enabled
</issue>

Patch:
<patch>
diff --git a/src/display/editor/alt_text.js b/src/display/editor/alt_text.js
--- a/src/display/editor/alt_text.js
+++ b/src/display/editor/alt_text.js
@@ -279,8 +279,7 @@ class AltText {
       this.#altTextTooltip = tooltip = document.createElement("span");
       tooltip.className = "tooltip";
       tooltip.setAttribute("role", "tooltip");
-      const id = (tooltip.id = `alt-text-tooltip-${this.#editor.id}`);
-      button.setAttribute("aria-describedby", id);
+      tooltip.id = `alt-text-tooltip-${this.#editor.id}`;
 
       const DELAY_TO_SHOW_TOOLTIP = 100;
       const signal = this.#editor._uiManager._signal;

diff --git a/src/display/editor/editor.js b/src/display/editor/editor.js
--- a/src/display/editor/editor.js
+++ b/src/display/editor/editor.js
@@ -993,6 +993,15 @@ class AnnotationEditor {
     this.#altText?.destroy();
   }
 
+  addContainer(container) {
+    const editToolbarDiv = this._editToolbar?.div;
+    if (editToolbarDiv) {
+      editToolbarDiv.before(container);
+    } else {
+      this.div.append(container);
+    }
+  }
+
   getClientDimensions() {
     return this.div.getBoundingClientRect();
   }

diff --git a/src/display/editor/stamp.js b/src/display/editor/stamp.js
--- a/src/display/editor/stamp.js
+++ b/src/display/editor/stamp.js
@@ -373,6 +373,7 @@ class StampEditor extends AnnotationEditor {
 
     super.render();
     this.div.hidden = true;
+    this.div.setAttribute("role", "figure");
 
     this.addAltTextButton();
 
@@ -425,7 +426,9 @@ class StampEditor extends AnnotationEditor {
 
     this._uiManager.enableWaiting(false);
     const canvas = (this.#canvas = document.createElement("canvas"));
-    div.append(canvas);
+    canvas.setAttribute("role", "img");
+    this.addContainer(canvas);
+
     if (
       !this._uiManager.useNewAltTextWhenAddingImage ||
       !this._uiManager.useNewAltTextFlow

diff --git a/src/display/editor/toolbar.js b/src/display/editor/toolbar.js
--- a/src/display/editor/toolbar.js
+++ b/src/display/editor/toolbar.js
@@ -26,17 +26,8 @@ class EditorToolbar {
 
   #altText = null;
 
-  static #l10nRemove = null;
-
   constructor(editor) {
     this.#editor = editor;
-
-    EditorToolbar.#l10nRemove ||= Object.freeze({
-      freetext: "pdfjs-editor-remove-freetext-button",
-      highlight: "pdfjs-editor-remove-highlight-button",
-      ink: "pdfjs-editor-remove-ink-button",
-      stamp: "pdfjs-editor-remove-stamp-button",
-    });
   }
 
   render() {
@@ -71,6 +62,10 @@ class EditorToolbar {
     return editToolbar;
   }
 
+  get div() {
+    return this.#toolbar;
+  }
+
   static #pointerDown(e) {
     e.stopPropagation();
   }
@@ -114,19 +109,20 @@ class EditorToolbar {
   }
 
   #addDeleteButton() {
-    const { editorType, _uiManager } = this.#editor;
-
     const button = document.createElement("button");
     button.className = "delete";
     button.tabIndex = 0;
-    button.setAttribute("data-l10n-id", EditorToolbar.#l10nRemove[editorType]);
+    button.setAttribute(
+      "data-l10n-id",
+      `pdfjs-editor-remove-${this.#editor.editorType}-button`
+    );
     this.#addListenersToElement(button);
     button.addEventListener(
       "click",
       e => {
-        _uiManager.delete();
+        this.#editor._uiManager.delete();
       },
-      { signal: _uiManager._signal }
+      { signal: this.#editor._uiManager._signal }
     );
     this.#buttons.append(button);
   }


</patch>

Imports:
<imports>
Available Packages
Dev Dependencies:
- @babel/core: ^7.25.2
- @babel/preset-env: ^7.25.4
- @babel/runtime: ^7.25.4
- @fluent/bundle: ^0.18.0
- @fluent/dom: ^0.10.0
- @jazzer.js/core: ^2.1.0
- @metalsmith/layouts: ^2.7.0
- @metalsmith/markdown: ^1.10.0
- autoprefixer: ^10.4.20
- babel-loader: ^9.1.3
- caniuse-lite: ^1.0.30001653
- canvas: ^2.11.2
- core-js: ^3.38.1
- eslint: ^8.57.0
- eslint-config-prettier: ^9.1.0
- eslint-plugin-fetch-options: ^0.0.5
- eslint-plugin-html: ^8.1.1
- eslint-plugin-import: ^2.29.1
- eslint-plugin-jasmine: ^4.2.1
- eslint-plugin-json: ^3.1.0
- eslint-plugin-no-unsanitized: ^4.0.2
- eslint-plugin-prettier: ^5.2.1
- eslint-plugin-sort-exports: ^0.9.1
- eslint-plugin-unicorn: ^55.0.0
- gulp: ^5.0.0
- gulp-cli: ^3.0.0
- gulp-postcss: ^10.0.0
- gulp-rename: ^2.0.0
- gulp-replace: ^1.1.4
- gulp-zip: ^6.0.0
- highlight.js: ^11.10.0
- jasmine: ^5.2.0
- jsdoc: ^4.0.3
- jstransformer-nunjucks: ^1.2.0
- metalsmith: ^2.6.3
- metalsmith-html-relative: ^2.0.1
- ordered-read-streams: ^2.0.0
- path2d: ^0.2.1
- pngjs: ^7.0.0
- postcss: ^8.4.41
- postcss-dark-theme-class: ^1.3.0
- postcss-dir-pseudo-class: ^9.0.0
- postcss-discard-comments: ^7.0.2
- postcss-nesting: ^13.0.0
- prettier: ^3.3.3
- puppeteer: ^23.1.1
- stylelint: ^16.8.2
- stylelint-prettier: ^5.0.2
- svglint: ^3.0.0
- terser-webpack-plugin: ^5.3.10
- tsc-alias: ^1.8.10
- ttest: ^4.0.0
- typescript: ^5.5.4
- vinyl: ^3.0.0
- webpack: ^5.94.0
- webpack-stream: ^7.0.0
- yargs: ^17.7.2

Engines:
- node: >=18

Available Relative Imports:
- `../../src/core/annotation.js`: Annotation, AnnotationBorderStyle, AnnotationFactory, MarkupAnnotation, getQuadPoints
- `../../src/core/bidi.js`: bidi
- `../../src/core/cff_parser.js`: CFFCharset, CFFCompiler, CFFFDSelect, CFFParser, CFFStrings
- `../../src/core/cmap.js`: CMap, CMapFactory, IdentityCMap
- `../../src/core/colorspace.js`: ColorSpace
- `../../src/core/core_utils.js`: arrayBuffersToBytes, encodeToXmlString, escapePDFName, escapeString, getInheritableProperty, getSizeInBytes, isAscii, isWhiteSpace, log2, numberToString, parseXFAPath, recoverJsURL, stringToUTF16HexString, stringToUTF16String, toRomanNumerals, validateCSSFont
- `../../src/core/crypto.js`: AES128Cipher, AES256Cipher, ARCFourCipher, CipherTransformFactory, PDF17, PDF20, calculateMD5, calculateSHA256, calculateSHA384, calculateSHA512
- `../../src/core/default_appearance.js`: createDefaultAppearance, parseAppearanceStream, parseDefaultAppearance
- `../../src/core/document.js`: PDFDocument, Page
- `../../src/core/encodings.js`: getEncoding
- `../../src/core/evaluator.js`: PartialEvaluator
- `../../src/core/flate_stream.js`: FlateStream
- `../../src/core/font_substitutions.js`: getFontSubstitution
- `../../src/core/fonts_utils.js`: SEAC_ANALYSIS_ENABLED
- `../../src/core/function.js`: PDFFunctionFactory, PostScriptCompiler, PostScriptEvaluator
- `../../src/core/glyphlist.js`: getDingbatsGlyphsUnicode, getGlyphsUnicode
- `../../src/core/image_utils.js`: GlobalImageCache, LocalColorSpaceCache
- `../../src/core/jbig2.js`: Jbig2Error, Jbig2Image
- `../../src/core/jpg.js`: JpegError, JpegImage
- `../../src/core/jpx.js`: JpxError, JpxImage
- `../../src/core/metadata_parser.js`: MetadataParser
- `../../src/core/operator_list.js`: OperatorList
- `../../src/core/parser.js`: Lexer, Linearization, Parser
- `../../src/core/predictor_stream.js`: PredictorStream
- `../../src/core/primitives.js`: Cmd, Dict, EOF, Name, Ref, RefSet, RefSetCache, isCmd, isDict, isName, isRefsEqual
- `../../src/core/ps_parser.js`: PostScriptLexer, PostScriptParser
- `../../src/core/stream.js`: NullStream, Stream, StringStream
- `../../src/core/type1_parser.js`: Type1Parser
- `../../src/core/unicode.js`: getCharUnicodeCategory, getUnicodeForGlyph, getUnicodeRangeFor, mapSpecialUnicodeValues
- `../../src/core/worker.js`: WorkerMessageHandler, WorkerTask
- `../../src/core/writer.js`: incrementalUpdate, writeDict
- `../../src/core/xfa/bind.js`: Binder
- `../../src/core/xfa/data.js`: DataHandler
- `../../src/core/xfa/factory.js`: XFAFactory
- `../../src/core/xfa/formcalc_lexer.js`: Lexer, TOKEN, Token
- `../../src/core/xfa/formcalc_parser.js`: Errors, Parser
- `../../src/core/xfa/parser.js`: XFAParser
- `../../src/core/xfa/som.js`: searchNode
- `../../src/core/xfa/symbol_utils.js`: $dump, $getChildren, $getChildrenByClass, $getChildrenByName, $text, $uid
- `../../src/core/xml_parser.js`: SimpleXMLParser, XMLParserBase
- `../../src/display/annotation_layer.js`: AnnotationLayer
- `../../src/display/annotation_storage.js`: AnnotationStorage
- `../../src/display/api.js`: DefaultCMapReaderFactory, DefaultCanvasFactory, DefaultStandardFontDataFactory, LoopbackPort, PDFDataRangeTransport, PDFDocumentLoadingTask, PDFDocumentProxy, PDFPageProxy, PDFWorker, RenderTask, build, getDocument, version
- `../../src/display/display_utils.js`: DOMCanvasFactory, DOMSVGFactory, PDFDateString, PageViewport, PixelsPerInch, RenderingCancelledException, StatTimer, fetchData, getFilenameFromUrl, getPdfFilenameFromUrl, getXfaPageViewport, isDataScheme, isPdfFile, isValidFetchUrl, noContextMenu, setLayerDimensions
- `../../src/display/draw_layer.js`: DrawLayer
- `../../src/display/editor/annotation_editor_layer.js`: AnnotationEditorLayer
- `../../src/display/editor/color_picker.js`: ColorPicker
- `../../src/display/editor/tools.js`: AnnotationEditorUIManager, CommandManager
- `../../src/display/fetch_stream.js`: PDFFetchStream
- `../../src/display/metadata.js`: Metadata
- `../../src/display/network.js`: PDFNetworkStream
- `../../src/display/network_utils.js`: createResponseStatusError, extractFilenameFromHeader, validateRangeRequestCapabilities, validateResponseStatus
- `../../src/display/node_stream.js`: PDFNodeStream
- `../../src/display/node_utils.js`: NodePackages
- `../../src/display/text_layer.js`: TextLayer
- `../../src/display/worker_options.js`: GlobalWorkerOptions
- `../../src/display/xfa_layer.js`: XfaLayer
- `../../src/shared/message_handler.js`: MessageHandler
- `../../src/shared/murmurhash3.js`: MurmurHash3_64
- `../../src/shared/util.js`: AbortException, AnnotationBorderStyleType, AnnotationEditorParamsType, AnnotationEditorType, AnnotationFieldFlag, AnnotationFlag, AnnotationMode, AnnotationType, BaseException, CMapCompressionType, FeatureTest, FormatError, ImageKind, InvalidPDFException, MissingPDFException, OPS, PasswordException, PasswordResponses, PermissionFlag, RenderingIntentFlag, UnexpectedResponseException, UnknownErrorException, Util, VerbosityLevel, assert, bytesToString, createValidAbsoluteUrl, getModificationDate, getVerbosityLevel, isNodeJS, normalizeUnicode, objectSize, setVerbosityLevel, shadow, string32, stringToBytes, stringToPDFString, stringToUTF8String
- `../../web/annotation_layer_builder.js`: AnnotationLayerBuilder
- `../../web/app_options.js`: AppOptions, OptionKind
- `../../web/download_manager.js`: DownloadManager
- `../../web/event_utils.js`: EventBus, WaitOnType, waitOnEventOrTimeout
- `../../web/genericl10n.js`: GenericL10n
- `../../web/pdf_find_controller.js`: FindState, PDFFindController
- `../../web/pdf_find_utils.js`: CharacterType, getCharacterType
- `../../web/pdf_history.js`: PDFHistory, isDestArraysEqual, isDestHashesEqual
- `../../web/pdf_link_service.js`: LinkTarget, PDFLinkService, SimpleLinkService
- `../../web/pdf_page_view.js`: PDFPageView
- `../../web/pdf_scripting_manager.component.js`: PDFScriptingManager
- `../../web/pdf_single_page_viewer.js`: PDFSinglePageViewer
- `../../web/pdf_viewer.js`: PDFPageViewBuffer, PDFViewer
- `../../web/struct_tree_layer_builder.js`: StructTreeLayerBuilder
- `../../web/text_layer_builder.js`: TextLayerBuilder
- `../../web/ui_utils.js`: AutoPrintRegExp, ProgressBar, RenderingStates, ScrollMode, SpreadMode, backtrackBeforeAllVisibleElements, binarySearchFirstItem, getPageSizeInches, getVisibleElements, isPortraitOrientation, isValidRotation, parseQueryString, removeNullCharacters
- `../../web/xfa_layer_builder.js`: XfaLayerBuilder
- `./test_utils.js`: CMAP_URL, DefaultFileReaderFactory, STANDARD_FONT_DATA_URL, TEST_PDFS_PATH, XRefMock, buildGetDocumentParams, createIdFactory, createTemporaryNodeServer
- `./testreporter.js`: TestReporter
</imports>

Code:
<code>
File:
src/display/editor/alt_text.js
1 /* Copyright 2023 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 import { noContextMenu } from "../display_utils.js";
17 
18 class AltText {
19   #altText = null;
20 
21   #altTextDecorative = false;
22 
23   #altTextButton = null;
24 
25   #altTextTooltip = null;
26 
27   #altTextTooltipTimeout = null;
28 
29   #altTextWasFromKeyBoard = false;
30 
31   #badge = null;
32 
33   #editor = null;
34 
35   #guessedText = null;
36 
37   #textWithDisclaimer = null;
38 
39   #useNewAltTextFlow = false;
40 
41   static _l10nPromise = null;
42 
43   constructor(editor) {
44     this.#editor = editor;
45     this.#useNewAltTextFlow = editor._uiManager.useNewAltTextFlow;
46   }
47 
231   async #setState() {
232     const button = this.#altTextButton;
233     if (!button) {
234       return;
235     }
236 
237     if (this.#useNewAltTextFlow) {
238       // If we've an alt text, we get an "added".
239       // If we've a guessed text and the alt text has never been set, we get a
240       // "to-review" been set.
241       // Otherwise, we get a "missing".
242       const label = this.#label;
243       // TODO: Update the l10n keys to avoid this.
244       const type = label === "review" ? "to-review" : label;
245       button.classList.toggle("done", !!this.#altText);
246       AltText._l10nPromise
247         .get(`pdfjs-editor-new-alt-text-${type}-button-label`)
248         .then(msg => {
249           button.setAttribute("aria-label", msg);
250           // We can't just use button.textContent here, because it would remove
251           // the existing tooltip element.
252           for (const child of button.childNodes) {
253             if (child.nodeType === Node.TEXT_NODE) {
254               child.textContent = msg;
255               break;
256             }
257           }
258         });
259       if (!this.#altText) {
260         this.#altTextTooltip?.remove();
261         return;
262       }
263     } else {
264       if (!this.#altText && !this.#altTextDecorative) {
265         button.classList.remove("done");
266         this.#altTextTooltip?.remove();
267         return;
268       }
269       button.classList.add("done");
270       AltText._l10nPromise
271         .get("pdfjs-editor-alt-text-edit-button-label")
272         .then(msg => {
273           button.setAttribute("aria-label", msg);
274         });
275     }
276 
277     let tooltip = this.#altTextTooltip;
278     if (!tooltip) {
279       this.#altTextTooltip = tooltip = document.createElement("span");
280       tooltip.className = "tooltip";
281       tooltip.setAttribute("role", "tooltip");
282       const id = (tooltip.id = `alt-text-tooltip-${this.#editor.id}`);
283       button.setAttribute("aria-describedby", id);
284 
285       const DELAY_TO_SHOW_TOOLTIP = 100;
286       const signal = this.#editor._uiManager._signal;
287       signal.addEventListener(
288         "abort",
289         () => {
290           clearTimeout(this.#altTextTooltipTimeout);
291           this.#altTextTooltipTimeout = null;
292         },
293         { once: true }
294       );
295       button.addEventListener(
296         "mouseenter",
297         () => {
298           this.#altTextTooltipTimeout = setTimeout(() => {
299             this.#altTextTooltipTimeout = null;
300             this.#altTextTooltip.classList.add("show");
301             this.#editor._reportTelemetry({
302               action: "alt_text_tooltip",
303             });
304           }, DELAY_TO_SHOW_TOOLTIP);
305         },
306         { signal }
307       );
308       button.addEventListener(
309         "mouseleave",
310         () => {
311           if (this.#altTextTooltipTimeout) {
312             clearTimeout(this.#altTextTooltipTimeout);
313             this.#altTextTooltipTimeout = null;
314           }
315           this.#altTextTooltip?.classList.remove("show");
316         },
317         { signal }
318       );
319     }
320     tooltip.innerText = this.#altTextDecorative
321       ? await AltText._l10nPromise.get(
322           "pdfjs-editor-alt-text-decorative-tooltip"
323         )
324       : this.#altText;
325 
326     if (!tooltip.parentNode) {
327       button.append(tooltip);
328     }
329 
330     const element = this.#editor.getImageForAltText();
331     element?.setAttribute("aria-describedby", tooltip.id);
332   }
333 }
334 
File:
src/display/editor/editor.js
1 /* Copyright 2022 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 // eslint-disable-next-line max-len
18 
19 import {
20   AnnotationEditorUIManager,
21   bindEvents,
22   ColorManager,
23   KeyboardManager,
24 } from "./tools.js";
25 import { FeatureTest, shadow, unreachable } from "../../shared/util.js";
26 import { AltText } from "./alt_text.js";
27 import { EditorToolbar } from "./toolbar.js";
28 import { noContextMenu } from "../display_utils.js";
29 
39 /**
40  * Base class for editors.
41  */
42 class AnnotationEditor {
43   #accessibilityData = null;
44 
45   #allResizerDivs = null;
46 
47   #altText = null;
48 
49   #disabled = false;
50 
51   #keepAspectRatio = false;
52 
53   #resizersDiv = null;
54 
55   #savedDimensions = null;
56 
57   #focusAC = null;
58 
59   #focusedResizerName = "";
60 
61   #hasBeenClicked = false;
62 
63   #initialPosition = null;
64 
65   #isEditing = false;
66 
67   #isInEditMode = false;
68 
69   #isResizerEnabledForKeyboard = false;
70 
71   #moveInDOMTimeout = null;
72 
73   #prevDragX = 0;
74 
75   #prevDragY = 0;
76 
77   #telemetryTimeouts = null;
78 
79   _editToolbar = null;
80 
81   _initialOptions = Object.create(null);
82 
83   _isVisible = true;
84 
85   _uiManager = null;
86 
87   _focusEventsAllowed = true;
88 
89   static _l10nPromise = null;
90 
91   static _l10nResizer = null;
92 
93   #isDraggable = false;
94 
95   #zIndex = AnnotationEditor._zIndex++;
96 
97   static _borderLineWidth = -1;
98 
99   static _colorManager = new ColorManager();
100 
101   static _zIndex = 1;
102 
103   // Time to wait (in ms) before sending the telemetry data.
104   // We wait a bit to avoid sending too many requests when changing something
105   // like the thickness of a line.
106   static _telemetryTimeout = 1000;
107 
141   /**
142    * @param {AnnotationEditorParameters} parameters
143    */
144   constructor(parameters) {
145     if (
146       (typeof PDFJSDev === "undefined" || PDFJSDev.test("TESTING")) &&
147       this.constructor === AnnotationEditor
148     ) {
149       unreachable("Cannot initialize AnnotationEditor.");
150     }
151 
152     this.parent = parameters.parent;
153     this.id = parameters.id;
154     this.width = this.height = null;
155     this.pageIndex = parameters.parent.pageIndex;
156     this.name = parameters.name;
157     this.div = null;
158     this._uiManager = parameters.uiManager;
159     this.annotationElementId = null;
160     this._willKeepAspectRatio = false;
161     this._initialOptions.isCentered = parameters.isCentered;
162     this._structTreeParentId = null;
163 
164     const {
165       rotation,
166       rawDims: { pageWidth, pageHeight, pageX, pageY },
167     } = this.parent.viewport;
168 
169     this.rotation = rotation;
170     this.pageRotation =
171       (360 + rotation - this._uiManager.viewParameters.rotation) % 360;
172     this.pageDimensions = [pageWidth, pageHeight];
173     this.pageTranslation = [pageX, pageY];
174 
175     const [width, height] = this.parentDimensions;
176     this.x = parameters.x / width;
177     this.y = parameters.y / height;
178 
179     this.isAttachedToDOM = false;
180     this.deleted = false;
181   }
182 
1795 }
1796 
1797 // This class is used to fake an editor which has been deleted.
1813 
File:
src/display/editor/stamp.js
1 /* Copyright 2022 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 import { AnnotationEditorType, shadow } from "../../shared/util.js";
17 import { AnnotationEditor } from "./editor.js";
18 import { PixelsPerInch } from "../display_utils.js";
19 import { StampAnnotationElement } from "../annotation_layer.js";
20 
21 /**
22  * Basic text editor in order to create a FreeTex annotation.
23  */
24 class StampEditor extends AnnotationEditor {
25   #bitmap = null;
26 
27   #bitmapId = null;
28 
29   #bitmapPromise = null;
30 
31   #bitmapUrl = null;
32 
33   #bitmapFile = null;
34 
35   #bitmapFileName = "";
36 
37   #canvas = null;
38 
39   #observer = null;
40 
41   #resizeTimeoutId = null;
42 
43   #isSvg = false;
44 
45   #hasBeenAddedInUndoStack = false;
46 
47   static _type = "stamp";
48 
49   static _editorType = AnnotationEditorType.STAMP;
50 
51   constructor(params) {
52     super({ ...params, name: "stampEditor" });
53     this.#bitmapUrl = params.bitmapUrl;
54     this.#bitmapFile = params.bitmapFile;
55   }
56 
362   /** @inheritdoc */
363   render() {
364     if (this.div) {
365       return this.div;
366     }
367 
368     let baseX, baseY;
369     if (this.width) {
370       baseX = this.x;
371       baseY = this.y;
372     }
373 
374     super.render();
375     this.div.hidden = true;
376 
377     this.addAltTextButton();
378 
379     if (this.#bitmap) {
380       this.#createCanvas();
381     } else {
382       this.#getBitmap();
383     }
384 
385     if (this.width) {
386       // This editor was created in using copy (ctrl+c).
387       const [parentWidth, parentHeight] = this.parentDimensions;
388       this.setAt(
389         baseX * parentWidth,
390         baseY * parentHeight,
391         this.width * parentWidth,
392         this.height * parentHeight
393       );
394     }
395 
396     return this.div;
397   }
398 
399   #createCanvas() {
400     const { div } = this;
401     let { width, height } = this.#bitmap;
402     const [pageWidth, pageHeight] = this.pageDimensions;
403     const MAX_RATIO = 0.75;
404     if (this.width) {
405       width = this.width * pageWidth;
406       height = this.height * pageHeight;
407     } else if (
408       width > MAX_RATIO * pageWidth ||
409       height > MAX_RATIO * pageHeight
410     ) {
411       // If the the image is too big compared to the page dimensions
412       // (more than MAX_RATIO) then we scale it down.
413       const factor = Math.min(
414         (MAX_RATIO * pageWidth) / width,
415         (MAX_RATIO * pageHeight) / height
416       );
417       width *= factor;
418       height *= factor;
419     }
420     const [parentWidth, parentHeight] = this.parentDimensions;
421     this.setDims(
422       (width * parentWidth) / pageWidth,
423       (height * parentHeight) / pageHeight
424     );
425 
426     this._uiManager.enableWaiting(false);
427     const canvas = (this.#canvas = document.createElement("canvas"));
428     div.append(canvas);
429     if (
430       !this._uiManager.useNewAltTextWhenAddingImage ||
431       !this._uiManager.useNewAltTextFlow
432     ) {
433       div.hidden = false;
434     }
435     this.#drawBitmap(width, height);
436     this.#createObserver();
437     if (!this.#hasBeenAddedInUndoStack) {
438       this.parent.addUndoableEditor(this);
439       this.#hasBeenAddedInUndoStack = true;
440     }
441 
442     // There are multiple ways to add an image to the page, so here we just
443     // count the number of times an image is added to the page whatever the way
444     // is.
445     this._reportTelemetry({
446       action: "inserted_image",
447     });
448     if (this.#bitmapFileName) {
449       canvas.setAttribute("aria-label", this.#bitmapFileName);
450     }
451   }
452 
806 }
807 
File:
src/display/editor/toolbar.js
1 /* Copyright 2023 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 import { noContextMenu } from "../display_utils.js";
17 
18 class EditorToolbar {
19   #toolbar = null;
20 
21   #colorPicker = null;
22 
23   #editor;
24 
25   #buttons = null;
26 
27   #altText = null;
28 
29   static #l10nRemove = null;
30 
31   constructor(editor) {
32     this.#editor = editor;
33 
34     EditorToolbar.#l10nRemove ||= Object.freeze({
35       freetext: "pdfjs-editor-remove-freetext-button",
36       highlight: "pdfjs-editor-remove-highlight-button",
37       ink: "pdfjs-editor-remove-ink-button",
38       stamp: "pdfjs-editor-remove-stamp-button",
39     });
40   }
41 
116   #addDeleteButton() {
117     const { editorType, _uiManager } = this.#editor;
118 
119     const button = document.createElement("button");
120     button.className = "delete";
121     button.tabIndex = 0;
122     button.setAttribute("data-l10n-id", EditorToolbar.#l10nRemove[editorType]);
123     this.#addListenersToElement(button);
124     button.addEventListener(
125       "click",
126       e => {
127         _uiManager.delete();
128       },
129       { signal: _uiManager._signal }
130     );
131     this.#buttons.append(button);
132   }
133 
159 }
160 
247 
</code>

PR summary:
<pr_summary>
[Editor] Make the focused stamp annotation more clear from a screen reader point of view (bug 1911994)
It has been tested with Voice Over (mac) and with NVDA (windows).

When an added stamp annotation is focused, the screen reader will announce that it's a figure containing a graphic with the added alt-text.
</pr_summary>

Your task:
You are a software tester at pdf.js.
1. Write exactly one javascript test `it("...", async () => {...})` block.
2. Your test must fail on the code before the patch, and pass after, hence the test will verify that the patch resolves the issue.
3. The test must be self-contained and to-the-point.
4. Use only the provided imports (respect the paths exactly how they are given) by importing dynamically for compatibility with Node.js — no new dependencies. 
5. Return only the javascript code (no comments or explanations).

Example structure:
it("should <describe behavior>", async () => {
  const { example } = await import("../../src/core/example.js");
  <initialize required variables>;
  <define expected variable>;
  <generate actual variables>;
  <compare expected with actual>;
});


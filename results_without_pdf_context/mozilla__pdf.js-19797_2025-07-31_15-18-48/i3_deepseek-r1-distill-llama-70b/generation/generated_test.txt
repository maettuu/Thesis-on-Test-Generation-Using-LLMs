it("should handle null touchMoveAC without throwing error", async () => {
  const { TouchManager } = await import("../../src/display/touch_manager.js");
  const container = document.createElement("div");

  // Initialize TouchManager
  const touchManager = new TouchManager({
    container,
    signal: new AbortController().signal,
  });

  // Simulate touch events that would set up touchMoveAC
  const touchStartEvt = new TouchEvent("touchstart", {
    touches: [new Touch({ identifier: 1, target: container }), new Touch({ identifier: 2, target: container })],
  });
  container.dispatchEvent(touchStartEvt);

  // Simulate touch move to set touchMoveAC
  const touchMoveEvt = new TouchEvent("touchmove", {
    touches: [new Touch({ identifier: 1, target: container }), new Touch({ identifier: 2, target: container })],
  });
  container.dispatchEvent(touchMoveEvt);

  // Nullify touchMoveAC to simulate the bug scenario
  touchManager.#touchMoveAC = null;

  // Test that aborting a null touchMoveAC doesn't throw
  try {
    touchManager.#touchMoveAC.abort();
  } catch (error) {
    throw new Error("Expected no error when aborting null touchMoveAC");
  }

  // Cleanup
  touchManager.destroy();
});
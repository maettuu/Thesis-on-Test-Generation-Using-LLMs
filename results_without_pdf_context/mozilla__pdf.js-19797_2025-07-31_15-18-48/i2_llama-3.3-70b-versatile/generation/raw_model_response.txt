```javascript
it("should not throw an error when switching modes after drawing", async () => {
  const { AnnotationEditorUIManager, TouchManager } = await import("../../src/display/editor/tools.js");
  const { OutputScale } = await import("../../src/display/display_utils.js");

  const container = { addEventListener: () => {} };
  const viewer = {};
  const altTextManager = {};
  const signatureManager = {};
  const eventBus = { _on: () => {} };
  const pdfDocument = { annotationStorage: {} };
  const pageColors = {};
  const highlightColors = {};
  const enableHighlightFloatingButton = false;
  const enableUpdatedAddImage = false;
  const enableNewAltTextWhenAddingImage = false;
  const mlManager = {};
  const editorUndoBar = {};
  const supportsPinchToZoom = true;

  const annotationEditorUIManager = new AnnotationEditorUIManager(
    container,
    viewer,
    altTextManager,
    signatureManager,
    eventBus,
    pdfDocument,
    pageColors,
    highlightColors,
    enableHighlightFloatingButton,
    enableUpdatedAddImage,
    enableNewAltTextWhenAddingImage,
    mlManager,
    editorUndoBar,
    supportsPinchToZoom
  );

  const touchManager = new TouchManager({
    container,
    isPinchingDisabled: null,
    isPinchingStopped: null,
    onPinchStart: null,
    onPinching: null,
    onPinchEnd: null,
    signal: null,
  });

  annotationEditorUIManager.updateMode(1); // switch to drawing mode
  touchManager.#touchMoveAC = { abort: () => {} };
  touchManager.#onTouchEnd({ touches: [] });

  annotationEditorUIManager.updateMode(0); // switch back to none mode

  expect(() => touchManager.#onTouchEnd({ touches: [] })).not.toThrow();
});
```
it("should handle touch events without error", async () => {
  const { TouchManager } = await import("../../src/display/touch_manager.js");
  const container = document.createElement("div");
  const touchManager = new TouchManager({
    container,
    signal: new AbortController().signal,
  });

  // Simulate touch events
  const touchStartEvent = new TouchEvent("touchstart", {
    touches: [new Touch({ identifier: 1, target: container }), new Touch({ identifier: 2, target: container })],
    touchType: "direct",
  });

  const touchMoveEvent = new TouchEvent("touchmove", {
    touches: [new Touch({ identifier: 1, target: container }), new Touch({ identifier: 2, target: container })],
    touchType: "direct",
  });

  const touchEndEvent = new TouchEvent("touchend", {
    touches: [new Touch({ identifier: 1, target: container }), new Touch({ identifier: 2, target: container })],
    touchType: "direct",
  });

  // Handle events
  await Promise.resolve();
  container.dispatchEvent(touchStartEvent);
  await Promise.resolve();
  container.dispatchEvent(touchMoveEvent);
  await Promise.resolve();
  container.dispatchEvent(touchEndEvent);

  // Check for errors
  expect(() => {
    touchManager.destroy();
  }).not.toThrow();
});
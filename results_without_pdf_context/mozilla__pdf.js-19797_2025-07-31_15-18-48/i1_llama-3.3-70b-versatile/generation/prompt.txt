Before you begin:
- Keep going until the job is completely solved — don’t stop halfway.
- If you’re unsure about the behavior, reread the provided patch carefully; do not hallucinate.
- Plan your approach before writing code by reflecting on whether the test truly fails before and passes after.

Issue:
<issue>
[Bug]: Annotations issue. TypeError: null is not an object (evaluating 'this.#touchMoveAC.abort')
### Attach (recommended) or Link to PDF file

[blank.pdf](https://github.com/user-attachments/files/19669325/blank.pdf)

Im using a simple plain blank pdf file. I have this issue with all pdf's. Its not document specific.

### Web browser and its version

latest safari version on iPhone

### Operating system and its version

iOS latest

### PDF.js version

5.1.91 latest

### Is the bug present in the latest PDF.js version?

Yes

### Is a browser extension

No

### Steps to reproduce the problem

If i draw in my pdf document i can provoke an error that i can basically only fix by restarting pdf.js.
Unfortunately I didnt figure out a way to reliably reproduce it every time but it happens really often and regularly nearly every time I try to draw. I see it happen most often if i zoom a bit draw something move around and draw again. Sometimes it happens immediately but sometimes it takes me a few drawings but definitely way to often to ignore. The error is happening as soon as i lift the finger after a I tried to draw a line (makes sense bcs its ontouchend).

"TypeError: null is not an object (evaluating 'this.#touchMoveAC.abort')"

![Image](https://github.com/user-attachments/assets/cf515e02-af3b-4d8b-a7c5-d8561eb17688)

### What is the expected behavior?

If i start to use annotations / drawings i can't move the page and I can no longer draw.

### What went wrong?

Its hard to see but right at the beginning I zoom into the document and if i switch to annotation I cant draw bcs the console error appears. As written above sometimes like in this case right from the start sometimes it takes a few scribbles but defenetly in every session.

https://github.com/user-attachments/assets/b9996f13-f07a-4eb8-9c5f-2db842efd3e2

### Link to a viewer

_No response_

### Additional context


Bonus: If i debug and check the lines i can see this

![Image](https://github.com/user-attachments/assets/5a6cef1f-c2fd-40a5-88f8-3536b2519d2f)


This is the context where the error happens so as you can see this.#touchmoveac is null therefore the error is valid

![Image](https://github.com/user-attachments/assets/35f0a933-9ecf-473b-a673-e39e5c1514ad)

</issue>

Patch:
<patch>
diff --git a/src/display/editor/tools.js b/src/display/editor/tools.js
--- a/src/display/editor/tools.js
+++ b/src/display/editor/tools.js
@@ -1680,6 +1680,7 @@ class AnnotationEditorUIManager {
     }
 
     this.#updateModeCapability = Promise.withResolvers();
+    this.#currentDrawingSession?.commitOrRemove();
 
     this.#mode = mode;
     if (mode === AnnotationEditorType.NONE) {

diff --git a/src/display/touch_manager.js b/src/display/touch_manager.js
--- a/src/display/touch_manager.js
+++ b/src/display/touch_manager.js
@@ -215,9 +215,12 @@ class TouchManager {
     if (evt.touches.length >= 2) {
       return;
     }
-    this.#touchMoveAC.abort();
-    this.#touchMoveAC = null;
-    this.#onPinchEnd?.();
+    // #touchMoveAC shouldn't be null but it seems that irl it can (see #19793).
+    if (this.#touchMoveAC) {
+      this.#touchMoveAC.abort();
+      this.#touchMoveAC = null;
+      this.#onPinchEnd?.();
+    }
 
     if (!this.#touchInfo) {
       return;


</patch>

Imports:
<imports>
Available Packages
Dev Dependencies:
- @babel/core: ^7.26.10
- @babel/preset-env: ^7.26.9
- @babel/runtime: ^7.27.0
- @fluent/bundle: ^0.19.0
- @fluent/dom: ^0.10.1
- @metalsmith/layouts: ^3.0.0
- @metalsmith/markdown: ^1.10.0
- @napi-rs/canvas: ^0.1.68
- @types/node: ^22.13.14
- autoprefixer: ^10.4.21
- babel-loader: ^10.0.0
- caniuse-lite: ^1.0.30001707
- core-js: ^3.41.0
- eslint: ^9.23.0
- eslint-plugin-import: ^2.31.0
- eslint-plugin-jasmine: ^4.2.2
- eslint-plugin-json: ^4.0.1
- eslint-plugin-no-unsanitized: ^4.1.2
- eslint-plugin-perfectionist: ^4.10.1
- eslint-plugin-prettier: ^5.2.5
- eslint-plugin-unicorn: ^58.0.0
- globals: ^16.0.0
- gulp: ^5.0.0
- gulp-cli: ^3.0.0
- gulp-postcss: ^10.0.0
- gulp-rename: ^2.0.0
- gulp-replace: ^1.1.4
- gulp-zip: ^6.1.0
- highlight.js: ^11.11.1
- jasmine: ^5.6.0
- jsdoc: ^4.0.4
- jstransformer-nunjucks: ^1.2.0
- metalsmith: ^2.6.3
- metalsmith-html-relative: ^2.0.6
- ordered-read-streams: ^2.0.0
- pngjs: ^7.0.0
- postcss: ^8.5.3
- postcss-dark-theme-class: ^1.3.0
- postcss-dir-pseudo-class: ^9.0.1
- postcss-discard-comments: ^7.0.3
- postcss-nesting: ^13.0.1
- prettier: ^3.5.3
- puppeteer: ^24.4.0
- stylelint: ^16.17.0
- stylelint-prettier: ^5.0.3
- svglint: ^3.1.0
- terser-webpack-plugin: ^5.3.14
- tsc-alias: ^1.8.13
- ttest: ^4.0.0
- typescript: ^5.8.2
- vinyl: ^3.0.0
- webpack: ^5.98.0
- webpack-stream: ^7.0.0
- yargs: ^17.7.2

Engines:
- node: >=20.16.0

Available Relative Imports:
- `../../src/core/annotation.js`: Annotation, AnnotationBorderStyle, AnnotationFactory, MarkupAnnotation, getQuadPoints
- `../../src/core/bidi.js`: bidi
- `../../src/core/calculate_md5.js`: calculateMD5
- `../../src/core/calculate_sha256.js`: calculateSHA256
- `../../src/core/calculate_sha_other.js`: calculateSHA384, calculateSHA512
- `../../src/core/cff_parser.js`: CFFCharset, CFFCompiler, CFFFDSelect, CFFParser, CFFStrings
- `../../src/core/cmap.js`: CMap, CMapFactory, IdentityCMap
- `../../src/core/colorspace.js`: ColorSpace
- `../../src/core/colorspace_utils.js`: ColorSpaceUtils
- `../../src/core/core_utils.js`: arrayBuffersToBytes, encodeToXmlString, escapePDFName, escapeString, getInheritableProperty, getSizeInBytes, isAscii, isWhiteSpace, log2, numberToString, parseXFAPath, recoverJsURL, stringToUTF16HexString, stringToUTF16String, toRomanNumerals, validateCSSFont
- `../../src/core/crypto.js`: AES128Cipher, AES256Cipher, ARCFourCipher, CipherTransformFactory, PDF17, PDF20
- `../../src/core/default_appearance.js`: createDefaultAppearance, parseAppearanceStream, parseDefaultAppearance
- `../../src/core/document.js`: PDFDocument, Page
- `../../src/core/encodings.js`: getEncoding
- `../../src/core/evaluator.js`: PartialEvaluator
- `../../src/core/flate_stream.js`: FlateStream
- `../../src/core/font_substitutions.js`: getFontSubstitution
- `../../src/core/fonts_utils.js`: SEAC_ANALYSIS_ENABLED
- `../../src/core/function.js`: PDFFunctionFactory, PostScriptCompiler, PostScriptEvaluator
- `../../src/core/glyphlist.js`: getDingbatsGlyphsUnicode, getGlyphsUnicode
- `../../src/core/image_utils.js`: GlobalColorSpaceCache, GlobalImageCache, LocalColorSpaceCache
- `../../src/core/jbig2.js`: Jbig2Error, Jbig2Image
- `../../src/core/jpg.js`: JpegError, JpegImage
- `../../src/core/jpx.js`: JpxError, JpxImage
- `../../src/core/metadata_parser.js`: MetadataParser
- `../../src/core/operator_list.js`: OperatorList
- `../../src/core/parser.js`: Lexer, Linearization, Parser
- `../../src/core/predictor_stream.js`: PredictorStream
- `../../src/core/primitives.js`: Cmd, Dict, EOF, Name, Ref, RefSet, RefSetCache, isCmd, isDict, isName, isRefsEqual
- `../../src/core/ps_parser.js`: PostScriptLexer, PostScriptParser
- `../../src/core/stream.js`: NullStream, Stream, StringStream
- `../../src/core/type1_parser.js`: Type1Parser
- `../../src/core/unicode.js`: getCharUnicodeCategory, getUnicodeForGlyph, getUnicodeRangeFor, mapSpecialUnicodeValues
- `../../src/core/worker.js`: WorkerMessageHandler, WorkerTask
- `../../src/core/writer.js`: incrementalUpdate, writeChanges, writeDict
- `../../src/core/xfa/bind.js`: Binder
- `../../src/core/xfa/data.js`: DataHandler
- `../../src/core/xfa/factory.js`: XFAFactory
- `../../src/core/xfa/formcalc_lexer.js`: Lexer, TOKEN, Token
- `../../src/core/xfa/formcalc_parser.js`: Errors, Parser
- `../../src/core/xfa/parser.js`: XFAParser
- `../../src/core/xfa/som.js`: searchNode
- `../../src/core/xfa/symbol_utils.js`: $dump, $getChildren, $getChildrenByClass, $getChildrenByName, $text, $uid
- `../../src/core/xml_parser.js`: SimpleXMLParser, XMLParserBase
- `../../src/display/annotation_layer.js`: AnnotationLayer
- `../../src/display/annotation_storage.js`: AnnotationStorage
- `../../src/display/api.js`: LoopbackPort, PDFDataRangeTransport, PDFDocumentLoadingTask, PDFDocumentProxy, PDFPageProxy, PDFWorker, RenderTask, build, getDocument, isValidExplicitDest, version
- `../../src/display/canvas_factory.js`: DOMCanvasFactory
- `../../src/display/cmap_reader_factory.js`: DOMCMapReaderFactory
- `../../src/display/display_utils.js`: OutputScale, PDFDateString, PageViewport, PixelsPerInch, RenderingCancelledException, StatTimer, SupportedImageMimeTypes, fetchData, getFilenameFromUrl, getPdfFilenameFromUrl, getXfaPageViewport, isDataScheme, isPdfFile, isValidFetchUrl, noContextMenu, setLayerDimensions, stopEvent
- `../../src/display/draw_layer.js`: DrawLayer
- `../../src/display/editor/annotation_editor_layer.js`: AnnotationEditorLayer
- `../../src/display/editor/color_picker.js`: ColorPicker
- `../../src/display/editor/drawers/signaturedraw.js`: SignatureExtractor
- `../../src/display/editor/tools.js`: AnnotationEditorUIManager, CommandManager
- `../../src/display/fetch_stream.js`: PDFFetchStream
- `../../src/display/metadata.js`: Metadata
- `../../src/display/network.js`: PDFNetworkStream
- `../../src/display/network_utils.js`: createHeaders, createResponseError, extractFilenameFromHeader, validateRangeRequestCapabilities, validateResponseStatus
- `../../src/display/node_stream.js`: PDFNodeStream
- `../../src/display/node_utils.js`: NodeCMapReaderFactory, NodeStandardFontDataFactory, fetchData
- `../../src/display/standard_fontdata_factory.js`: DOMStandardFontDataFactory
- `../../src/display/svg_factory.js`: DOMSVGFactory
- `../../src/display/text_layer.js`: TextLayer
- `../../src/display/touch_manager.js`: TouchManager
- `../../src/display/worker_options.js`: GlobalWorkerOptions
- `../../src/display/xfa_layer.js`: XfaLayer
- `../../src/shared/message_handler.js`: MessageHandler
- `../../src/shared/murmurhash3.js`: MurmurHash3_64
- `../../src/shared/util.js`: AbortException, AnnotationBorderStyleType, AnnotationEditorParamsType, AnnotationEditorType, AnnotationFieldFlag, AnnotationFlag, AnnotationMode, AnnotationType, BaseException, DrawOPS, FeatureTest, FormatError, ImageKind, InvalidPDFException, MathClamp, OPS, PasswordException, PasswordResponses, PermissionFlag, RenderingIntentFlag, ResponseException, UnknownErrorException, Util, VerbosityLevel, assert, bytesToString, createValidAbsoluteUrl, getModificationDate, getUuid, getVerbosityLevel, isNodeJS, normalizeUnicode, objectSize, setVerbosityLevel, shadow, string32, stringToBytes, stringToPDFString, stringToUTF8String, toBase64Util
- `../../web/annotation_layer_builder.js`: AnnotationLayerBuilder
- `../../web/app_options.js`: AppOptions, OptionKind
- `../../web/autolinker.js`: Autolinker
- `../../web/download_manager.js`: DownloadManager
- `../../web/event_utils.js`: EventBus, WaitOnType, waitOnEventOrTimeout
- `../../web/genericl10n.js`: GenericL10n
- `../../web/pdf_find_controller.js`: FindState, PDFFindController
- `../../web/pdf_find_utils.js`: CharacterType, getCharacterType
- `../../web/pdf_history.js`: PDFHistory, isDestArraysEqual, isDestHashesEqual
- `../../web/pdf_link_service.js`: LinkTarget, PDFLinkService, SimpleLinkService
- `../../web/pdf_page_view.js`: PDFPageView
- `../../web/pdf_scripting_manager.component.js`: PDFScriptingManager
- `../../web/pdf_single_page_viewer.js`: PDFSinglePageViewer
- `../../web/pdf_viewer.js`: PDFPageViewBuffer, PDFViewer
- `../../web/struct_tree_layer_builder.js`: StructTreeLayerBuilder
- `../../web/text_layer_builder.js`: TextLayerBuilder
- `../../web/ui_utils.js`: AutoPrintRegExp, ProgressBar, RenderingStates, ScrollMode, SpreadMode, backtrackBeforeAllVisibleElements, binarySearchFirstItem, calcRound, getPageSizeInches, getVisibleElements, isPortraitOrientation, isValidRotation, parseQueryString, removeNullCharacters
- `../../web/xfa_layer_builder.js`: XfaLayerBuilder
- `../reporter.js`: TestReporter
- `./common_pdfstream_tests.js`: testCrossOriginRedirects
- `./test_utils.js`: CMAP_URL, DefaultCMapReaderFactory, DefaultFileReaderFactory, DefaultStandardFontDataFactory, STANDARD_FONT_DATA_URL, TEST_PDFS_PATH, TestPdfsServer, XRefMock, buildGetDocumentParams, createIdFactory, getCrossOriginHostname
</imports>

Code:
<code>
File:
src/display/editor/tools.js
1 /* Copyright 2022 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
17 // eslint-disable-next-line max-len
19 
20 import {
21   AnnotationEditorParamsType,
22   AnnotationEditorPrefix,
23   AnnotationEditorType,
24   FeatureTest,
25   getUuid,
26   shadow,
27   Util,
28   warn,
29 } from "../../shared/util.js";
30 import {
31   fetchData,
32   getColorValues,
33   getRGB,
34   PixelsPerInch,
35   stopEvent,
36 } from "../display_utils.js";
37 import { HighlightToolbar } from "./toolbar.js";
38 
575 /**
576  * A pdf has several pages and each of them when it will rendered
577  * will have an AnnotationEditorLayer which will contain the some
578  * new Annotations associated to an editor in order to modify them.
579  *
580  * This class is used to manage all the different layers, editors and
581  * some action like copy/paste, undo/redo, ...
582  */
583 class AnnotationEditorUIManager {
584   #abortController = new AbortController();
585 
586   #activeEditor = null;
587 
588   #allEditors = new Map();
589 
590   #allLayers = new Map();
591 
592   #altTextManager = null;
593 
594   #annotationStorage = null;
595 
596   #changedExistingAnnotations = null;
597 
598   #commandManager = new CommandManager();
599 
600   #copyPasteAC = null;
601 
602   #currentDrawingSession = null;
603 
604   #currentPageIndex = 0;
605 
606   #deletedAnnotationsElementIds = new Set();
607 
608   #draggingEditors = null;
609 
610   #editorTypes = null;
611 
612   #editorsToRescale = new Set();
613 
614   _editorUndoBar = null;
615 
616   #enableHighlightFloatingButton = false;
617 
618   #enableUpdatedAddImage = false;
619 
620   #enableNewAltTextWhenAddingImage = false;
621 
622   #filterFactory = null;
623 
624   #focusMainContainerTimeoutId = null;
625 
626   #focusManagerAC = null;
627 
628   #highlightColors = null;
629 
630   #highlightWhenShiftUp = false;
631 
632   #highlightToolbar = null;
633 
634   #idManager = new IdManager();
635 
636   #isEnabled = false;
637 
638   #isWaiting = false;
639 
640   #keyboardManagerAC = null;
641 
642   #lastActiveElement = null;
643 
644   #mainHighlightColorPicker = null;
645 
646   #missingCanvases = null;
647 
648   #mlManager = null;
649 
650   #mode = AnnotationEditorType.NONE;
651 
652   #selectedEditors = new Set();
653 
654   #selectedTextNode = null;
655 
656   #signatureManager = null;
657 
658   #pageColors = null;
659 
660   #showAllStates = null;
661 
662   #previousStates = {
663     isEditing: false,
664     isEmpty: true,
665     hasSomethingToUndo: false,
666     hasSomethingToRedo: false,
667     hasSelectedEditor: false,
668     hasSelectedText: false,
669   };
670 
671   #translation = [0, 0];
672 
673   #translationTimeoutId = null;
674 
675   #container = null;
676 
677   #viewer = null;
678 
679   #updateModeCapability = null;
680 
681   static TRANSLATE_SMALL = 1; // page units.
682 
683   static TRANSLATE_BIG = 10; // page units.
684 
818   constructor(
819     container,
820     viewer,
821     altTextManager,
822     signatureManager,
823     eventBus,
824     pdfDocument,
825     pageColors,
826     highlightColors,
827     enableHighlightFloatingButton,
828     enableUpdatedAddImage,
829     enableNewAltTextWhenAddingImage,
830     mlManager,
831     editorUndoBar,
832     supportsPinchToZoom
833   ) {
834     const signal = (this._signal = this.#abortController.signal);
835     this.#container = container;
836     this.#viewer = viewer;
837     this.#altTextManager = altTextManager;
838     this.#signatureManager = signatureManager;
839     this._eventBus = eventBus;
840     eventBus._on("editingaction", this.onEditingAction.bind(this), { signal });
841     eventBus._on("pagechanging", this.onPageChanging.bind(this), { signal });
842     eventBus._on("scalechanging", this.onScaleChanging.bind(this), { signal });
843     eventBus._on("rotationchanging", this.onRotationChanging.bind(this), {
844       signal,
845     });
846     eventBus._on("setpreference", this.onSetPreference.bind(this), { signal });
847     eventBus._on(
848       "switchannotationeditorparams",
849       evt => this.updateParams(evt.type, evt.value),
850       { signal }
851     );
852     this.#addSelectionListener();
853     this.#addDragAndDropListeners();
854     this.#addKeyboardManager();
855     this.#annotationStorage = pdfDocument.annotationStorage;
856     this.#filterFactory = pdfDocument.filterFactory;
857     this.#pageColors = pageColors;
858     this.#highlightColors = highlightColors || null;
859     this.#enableHighlightFloatingButton = enableHighlightFloatingButton;
860     this.#enableUpdatedAddImage = enableUpdatedAddImage;
861     this.#enableNewAltTextWhenAddingImage = enableNewAltTextWhenAddingImage;
862     this.#mlManager = mlManager || null;
863     this.viewParameters = {
864       realScale: PixelsPerInch.PDF_TO_CSS_UNITS,
865       rotation: 0,
866     };
867     this.isShiftKeyDown = false;
868     this._editorUndoBar = editorUndoBar || null;
869     this._supportsPinchToZoom = supportsPinchToZoom !== false;
870 
871     if (typeof PDFJSDev !== "undefined" && PDFJSDev.test("TESTING")) {
872       Object.defineProperty(this, "reset", {
873         value: () => {
874           this.selectAll();
875           this.delete();
876           this.#idManager.reset();
877         },
878       });
879     }
880   }
881 
1662   /**
1663    * Change the editor mode (None, FreeText, Ink, ...)
1664    * @param {number} mode
1665    * @param {string|null} editId
1666    * @param {boolean} [isFromKeyboard] - true if the mode change is due to a
1667    *   keyboard action.
1668    */
1669   async updateMode(mode, editId = null, isFromKeyboard = false) {
1670     if (this.#mode === mode) {
1671       return;
1672     }
1673 
1674     if (this.#updateModeCapability) {
1675       await this.#updateModeCapability.promise;
1676       if (!this.#updateModeCapability) {
1677         // This ui manager has been destroyed.
1678         return;
1679       }
1680     }
1681 
1682     this.#updateModeCapability = Promise.withResolvers();
1683 
1684     this.#mode = mode;
1685     if (mode === AnnotationEditorType.NONE) {
1686       this.setEditingState(false);
1687       this.#disableAll();
1688 
1689       this._editorUndoBar?.hide();
1690 
1691       this.#updateModeCapability.resolve();
1692       return;
1693     }
1694     if (mode === AnnotationEditorType.SIGNATURE) {
1695       await this.#signatureManager?.loadSignatures();
1696     }
1697     this.setEditingState(true);
1698     await this.#enableAll();
1699     this.unselectAll();
1700     for (const layer of this.#allLayers.values()) {
1701       layer.updateMode(mode);
1702     }
1703     if (!editId) {
1704       if (isFromKeyboard) {
1705         this.addNewEditorFromKeyboard();
1706       }
1707 
1708       this.#updateModeCapability.resolve();
1709       return;
1710     }
1711 
1712     for (const editor of this.#allEditors.values()) {
1713       if (editor.annotationElementId === editId) {
1714         this.setSelected(editor);
1715         editor.enterInEditMode();
1716       } else {
1717         editor.unselect();
1718       }
1719     }
1720 
1721     this.#updateModeCapability.resolve();
1722   }
1723 
2546 }
2547 
File:
src/display/touch_manager.js
1 /* Copyright 2024 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 import { OutputScale, stopEvent } from "./display_utils.js";
17 
18 class TouchManager {
19   #container;
20 
21   #isPinching = false;
22 
23   #isPinchingStopped = null;
24 
25   #isPinchingDisabled;
26 
27   #onPinchStart;
28 
29   #onPinching;
30 
31   #onPinchEnd;
32 
33   #pointerDownAC = null;
34 
35   #signal;
36 
37   #touchInfo = null;
38 
39   #touchManagerAC;
40 
41   #touchMoveAC = null;
42 
43   constructor({
44     container,
45     isPinchingDisabled = null,
46     isPinchingStopped = null,
47     onPinchStart = null,
48     onPinching = null,
49     onPinchEnd = null,
50     signal,
51   }) {
52     this.#container = container;
53     this.#isPinchingStopped = isPinchingStopped;
54     this.#isPinchingDisabled = isPinchingDisabled;
55     this.#onPinchStart = onPinchStart;
56     this.#onPinching = onPinching;
57     this.#onPinchEnd = onPinchEnd;
58     this.#touchManagerAC = new AbortController();
59     this.#signal = AbortSignal.any([signal, this.#touchManagerAC.signal]);
60 
61     container.addEventListener("touchstart", this.#onTouchStart.bind(this), {
62       passive: false,
63       signal: this.#signal,
64     });
65   }
66 
214   #onTouchEnd(evt) {
215     if (evt.touches.length >= 2) {
216       return;
217     }
218     this.#touchMoveAC.abort();
219     this.#touchMoveAC = null;
220     this.#onPinchEnd?.();
221 
222     if (!this.#touchInfo) {
223       return;
224     }
225     stopEvent(evt);
226     this.#touchInfo = null;
227     this.#isPinching = false;
228   }
229 
236 }
237 
</code>

Test file:
<test_file>
File:
test/unit/pdf_spec.js
/* Copyright 2023 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import {
  AbortException,
  AnnotationEditorParamsType,
  AnnotationEditorType,
  AnnotationMode,
  AnnotationType,
  createValidAbsoluteUrl,
  FeatureTest,
  getUuid,
  ImageKind,
  InvalidPDFException,
  MathClamp,
  normalizeUnicode,
  OPS,
  PasswordResponses,
  PermissionFlag,
  ResponseException,
  shadow,
  Util,
  VerbosityLevel,
} from "../../src/shared/util.js";
import {
  build,
  getDocument,
  isValidExplicitDest,
  PDFDataRangeTransport,
  PDFWorker,
  version,
} from "../../src/display/api.js";
import {
  fetchData,
  getFilenameFromUrl,
  getPdfFilenameFromUrl,
  getXfaPageViewport,
  isDataScheme,
  isPdfFile,
  noContextMenu,
  OutputScale,
  PDFDateString,
  PixelsPerInch,
  RenderingCancelledException,
  setLayerDimensions,
  stopEvent,
  SupportedImageMimeTypes,
} from "../../src/display/display_utils.js";
import { AnnotationEditorLayer } from "../../src/display/editor/annotation_editor_layer.js";
import { AnnotationEditorUIManager } from "../../src/display/editor/tools.js";
import { AnnotationLayer } from "../../src/display/annotation_layer.js";
import { ColorPicker } from "../../src/display/editor/color_picker.js";
import { DOMSVGFactory } from "../../src/display/svg_factory.js";
import { DrawLayer } from "../../src/display/draw_layer.js";
import { GlobalWorkerOptions } from "../../src/display/worker_options.js";
import { SignatureExtractor } from "../../src/display/editor/drawers/signaturedraw.js";
import { TextLayer } from "../../src/display/text_layer.js";
import { TouchManager } from "../../src/display/touch_manager.js";
import { XfaLayer } from "../../src/display/xfa_layer.js";
const expectedAPI = Object.freeze({
  AbortException,
  AnnotationEditorLayer,
  AnnotationEditorParamsType,
  AnnotationEditorType,
  AnnotationEditorUIManager,
  AnnotationLayer,
  AnnotationMode,
  AnnotationType,
  build,
  ColorPicker,
  createValidAbsoluteUrl,
  DOMSVGFactory,
  DrawLayer,
  FeatureTest,
  fetchData,
  getDocument,
  getFilenameFromUrl,
  getPdfFilenameFromUrl,
  getUuid,
  getXfaPageViewport,
  GlobalWorkerOptions,
  ImageKind,
  InvalidPDFException,
  isDataScheme,
  isPdfFile,
  isValidExplicitDest,
  MathClamp,
  noContextMenu,
  normalizeUnicode,
  OPS,
  OutputScale,
  PasswordResponses,
  PDFDataRangeTransport,
  PDFDateString,
  PDFWorker,
  PermissionFlag,
  PixelsPerInch,
  RenderingCancelledException,
  ResponseException,
  setLayerDimensions,
  shadow,
  SignatureExtractor,
  stopEvent,
  SupportedImageMimeTypes,
  TextLayer,
  TouchManager,
  Util,
  VerbosityLevel,
  version,
  XfaLayer,
});
</test_file>

Your task:
You are a software tester at pdf.js.
1. Examine the existing test file. You may reuse any imports, helpers or setup blocks it already has.
2. Write exactly one javascript test `it("...", async () => {...})` block.
3. Your test must fail on the code before the patch, and pass after, hence the test will verify that the patch resolves the issue.
4. The test must be self-contained and to-the-point.
5. If you need something new use only the provided imports (respect the paths exactly how they are given) by importing dynamically for compatibility with Node.js — no new dependencies. 
6. Return only the javascript code for the new `it(...)` block (no comments or explanations).

Example structure:
it("should <describe behavior>", async () => {
  const { example } = await import("../../src/core/example.js");
  <initialize required variables>;
  <define expected variable>;
  <generate actual variables>;
  <compare expected with actual>;
});


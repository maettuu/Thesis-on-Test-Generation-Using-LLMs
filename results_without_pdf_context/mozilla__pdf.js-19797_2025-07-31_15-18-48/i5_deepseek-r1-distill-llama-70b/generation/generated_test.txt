it("should handle touch events without throwing null error in touchMoveAC", async () => {
  const { PDFDocument } = await import("../../src/core/document.js");
  const { PDFPage } = await import("../../src/core/document.js");
  const { AnnotationEditorUIManager } = await import("../../src/display/editor/tools.js");
  const { TouchManager } = await import("../../src/display/touch_manager.js");
  const { TestPdfsServer } = await import("./test_utils.js");

  // Setup the test PDF
  const server = new TestPdfsServer();
  const blankPdf = await server.loadPDF("blank.pdf");
  const page = await blankPdf.getPage(1);

  // Initialize annotation editor and touch manager
  const annotationEditor = new AnnotationEditorUIManager();
  const touchManager = new TouchManager(page.div, {
    pinchZoomEnabled: true,
    touchStartThreshold: 0,
  });

  // Set up the annotation mode
  annotationEditor.switchMode(AnnotationEditorType.FREE_HAND);

  try {
    // Simulate touch events to draw
    const touchStartEvt = new TouchEvent("touchstart", {
      touches: [{ target: page.div, clientX: 100, clientY: 100 }],
    });
    const touchMoveEvt = new TouchEvent("touchmove", {
      touches: [{ target: page.div, clientX: 150, clientY: 150 }],
    });
    const touchEndEvt = new TouchEvent("touchend", {});

    page.div.dispatchEvent(touchStartEvt);
    page.div.dispatchEvent(touchMoveEvt);
    page.div.dispatchEvent(touchEndEvt);

    // If no error was thrown, the test passes
    expect(true).toBe(true);
  } catch (error) {
    // If an error was thrown, the test fails
    expect(error).not.toBeInstanceOf(Error);
  }
});
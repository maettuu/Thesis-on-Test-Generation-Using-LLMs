it("should adjust editor position based on border line width", async () => {
  const { AnnotationEditor } = await import("../../src/display/editor/editor.js");

  // Mock the CSS variable
  const mockGetComputedStyle = {
    getPropertyValue: () => "2px"
  };
  const originalGetComputedStyle = window.getComputedStyle;
  window.getComputedStyle = () => mockGetComputedStyle;

  // Initialize the editor
  class TestEditor extends AnnotationEditor {}
  TestEditor.initialize({});

  // Verify the border line width is correctly read
  const expectedBorderWidth = 2;
  const actualBorderWidth = AnnotationEditor._borderLineWidth;
  expect(actualBorderWidth).toBe(expectedBorderWidth);

  // Test position adjustment
  const editor = new TestEditor({/* required params */});
  const [parentWidth, parentHeight] = [100, 100]; // Mock parent dimensions
  const [tx, ty] = [10, 10]; // Mock translation

  // Calculate expected position
  const expectedX = tx - (expectedBorderWidth / parentWidth);
  const expectedY = ty - (expectedBorderWidth / parentHeight);

  // Get actual position
  const actualX = editor.x;
  const actualY = editor.y;

  expect(actualX).toBeCloseTo(expectedX);
  expect(actualY).toBeCloseTo(expectedY);

  // Cleanup
  window.getComputedStyle = originalGetComputedStyle;
});
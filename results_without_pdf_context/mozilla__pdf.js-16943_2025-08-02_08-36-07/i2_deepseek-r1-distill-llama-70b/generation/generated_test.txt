it("should adjust editor position accounting for border width", async () => {
  const { AnnotationEditor } = await import("./editor.js");
  const { FreeTextEditor } = await import("./freetext.js");

  // Mock viewport with known dimensions and rotation
  const viewport = {
    width: 100,
    height: 100,
    rotation: 0,
  };

  // Create editor with initial position
  const editor = new FreeTextEditor({
    parent: {
      viewport,
      pageIndex: 0,
    },
    id: "test-editor",
    x: 10,
    y: 20,
    width: 30,
    height: 40,
    uiManager: {},
    isCentered: false,
  });

  // Initialize the editor
  editor.initialize();

  // Apply the fix and set the position
  editor.fixAndSetPosition();

  // Check the styles applied to the editor div
  const style = editor.div.style;
  expect(style.left).toBe("10.00%");
  expect(style.top).toBe("20.00%");
});

it("should adjust resizer positions accounting for border width", async () => {
  const { AnnotationEditor } = await import("./editor.js");
  const { FreeTextEditor } = await import("./freetext.js");

  // Mock viewport with known dimensions and rotation
  const viewport = {
    width: 100,
    height: 100,
    rotation: 0,
  };

  // Create editor with initial position
  const editor = new FreeTextEditor({
    parent: {
      viewport,
      pageIndex: 0,
    },
    id: "test-editor",
    x: 10,
    y: 20,
    width: 30,
    height: 40,
    uiManager: {},
    isCentered: false,
  });

  // Initialize the editor
  editor.initialize();

  // Apply the fix and set the position
  editor.fixAndSetPosition();

  // Check the styles applied to the resizer elements
  const resizers = editor.div.querySelectorAll(".resizer");
  resizers.forEach(resizer => {
    const border = window.getComputedStyle(resizer).border;
    expect(border).toMatch(/rgba\(0, 0, 0, 0.5\) solid (\d+\.?\d*)px/);
  });
});
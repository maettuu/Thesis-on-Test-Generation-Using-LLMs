```javascript
it("should change the style of the line and resizers around a selected editor", async () => {
  const { AnnotationEditor } = await import("../../src/display/editor/editor.js");
  const { FreeTextEditor } = await import("../../src/display/editor/freetext.js");
  const { InkEditor } = await import("../../src/display/editor/ink.js");

  const mockParent = {
    pageIndex: 0,
    viewport: {
      rotation: 0,
      rawDims: { pageWidth: 100, pageHeight: 100, pageX: 0, pageY: 0 },
    },
    div: document.createElement("div"),
    add: jest.fn(),
    remove: jest.fn(),
    setSelected: jest.fn(),
    toggleSelected: jest.fn(),
    setActiveEditor: jest.fn(),
    updateToolbar: jest.fn(),
    setEditingState: jest.fn(),
    isMultipleSelection: false,
  };

  const mockUIManager = {
    addToAnnotationStorage: jest.fn(),
    removeEditor: jest.fn(),
    isSelected: jest.fn().mockReturnValue(true),
    setUpDragSession: jest.fn(),
    endDragSession: jest.fn().mockReturnValue(false),
    dragSelectedEditors: jest.fn(),
    translateSelectedEditors: jest.fn(),
    currentLayer: { div: document.createElement("div") },
  };

  const editorParams = {
    parent: mockParent,
    uiManager: mockUIManager,
    id: "editor1",
    x: 10,
    y: 10,
  };

  const freeTextEditor = new FreeTextEditor(editorParams);
  const inkEditor = new InkEditor(editorParams);

  freeTextEditor.select();
  inkEditor.select();

  const freeTextEditorStyle = freeTextEditor.div.style;
  const inkEditorStyle = inkEditor.div.style;

  expect(freeTextEditorStyle.zIndex).toBe("1");
  expect(inkEditorStyle.zIndex).toBe("1");

  const resizersDiv = freeTextEditor.div.querySelector(".resizers");
  expect(resizersDiv).not.toBeNull();
  expect(resizersDiv.classList.contains("hidden")).toBe(false);
});
```
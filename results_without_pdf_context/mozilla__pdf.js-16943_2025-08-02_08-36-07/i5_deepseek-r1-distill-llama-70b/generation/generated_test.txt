it("should adjust editor position accounting for border line width", async () => {
  const { AnnotationEditor } = await import("../../src/display/editor/editor.js");
  const { FreeTextEditor } = await import("../../src/display/editor/freetext.js");

  // Mock getComputedStyle to return a specific outline width
  const mockGetComputedStyle = {
    getPropertyValue: () => "--outline-width: 2px"
  };
  global.getComputedStyle = jest.fn(() => mockGetComputedStyle);

  // Initialize the editor
  FreeTextEditor.initialize(new Map());
  await AnnotationEditor.initialize(new Map());

  // Create a test editor instance
  const editor = new FreeTextEditor();
  editor.parentDimensions = [100, 100]; // Parent dimensions in pixels
  editor.pageDimensions = [100, 100]; // Page dimensions in pixels
  editor.rotation = 0; // No rotation for this test

  // Set the position and check the style
  editor.x = 0.5;
  editor.y = 0.5;
  editor.setPosition();

  // Get the computed style
  const style = editor.div.style;

  // Expected values considering border line width
  const expectedLeft = (0.5 + (2/100)).toFixed(2);
  const expectedTop = (0.5 + (2/100)).toFixed(2);

  expect(style.left).toBe(expectedLeft + "%");
  expect(style.top).toBe(expectedTop + "%");
});
Before you begin:
- Keep going until the job is completely solved — don’t stop halfway.
- If you’re unsure about the behavior, reread the provided patch carefully; do not hallucinate.
- Plan your approach before writing code by reflecting on whether the test truly fails before and passes after.

Issue:
<issue>
PDF rendering regression due to smask changes
</issue>

Patch:
<patch>
diff --git a/src/display/canvas.js b/src/display/canvas.js
--- a/src/display/canvas.js
+++ b/src/display/canvas.js
@@ -1323,8 +1323,7 @@ class CanvasGraphics {
           this.current.strokeAlpha = value;
           break;
         case "ca":
-          this.current.fillAlpha = value;
-          this.ctx.globalAlpha = value;
+          this.ctx.globalAlpha = this.current.fillAlpha = value;
           break;
         case "BM":
           this.ctx.globalCompositeOperation = value;
@@ -1378,17 +1377,12 @@ class CanvasGraphics {
       drawnHeight
     );
     this.suspendedCtx = this.ctx;
-    this.ctx = scratchCanvas.context;
-    const ctx = this.ctx;
+    const ctx = (this.ctx = scratchCanvas.context);
     ctx.setTransform(this.suspendedCtx.getTransform());
     copyCtxState(this.suspendedCtx, ctx);
     mirrorContextOperations(ctx, this.suspendedCtx);
 
-    this.setGState([
-      ["BM", "source-over"],
-      ["ca", 1],
-      ["CA", 1],
-    ]);
+    this.setGState([["BM", "source-over"]]);
   }
 
   endSMaskMode() {


</patch>

Imports:
<imports>
Available Packages
Dev Dependencies:
- @babel/core: ^7.26.10
- @babel/preset-env: ^7.26.9
- @babel/runtime: ^7.26.10
- @fluent/bundle: ^0.18.0
- @fluent/dom: ^0.10.0
- @metalsmith/layouts: ^3.0.0
- @metalsmith/markdown: ^1.10.0
- @napi-rs/canvas: ^0.1.68
- @types/node: ^22.13.11
- autoprefixer: ^10.4.21
- babel-loader: ^10.0.0
- caniuse-lite: ^1.0.30001706
- core-js: ^3.41.0
- eslint: ^9.23.0
- eslint-plugin-import: ^2.31.0
- eslint-plugin-jasmine: ^4.2.2
- eslint-plugin-json: ^4.0.1
- eslint-plugin-no-unsanitized: ^4.1.2
- eslint-plugin-perfectionist: ^4.10.1
- eslint-plugin-prettier: ^5.2.3
- eslint-plugin-unicorn: ^57.0.0
- globals: ^16.0.0
- gulp: ^5.0.0
- gulp-cli: ^3.0.0
- gulp-postcss: ^10.0.0
- gulp-rename: ^2.0.0
- gulp-replace: ^1.1.4
- gulp-zip: ^6.1.0
- highlight.js: ^11.11.1
- jasmine: ^5.6.0
- jsdoc: ^4.0.4
- jstransformer-nunjucks: ^1.2.0
- metalsmith: ^2.6.3
- metalsmith-html-relative: ^2.0.6
- ordered-read-streams: ^2.0.0
- pngjs: ^7.0.0
- postcss: ^8.5.3
- postcss-dark-theme-class: ^1.3.0
- postcss-dir-pseudo-class: ^9.0.1
- postcss-discard-comments: ^7.0.3
- postcss-nesting: ^13.0.1
- prettier: ^3.5.3
- puppeteer: ^24.4.0
- stylelint: ^16.16.0
- stylelint-prettier: ^5.0.3
- svglint: ^3.1.0
- terser-webpack-plugin: ^5.3.14
- tsc-alias: ^1.8.11
- ttest: ^4.0.0
- typescript: ^5.8.2
- vinyl: ^3.0.0
- webpack: ^5.98.0
- webpack-stream: ^7.0.0
- yargs: ^17.7.2

Engines:
- node: >=20

Available Relative Imports:
- `../../src/core/annotation.js`: Annotation, AnnotationBorderStyle, AnnotationFactory, MarkupAnnotation, getQuadPoints
- `../../src/core/bidi.js`: bidi
- `../../src/core/calculate_md5.js`: calculateMD5
- `../../src/core/calculate_sha256.js`: calculateSHA256
- `../../src/core/calculate_sha_other.js`: calculateSHA384, calculateSHA512
- `../../src/core/cff_parser.js`: CFFCharset, CFFCompiler, CFFFDSelect, CFFParser, CFFStrings
- `../../src/core/cmap.js`: CMap, CMapFactory, IdentityCMap
- `../../src/core/colorspace.js`: ColorSpace
- `../../src/core/colorspace_utils.js`: ColorSpaceUtils
- `../../src/core/core_utils.js`: arrayBuffersToBytes, encodeToXmlString, escapePDFName, escapeString, getInheritableProperty, getSizeInBytes, isAscii, isWhiteSpace, log2, numberToString, parseXFAPath, recoverJsURL, stringToUTF16HexString, stringToUTF16String, toRomanNumerals, validateCSSFont
- `../../src/core/crypto.js`: AES128Cipher, AES256Cipher, ARCFourCipher, CipherTransformFactory, PDF17, PDF20
- `../../src/core/default_appearance.js`: createDefaultAppearance, parseAppearanceStream, parseDefaultAppearance
- `../../src/core/document.js`: PDFDocument, Page
- `../../src/core/encodings.js`: getEncoding
- `../../src/core/evaluator.js`: PartialEvaluator
- `../../src/core/flate_stream.js`: FlateStream
- `../../src/core/font_substitutions.js`: getFontSubstitution
- `../../src/core/fonts_utils.js`: SEAC_ANALYSIS_ENABLED
- `../../src/core/function.js`: PDFFunctionFactory, PostScriptCompiler, PostScriptEvaluator
- `../../src/core/glyphlist.js`: getDingbatsGlyphsUnicode, getGlyphsUnicode
- `../../src/core/image_utils.js`: GlobalColorSpaceCache, GlobalImageCache, LocalColorSpaceCache
- `../../src/core/jbig2.js`: Jbig2Error, Jbig2Image
- `../../src/core/jpg.js`: JpegError, JpegImage
- `../../src/core/jpx.js`: JpxError, JpxImage
- `../../src/core/metadata_parser.js`: MetadataParser
- `../../src/core/operator_list.js`: OperatorList
- `../../src/core/parser.js`: Lexer, Linearization, Parser
- `../../src/core/predictor_stream.js`: PredictorStream
- `../../src/core/primitives.js`: Cmd, Dict, EOF, Name, Ref, RefSet, RefSetCache, isCmd, isDict, isName, isRefsEqual
- `../../src/core/ps_parser.js`: PostScriptLexer, PostScriptParser
- `../../src/core/stream.js`: NullStream, Stream, StringStream
- `../../src/core/type1_parser.js`: Type1Parser
- `../../src/core/unicode.js`: getCharUnicodeCategory, getUnicodeForGlyph, getUnicodeRangeFor, mapSpecialUnicodeValues
- `../../src/core/worker.js`: WorkerMessageHandler, WorkerTask
- `../../src/core/writer.js`: incrementalUpdate, writeChanges, writeDict
- `../../src/core/xfa/bind.js`: Binder
- `../../src/core/xfa/data.js`: DataHandler
- `../../src/core/xfa/factory.js`: XFAFactory
- `../../src/core/xfa/formcalc_lexer.js`: Lexer, TOKEN, Token
- `../../src/core/xfa/formcalc_parser.js`: Errors, Parser
- `../../src/core/xfa/parser.js`: XFAParser
- `../../src/core/xfa/som.js`: searchNode
- `../../src/core/xfa/symbol_utils.js`: $dump, $getChildren, $getChildrenByClass, $getChildrenByName, $text, $uid
- `../../src/core/xml_parser.js`: SimpleXMLParser, XMLParserBase
- `../../src/display/annotation_layer.js`: AnnotationLayer
- `../../src/display/annotation_storage.js`: AnnotationStorage
- `../../src/display/api.js`: LoopbackPort, PDFDataRangeTransport, PDFDocumentLoadingTask, PDFDocumentProxy, PDFPageProxy, PDFWorker, RenderTask, build, getDocument, isValidExplicitDest, version
- `../../src/display/canvas_factory.js`: DOMCanvasFactory
- `../../src/display/cmap_reader_factory.js`: DOMCMapReaderFactory
- `../../src/display/display_utils.js`: OutputScale, PDFDateString, PageViewport, PixelsPerInch, RenderingCancelledException, StatTimer, SupportedImageMimeTypes, fetchData, getFilenameFromUrl, getPdfFilenameFromUrl, getXfaPageViewport, isDataScheme, isPdfFile, isValidFetchUrl, noContextMenu, setLayerDimensions, stopEvent
- `../../src/display/draw_layer.js`: DrawLayer
- `../../src/display/editor/annotation_editor_layer.js`: AnnotationEditorLayer
- `../../src/display/editor/color_picker.js`: ColorPicker
- `../../src/display/editor/drawers/signaturedraw.js`: SignatureExtractor
- `../../src/display/editor/tools.js`: AnnotationEditorUIManager, CommandManager
- `../../src/display/fetch_stream.js`: PDFFetchStream
- `../../src/display/metadata.js`: Metadata
- `../../src/display/network.js`: PDFNetworkStream
- `../../src/display/network_utils.js`: createHeaders, createResponseError, extractFilenameFromHeader, validateRangeRequestCapabilities, validateResponseStatus
- `../../src/display/node_stream.js`: PDFNodeStream
- `../../src/display/node_utils.js`: NodeCMapReaderFactory, NodeStandardFontDataFactory, fetchData
- `../../src/display/standard_fontdata_factory.js`: DOMStandardFontDataFactory
- `../../src/display/svg_factory.js`: DOMSVGFactory
- `../../src/display/text_layer.js`: TextLayer
- `../../src/display/touch_manager.js`: TouchManager
- `../../src/display/worker_options.js`: GlobalWorkerOptions
- `../../src/display/xfa_layer.js`: XfaLayer
- `../../src/shared/message_handler.js`: MessageHandler
- `../../src/shared/murmurhash3.js`: MurmurHash3_64
- `../../src/shared/util.js`: AbortException, AnnotationBorderStyleType, AnnotationEditorParamsType, AnnotationEditorType, AnnotationFieldFlag, AnnotationFlag, AnnotationMode, AnnotationType, BaseException, DrawOPS, FeatureTest, FormatError, ImageKind, InvalidPDFException, MathClamp, OPS, PasswordException, PasswordResponses, PermissionFlag, RenderingIntentFlag, ResponseException, UnknownErrorException, Util, VerbosityLevel, assert, bytesToString, createValidAbsoluteUrl, getModificationDate, getUuid, getVerbosityLevel, isNodeJS, normalizeUnicode, objectSize, setVerbosityLevel, shadow, string32, stringToBytes, stringToPDFString, stringToUTF8String, toBase64Util
- `../../web/annotation_layer_builder.js`: AnnotationLayerBuilder
- `../../web/app_options.js`: AppOptions, OptionKind
- `../../web/autolinker.js`: Autolinker
- `../../web/download_manager.js`: DownloadManager
- `../../web/event_utils.js`: EventBus, WaitOnType, waitOnEventOrTimeout
- `../../web/genericl10n.js`: GenericL10n
- `../../web/pdf_find_controller.js`: FindState, PDFFindController
- `../../web/pdf_find_utils.js`: CharacterType, getCharacterType
- `../../web/pdf_history.js`: PDFHistory, isDestArraysEqual, isDestHashesEqual
- `../../web/pdf_link_service.js`: LinkTarget, PDFLinkService, SimpleLinkService
- `../../web/pdf_page_view.js`: PDFPageView
- `../../web/pdf_scripting_manager.component.js`: PDFScriptingManager
- `../../web/pdf_single_page_viewer.js`: PDFSinglePageViewer
- `../../web/pdf_viewer.js`: PDFPageViewBuffer, PDFViewer
- `../../web/struct_tree_layer_builder.js`: StructTreeLayerBuilder
- `../../web/text_layer_builder.js`: TextLayerBuilder
- `../../web/ui_utils.js`: AutoPrintRegExp, ProgressBar, RenderingStates, ScrollMode, SpreadMode, backtrackBeforeAllVisibleElements, binarySearchFirstItem, calcRound, getPageSizeInches, getVisibleElements, isPortraitOrientation, isValidRotation, parseQueryString, removeNullCharacters
- `../../web/xfa_layer_builder.js`: XfaLayerBuilder
- `../reporter.js`: TestReporter
- `./common_pdfstream_tests.js`: testCrossOriginRedirects
- `./test_utils.js`: CMAP_URL, DefaultCMapReaderFactory, DefaultFileReaderFactory, DefaultStandardFontDataFactory, STANDARD_FONT_DATA_URL, TEST_PDFS_PATH, TestPdfsServer, XRefMock, buildGetDocumentParams, createIdFactory, getCrossOriginHostname
</imports>

Code:
<code>
File:
src/display/canvas.js
1 /* Copyright 2012 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 import {
17   DrawOPS,
18   FeatureTest,
19   FONT_IDENTITY_MATRIX,
20   IDENTITY_MATRIX,
21   ImageKind,
22   info,
23   isNodeJS,
24   OPS,
25   shadow,
26   TextRenderingMode,
27   unreachable,
28   Util,
29   warn,
30 } from "../shared/util.js";
31 import {
32   getCurrentTransform,
33   getCurrentTransformInverse,
34   OutputScale,
35   PixelsPerInch,
36 } from "./display_utils.js";
37 import {
38   getShadingPattern,
39   PathType,
40   TilingPattern,
41 } from "./pattern_helper.js";
42 import { convertBlackAndWhiteToRGBA } from "../shared/image_utils.js";
43 
44 // <canvas> contexts store most of the state we need natively.
45 // However, PDF needs a bit more state, which we store here.
46 // Minimal font size that would be used during canvas fillText operations.
47 const MIN_FONT_SIZE = 16;
48 // Maximum font size that would be used during canvas fillText operations.
49 const MAX_FONT_SIZE = 100;
50 
51 // Defines the time the `executeOperatorList`-method is going to be executing
52 // before it stops and schedules a continue of execution.
53 const EXECUTION_TIME = 15; // ms
54 // Defines the number of steps before checking the execution time.
55 const EXECUTION_STEPS = 10;
56 
57 // To disable Type3 compilation, set the value to `-1`.
58 const MAX_SIZE_TO_COMPILE = 1000;
59 
60 const FULL_CHUNK_HEIGHT = 16;
61 
62 // Only used in rescaleAndStroke. The goal is to avoid
63 // creating a new DOMMatrix object each time we need it.
64 const SCALE_MATRIX = new DOMMatrix();
65 
796 const LINE_CAP_STYLES = ["butt", "round", "square"];
797 const LINE_JOIN_STYLES = ["miter", "round", "bevel"];
798 const NORMAL_CLIP = {};
799 const EO_CLIP = {};
800 
801 class CanvasGraphics {
802   constructor(
803     canvasCtx,
804     commonObjs,
805     objs,
806     canvasFactory,
807     filterFactory,
808     { optionalContentConfig, markedContentStack = null },
809     annotationCanvasMap,
810     pageColors
811   ) {
812     this.ctx = canvasCtx;
813     this.current = new CanvasExtraState(
814       this.ctx.canvas.width,
815       this.ctx.canvas.height
816     );
817     this.stateStack = [];
818     this.pendingClip = null;
819     this.pendingEOFill = false;
820     this.res = null;
821     this.xobjs = null;
822     this.commonObjs = commonObjs;
823     this.objs = objs;
824     this.canvasFactory = canvasFactory;
825     this.filterFactory = filterFactory;
826     this.groupStack = [];
827     this.processingType3 = null;
828     // Patterns are painted relative to the initial page/form transform, see
829     // PDF spec 8.7.2 NOTE 1.
830     this.baseTransform = null;
831     this.baseTransformStack = [];
832     this.groupLevel = 0;
833     this.smaskStack = [];
834     this.smaskCounter = 0;
835     this.tempSMask = null;
836     this.suspendedCtx = null;
837     this.contentVisible = true;
838     this.markedContentStack = markedContentStack || [];
839     this.optionalContentConfig = optionalContentConfig;
840     this.cachedCanvases = new CachedCanvases(this.canvasFactory);
841     this.cachedPatterns = new Map();
842     this.annotationCanvasMap = annotationCanvasMap;
843     this.viewportScale = 1;
844     this.outputScaleX = 1;
845     this.outputScaleY = 1;
846     this.pageColors = pageColors;
847 
848     this._cachedScaleForStroking = [-1, 0];
849     this._cachedGetSinglePixelWidth = null;
850     this._cachedBitmapsMap = new Map();
851   }
852 
1258   // Graphics state
1266 
1295   setGState(states) {
1296     for (const [key, value] of states) {
1297       switch (key) {
1298         case "LW":
1299           this.setLineWidth(value);
1300           break;
1301         case "LC":
1302           this.setLineCap(value);
1303           break;
1304         case "LJ":
1305           this.setLineJoin(value);
1306           break;
1307         case "ML":
1308           this.setMiterLimit(value);
1309           break;
1310         case "D":
1311           this.setDash(value[0], value[1]);
1312           break;
1313         case "RI":
1314           this.setRenderingIntent(value);
1315           break;
1316         case "FL":
1317           this.setFlatness(value);
1318           break;
1319         case "Font":
1320           this.setFont(value[0], value[1]);
1321           break;
1322         case "CA":
1323           this.current.strokeAlpha = value;
1324           break;
1325         case "ca":
1326           this.current.fillAlpha = value;
1327           this.ctx.globalAlpha = value;
1328           break;
1329         case "BM":
1330           this.ctx.globalCompositeOperation = value;
1331           break;
1332         case "SMask":
1333           this.current.activeSMask = value ? this.tempSMask : null;
1334           this.tempSMask = null;
1335           this.checkSMaskState();
1336           break;
1337         case "TR":
1338           this.ctx.filter = this.current.transferMaps =
1339             this.filterFactory.addFilter(value);
1340           break;
1341       }
1342     }
1343   }
1344 
1359   /**
1360    * Soft mask mode takes the current main drawing canvas and replaces it with
1361    * a temporary canvas. Any drawing operations that happen on the temporary
1362    * canvas need to be composed with the main canvas that was suspended (see
1363    * `compose()`). The temporary canvas also duplicates many of its operations
1364    * on the suspended canvas to keep them in sync, so that when the soft mask
1365    * mode ends any clipping paths or transformations will still be active and in
1366    * the right order on the canvas' graphics state stack.
1367    */
1368   beginSMaskMode() {
1369     if (this.inSMaskMode) {
1370       throw new Error("beginSMaskMode called while already in smask mode");
1371     }
1372     const drawnWidth = this.ctx.canvas.width;
1373     const drawnHeight = this.ctx.canvas.height;
1374     const cacheId = "smaskGroupAt" + this.groupLevel;
1375     const scratchCanvas = this.cachedCanvases.getCanvas(
1376       cacheId,
1377       drawnWidth,
1378       drawnHeight
1379     );
1380     this.suspendedCtx = this.ctx;
1381     this.ctx = scratchCanvas.context;
1382     const ctx = this.ctx;
1383     ctx.setTransform(this.suspendedCtx.getTransform());
1384     copyCtxState(this.suspendedCtx, ctx);
1385     mirrorContextOperations(ctx, this.suspendedCtx);
1386 
1387     this.setGState([
1388       ["BM", "source-over"],
1389       ["ca", 1],
1390       ["CA", 1],
1391     ]);
1392   }
1393 
1586   // Path
1629 
1759   // Clipping
1763 
1768   // Text
1775 
2299   // Type3 fonts
2304 
2311   // Color
2343 
2430   // Images
2434 
3031   // Marked content
3032 
3065   // Compatibility
3066 
3075   // Helper functions
3076 
3174   // Rescale before stroking in order to have a final lineWidth
3175   // with both thicknesses greater or equal to 1.
3220 
3229 }
3230 
3236 
</code>

PR summary:
<pr_summary>
Don't overwrite the global alpha when switching to smask mode (bug 1764587)
It fixes #issue16287.
</pr_summary>

Your task:
You are a software tester at pdf.js.
1. Write exactly one javascript test `it("...", async () => {...})` block.
2. Your test must fail on the code before the patch, and pass after, hence the test will verify that the patch resolves the issue.
3. The test must be self-contained and to-the-point.
4. Use only the provided imports (respect the paths exactly how they are given) by importing dynamically for compatibility with Node.js — no new dependencies. 
5. Return only the javascript code (no comments or explanations).

Example structure:
it("should <describe behavior>", async () => {
  const { example } = await import("../../src/core/example.js");
  <initialize required variables>;
  <define expected variable>;
  <generate actual variables>;
  <compare expected with actual>;
});


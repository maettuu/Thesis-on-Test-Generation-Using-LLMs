it("should handle inlined images without closing EI", async () => {
  const { PDFImage } = await import("../../src/core/image.js");
  const resources = Dict.empty;
  const imageDict = new Dict();
  imageDict.set("W", 100);
  imageDict.set("H", 100);
  const imageStream = new Stream(new Uint8Array([0, 1, 2, 3]));
  imageStream.dict = imageDict;
  const operatorList = new OperatorList();
  const evaluator = new PartialEvaluator({
    xref: new XRefMock(),
    handler: null,
    pageIndex: 0,
    idFactory: createIdFactory(0),
    fontCache: null,
    builtInCMapCache: null,
    standardFontDataCache: null,
    globalImageCache: null,
    systemFontCache: null,
    options: { ignoreErrors: true },
  });

  await evaluator.buildPaintImageXObject({
    resources,
    image: imageStream,
    isInline: true,
    operatorList,
    cacheKey: null,
    localImageCache: null,
    localColorSpaceCache: null,
  });

  const imgOps = operatorList.fnArray.filter(
    op => op === OPS.paintInlineImageXObject
  );
  expect(imgOps.length).toBe(1);
});
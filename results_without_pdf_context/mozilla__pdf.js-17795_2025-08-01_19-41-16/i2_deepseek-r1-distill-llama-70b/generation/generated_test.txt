it("should handle inlined images without closing EI", async () => {
  const { PDFDocument } = await import("../../src/display/api.js");
  const { PDFPage } = await import("../../src/display/pdf_page.js");
  const { Util } = await import("../../src/shared/util.js");

  // Load the test PDF with inlined image missing EI
  const pdfData = await fetch("example.pdf").then(res => res.arrayBuffer());
  const pdfDoc = await PDFDocument.load(pdfData, { ignoreErrors: false });
  const page = await pdfDoc.getPage(1);

  // Test without ignoreErrors (should throw error)
  {
    const consoleSpy = jest.spyOn(console, 'error').mockImplementation(() => {});
    let errorThrown = false;
    try {
      await page.render();
    } catch (e) {
      errorthrown = true;
    }
    expect(errorThrown).toBe(true);
    consoleSpy.mockRestore();
  }

  // Test with ignoreErrors (should not throw error)
  {
    const consoleSpy = jest.spyOn(console, 'warn').mockImplementation(() => {});
    const pdfDocIgnoreErrors = await PDFDocument.load(pdfData, { ignoreErrors: true });
    const pageIgnoreErrors = await pdfDocIgnoreErrors.getPage(1);
    let errorThrown = false;
    try {
      await pageIgnoreErrors.render();
    } catch (e) {
      errorthrown = true;
    }
    expect(errorThrown).toBe(false);
    consoleSpy.mockRestore();
  }
});
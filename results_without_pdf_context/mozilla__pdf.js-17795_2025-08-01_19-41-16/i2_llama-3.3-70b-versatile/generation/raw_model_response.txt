```javascript
it("should render inlined images without the closing EI correctly", async () => {
  const { PDFDocument } = await import("../../src/core/document.js");
  const { PDFImage } = await import("../../src/core/image.js");
  const { PartialEvaluator } = await import("../../src/core/evaluator.js");
  const { OperatorList } = await import("../../src/core/operator_list.js");
  const { LocalColorSpaceCache } = await import("../../src/core/image_utils.js");

  const pdfData = await (await import("fs/promises")).readFile("image1.pdf");
  const pdfDoc = await PDFDocument.load(pdfData);
  const page = await pdfDoc.getPage(1);
  const operatorList = new OperatorList();
  const evaluator = new PartialEvaluator({
    xref: pdfDoc.xref,
    handler: null,
    pageIndex: 0,
    idFactory: null,
    fontCache: null,
    builtInCMapCache: null,
    standardFontDataCache: null,
    globalImageCache: null,
    systemFontCache: null,
    options: {
      ignoreErrors: true,
    },
  });
  const resources = await page.getResources();
  const image = await page.getImage(0);
  const localColorSpaceCache = new LocalColorSpaceCache();

  await evaluator.buildPaintImageXObject({
    resources,
    image,
    isInline: true,
    operatorList,
    cacheKey: null,
    localImageCache: null,
    localColorSpaceCache,
  });

  const expectedError = false;
  const actualError = operatorList.errors.length === 0;
  expect(actualError).toBe(expectedError);
});
```
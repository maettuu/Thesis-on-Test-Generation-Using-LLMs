```javascript
it("should handle inlined images without closing EI", async () => {
  const { PDFImage } = await import("../../src/core/image.js");
  const xref = new XRefMock();
  const resources = Dict.empty;
  const imageDict = new Dict();
  imageDict.set("W", 1);
  imageDict.set("H", 1);
  const imageStream = new Stream(new Uint8Array([0]));
  imageStream.dict = imageDict;
  const evaluator = new PartialEvaluator({
    xref,
    handler: null,
    pageIndex: 0,
    idFactory: createIdFactory(0),
    fontCache: null,
    builtInCMapCache: null,
    standardFontDataCache: null,
    globalImageCache: null,
    systemFontCache: null,
    options: { ignoreErrors: false },
  });
  const operatorList = new OperatorList();
  const localColorSpaceCache = new Map();
  let error = null;
  try {
    await evaluator.buildPaintImageXObject({
      resources,
      image: imageStream,
      isInline: true,
      operatorList,
      cacheKey: null,
      localImageCache: null,
      localColorSpaceCache,
    });
  } catch (e) {
    error = e;
  }
  expect(error).toBeNull();
  expect(operatorList.argsArray.length).toBeGreaterThan(0);
});
```
it("should correctly render all inlined images in the PDF", async () => {
  const { getDocument } = await import("../../src/display/api.js");
  const { PDFNodeStream } = await import("../../src/display/node_stream.js");
  const { PDFDocumentProxy } = await import("../../src/display/api.js");

  const pdfUrl = "https://github.com/mozilla/pdf.js/files/14607428/image1.pdf";
  const loadingTask = getDocument({ url: pdfUrl, nativeImageDecoderSupport: "none" });
  const pdfDocument = await loadingTask.promise;

  const page = await pdfDocument.getPage(1);
  const viewport = page.getViewport({ scale: 1.0 });

  const canvasFactory = new (await import("../../src/display/display_utils.js")).DOMCanvasFactory();
  const canvasAndContext = canvasFactory.create(viewport.width, viewport.height);
  const renderContext = {
    canvasContext: canvasAndContext.context,
    viewport: viewport,
  };

  await page.render(renderContext).promise;

  const imageData = canvasAndContext.context.getImageData(0, 0, viewport.width, viewport.height);
  const pixelData = imageData.data;

  const hasMultipleImages = pixelData.some((value, index) => {
    return index % 4 === 0 && value !== 255; // Check for non-white pixels
  });

  expect(hasMultipleImages).toBe(true);
});
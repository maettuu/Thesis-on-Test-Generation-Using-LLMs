```javascript
it("should render images with inlined images without the closing 'EI' correctly", async () => {
  const { PartialEvaluator } = await import("../../src/core/evaluator.js");
  const { PDFImage } = await import("../../src/core/image.js");
  const { Dict } = await import("../../src/core/primitives.js");
  const { Name } = await import("../../src/core/primitives.js");
  const { Ref } = await import("../../src/core/primitives.js");
  const { CMapFactory } = await import("../../src/core/cmap.js");
  const { LocalColorSpaceCache } = await import("../../src/core/image_utils.js");

  const xref = {
    fetch: (ref) => {
      if (ref instanceof Ref) {
        return new Dict();
      }
      return ref;
    },
    fetchIfRef: (ref) => {
      if (ref instanceof Ref) {
        return new Dict();
      }
      return ref;
    },
  };

  const image = new Dict();
  image.set("Subtype", Name.get("Image"));
  image.set("Width", 10);
  image.set("Height", 10);
  image.set("BitsPerComponent", 8);
  image.set("ColorSpace", Name.get("DeviceRGB"));
  image.set("Filter", Name.get("DCTDecode"));
  image.set("Length", 100);

  const evaluator = new PartialEvaluator({
    xref,
    handler: {
      send: () => {},
      sendWithPromise: () => Promise.resolve(),
    },
    pageIndex: 0,
    idFactory: {
      createObjId: () => "objId",
      getDocId: () => "docId",
      getPageObjId: () => "pageObjId",
    },
    fontCache: new Map(),
    builtInCMapCache: new Map(),
    standardFontDataCache: new Map(),
    globalImageCache: new Map(),
    systemFontCache: new Map(),
    options: {},
  });

  const localColorSpaceCache = new LocalColorSpaceCache();

  const imageObj = new PDFImage({
    xref,
    res: new Dict(),
    image,
    isInline: true,
    pdfFunctionFactory: evaluator._pdfFunctionFactory,
    localColorSpaceCache,
  });

  try {
    await imageObj.createImageData(true, false);
  } catch (error) {
    throw new Error("Image creation failed");
  }
});
```
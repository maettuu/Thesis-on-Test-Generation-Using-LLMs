it("should change cursor when resizing from different edges", async () => {
  const { AnnotationEditor } = await import("../../src/display/editor/editor.js");
  const { StampEditor } = await import("../../src/display/editor/stamp.js");

  // Mock DOM elements
  const mockDocument = {
    createElement: (type) => ({
      style: {},
      addEventListener: () => {},
      removeEventListener: () => {},
    }),
  };

  const editorParams = {
    parent: {
      div: mockDocument.createElement("div"),
      pageIndex: 0,
      viewport: {
        rotation: 0,
        rawDims: {
          pageWidth: 100,
          pageHeight: 100,
        },
      },
    },
    uiManager: {},
    id: "1",
  };

  const editor = new StampEditor(editorParams);
  editor.width = 50;
  editor.height = 50;
  editor.x = 25;
  editor.y = 25;

  const expectedCursors = {
    topLeft: "nwse-resize",
    topRight: "nesw-resize",
    bottomRight: "nwse-resize",
    bottomLeft: "nesw-resize",
    topMiddle: "ns-resize",
    middleRight: "ew-resize",
    bottomMiddle: "ns-resize",
    middleLeft: "ew-resize",
  };

  for (const [edge, expectedCursor] of Object.entries(expectedCursors)) {
    try {
      await editor.resizeStart(edge);
      await new Promise(resolve => setTimeout(resolve, 100));
      expect(mockDocument.createElement("div").style.cursor).toBe(expectedCursor);
    } catch (error) {
      fail(`Resize from ${edge} failed: ${error.message}`);
    }
  }
});
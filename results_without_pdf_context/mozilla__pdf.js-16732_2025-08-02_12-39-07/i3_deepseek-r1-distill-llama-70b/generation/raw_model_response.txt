<think>
Okay, I need to create a regression test for the issue where the mouse cursor doesn't change correctly when resizing images or drawings in PDF documents. The user provided a patch that modifies several files, and I need to ensure the test fails before the patch and passes after.

First, I'll examine the existing code. The patch adds resizers to the AnnotationEditor and handles different cursor shapes based on the edge being resized. So the test should verify that the cursor changes appropriately when hovering over different resizer edges.

I'll start by setting up the test environment. I'll import the necessary modules, like AnnotationEditor from the editor.js file. Then, I'll create a test editor instance and add resizers.

Next, I'll define the expected cursor styles for each resizer edge. For example, topLeft should be 'nwse-resize', topRight 'nesw-resize', etc.

In the test, I'll simulate moving the mouse over each resizer element and check if the cursor style matches the expected value. If any of these checks fail, the test should fail, indicating the issue isn't resolved.

I'll structure the test using Jest's it function, making it async to handle the imports correctly. I'll also use dynamic imports to ensure compatibility with Node.js.

Finally, I'll write the test block, ensuring it's self-contained and only tests the cursor behavior for resizers. This way, the test will confirm that the patch resolves the issue by correctly changing the cursor on different edges.
</think>

```javascript
it("should change cursor when hovering over resizer edges", async () => {
  const { AnnotationEditor } = await import("../../src/display/editor/editor.js");
  const editor = new AnnotationEditor({
    parent: { pageDimensions: [100, 100] },
    uiManager: {},
    parent: {},
    id: "test-editor",
    x: 0,
    y: 0,
  });
  editor.makeResizable();
  
  const expectedCursor = {
    "topLeft": "nwse-resize",
    "topRight": "nesw-resize",
    "bottomRight": "nwse-resize",
    "bottomLeft": "nesw-resize",
    "topMiddle": "ns-resize",
    "middleRight": "ew-resize",
    "bottomMiddle": "ns-resize",
    "middleLeft": "ew-resize",
  };

  const resizers = editor.#resizersDiv.querySelectorAll(".resizer");
  for (const [name, resizer] of Object.entries(expectedCursor)) {
    const style = getComputedStyle(resizer);
    expect(style.cursor).toBe(name);
  }
});
```
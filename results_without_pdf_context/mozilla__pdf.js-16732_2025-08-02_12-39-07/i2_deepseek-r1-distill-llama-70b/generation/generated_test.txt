it("should change mouse cursor when resizing from different edges", async () => {
  const { PDFDocument } = await import("../../src/core/pdf_document.js");
  const { PDFPage } = await import("../../src/core/pdf_page.js");
  const { AnnotationEditor } = await import("../../src/display/editor/editor.js");

  // Create a mock PDF document with a page
  const pdf = new PDFDocument({
    length: 1,
    getInputStream: () => new ReadableStream({
      start(controller) { controller.close(); }
    }),
    get page() {
      return new PDFPage({
        pageIndex: 0,
        getInputStream: () => new ReadableStream({
          start(controller) { controller.close(); }
        }),
        getAnnotations: () => [],
        get viewport() {
          return {
            width: 100,
            height: 100,
            rotation: 0,
          };
        },
      });
    },
  });

  // Create an editor for an image annotation
  const editor = new AnnotationEditor({
    parent: pdf.getPage(0),
    parentDimensions: [100, 100],
    x: 0,
    y: 0,
    width: 50,
    height: 50,
    uiManager: {
      stopUndoAccumulation: () => {},
    },
  });

  // Initialize the editor and make it resizable
  editor.select();
  editor.makeResizable();

  // Check cursor styles for different resizers
  const resizers = editor.#resizersDiv.querySelectorAll(".resizer");
  expect(resizers[0].style.cursor).toBe("nwse-resize"); // topLeft
  expect(resizers[1].style.cursor).toBe("nesw-resize"); // topRight
  expect(resizers[2].style.cursor).toBe("nwse-resize"); // bottomRight
  expect(resizers[3].style.cursor).toBe("nesw-resize"); // bottomLeft
  if (resizers.length > 4) {
    expect(resizers[4].style.cursor).toBe("ns-resize"); // topMiddle
    expect(resizers[5].style.cursor).toBe("ew-resize"); // middleRight
    expect(resizers[6].style.cursor).toBe("ns-resize"); // bottomMiddle
    expect(resizers[7].style.cursor).toBe("ew-resize"); // middleLeft
  }
});
it("should change mouse cursor state according to the edge we resize from", async () => {
  const { AnnotationEditor } = await import("../../src/display/editor/editor.js");
  const { InkEditor } = await import("../../src/display/editor/ink.js");
  const { StampEditor } = await import("../../src/display/editor/stamp.js");

  const mockUIManager = {
    addToAnnotationStorage: jest.fn(),
    addCommands: jest.fn(),
    viewParameters: { realScale: 1, rotation: 0 },
  };

  const mockParent = {
    pageIndex: 0,
    viewport: {
      rotation: 0,
      rawDims: { pageWidth: 100, pageHeight: 100, pageX: 0, pageY: 0 },
    },
    div: document.createElement("div"),
  };

  const inkEditor = new InkEditor({
    parent: mockParent,
    uiManager: mockUIManager,
    id: "inkEditor1",
    x: 10,
    y: 10,
  });

  const stampEditor = new StampEditor({
    parent: mockParent,
    uiManager: mockUIManager,
    id: "stampEditor1",
    x: 20,
    y: 20,
  });

  document.body.appendChild(mockParent.div);
  mockParent.div.appendChild(inkEditor.render());
  mockParent.div.appendChild(stampEditor.render());

  inkEditor.select();
  stampEditor.select();

  const resizers = inkEditor.div.querySelectorAll(".resizer");
  const resizerNames = Array.from(resizers).map(resizer => resizer.className);

  const expectedResizerNames = [
    "resizer topLeft",
    "resizer topRight",
    "resizer bottomRight",
    "resizer bottomLeft",
    "resizer topMiddle",
    "resizer middleRight",
    "resizer bottomMiddle",
    "resizer middleLeft",
  ];

  expect(resizerNames).toEqual(expectedResizerNames);
});
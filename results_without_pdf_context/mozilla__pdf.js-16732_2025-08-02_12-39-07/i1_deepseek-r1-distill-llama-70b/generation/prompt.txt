Before you begin:
- Keep going until the job is completely solved — don’t stop halfway.
- If you’re unsure about the behavior, reread the provided patch carefully; do not hallucinate.
- Plan your approach before writing code by reflecting on whether the test truly fails before and passes after.

Issue:
<issue>
The Mouse cursor should change its state according to the edge we resize it from for added images and drawings in PDF documents
</issue>

Patch:
<patch>
diff --git a/src/display/editor/editor.js b/src/display/editor/editor.js
--- a/src/display/editor/editor.js
+++ b/src/display/editor/editor.js
@@ -21,11 +21,6 @@
 import { bindEvents, ColorManager } from "./tools.js";
 import { FeatureTest, shadow, unreachable } from "../../shared/util.js";
 
-// The dimensions of the resizer is 15x15:
-// https://searchfox.org/mozilla-central/rev/1ce190047b9556c3c10ab4de70a0e61d893e2954/toolkit/content/minimal-xul.css#136-137
-// so each dimension must be greater than RESIZER_SIZE.
-const RESIZER_SIZE = 16;
-
 /**
  * @typedef {Object} AnnotationEditorParameters
  * @property {AnnotationEditorUIManager} uiManager - the global manager
@@ -41,6 +36,10 @@ const RESIZER_SIZE = 16;
 class AnnotationEditor {
   #keepAspectRatio = false;
 
+  #resizersDiv = null;
+
+  #resizePosition = null;
+
   #boundFocusin = this.focusin.bind(this);
 
   #boundFocusout = this.focusout.bind(this);
@@ -75,6 +74,7 @@ class AnnotationEditor {
     this.div = null;
     this._uiManager = parameters.uiManager;
     this.annotationElementId = null;
+    this._willKeepAspectRatio = false;
 
     const {
       rotation,
@@ -401,6 +401,274 @@ class AnnotationEditor {
     return [0, 0];
   }
 
+  #createResizers() {
+    if (this.#resizersDiv) {
+      return;
+    }
+    this.#resizersDiv = document.createElement("div");
+    this.#resizersDiv.classList.add("resizers");
+    const classes = ["topLeft", "topRight", "bottomRight", "bottomLeft"];
+    if (!this._willKeepAspectRatio) {
+      classes.push("topMiddle", "middleRight", "bottomMiddle", "middleLeft");
+    }
+    for (const name of classes) {
+      const div = document.createElement("div");
+      this.#resizersDiv.append(div);
+      div.classList.add("resizer", name);
+      div.addEventListener(
+        "pointerdown",
+        this.#resizerPointerdown.bind(this, name)
+      );
+    }
+    this.div.prepend(this.#resizersDiv);
+  }
+
+  #resizerPointerdown(name, event) {
+    event.preventDefault();
+    this.#resizePosition = [event.clientX, event.clientY];
+    const boundResizerPointermove = this.#resizerPointermove.bind(this, name);
+    const savedDraggable = this.div.draggable;
+    this.div.draggable = false;
+    const resizingClassName = `resizing${name
+      .charAt(0)
+      .toUpperCase()}${name.slice(1)}`;
+    this.parent.div.classList.add(resizingClassName);
+    const pointerMoveOptions = { passive: true, capture: true };
+    window.addEventListener(
+      "pointermove",
+      boundResizerPointermove,
+      pointerMoveOptions
+    );
+    const pointerUpCallback = () => {
+      // Stop the undo accumulation in order to have an undo action for each
+      // resize session.
+      this._uiManager.stopUndoAccumulation();
+      this.div.draggable = savedDraggable;
+      this.parent.div.classList.remove(resizingClassName);
+      window.removeEventListener(
+        "pointermove",
+        boundResizerPointermove,
+        pointerMoveOptions
+      );
+    };
+    window.addEventListener("pointerup", pointerUpCallback, {
+      once: true,
+    });
+  }
+
+  #resizerPointermove(name, event) {
+    const { clientX, clientY } = event;
+    const deltaX = clientX - this.#resizePosition[0];
+    const deltaY = clientY - this.#resizePosition[1];
+    this.#resizePosition[0] = clientX;
+    this.#resizePosition[1] = clientY;
+    const [parentWidth, parentHeight] = this.parentDimensions;
+    const savedX = this.x;
+    const savedY = this.y;
+    const savedWidth = this.width;
+    const savedHeight = this.height;
+    const minWidth = AnnotationEditor.MIN_SIZE / parentWidth;
+    const minHeight = AnnotationEditor.MIN_SIZE / parentHeight;
+    let cmd;
+
+    // 10000 because we multiply by 100 and use toFixed(2) in fixAndSetPosition.
+    // Without rounding, the positions of the corners other than the top left
+    // one can be slightly wrong.
+    const round = x => Math.round(x * 10000) / 10000;
+    const updatePosition = (width, height) => {
+      // We must take the parent dimensions as they are when undo/redo.
+      const [pWidth, pHeight] = this.parentDimensions;
+      this.setDims(pWidth * width, pHeight * height);
+      this.fixAndSetPosition();
+    };
+    const undo = () => {
+      this.width = savedWidth;
+      this.height = savedHeight;
+      this.x = savedX;
+      this.y = savedY;
+      updatePosition(savedWidth, savedHeight);
+    };
+
+    switch (name) {
+      case "topLeft": {
+        if (Math.sign(deltaX) * Math.sign(deltaY) < 0) {
+          return;
+        }
+        const dist = Math.hypot(deltaX, deltaY);
+        const oldDiag = Math.hypot(
+          savedWidth * parentWidth,
+          savedHeight * parentHeight
+        );
+        const brX = round(savedX + savedWidth);
+        const brY = round(savedY + savedHeight);
+        const ratio = Math.max(
+          Math.min(
+            1 - Math.sign(deltaX) * (dist / oldDiag),
+            // Avoid the editor to be larger than the page.
+            1 / savedWidth,
+            1 / savedHeight
+          ),
+          // Avoid the editor to be smaller than the minimum size.
+          minWidth / savedWidth,
+          minHeight / savedHeight
+        );
+        const newWidth = round(savedWidth * ratio);
+        const newHeight = round(savedHeight * ratio);
+        const newX = brX - newWidth;
+        const newY = brY - newHeight;
+        cmd = () => {
+          this.width = newWidth;
+          this.height = newHeight;
+          this.x = newX;
+          this.y = newY;
+          updatePosition(newWidth, newHeight);
+        };
+        break;
+      }
+      case "topMiddle": {
+        const bmY = round(this.y + savedHeight);
+        const newHeight = round(
+          Math.max(minHeight, Math.min(1, savedHeight - deltaY / parentHeight))
+        );
+        const newY = bmY - newHeight;
+        cmd = () => {
+          this.height = newHeight;
+          this.y = newY;
+          updatePosition(savedWidth, newHeight);
+        };
+        break;
+      }
+      case "topRight": {
+        if (Math.sign(deltaX) * Math.sign(deltaY) > 0) {
+          return;
+        }
+        const dist = Math.hypot(deltaX, deltaY);
+        const oldDiag = Math.hypot(
+          this.width * parentWidth,
+          this.height * parentHeight
+        );
+        const blY = round(savedY + this.height);
+        const ratio = Math.max(
+          Math.min(
+            1 + Math.sign(deltaX) * (dist / oldDiag),
+            1 / savedWidth,
+            1 / savedHeight
+          ),
+          minWidth / savedWidth,
+          minHeight / savedHeight
+        );
+        const newWidth = round(savedWidth * ratio);
+        const newHeight = round(savedHeight * ratio);
+        const newY = blY - newHeight;
+        cmd = () => {
+          this.width = newWidth;
+          this.height = newHeight;
+          this.y = newY;
+          updatePosition(newWidth, newHeight);
+        };
+        break;
+      }
+      case "middleRight": {
+        const newWidth = round(
+          Math.max(minWidth, Math.min(1, savedWidth + deltaX / parentWidth))
+        );
+        cmd = () => {
+          this.width = newWidth;
+          updatePosition(newWidth, savedHeight);
+        };
+        break;
+      }
+      case "bottomRight": {
+        if (Math.sign(deltaX) * Math.sign(deltaY) < 0) {
+          return;
+        }
+        const dist = Math.hypot(deltaX, deltaY);
+        const oldDiag = Math.hypot(
+          this.width * parentWidth,
+          this.height * parentHeight
+        );
+        const ratio = Math.max(
+          Math.min(
+            1 + Math.sign(deltaX) * (dist / oldDiag),
+            1 / savedWidth,
+            1 / savedHeight
+          ),
+          minWidth / savedWidth,
+          minHeight / savedHeight
+        );
+        const newWidth = round(savedWidth * ratio);
+        const newHeight = round(savedHeight * ratio);
+        cmd = () => {
+          this.width = newWidth;
+          this.height = newHeight;
+          updatePosition(newWidth, newHeight);
+        };
+        break;
+      }
+      case "bottomMiddle": {
+        const newHeight = round(
+          Math.max(minHeight, Math.min(1, savedHeight + deltaY / parentHeight))
+        );
+        cmd = () => {
+          this.height = newHeight;
+          updatePosition(savedWidth, newHeight);
+        };
+        break;
+      }
+      case "bottomLeft": {
+        if (Math.sign(deltaX) * Math.sign(deltaY) > 0) {
+          return;
+        }
+        const dist = Math.hypot(deltaX, deltaY);
+        const oldDiag = Math.hypot(
+          this.width * parentWidth,
+          this.height * parentHeight
+        );
+        const trX = round(savedX + this.width);
+        const ratio = Math.max(
+          Math.min(
+            1 - Math.sign(deltaX) * (dist / oldDiag),
+            1 / savedWidth,
+            1 / savedHeight
+          ),
+          minWidth / savedWidth,
+          minHeight / savedHeight
+        );
+        const newWidth = round(savedWidth * ratio);
+        const newHeight = round(savedHeight * ratio);
+        const newX = trX - newWidth;
+        cmd = () => {
+          this.width = newWidth;
+          this.height = newHeight;
+          this.x = newX;
+          updatePosition(newWidth, newHeight);
+        };
+        break;
+      }
+      case "middleLeft": {
+        const mrX = round(savedX + savedWidth);
+        const newWidth = round(
+          Math.max(minWidth, Math.min(1, savedWidth - deltaX / parentWidth))
+        );
+        const newX = mrX - newWidth;
+        cmd = () => {
+          this.width = newWidth;
+          this.x = newX;
+          updatePosition(newWidth, savedHeight);
+        };
+        break;
+      }
+    }
+    this.addCommands({
+      cmd,
+      undo,
+      mustExec: true,
+      type: this.resizeType,
+      overwriteIfSameType: true,
+      keepUndo: true,
+    });
+  }
+
   /**
    * Render this editor in a div.
    * @returns {HTMLDivElement}
@@ -654,10 +922,35 @@ class AnnotationEditor {
     }
   }
 
+  /**
+   * @returns {number} the type to use in the undo/redo stack when resizing.
+   */
+  get resizeType() {
+    return -1;
+  }
+
+  /**
+   * @returns {boolean} true if this editor can be resized.
+   */
+  get isResizable() {
+    return false;
+  }
+
+  /**
+   * Add the resizers to this editor.
+   */
+  makeResizable() {
+    if (this.isResizable) {
+      this.#createResizers();
+      this.#resizersDiv.classList.remove("hidden");
+    }
+  }
+
   /**
    * Select this editor.
    */
   select() {
+    this.makeResizable();
     this.div?.classList.add("selectedEditor");
   }
 
@@ -665,6 +958,7 @@ class AnnotationEditor {
    * Unselect this editor.
    */
   unselect() {
+    this.#resizersDiv?.classList.add("hidden");
     this.div?.classList.remove("selectedEditor");
   }
 
@@ -735,17 +1029,10 @@ class AnnotationEditor {
     const { style } = this.div;
     style.aspectRatio = aspectRatio;
     style.height = "auto";
-    if (aspectRatio >= 1) {
-      style.minHeight = `${RESIZER_SIZE}px`;
-      style.minWidth = `${Math.round(aspectRatio * RESIZER_SIZE)}px`;
-    } else {
-      style.minWidth = `${RESIZER_SIZE}px`;
-      style.minHeight = `${Math.round(RESIZER_SIZE / aspectRatio)}px`;
-    }
   }
 
   static get MIN_SIZE() {
-    return RESIZER_SIZE;
+    return 16;
   }
 }

diff --git a/src/display/editor/ink.js b/src/display/editor/ink.js
--- a/src/display/editor/ink.js
+++ b/src/display/editor/ink.js
@@ -79,6 +79,7 @@ class InkEditor extends AnnotationEditor {
     this.translationX = this.translationY = 0;
     this.x = 0;
     this.y = 0;
+    this._willKeepAspectRatio = true;
   }
 
   /** @inheritdoc */
@@ -156,6 +157,11 @@ class InkEditor extends AnnotationEditor {
     ];
   }
 
+  /** @inheritdoc */
+  get resizeType() {
+    return AnnotationEditorParamsType.INK_DIMS;
+  }
+
   /**
    * Update the thickness and make this action undoable.
    * @param {number} thickness
@@ -619,6 +625,7 @@ class InkEditor extends AnnotationEditor {
     this.div.classList.add("disabled");
 
     this.#fitToContent(/* firstTime = */ true);
+    this.makeResizable();
 
     this.parent.addInkEditorIfNeeded(/* isCommitting = */ true);
 
@@ -754,6 +761,11 @@ class InkEditor extends AnnotationEditor {
     this.#observer.observe(this.div);
   }
 
+  /** @inheritdoc */
+  get isResizable() {
+    return !this.isEmpty() && this.#disableEditing;
+  }
+
   /** @inheritdoc */
   render() {
     if (this.div) {

diff --git a/src/display/editor/stamp.js b/src/display/editor/stamp.js
--- a/src/display/editor/stamp.js
+++ b/src/display/editor/stamp.js
@@ -13,8 +13,11 @@
  * limitations under the License.
  */
 
+import {
+  AnnotationEditorParamsType,
+  AnnotationEditorType,
+} from "../../shared/util.js";
 import { AnnotationEditor } from "./editor.js";
-import { AnnotationEditorType } from "../../shared/util.js";
 import { PixelsPerInch } from "../display_utils.js";
 import { StampAnnotationElement } from "../annotation_layer.js";
 
@@ -123,6 +126,11 @@ class StampEditor extends AnnotationEditor {
     }
   }
 
+  /** @inheritdoc */
+  get resizeType() {
+    return AnnotationEditorParamsType.STAMP_DIMS;
+  }
+
   /** @inheritdoc */
   remove() {
     if (this.#bitmapId) {
@@ -170,6 +178,11 @@ class StampEditor extends AnnotationEditor {
     );
   }
 
+  /** @inheritdoc */
+  get isResizable() {
+    return true;
+  }
+
   /** @inheritdoc */
   render() {
     if (this.div) {
@@ -194,7 +207,6 @@ class StampEditor extends AnnotationEditor {
     if (this.width) {
       // This editor was created in using copy (ctrl+c).
       const [parentWidth, parentHeight] = this.parentDimensions;
-      this.setAspectRatio(this.width * parentWidth, this.height * parentHeight);
       this.setAt(
         baseX * parentWidth,
         baseY * parentHeight,
@@ -233,8 +245,6 @@ class StampEditor extends AnnotationEditor {
       (height * parentHeight) / pageHeight
     );
 
-    this.setAspectRatio(width, height);
-
     const canvas = (this.#canvas = document.createElement("canvas"));
     div.append(canvas);
     this.#drawBitmap(width, height);

diff --git a/src/display/editor/tools.js b/src/display/editor/tools.js
--- a/src/display/editor/tools.js
+++ b/src/display/editor/tools.js
@@ -280,6 +280,12 @@ class CommandManager {
     this.#commands.push(save);
   }
 
+  stopUndoAccumulation() {
+    if (this.#position !== -1) {
+      this.#commands[this.#position].type = NaN;
+    }
+  }
+
   /**
    * Undo the last command.
    */
@@ -1168,6 +1174,10 @@ class AnnotationEditorUIManager {
     return this.#selectedEditors.size !== 0;
   }
 
+  stopUndoAccumulation() {
+    this.#commandManager.stopUndoAccumulation();
+  }
+
   /**
    * Undo the last command.
    */

diff --git a/src/shared/util.js b/src/shared/util.js
--- a/src/shared/util.js
+++ b/src/shared/util.js
@@ -83,6 +83,8 @@ const AnnotationEditorParamsType = {
   INK_COLOR: 11,
   INK_THICKNESS: 12,
   INK_OPACITY: 13,
+  INK_DIMS: 14,
+  STAMP_DIMS: 21,
 };
 
 // Permission flags from Table 22, Section 7.6.3.2 of the PDF specification.


</patch>

Imports:
<imports>
Available Packages
Dev Dependencies:
- @babel/core: ^7.22.9
- @babel/plugin-transform-modules-commonjs: ^7.22.5
- @babel/preset-env: ^7.22.9
- @babel/runtime: ^7.22.6
- @javascript-obfuscator/escodegen: 2.3.0
- acorn: ^8.10.0
- autoprefixer: ^10.4.14
- babel-loader: ^9.1.3
- caniuse-lite: ^1.0.30001517
- canvas: ^2.11.2
- core-js: ^3.31.1
- cross-env: ^7.0.3
- es-module-shims: 1.4.7
- eslint: ^8.45.0
- eslint-config-prettier: ^8.8.0
- eslint-plugin-fetch-options: ^0.0.5
- eslint-plugin-html: ^7.1.0
- eslint-plugin-import: ^2.27.5
- eslint-plugin-json: ^3.1.0
- eslint-plugin-mozilla: ^3.1.0
- eslint-plugin-no-unsanitized: ^4.0.2
- eslint-plugin-prettier: ^5.0.0
- eslint-plugin-sort-exports: ^0.8.0
- eslint-plugin-unicorn: ^48.0.0
- globals: ^13.20.0
- gulp: ^4.0.2
- gulp-postcss: ^9.0.1
- gulp-rename: ^2.0.0
- gulp-replace: ^1.1.4
- gulp-zip: ^5.1.0
- jasmine: ^5.1.0
- jsdoc: ^4.0.2
- jstransformer-markdown-it: ^3.0.0
- merge-stream: ^2.0.0
- mkdirp: ^3.0.1
- needle: ^3.2.0
- path2d-polyfill: ^2.0.1
- pngjs: ^7.0.0
- postcss: ^8.4.27
- postcss-dir-pseudo-class: ^8.0.0
- prettier: ^3.0.0
- puppeteer: ^20.9.0
- rimraf: ^3.0.2
- streamqueue: ^1.1.2
- stylelint: ^15.10.2
- stylelint-prettier: ^4.0.0
- terser: ^5.19.2
- through2: ^4.0.2
- ttest: ^4.0.0
- typescript: ^5.1.6
- typogr: ^0.6.8
- vinyl: ^3.0.0
- webpack: ^5.88.2
- webpack-stream: ^7.0.0
- wintersmith: ^2.5.0
- yargs: ^17.7.2

Engines:
- node: >=18

Available Relative Imports:
- `../../src/core/annotation.js`: Annotation, AnnotationBorderStyle, AnnotationFactory, MarkupAnnotation, getQuadPoints
- `../../src/core/bidi.js`: bidi
- `../../src/core/cff_parser.js`: CFFCharset, CFFCompiler, CFFFDSelect, CFFParser, CFFStrings
- `../../src/core/cmap.js`: CMap, CMapFactory, IdentityCMap
- `../../src/core/colorspace.js`: ColorSpace
- `../../src/core/core_utils.js`: arrayBuffersToBytes, encodeToXmlString, escapePDFName, escapeString, getInheritableProperty, isAscii, isWhiteSpace, log2, numberToString, parseXFAPath, recoverJsURL, stringToUTF16HexString, stringToUTF16String, toRomanNumerals, validateCSSFont
- `../../src/core/crypto.js`: AES128Cipher, AES256Cipher, ARCFourCipher, CipherTransformFactory, PDF17, PDF20, calculateMD5, calculateSHA256, calculateSHA384, calculateSHA512
- `../../src/core/default_appearance.js`: createDefaultAppearance, parseAppearanceStream, parseDefaultAppearance
- `../../src/core/document.js`: PDFDocument, Page
- `../../src/core/encodings.js`: getEncoding
- `../../src/core/evaluator.js`: PartialEvaluator
- `../../src/core/font_substitutions.js`: getFontSubstitution
- `../../src/core/fonts_utils.js`: SEAC_ANALYSIS_ENABLED
- `../../src/core/function.js`: PDFFunctionFactory, PostScriptCompiler, PostScriptEvaluator
- `../../src/core/glyphlist.js`: getDingbatsGlyphsUnicode, getGlyphsUnicode
- `../../src/core/image_utils.js`: GlobalImageCache, LocalColorSpaceCache
- `../../src/core/jbig2.js`: Jbig2Image
- `../../src/core/jpg.js`: JpegImage
- `../../src/core/jpx.js`: JpxImage
- `../../src/core/metadata_parser.js`: MetadataParser
- `../../src/core/operator_list.js`: OperatorList
- `../../src/core/parser.js`: Lexer, Linearization, Parser
- `../../src/core/predictor_stream.js`: PredictorStream
- `../../src/core/primitives.js`: Cmd, Dict, EOF, Name, Ref, RefSet, RefSetCache, isCmd, isDict, isName, isRefsEqual
- `../../src/core/ps_parser.js`: PostScriptLexer, PostScriptParser
- `../../src/core/stream.js`: NullStream, Stream, StringStream
- `../../src/core/type1_parser.js`: Type1Parser
- `../../src/core/unicode.js`: getCharUnicodeCategory, getUnicodeForGlyph, getUnicodeRangeFor, mapSpecialUnicodeValues
- `../../src/core/worker.js`: WorkerMessageHandler, WorkerTask
- `../../src/core/writer.js`: incrementalUpdate, writeDict
- `../../src/core/xfa/bind.js`: Binder
- `../../src/core/xfa/data.js`: DataHandler
- `../../src/core/xfa/factory.js`: XFAFactory
- `../../src/core/xfa/formcalc_lexer.js`: Lexer, TOKEN, Token
- `../../src/core/xfa/formcalc_parser.js`: Errors, Parser
- `../../src/core/xfa/parser.js`: XFAParser
- `../../src/core/xfa/som.js`: searchNode
- `../../src/core/xfa/symbol_utils.js`: $dump, $getChildren, $getChildrenByClass, $getChildrenByName, $text, $uid
- `../../src/core/xml_parser.js`: SimpleXMLParser, XMLParserBase
- `../../src/display/annotation_layer.js`: AnnotationLayer
- `../../src/display/annotation_storage.js`: AnnotationStorage
- `../../src/display/api.js`: DefaultCMapReaderFactory, DefaultCanvasFactory, DefaultStandardFontDataFactory, LoopbackPort, PDFDataRangeTransport, PDFDocumentLoadingTask, PDFDocumentProxy, PDFPageProxy, PDFWorker, PDFWorkerUtil, RenderTask, SVGGraphics, build, getDocument, version
- `../../src/display/display_utils.js`: DOMCanvasFactory, DOMSVGFactory, PDFDateString, PageViewport, PixelsPerInch, RenderingCancelledException, StatTimer, getFilenameFromUrl, getPdfFilenameFromUrl, getXfaPageViewport, isDataScheme, isPdfFile, isValidFetchUrl, loadScript, setLayerDimensions
- `../../src/display/editor/annotation_editor_layer.js`: AnnotationEditorLayer
- `../../src/display/editor/tools.js`: AnnotationEditorUIManager, CommandManager
- `../../src/display/fetch_stream.js`: PDFFetchStream
- `../../src/display/metadata.js`: Metadata
- `../../src/display/network.js`: PDFNetworkStream
- `../../src/display/network_utils.js`: createResponseStatusError, extractFilenameFromHeader, validateRangeRequestCapabilities, validateResponseStatus
- `../../src/display/node_stream.js`: PDFNodeStream
- `../../src/display/svg.js`: SVGGraphics
- `../../src/display/text_layer.js`: TextLayerRenderTask, renderTextLayer, updateTextLayer
- `../../src/display/worker_options.js`: GlobalWorkerOptions
- `../../src/display/xfa_layer.js`: XfaLayer
- `../../src/shared/message_handler.js`: MessageHandler
- `../../src/shared/murmurhash3.js`: MurmurHash3_64
- `../../src/shared/util.js`: AbortException, AnnotationBorderStyleType, AnnotationEditorParamsType, AnnotationEditorType, AnnotationFieldFlag, AnnotationFlag, AnnotationMode, AnnotationType, CMapCompressionType, FeatureTest, FormatError, ImageKind, InvalidPDFException, MissingPDFException, OPS, PasswordException, PasswordResponses, PermissionFlag, PromiseCapability, RenderingIntentFlag, UnexpectedResponseException, UnknownErrorException, Util, VerbosityLevel, bytesToString, createValidAbsoluteUrl, getModificationDate, getVerbosityLevel, isArrayBuffer, isNodeJS, normalizeUnicode, objectSize, setVerbosityLevel, shadow, string32, stringToBytes, stringToPDFString, stringToUTF8String
- `../../web/annotation_layer_builder.js`: AnnotationLayerBuilder
- `../../web/download_manager.js`: DownloadManager
- `../../web/event_utils.js`: EventBus, WaitOnType, waitOnEventOrTimeout
- `../../web/genericl10n.js`: GenericL10n
- `../../web/l10n_utils.js`: NullL10n
- `../../web/pdf_find_controller.js`: FindState, PDFFindController
- `../../web/pdf_find_utils.js`: CharacterType, getCharacterType
- `../../web/pdf_history.js`: PDFHistory, isDestArraysEqual, isDestHashesEqual
- `../../web/pdf_link_service.js`: LinkTarget, PDFLinkService, SimpleLinkService
- `../../web/pdf_page_view.js`: PDFPageView
- `../../web/pdf_scripting_manager.component.js`: PDFScriptingManager
- `../../web/pdf_single_page_viewer.js`: PDFSinglePageViewer
- `../../web/pdf_viewer.js`: PDFPageViewBuffer, PDFViewer
- `../../web/struct_tree_layer_builder.js`: StructTreeLayerBuilder
- `../../web/text_layer_builder.js`: TextLayerBuilder
- `../../web/ui_utils.js`: AutoPrintRegExp, ProgressBar, RenderingStates, ScrollMode, SpreadMode, backtrackBeforeAllVisibleElements, binarySearchFirstItem, getPageSizeInches, getVisibleElements, isPortraitOrientation, isValidRotation, parseQueryString, removeNullCharacters
- `../../web/xfa_layer_builder.js`: XfaLayerBuilder
- `./test_utils.js`: CMAP_URL, DefaultFileReaderFactory, STANDARD_FONT_DATA_URL, TEST_PDFS_PATH, XRefMock, buildGetDocumentParams, createIdFactory
- `./testreporter.js`: TestReporter
</imports>

Code:
<code>
File:
src/display/editor/editor.js
1 /* Copyright 2022 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 // eslint-disable-next-line max-len
18 // eslint-disable-next-line max-len
20 
21 import { bindEvents, ColorManager } from "./tools.js";
22 import { FeatureTest, shadow, unreachable } from "../../shared/util.js";
23 
24 // The dimensions of the resizer is 15x15:
25 // https://searchfox.org/mozilla-central/rev/1ce190047b9556c3c10ab4de70a0e61d893e2954/toolkit/content/minimal-xul.css#136-137
26 // so each dimension must be greater than RESIZER_SIZE.
27 const RESIZER_SIZE = 16;
28 
38 /**
39  * Base class for editors.
40  */
41 class AnnotationEditor {
42   #keepAspectRatio = false;
43 
44   #boundFocusin = this.focusin.bind(this);
45 
46   #boundFocusout = this.focusout.bind(this);
47 
48   #hasBeenSelected = false;
49 
50   #isEditing = false;
51 
52   #isInEditMode = false;
53 
54   _uiManager = null;
55 
56   #zIndex = AnnotationEditor._zIndex++;
57 
58   static _colorManager = new ColorManager();
59 
60   static _zIndex = 1;
61 
62   /**
63    * @param {AnnotationEditorParameters} parameters
64    */
65   constructor(parameters) {
66     if (this.constructor === AnnotationEditor) {
67       unreachable("Cannot initialize AnnotationEditor.");
68     }
69 
70     this.parent = parameters.parent;
71     this.id = parameters.id;
72     this.width = this.height = null;
73     this.pageIndex = parameters.parent.pageIndex;
74     this.name = parameters.name;
75     this.div = null;
76     this._uiManager = parameters.uiManager;
77     this.annotationElementId = null;
78 
79     const {
80       rotation,
81       rawDims: { pageWidth, pageHeight, pageX, pageY },
82     } = this.parent.viewport;
83 
84     this.rotation = rotation;
85     this.pageRotation =
86       (360 + rotation - this._uiManager.viewParameters.rotation) % 360;
87     this.pageDimensions = [pageWidth, pageHeight];
88     this.pageTranslation = [pageX, pageY];
89 
90     const [width, height] = this.parentDimensions;
91     this.x = parameters.x / width;
92     this.y = parameters.y / height;
93 
94     this.isAttachedToDOM = false;
95     this.deleted = false;
96   }
97 
657   /**
658    * Select this editor.
659    */
660   select() {
661     this.div?.classList.add("selectedEditor");
662   }
663 
664   /**
665    * Unselect this editor.
666    */
667   unselect() {
668     this.div?.classList.remove("selectedEditor");
669   }
670 
727   /**
728    * Set the aspect ratio to use when resizing.
729    * @param {number} width
730    * @param {number} height
731    */
732   setAspectRatio(width, height) {
733     this.#keepAspectRatio = true;
734     const aspectRatio = width / height;
735     const { style } = this.div;
736     style.aspectRatio = aspectRatio;
737     style.height = "auto";
738     if (aspectRatio >= 1) {
739       style.minHeight = `${RESIZER_SIZE}px`;
740       style.minWidth = `${Math.round(aspectRatio * RESIZER_SIZE)}px`;
741     } else {
742       style.minWidth = `${RESIZER_SIZE}px`;
743       style.minHeight = `${Math.round(RESIZER_SIZE / aspectRatio)}px`;
744     }
745   }
746 
747   static get MIN_SIZE() {
748     return RESIZER_SIZE;
749   }
750 }
751 
752 // This class is used to fake an editor which has been deleted.
768 
File:
src/display/editor/ink.js
1 /* Copyright 2022 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 import {
17   AnnotationEditorParamsType,
18   AnnotationEditorType,
19   Util,
20 } from "../../shared/util.js";
21 import { AnnotationEditor } from "./editor.js";
22 import { InkAnnotationElement } from "../annotation_layer.js";
23 import { opacityToHex } from "./tools.js";
24 
25 /**
26  * Basic draw editor in order to generate an Ink annotation.
27  */
28 class InkEditor extends AnnotationEditor {
29   #baseHeight = 0;
30 
31   #baseWidth = 0;
32 
33   #boundCanvasContextMenu = this.canvasContextMenu.bind(this);
34 
35   #boundCanvasPointermove = this.canvasPointermove.bind(this);
36 
37   #boundCanvasPointerleave = this.canvasPointerleave.bind(this);
38 
39   #boundCanvasPointerup = this.canvasPointerup.bind(this);
40 
41   #boundCanvasPointerdown = this.canvasPointerdown.bind(this);
42 
43   #currentPath2D = new Path2D();
44 
45   #disableEditing = false;
46 
47   #hasSomethingToDraw = false;
48 
49   #isCanvasInitialized = false;
50 
51   #observer = null;
52 
53   #realWidth = 0;
54 
55   #realHeight = 0;
56 
57   #requestFrameCallback = null;
58 
59   static _defaultColor = null;
60 
61   static _defaultOpacity = 1;
62 
63   static _defaultThickness = 1;
64 
65   static _l10nPromise;
66 
67   static _type = "ink";
68 
69   constructor(params) {
70     super({ ...params, name: "inkEditor" });
71     this.color = params.color || null;
72     this.thickness = params.thickness || null;
73     this.opacity = params.opacity || null;
74     this.paths = [];
75     this.bezierPath2D = [];
76     this.allRawPaths = [];
77     this.currentPath = [];
78     this.scaleFactor = 1;
79     this.translationX = this.translationY = 0;
80     this.x = 0;
81     this.y = 0;
82   }
83 
602   /**
603    * Commit the curves we have in this editor.
604    */
605   commit() {
606     if (this.#disableEditing) {
607       return;
608     }
609 
610     super.commit();
611 
612     this.isEditing = false;
613     this.disableEditMode();
614 
615     // This editor must be on top of the main ink editor.
616     this.setInForeground();
617 
618     this.#disableEditing = true;
619     this.div.classList.add("disabled");
620 
621     this.#fitToContent(/* firstTime = */ true);
622 
623     this.parent.addInkEditorIfNeeded(/* isCommitting = */ true);
624 
625     // When commiting, the position of this editor is changed, hence we must
626     // move it to the right position in the DOM.
627     this.parent.moveEditorInDOM(this);
628     this.div.focus({
629       preventScroll: true /* See issue #15744 */,
630     });
631   }
632 
1191 }
1192 
File:
src/display/editor/stamp.js
1 /* Copyright 2022 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 import { AnnotationEditor } from "./editor.js";
17 import { AnnotationEditorType } from "../../shared/util.js";
18 import { PixelsPerInch } from "../display_utils.js";
19 import { StampAnnotationElement } from "../annotation_layer.js";
20 
21 /**
22  * Basic text editor in order to create a FreeTex annotation.
23  */
24 class StampEditor extends AnnotationEditor {
25   #bitmap = null;
26 
27   #bitmapId = null;
28 
29   #bitmapPromise = null;
30 
31   #bitmapUrl = null;
32 
33   #canvas = null;
34 
35   #observer = null;
36 
37   #resizeTimeoutId = null;
38 
39   #isSvg = false;
40 
41   static _type = "stamp";
42 
43   constructor(params) {
44     super({ ...params, name: "stampEditor" });
45     this.#bitmapUrl = params.bitmapUrl;
46   }
47 
173   /** @inheritdoc */
174   render() {
175     if (this.div) {
176       return this.div;
177     }
178 
179     let baseX, baseY;
180     if (this.width) {
181       baseX = this.x;
182       baseY = this.y;
183     }
184 
185     super.render();
186 
187     if (this.#bitmap) {
188       this.#createCanvas();
189     } else {
190       this.div.classList.add("loading");
191       this.#getBitmap();
192     }
193 
194     if (this.width) {
195       // This editor was created in using copy (ctrl+c).
196       const [parentWidth, parentHeight] = this.parentDimensions;
197       this.setAspectRatio(this.width * parentWidth, this.height * parentHeight);
198       this.setAt(
199         baseX * parentWidth,
200         baseY * parentHeight,
201         this.width * parentWidth,
202         this.height * parentHeight
203       );
204     }
205 
206     return this.div;
207   }
208 
209   #createCanvas() {
210     const { div } = this;
211     let { width, height } = this.#bitmap;
212     const [pageWidth, pageHeight] = this.pageDimensions;
213     const MAX_RATIO = 0.75;
214     if (this.width) {
215       width = this.width * pageWidth;
216       height = this.height * pageHeight;
217     } else if (
218       width > MAX_RATIO * pageWidth ||
219       height > MAX_RATIO * pageHeight
220     ) {
221       // If the the image is too big compared to the page dimensions
222       // (more than MAX_RATIO) then we scale it down.
223       const factor = Math.min(
224         (MAX_RATIO * pageWidth) / width,
225         (MAX_RATIO * pageHeight) / height
226       );
227       width *= factor;
228       height *= factor;
229     }
230     const [parentWidth, parentHeight] = this.parentDimensions;
231     this.setDims(
232       (width * parentWidth) / pageWidth,
233       (height * parentHeight) / pageHeight
234     );
235 
236     this.setAspectRatio(width, height);
237 
238     const canvas = (this.#canvas = document.createElement("canvas"));
239     div.append(canvas);
240     this.#drawBitmap(width, height);
241     this.#createObserver();
242     div.classList.remove("loading");
243   }
244 
472 }
473 
File:
src/display/editor/tools.js
1 /* Copyright 2022 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
17 // eslint-disable-next-line max-len
19 
20 import {
21   AnnotationEditorPrefix,
22   AnnotationEditorType,
23   FeatureTest,
24   getUuid,
25   shadow,
26   Util,
27   warn,
28 } from "../../shared/util.js";
29 import { getColorValues, getRGB, PixelsPerInch } from "../display_utils.js";
30 
198 /**
199  * Class to handle undo/redo.
200  * Commands are just saved in a buffer.
201  * If we hit some memory issues we could likely use a circular buffer.
202  * It has to be used as a singleton.
203  */
204 class CommandManager {
205   #commands = [];
206 
207   #locked = false;
208 
209   #maxSize;
210 
211   #position = -1;
212 
213   constructor(maxSize = 128) {
214     this.#maxSize = maxSize;
215   }
216 
333 }
334 
480 /**
481  * A pdf has several pages and each of them when it will rendered
482  * will have an AnnotationEditorLayer which will contain the some
483  * new Annotations associated to an editor in order to modify them.
484  *
485  * This class is used to manage all the different layers, editors and
486  * some action like copy/paste, undo/redo, ...
487  */
488 class AnnotationEditorUIManager {
489   #activeEditor = null;
490 
491   #allEditors = new Map();
492 
493   #allLayers = new Map();
494 
495   #annotationStorage = null;
496 
497   #commandManager = new CommandManager();
498 
499   #currentPageIndex = 0;
500 
501   #deletedAnnotationsElementIds = new Set();
502 
503   #editorTypes = null;
504 
505   #editorsToRescale = new Set();
506 
507   #eventBus = null;
508 
509   #filterFactory = null;
510 
511   #idManager = new IdManager();
512 
513   #isEnabled = false;
514 
515   #mode = AnnotationEditorType.NONE;
516 
517   #selectedEditors = new Set();
518 
519   #pageColors = null;
520 
521   #boundCopy = this.copy.bind(this);
522 
523   #boundCut = this.cut.bind(this);
524 
525   #boundPaste = this.paste.bind(this);
526 
527   #boundKeydown = this.keydown.bind(this);
528 
529   #boundOnEditingAction = this.onEditingAction.bind(this);
530 
531   #boundOnPageChanging = this.onPageChanging.bind(this);
532 
533   #boundOnScaleChanging = this.onScaleChanging.bind(this);
534 
535   #boundOnRotationChanging = this.onRotationChanging.bind(this);
536 
537   #previousStates = {
538     isEditing: false,
539     isEmpty: true,
540     hasSomethingToUndo: false,
541     hasSomethingToRedo: false,
542     hasSelectedEditor: false,
543   };
544 
545   #container = null;
546 
593   constructor(container, eventBus, pdfDocument, pageColors) {
594     this.#container = container;
595     this.#eventBus = eventBus;
596     this.#eventBus._on("editingaction", this.#boundOnEditingAction);
597     this.#eventBus._on("pagechanging", this.#boundOnPageChanging);
598     this.#eventBus._on("scalechanging", this.#boundOnScaleChanging);
599     this.#eventBus._on("rotationchanging", this.#boundOnRotationChanging);
600     this.#annotationStorage = pdfDocument.annotationStorage;
601     this.#filterFactory = pdfDocument.filterFactory;
602     this.#pageColors = pageColors;
603     this.viewParameters = {
604       realScale: PixelsPerInch.PDF_TO_CSS_UNITS,
605       rotation: 0,
606     };
607   }
608 
1327 }
1328 
File:
src/shared/util.js
1 /* Copyright 2012 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 /* globals process */
16 
17 // NW.js / Electron is a browser context, but copies some Node.js objects; see
18 // http://docs.nwjs.io/en/latest/For%20Users/Advanced/JavaScript%20Contexts%20in%20NW.js/#access-nodejs-and-nwjs-api-in-browser-context
19 // https://www.electronjs.org/docs/api/process#processversionselectron-readonly
20 // https://www.electronjs.org/docs/api/process#processtype-readonly
21 const isNodeJS =
22   (typeof PDFJSDev === "undefined" || PDFJSDev.test("GENERIC")) &&
23   typeof process === "object" &&
24   process + "" === "[object process]" &&
25   !process.versions.nw &&
26   !(process.versions.electron && process.type && process.type !== "browser");
27 
28 const IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];
29 const FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];
30 
31 const MAX_IMAGE_SIZE_TO_CACHE = 10e6; // Ten megabytes.
32 
33 // Represent the percentage of the height of a single-line field over
34 // the font size. Acrobat seems to use this value.
35 const LINE_FACTOR = 1.35;
36 const LINE_DESCENT_FACTOR = 0.35;
37 const BASELINE_FACTOR = LINE_DESCENT_FACTOR / LINE_FACTOR;
38 
51 const RenderingIntentFlag = {
52   ANY: 0x01,
53   DISPLAY: 0x02,
54   PRINT: 0x04,
55   SAVE: 0x08,
56   ANNOTATIONS_FORMS: 0x10,
57   ANNOTATIONS_STORAGE: 0x20,
58   ANNOTATIONS_DISABLE: 0x40,
59   OPLIST: 0x100,
60 };
61 
62 const AnnotationMode = {
63   DISABLE: 0,
64   ENABLE: 1,
65   ENABLE_FORMS: 2,
66   ENABLE_STORAGE: 3,
67 };
68 
69 const AnnotationEditorPrefix = "pdfjs_internal_editor_";
70 
71 const AnnotationEditorType = {
72   DISABLE: -1,
73   NONE: 0,
74   FREETEXT: 3,
75   STAMP: 13,
76   INK: 15,
77 };
78 
79 const AnnotationEditorParamsType = {
80   FREETEXT_SIZE: 1,
81   FREETEXT_COLOR: 2,
82   FREETEXT_OPACITY: 3,
83   INK_COLOR: 11,
84   INK_THICKNESS: 12,
85   INK_OPACITY: 13,
86 };
87 
88 // Permission flags from Table 22, Section 7.6.3.2 of the PDF specification.
89 const PermissionFlag = {
90   PRINT: 0x04,
91   MODIFY_CONTENTS: 0x08,
92   COPY: 0x10,
93   MODIFY_ANNOTATIONS: 0x20,
94   FILL_INTERACTIVE_FORMS: 0x100,
95   COPY_FOR_ACCESSIBILITY: 0x200,
96   ASSEMBLE: 0x400,
97   PRINT_HIGH_QUALITY: 0x800,
98 };
99 
100 const TextRenderingMode = {
101   FILL: 0,
102   STROKE: 1,
103   FILL_STROKE: 2,
104   INVISIBLE: 3,
105   FILL_ADD_TO_PATH: 4,
106   STROKE_ADD_TO_PATH: 5,
107   FILL_STROKE_ADD_TO_PATH: 6,
108   ADD_TO_PATH: 7,
109   FILL_STROKE_MASK: 3,
110   ADD_TO_PATH_FLAG: 4,
111 };
112 
113 const ImageKind = {
114   GRAYSCALE_1BPP: 1,
115   RGB_24BPP: 2,
116   RGBA_32BPP: 3,
117 };
118 
119 const AnnotationType = {
120   TEXT: 1,
121   LINK: 2,
122   FREETEXT: 3,
123   LINE: 4,
124   SQUARE: 5,
125   CIRCLE: 6,
126   POLYGON: 7,
127   POLYLINE: 8,
128   HIGHLIGHT: 9,
129   UNDERLINE: 10,
130   SQUIGGLY: 11,
131   STRIKEOUT: 12,
132   STAMP: 13,
133   CARET: 14,
134   INK: 15,
135   POPUP: 16,
136   FILEATTACHMENT: 17,
137   SOUND: 18,
138   MOVIE: 19,
139   WIDGET: 20,
140   SCREEN: 21,
141   PRINTERMARK: 22,
142   TRAPNET: 23,
143   WATERMARK: 24,
144   THREED: 25,
145   REDACT: 26,
146 };
147 
148 const AnnotationReplyType = {
149   GROUP: "Group",
150   REPLY: "R",
151 };
152 
153 const AnnotationFlag = {
154   INVISIBLE: 0x01,
155   HIDDEN: 0x02,
156   PRINT: 0x04,
157   NOZOOM: 0x08,
158   NOROTATE: 0x10,
159   NOVIEW: 0x20,
160   READONLY: 0x40,
161   LOCKED: 0x80,
162   TOGGLENOVIEW: 0x100,
163   LOCKEDCONTENTS: 0x200,
164 };
165 
166 const AnnotationFieldFlag = {
167   READONLY: 0x0000001,
168   REQUIRED: 0x0000002,
169   NOEXPORT: 0x0000004,
170   MULTILINE: 0x0001000,
171   PASSWORD: 0x0002000,
172   NOTOGGLETOOFF: 0x0004000,
173   RADIO: 0x0008000,
174   PUSHBUTTON: 0x0010000,
175   COMBO: 0x0020000,
176   EDIT: 0x0040000,
177   SORT: 0x0080000,
178   FILESELECT: 0x0100000,
179   MULTISELECT: 0x0200000,
180   DONOTSPELLCHECK: 0x0400000,
181   DONOTSCROLL: 0x0800000,
182   COMB: 0x1000000,
183   RICHTEXT: 0x2000000,
184   RADIOSINUNISON: 0x2000000,
185   COMMITONSELCHANGE: 0x4000000,
186 };
187 
188 const AnnotationBorderStyleType = {
189   SOLID: 1,
190   DASHED: 2,
191   BEVELED: 3,
192   INSET: 4,
193   UNDERLINE: 5,
194 };
195 
196 const AnnotationActionEventType = {
197   E: "Mouse Enter",
198   X: "Mouse Exit",
199   D: "Mouse Down",
200   U: "Mouse Up",
201   Fo: "Focus",
202   Bl: "Blur",
203   PO: "PageOpen",
204   PC: "PageClose",
205   PV: "PageVisible",
206   PI: "PageInvisible",
207   K: "Keystroke",
208   F: "Format",
209   V: "Validate",
210   C: "Calculate",
211 };
212 
213 const DocumentActionEventType = {
214   WC: "WillClose",
215   WS: "WillSave",
216   DS: "DidSave",
217   WP: "WillPrint",
218   DP: "DidPrint",
219 };
220 
221 const PageActionEventType = {
222   O: "PageOpen",
223   C: "PageClose",
224 };
225 
226 const VerbosityLevel = {
227   ERRORS: 0,
228   WARNINGS: 1,
229   INFOS: 5,
230 };
231 
232 const CMapCompressionType = {
233   NONE: 0,
234   BINARY: 1,
235 };
236 
237 // All the possible operations for an operator list.
238 const OPS = {
239   // Intentionally start from 1 so it is easy to spot bad operators that will be
240   // 0's.
241   // PLEASE NOTE: We purposely keep any removed operators commented out, since
242   //              re-numbering the list would risk breaking third-party users.
243   dependency: 1,
244   setLineWidth: 2,
245   setLineCap: 3,
246   setLineJoin: 4,
247   setMiterLimit: 5,
248   setDash: 6,
249   setRenderingIntent: 7,
250   setFlatness: 8,
251   setGState: 9,
252   save: 10,
253   restore: 11,
254   transform: 12,
255   moveTo: 13,
256   lineTo: 14,
257   curveTo: 15,
258   curveTo2: 16,
259   curveTo3: 17,
260   closePath: 18,
261   rectangle: 19,
262   stroke: 20,
263   closeStroke: 21,
264   fill: 22,
265   eoFill: 23,
266   fillStroke: 24,
267   eoFillStroke: 25,
268   closeFillStroke: 26,
269   closeEOFillStroke: 27,
270   endPath: 28,
271   clip: 29,
272   eoClip: 30,
273   beginText: 31,
274   endText: 32,
275   setCharSpacing: 33,
276   setWordSpacing: 34,
277   setHScale: 35,
278   setLeading: 36,
279   setFont: 37,
280   setTextRenderingMode: 38,
281   setTextRise: 39,
282   moveText: 40,
283   setLeadingMoveText: 41,
284   setTextMatrix: 42,
285   nextLine: 43,
286   showText: 44,
287   showSpacedText: 45,
288   nextLineShowText: 46,
289   nextLineSetSpacingShowText: 47,
290   setCharWidth: 48,
291   setCharWidthAndBounds: 49,
292   setStrokeColorSpace: 50,
293   setFillColorSpace: 51,
294   setStrokeColor: 52,
295   setStrokeColorN: 53,
296   setFillColor: 54,
297   setFillColorN: 55,
298   setStrokeGray: 56,
299   setFillGray: 57,
300   setStrokeRGBColor: 58,
301   setFillRGBColor: 59,
302   setStrokeCMYKColor: 60,
303   setFillCMYKColor: 61,
304   shadingFill: 62,
305   beginInlineImage: 63,
306   beginImageData: 64,
307   endInlineImage: 65,
308   paintXObject: 66,
309   markPoint: 67,
310   markPointProps: 68,
311   beginMarkedContent: 69,
312   beginMarkedContentProps: 70,
313   endMarkedContent: 71,
314   beginCompat: 72,
315   endCompat: 73,
316   paintFormXObjectBegin: 74,
317   paintFormXObjectEnd: 75,
318   beginGroup: 76,
319   endGroup: 77,
320   // beginAnnotations: 78,
321   // endAnnotations: 79,
322   beginAnnotation: 80,
323   endAnnotation: 81,
324   // paintJpegXObject: 82,
325   paintImageMaskXObject: 83,
326   paintImageMaskXObjectGroup: 84,
327   paintImageXObject: 85,
328   paintInlineImageXObject: 86,
329   paintInlineImageXObjectGroup: 87,
330   paintImageXObjectRepeat: 88,
331   paintImageMaskXObjectRepeat: 89,
332   paintSolidColorImageMask: 90,
333   constructPath: 91,
334 };
335 
336 const PasswordResponses = {
337   NEED_PASSWORD: 1,
338   INCORRECT_PASSWORD: 2,
339 };
340 
341 let verbosity = VerbosityLevel.WARNINGS;
342 
353 // A notice for devs. These are good for things that are helpful to devs, such
354 // as warning that Workers were disabled, which is important to devs but not
355 // end users.
361 
362 // Non-fatal warnings.
368 
379 // Checks if URLs use one of the allowed protocols, e.g. to avoid XSS.
392 
455 const BaseException = (function BaseExceptionClosure() {
456   // eslint-disable-next-line no-shadow
457   function BaseException(message, name) {
458     if (this.constructor === BaseException) {
459       unreachable("Cannot initialize BaseException.");
460     }
461     this.message = message;
462     this.name = name;
463   }
464   BaseException.prototype = new Error();
465   BaseException.constructor = BaseException;
466 
467   return BaseException;
468 })();
469 
570 // Ensure that the returned Object has a `null` prototype; hence why
571 // `Object.fromEntries(...)` is not used.
579 
580 // Checks the endianness of the platform.
587 
588 // Checks if it's possible to eval JS expressions.
597 
629 const hexNumbers = [...Array(256).keys()].map(n =>
630   n.toString(16).padStart(2, "0")
631 );
632 
884 const PDFStringTranslateTable = [
885   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2d8,
886   0x2c7, 0x2c6, 0x2d9, 0x2dd, 0x2db, 0x2da, 0x2dc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
887   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
888   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
889   0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
890   0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192,
891   0x2044, 0x2039, 0x203a, 0x2212, 0x2030, 0x201e, 0x201c, 0x201d, 0x2018,
892   0x2019, 0x201a, 0x2122, 0xfb01, 0xfb02, 0x141, 0x152, 0x160, 0x178, 0x17d,
893   0x131, 0x142, 0x153, 0x161, 0x17e, 0, 0x20ac,
894 ];
895 
1000 let NormalizeRegex = null;
1001 let NormalizationMap = null;
1018 
1039 
</code>

Test file:
<test_file>
File:
test/unit/editor_spec.js
/* Copyright 2022 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { CommandManager } from "../../src/display/editor/tools.js";
</test_file>

Your task:
You are a software tester at pdf.js.
1. Examine the existing test file. You may reuse any imports, helpers or setup blocks it already has.
2. Write exactly one javascript test `it("...", async () => {...})` block.
3. Your test must fail on the code before the patch, and pass after, hence the test will verify that the patch resolves the issue.
4. The test must be self-contained and to-the-point.
5. If you need something new use only the provided imports (respect the paths exactly how they are given) by importing dynamically for compatibility with Node.js — no new dependencies. 
6. Return only the javascript code for the new `it(...)` block (no comments or explanations).

Example structure:
it("should <describe behavior>", async () => {
  const { example } = await import("../../src/core/example.js");
  <initialize required variables>;
  <define expected variable>;
  <generate actual variables>;
  <compare expected with actual>;
});


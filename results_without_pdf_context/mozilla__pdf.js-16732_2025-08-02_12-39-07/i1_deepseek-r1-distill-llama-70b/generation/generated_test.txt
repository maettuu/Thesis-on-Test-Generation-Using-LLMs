it("should change cursor when resizing from different edges", async () => {
  const { PDFDocument } = await import("../../src/core/document.js");
  const { AnnotationEditorUIManager } = await import("../../src/display/editor/tools.js");
  const { PDFViewer } = await import("../../src/display/display_utils.js");
  const { AnnotationEditor } = await import("../../src/display/editor/editor.js");

  const pdf = await PDFDocument.load(
    new Uint8Array(await (await fetch("test.pdf")).arrayBuffer())
  );
  const viewer = new PDFViewer/pdf();
  const uiManager = new AnnotationEditorUIManager(viewer);
  const editor = new AnnotationEditor({
    parent: viewer,
    uiManager: uiManager,
    type: AnnotationEditorType.INITIAL,
    id: "test-editor",
    name: "test-editor",
  });

  editor.makeResizable();
  editor.select();

  const page = pdf.getPage(0);
  const viewport = page.getViewPort();

  const resizers = editor.div.querySelectorAll(".resizer");
  const cursorStyles = {
    topLeft: "nwse-resize",
    topRight: "nesw-resize",
    bottomRight: "nwse-resize",
    bottomLeft: "nesw-resize",
  };

  for (const resizer of resizers) {
    const name = resizer.classList[1];
    const event = new PointerEvent("pointerdown", {
      bubbles: true,
      cancelable: true,
      clientX: 0,
      clientY: 0,
    });

    resizer.dispatchEvent(event);
    await new Promise(resolve => setTimeout(resolve, 100));

    const cursor = window.getComputedStyle(resizer).cursor;
    expect(cursor).toBe(cursorStyles[name]);
  }
});
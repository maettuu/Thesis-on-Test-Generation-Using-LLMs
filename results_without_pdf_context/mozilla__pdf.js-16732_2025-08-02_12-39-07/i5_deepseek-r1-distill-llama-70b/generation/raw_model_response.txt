<think>
Okay, I need to write a regression test for the issue where the mouse cursor doesn't change correctly when resizing images or drawings in PDF documents. The patch provided modifies the editor.js, ink.js, stamp.js, tools.js, and util.js files. 

First, I'll focus on understanding the problem. The mouse cursor should change based on which edge the user is resizing from. Before the patch, this behavior wasn't working as expected, so the test should fail without the patch and pass after applying it.

Looking at the patch, I see that the AnnotationEditor class now has resizer elements that are created and handled. The resizerPointerdown and resizerPointermove methods manage the resizing and cursor changes. The cursor classes are added to the parent div, which probably changes the cursor shape.

So, the test needs to check if the correct cursor is displayed when resizing from different edges. I'll use Puppeteer to simulate resizing actions and check the cursor style.

I'll set up a test PDF with an image. Then, I'll open it in a browser using Puppeteer, add an image annotation, and try resizing from the top-left corner. I'll check if the cursor changes to 'nwse-resize' as expected.

The test structure will involve importing the necessary modules, setting up the PDF viewer, adding the annotation, and then simulating the mouse actions. I'll use async/await for the operations and expect the cursor style to match the expected class.

I need to make sure that the test is self-contained and doesn't rely on external dependencies beyond what's provided. Also, I should handle any potential errors and clean up properly after the test.

Finally, I'll write the test as a JavaScript function using it() and ensure it returns only the code without any extra comments or explanations.
</think>

```javascript
it("should change mouse cursor when resizing from different edges", async () => {
  const { PDFDocument, PDFViewer } = await import("../../src/display/api.js");
  const { AnnotationEditor } = await import("../../src/display/editor/editor.js");
  const { PDFPageProxy } = await import("../../src/display/display_utils.js");
  const puppeteer = await import('puppeteer');

  const browser = await puppeteer.launch();
  const page = await browser.newPage();
  const viewer = new PDFViewer({
    container: page.contentFrame(),
    viewerWidth: 800,
    viewerHeight: 600,
  });

  // Load test PDF with image
  const pdfDoc = await PDFDocument.load(await fetch('test.pdf'));
  const pageProxy = await pdfDoc.getPage(1);
  await viewer.setDocument(pdfDoc);
  await pageProxy.render({});

  // Add image annotation
  const editor = new AnnotationEditor({
    annotationElementId: "test-image",
    uiManager: new AnnotationEditorUIManager(),
    rotation: 0,
    x: 100,
    y: 100,
    width: 200,
    height: 150,
  });

  editor.select();
  editor.makeResizable();

  // Test top-left resize
  await page.mouse.move(100, 100);
  await page.mouse.down();
  await page.mouse.move(150, 150);
  await page.mouse.up();

  const cursorStyle = await page.evaluate(() => {
    return document.querySelector('.selectedEditor').style.cursor;
  });

  expect(cursorStyle).toBe('nwse-resize');

  await browser.close();
});
```
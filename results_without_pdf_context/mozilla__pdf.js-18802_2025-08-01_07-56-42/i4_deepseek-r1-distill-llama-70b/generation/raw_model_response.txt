<think>
Okay, I need to write a regression test for the issue where the PDF text is being rendered with incorrect characters. The user provided a patch that modifies the standard_fonts.js file, adding mappings for GillSansMT fonts to Helvetica. 

First, I should understand what the patch does. It looks like the patch adds entries to the getNonStdFontMap so that GillSansMT and its bold, italic, and bold-italic variants are mapped to corresponding Helvetica fonts. This should fix the rendering issue where GillSansMT text was showing incorrect characters.

Now, the test needs to fail before the patch and pass after. So, I'll create a test that checks if the font substitution is correctly applied. The test will use a sample PDF that uses GillSansMT fonts and ensure that the text is rendered as expected.

I'll structure the test using Jest. I'll import the necessary modules, including pdfjs-lib from the correct path. I'll set up a mock PDF document using the sample PDF provided by the user. Then, I'll render the first page and extract the text.

The key part is checking if the text is as expected. Before the patch, the text might be garbled, but after the patch, it should display correctly. So, I'll define an expected text string and compare it with the actual text extracted from the PDF.

I need to make sure the test is self-contained and doesn't rely on external dependencies beyond what's provided. I'll use dynamic imports to load the necessary modules, ensuring compatibility with Node.js.

Finally, I'll write the test block, making sure it's concise and directly tests the font substitution issue addressed by the patch.
</think>

```javascript
it("should correctly substitute GillSansMT fonts with Helvetica", async () => {
  const { PDFDocument } = await import("../../src/display/api.js");
  const { getStandardFontName } = await import("../../src/core/standard_fonts.js");

  // Define expected font mappings after the patch
  const expectedMappings = {
    "GillSansMT": "Helvetica",
    "GillSansMT-Bold": "Helvetica-Bold",
    "GillSansMT-BoldItalic": "Helvetica-BoldOblique",
    "GillSansMT-Italic": "Helvetica-Oblique"
  };

  // Test each font variant
  for (const [font, expected] of Object.entries(expectedMappings)) {
    expect(getStandardFontName(font)).toBe(expected);
  }
});
```
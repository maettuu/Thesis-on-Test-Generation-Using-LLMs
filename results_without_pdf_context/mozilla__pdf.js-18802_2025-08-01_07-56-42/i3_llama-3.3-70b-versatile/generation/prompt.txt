Before you begin:
- Keep going until the job is completely solved — don’t stop halfway.
- If you’re unsure about the behavior, reread the provided patch carefully; do not hallucinate.
- Plan your approach before writing code by reflecting on whether the test truly fails before and passes after.

Issue:
<issue>
[Bug]: Incorrect rendering of texts in a PDF
### Attach (recommended) or Link to PDF file

Uploaded in comments

### Web browser and its version

Firefox : 130.0.1 

### Operating system and its version

any OS, tested in Windows

### PDF.js version

3.11

### Is the bug present in the latest PDF.js version?

Yes

### Is a browser extension

No

### Steps to reproduce the problem

Open the sample file provided in pdf.js viewer, we can see the text replaced with some other characters.

### What is the expected behavior?

PDF text fields should be displayed with correct text

<img width="720" alt="Screenshot 2024-09-26 at 7 40 03 PM" src="https://github.com/user-attachments/assets/59e28be6-f1e4-4b88-959d-026733171d41">


### What went wrong?

Texts in PDF is replaced with some different characters.

<img width="720" alt="Screenshot 2024-09-26 at 7 39 16 PM" src="https://github.com/user-attachments/assets/c9be5017-0bdc-49ae-9f92-9b40a0eee919">


### Link to a viewer

_No response_

### Additional context

_No response_
</issue>

Patch:
<patch>
diff --git a/src/core/standard_fonts.js b/src/core/standard_fonts.js
--- a/src/core/standard_fonts.js
+++ b/src/core/standard_fonts.js
@@ -136,6 +136,10 @@ const getNonStdFontMap = getLookupTableFactory(function (t) {
   t["ComicSansMS-Bold"] = "Comic Sans MS-Bold";
   t["ComicSansMS-BoldItalic"] = "Comic Sans MS-BoldItalic";
   t["ComicSansMS-Italic"] = "Comic Sans MS-Italic";
+  t.GillSansMT = "Helvetica";
+  t["GillSansMT-Bold"] = "Helvetica-Bold";
+  t["GillSansMT-BoldItalic"] = "Helvetica-BoldOblique";
+  t["GillSansMT-Italic"] = "Helvetica-Oblique";
   t.Impact = "Helvetica";
   t["ItcSymbol-Bold"] = "Helvetica-Bold";
   t["ItcSymbol-BoldItalic"] = "Helvetica-BoldOblique";


</patch>

Imports:
<imports>
Available Packages
Dev Dependencies:
- @babel/core: ^7.25.2
- @babel/preset-env: ^7.25.4
- @babel/runtime: ^7.25.6
- @fluent/bundle: ^0.18.0
- @fluent/dom: ^0.10.0
- @jazzer.js/core: ^2.1.0
- @metalsmith/layouts: ^2.7.0
- @metalsmith/markdown: ^1.10.0
- autoprefixer: ^10.4.20
- babel-loader: ^9.2.1
- caniuse-lite: ^1.0.30001662
- canvas: ^2.11.2
- core-js: ^3.38.1
- eslint: ^8.57.0
- eslint-config-prettier: ^9.1.0
- eslint-plugin-fetch-options: ^0.0.5
- eslint-plugin-html: ^8.1.1
- eslint-plugin-import: ^2.30.0
- eslint-plugin-jasmine: ^4.2.2
- eslint-plugin-json: ^3.1.0
- eslint-plugin-no-unsanitized: ^4.1.0
- eslint-plugin-prettier: ^5.2.1
- eslint-plugin-sort-exports: ^0.9.1
- eslint-plugin-unicorn: ^55.0.0
- gulp: ^5.0.0
- gulp-cli: ^3.0.0
- gulp-postcss: ^10.0.0
- gulp-rename: ^2.0.0
- gulp-replace: ^1.1.4
- gulp-zip: ^6.0.0
- highlight.js: ^11.10.0
- jasmine: ^5.3.0
- jsdoc: ^4.0.3
- jstransformer-nunjucks: ^1.2.0
- metalsmith: ^2.6.3
- metalsmith-html-relative: ^2.0.4
- ordered-read-streams: ^2.0.0
- path2d: ^0.2.1
- pngjs: ^7.0.0
- postcss: ^8.4.47
- postcss-dark-theme-class: ^1.3.0
- postcss-dir-pseudo-class: ^9.0.0
- postcss-discard-comments: ^7.0.3
- postcss-nesting: ^13.0.0
- prettier: ^3.3.3
- puppeteer: 23.3.1
- stylelint: ^16.9.0
- stylelint-prettier: ^5.0.2
- svglint: ^3.0.0
- terser-webpack-plugin: ^5.3.10
- tsc-alias: ^1.8.10
- ttest: ^4.0.0
- typescript: ^5.6.2
- vinyl: ^3.0.0
- webpack: ^5.94.0
- webpack-stream: ^7.0.0
- yargs: ^17.7.2

Engines:
- node: >=18

Available Relative Imports:
- `../../src/core/annotation.js`: Annotation, AnnotationBorderStyle, AnnotationFactory, MarkupAnnotation, getQuadPoints
- `../../src/core/bidi.js`: bidi
- `../../src/core/cff_parser.js`: CFFCharset, CFFCompiler, CFFFDSelect, CFFParser, CFFStrings
- `../../src/core/cmap.js`: CMap, CMapFactory, IdentityCMap
- `../../src/core/colorspace.js`: ColorSpace
- `../../src/core/core_utils.js`: arrayBuffersToBytes, encodeToXmlString, escapePDFName, escapeString, getInheritableProperty, getSizeInBytes, isAscii, isWhiteSpace, log2, numberToString, parseXFAPath, recoverJsURL, stringToUTF16HexString, stringToUTF16String, toRomanNumerals, validateCSSFont
- `../../src/core/crypto.js`: AES128Cipher, AES256Cipher, ARCFourCipher, CipherTransformFactory, PDF17, PDF20, calculateMD5, calculateSHA256, calculateSHA384, calculateSHA512
- `../../src/core/default_appearance.js`: createDefaultAppearance, parseAppearanceStream, parseDefaultAppearance
- `../../src/core/document.js`: PDFDocument, Page
- `../../src/core/encodings.js`: getEncoding
- `../../src/core/evaluator.js`: PartialEvaluator
- `../../src/core/flate_stream.js`: FlateStream
- `../../src/core/font_substitutions.js`: getFontSubstitution
- `../../src/core/fonts_utils.js`: SEAC_ANALYSIS_ENABLED
- `../../src/core/function.js`: PDFFunctionFactory, PostScriptCompiler, PostScriptEvaluator
- `../../src/core/glyphlist.js`: getDingbatsGlyphsUnicode, getGlyphsUnicode
- `../../src/core/image_utils.js`: GlobalImageCache, LocalColorSpaceCache
- `../../src/core/jbig2.js`: Jbig2Error, Jbig2Image
- `../../src/core/jpg.js`: JpegError, JpegImage
- `../../src/core/jpx.js`: JpxError, JpxImage
- `../../src/core/metadata_parser.js`: MetadataParser
- `../../src/core/operator_list.js`: OperatorList
- `../../src/core/parser.js`: Lexer, Linearization, Parser
- `../../src/core/predictor_stream.js`: PredictorStream
- `../../src/core/primitives.js`: Cmd, Dict, EOF, Name, Ref, RefSet, RefSetCache, isCmd, isDict, isName, isRefsEqual
- `../../src/core/ps_parser.js`: PostScriptLexer, PostScriptParser
- `../../src/core/stream.js`: NullStream, Stream, StringStream
- `../../src/core/type1_parser.js`: Type1Parser
- `../../src/core/unicode.js`: getCharUnicodeCategory, getUnicodeForGlyph, getUnicodeRangeFor, mapSpecialUnicodeValues
- `../../src/core/worker.js`: WorkerMessageHandler, WorkerTask
- `../../src/core/writer.js`: incrementalUpdate, writeDict
- `../../src/core/xfa/bind.js`: Binder
- `../../src/core/xfa/data.js`: DataHandler
- `../../src/core/xfa/factory.js`: XFAFactory
- `../../src/core/xfa/formcalc_lexer.js`: Lexer, TOKEN, Token
- `../../src/core/xfa/formcalc_parser.js`: Errors, Parser
- `../../src/core/xfa/parser.js`: XFAParser
- `../../src/core/xfa/som.js`: searchNode
- `../../src/core/xfa/symbol_utils.js`: $dump, $getChildren, $getChildrenByClass, $getChildrenByName, $text, $uid
- `../../src/core/xml_parser.js`: SimpleXMLParser, XMLParserBase
- `../../src/display/annotation_layer.js`: AnnotationLayer
- `../../src/display/annotation_storage.js`: AnnotationStorage
- `../../src/display/api.js`: DefaultCMapReaderFactory, DefaultCanvasFactory, DefaultStandardFontDataFactory, LoopbackPort, PDFDataRangeTransport, PDFDocumentLoadingTask, PDFDocumentProxy, PDFPageProxy, PDFWorker, RenderTask, build, getDocument, version
- `../../src/display/display_utils.js`: DOMCanvasFactory, DOMSVGFactory, OutputScale, PDFDateString, PageViewport, PixelsPerInch, RenderingCancelledException, StatTimer, fetchData, getFilenameFromUrl, getPdfFilenameFromUrl, getXfaPageViewport, isDataScheme, isPdfFile, isValidFetchUrl, noContextMenu, setLayerDimensions
- `../../src/display/draw_layer.js`: DrawLayer
- `../../src/display/editor/annotation_editor_layer.js`: AnnotationEditorLayer
- `../../src/display/editor/color_picker.js`: ColorPicker
- `../../src/display/editor/tools.js`: AnnotationEditorUIManager, CommandManager
- `../../src/display/fetch_stream.js`: PDFFetchStream
- `../../src/display/metadata.js`: Metadata
- `../../src/display/network.js`: PDFNetworkStream
- `../../src/display/network_utils.js`: createHeaders, createResponseStatusError, extractFilenameFromHeader, validateRangeRequestCapabilities, validateResponseStatus
- `../../src/display/node_stream.js`: PDFNodeStream
- `../../src/display/node_utils.js`: NodePackages
- `../../src/display/text_layer.js`: TextLayer
- `../../src/display/worker_options.js`: GlobalWorkerOptions
- `../../src/display/xfa_layer.js`: XfaLayer
- `../../src/shared/message_handler.js`: MessageHandler
- `../../src/shared/murmurhash3.js`: MurmurHash3_64
- `../../src/shared/util.js`: AbortException, AnnotationBorderStyleType, AnnotationEditorParamsType, AnnotationEditorType, AnnotationFieldFlag, AnnotationFlag, AnnotationMode, AnnotationType, BaseException, CMapCompressionType, FeatureTest, FormatError, ImageKind, InvalidPDFException, MissingPDFException, OPS, PasswordException, PasswordResponses, PermissionFlag, RenderingIntentFlag, UnexpectedResponseException, UnknownErrorException, Util, VerbosityLevel, assert, bytesToString, createValidAbsoluteUrl, getModificationDate, getVerbosityLevel, isNodeJS, normalizeUnicode, objectSize, setVerbosityLevel, shadow, string32, stringToBytes, stringToPDFString, stringToUTF8String
- `../../web/annotation_layer_builder.js`: AnnotationLayerBuilder
- `../../web/app_options.js`: AppOptions, OptionKind
- `../../web/download_manager.js`: DownloadManager
- `../../web/event_utils.js`: EventBus, WaitOnType, waitOnEventOrTimeout
- `../../web/genericl10n.js`: GenericL10n
- `../../web/pdf_find_controller.js`: FindState, PDFFindController
- `../../web/pdf_find_utils.js`: CharacterType, getCharacterType
- `../../web/pdf_history.js`: PDFHistory, isDestArraysEqual, isDestHashesEqual
- `../../web/pdf_link_service.js`: LinkTarget, PDFLinkService, SimpleLinkService
- `../../web/pdf_page_view.js`: PDFPageView
- `../../web/pdf_scripting_manager.component.js`: PDFScriptingManager
- `../../web/pdf_single_page_viewer.js`: PDFSinglePageViewer
- `../../web/pdf_viewer.js`: PDFPageViewBuffer, PDFViewer
- `../../web/struct_tree_layer_builder.js`: StructTreeLayerBuilder
- `../../web/text_layer_builder.js`: TextLayerBuilder
- `../../web/ui_utils.js`: AutoPrintRegExp, ProgressBar, RenderingStates, ScrollMode, SpreadMode, backtrackBeforeAllVisibleElements, binarySearchFirstItem, calcRound, getPageSizeInches, getVisibleElements, isPortraitOrientation, isValidRotation, parseQueryString, removeNullCharacters
- `../../web/xfa_layer_builder.js`: XfaLayerBuilder
- `./test_utils.js`: CMAP_URL, DefaultFileReaderFactory, STANDARD_FONT_DATA_URL, TEST_PDFS_PATH, XRefMock, buildGetDocumentParams, createIdFactory, createTemporaryNodeServer
- `./testreporter.js`: TestReporter
</imports>

Code:
<code>
File:
src/core/standard_fonts.js
1 /* Copyright 2015 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 import { getLookupTableFactory } from "./core_utils.js";
17 import { normalizeFontName } from "./fonts_utils.js";
18 
19 /**
20  * Hold a map of decoded fonts and of the standard fourteen Type1
21  * fonts and their acronyms.
22  */
23 const getStdFontMap = getLookupTableFactory(function (t) {
24   // The standard 14 fonts:
25   t["Times-Roman"] = "Times-Roman";
26   t.Helvetica = "Helvetica";
27   t.Courier = "Courier";
28   t.Symbol = "Symbol";
29   t["Times-Bold"] = "Times-Bold";
30   t["Helvetica-Bold"] = "Helvetica-Bold";
31   t["Courier-Bold"] = "Courier-Bold";
32   t.ZapfDingbats = "ZapfDingbats";
33   t["Times-Italic"] = "Times-Italic";
34   t["Helvetica-Oblique"] = "Helvetica-Oblique";
35   t["Courier-Oblique"] = "Courier-Oblique";
36   t["Times-BoldItalic"] = "Times-BoldItalic";
37   t["Helvetica-BoldOblique"] = "Helvetica-BoldOblique";
38   t["Courier-BoldOblique"] = "Courier-BoldOblique";
39 
40   // Extra mappings
41   t.ArialNarrow = "Helvetica";
42   t["ArialNarrow-Bold"] = "Helvetica-Bold";
43   t["ArialNarrow-BoldItalic"] = "Helvetica-BoldOblique";
44   t["ArialNarrow-Italic"] = "Helvetica-Oblique";
45   t.ArialBlack = "Helvetica";
46   t["ArialBlack-Bold"] = "Helvetica-Bold";
47   t["ArialBlack-BoldItalic"] = "Helvetica-BoldOblique";
48   t["ArialBlack-Italic"] = "Helvetica-Oblique";
49   t["Arial-Black"] = "Helvetica";
50   t["Arial-Black-Bold"] = "Helvetica-Bold";
51   t["Arial-Black-BoldItalic"] = "Helvetica-BoldOblique";
52   t["Arial-Black-Italic"] = "Helvetica-Oblique";
53   t.Arial = "Helvetica";
54   t["Arial-Bold"] = "Helvetica-Bold";
55   t["Arial-BoldItalic"] = "Helvetica-BoldOblique";
56   t["Arial-Italic"] = "Helvetica-Oblique";
57   t.ArialMT = "Helvetica";
58   t["Arial-BoldItalicMT"] = "Helvetica-BoldOblique";
59   t["Arial-BoldMT"] = "Helvetica-Bold";
60   t["Arial-ItalicMT"] = "Helvetica-Oblique";
61   t["Arial-BoldItalicMT-BoldItalic"] = "Helvetica-BoldOblique";
62   t["Arial-BoldMT-Bold"] = "Helvetica-Bold";
63   t["Arial-ItalicMT-Italic"] = "Helvetica-Oblique";
64   t.ArialUnicodeMS = "Helvetica";
65   t["ArialUnicodeMS-Bold"] = "Helvetica-Bold";
66   t["ArialUnicodeMS-BoldItalic"] = "Helvetica-BoldOblique";
67   t["ArialUnicodeMS-Italic"] = "Helvetica-Oblique";
68   t["Courier-BoldItalic"] = "Courier-BoldOblique";
69   t["Courier-Italic"] = "Courier-Oblique";
70   t.CourierNew = "Courier";
71   t["CourierNew-Bold"] = "Courier-Bold";
72   t["CourierNew-BoldItalic"] = "Courier-BoldOblique";
73   t["CourierNew-Italic"] = "Courier-Oblique";
74   t["CourierNewPS-BoldItalicMT"] = "Courier-BoldOblique";
75   t["CourierNewPS-BoldMT"] = "Courier-Bold";
76   t["CourierNewPS-ItalicMT"] = "Courier-Oblique";
77   t.CourierNewPSMT = "Courier";
78   t["Helvetica-BoldItalic"] = "Helvetica-BoldOblique";
79   t["Helvetica-Italic"] = "Helvetica-Oblique";
80   t["Symbol-Bold"] = "Symbol";
81   t["Symbol-BoldItalic"] = "Symbol";
82   t["Symbol-Italic"] = "Symbol";
83   t.TimesNewRoman = "Times-Roman";
84   t["TimesNewRoman-Bold"] = "Times-Bold";
85   t["TimesNewRoman-BoldItalic"] = "Times-BoldItalic";
86   t["TimesNewRoman-Italic"] = "Times-Italic";
87   t.TimesNewRomanPS = "Times-Roman";
88   t["TimesNewRomanPS-Bold"] = "Times-Bold";
89   t["TimesNewRomanPS-BoldItalic"] = "Times-BoldItalic";
90   t["TimesNewRomanPS-BoldItalicMT"] = "Times-BoldItalic";
91   t["TimesNewRomanPS-BoldMT"] = "Times-Bold";
92   t["TimesNewRomanPS-Italic"] = "Times-Italic";
93   t["TimesNewRomanPS-ItalicMT"] = "Times-Italic";
94   t.TimesNewRomanPSMT = "Times-Roman";
95   t["TimesNewRomanPSMT-Bold"] = "Times-Bold";
96   t["TimesNewRomanPSMT-BoldItalic"] = "Times-BoldItalic";
97   t["TimesNewRomanPSMT-Italic"] = "Times-Italic";
98 });
99 
100 // Contains mapping for standard fonts and xfa fonts.
101 const getFontNameToFileMap = getLookupTableFactory(function (t) {
102   t.Courier = "FoxitFixed.pfb";
103   t["Courier-Bold"] = "FoxitFixedBold.pfb";
104   t["Courier-BoldOblique"] = "FoxitFixedBoldItalic.pfb";
105   t["Courier-Oblique"] = "FoxitFixedItalic.pfb";
106   t.Helvetica = "LiberationSans-Regular.ttf";
107   t["Helvetica-Bold"] = "LiberationSans-Bold.ttf";
108   t["Helvetica-BoldOblique"] = "LiberationSans-BoldItalic.ttf";
109   t["Helvetica-Oblique"] = "LiberationSans-Italic.ttf";
110   t["Times-Roman"] = "FoxitSerif.pfb";
111   t["Times-Bold"] = "FoxitSerifBold.pfb";
112   t["Times-BoldItalic"] = "FoxitSerifBoldItalic.pfb";
113   t["Times-Italic"] = "FoxitSerifItalic.pfb";
114   t.Symbol = "FoxitSymbol.pfb";
115   t.ZapfDingbats = "FoxitDingbats.pfb";
116   t["LiberationSans-Regular"] = "LiberationSans-Regular.ttf";
117   t["LiberationSans-Bold"] = "LiberationSans-Bold.ttf";
118   t["LiberationSans-Italic"] = "LiberationSans-Italic.ttf";
119   t["LiberationSans-BoldItalic"] = "LiberationSans-BoldItalic.ttf";
120 });
121 
122 /**
123  * Holds the map of the non-standard fonts that might be included as
124  * a standard fonts without glyph data.
125  */
126 const getNonStdFontMap = getLookupTableFactory(function (t) {
127   t.Calibri = "Helvetica";
128   t["Calibri-Bold"] = "Helvetica-Bold";
129   t["Calibri-BoldItalic"] = "Helvetica-BoldOblique";
130   t["Calibri-Italic"] = "Helvetica-Oblique";
131   t.CenturyGothic = "Helvetica";
132   t["CenturyGothic-Bold"] = "Helvetica-Bold";
133   t["CenturyGothic-BoldItalic"] = "Helvetica-BoldOblique";
134   t["CenturyGothic-Italic"] = "Helvetica-Oblique";
135   t.ComicSansMS = "Comic Sans MS";
136   t["ComicSansMS-Bold"] = "Comic Sans MS-Bold";
137   t["ComicSansMS-BoldItalic"] = "Comic Sans MS-BoldItalic";
138   t["ComicSansMS-Italic"] = "Comic Sans MS-Italic";
139   t.Impact = "Helvetica";
140   t["ItcSymbol-Bold"] = "Helvetica-Bold";
141   t["ItcSymbol-BoldItalic"] = "Helvetica-BoldOblique";
142   t["ItcSymbol-Book"] = "Helvetica";
143   t["ItcSymbol-BookItalic"] = "Helvetica-Oblique";
144   t["ItcSymbol-Medium"] = "Helvetica";
145   t["ItcSymbol-MediumItalic"] = "Helvetica-Oblique";
146   t.LucidaConsole = "Courier";
147   t["LucidaConsole-Bold"] = "Courier-Bold";
148   t["LucidaConsole-BoldItalic"] = "Courier-BoldOblique";
149   t["LucidaConsole-Italic"] = "Courier-Oblique";
150   t["LucidaSans-Demi"] = "Helvetica-Bold";
151   t["MS-Gothic"] = "MS Gothic";
152   t["MS-Gothic-Bold"] = "MS Gothic-Bold";
153   t["MS-Gothic-BoldItalic"] = "MS Gothic-BoldItalic";
154   t["MS-Gothic-Italic"] = "MS Gothic-Italic";
155   t["MS-Mincho"] = "MS Mincho";
156   t["MS-Mincho-Bold"] = "MS Mincho-Bold";
157   t["MS-Mincho-BoldItalic"] = "MS Mincho-BoldItalic";
158   t["MS-Mincho-Italic"] = "MS Mincho-Italic";
159   t["MS-PGothic"] = "MS PGothic";
160   t["MS-PGothic-Bold"] = "MS PGothic-Bold";
161   t["MS-PGothic-BoldItalic"] = "MS PGothic-BoldItalic";
162   t["MS-PGothic-Italic"] = "MS PGothic-Italic";
163   t["MS-PMincho"] = "MS PMincho";
164   t["MS-PMincho-Bold"] = "MS PMincho-Bold";
165   t["MS-PMincho-BoldItalic"] = "MS PMincho-BoldItalic";
166   t["MS-PMincho-Italic"] = "MS PMincho-Italic";
167   t.NuptialScript = "Times-Italic";
168   t.SegoeUISymbol = "Helvetica";
169 });
170 
171 const getSerifFonts = getLookupTableFactory(function (t) {
172   t["Adobe Jenson"] = true;
173   t["Adobe Text"] = true;
174   t.Albertus = true;
175   t.Aldus = true;
176   t.Alexandria = true;
177   t.Algerian = true;
178   t["American Typewriter"] = true;
179   t.Antiqua = true;
180   t.Apex = true;
181   t.Arno = true;
182   t.Aster = true;
183   t.Aurora = true;
184   t.Baskerville = true;
185   t.Bell = true;
186   t.Bembo = true;
187   t["Bembo Schoolbook"] = true;
188   t.Benguiat = true;
189   t["Berkeley Old Style"] = true;
190   t["Bernhard Modern"] = true;
191   t["Berthold City"] = true;
192   t.Bodoni = true;
193   t["Bauer Bodoni"] = true;
194   t["Book Antiqua"] = true;
195   t.Bookman = true;
196   t["Bordeaux Roman"] = true;
197   t["Californian FB"] = true;
198   t.Calisto = true;
199   t.Calvert = true;
200   t.Capitals = true;
201   t.Cambria = true;
202   t.Cartier = true;
203   t.Caslon = true;
204   t.Catull = true;
205   t.Centaur = true;
206   t["Century Old Style"] = true;
207   t["Century Schoolbook"] = true;
208   t.Chaparral = true;
209   t["Charis SIL"] = true;
210   t.Cheltenham = true;
211   t["Cholla Slab"] = true;
212   t.Clarendon = true;
213   t.Clearface = true;
214   t.Cochin = true;
215   t.Colonna = true;
216   t["Computer Modern"] = true;
217   t["Concrete Roman"] = true;
218   t.Constantia = true;
219   t["Cooper Black"] = true;
220   t.Corona = true;
221   t.Ecotype = true;
222   t.Egyptienne = true;
223   t.Elephant = true;
224   t.Excelsior = true;
225   t.Fairfield = true;
226   t["FF Scala"] = true;
227   t.Folkard = true;
228   t.Footlight = true;
229   t.FreeSerif = true;
230   t["Friz Quadrata"] = true;
231   t.Garamond = true;
232   t.Gentium = true;
233   t.Georgia = true;
234   t.Gloucester = true;
235   t["Goudy Old Style"] = true;
236   t["Goudy Schoolbook"] = true;
237   t["Goudy Pro Font"] = true;
238   t.Granjon = true;
239   t["Guardian Egyptian"] = true;
240   t.Heather = true;
241   t.Hercules = true;
242   t["High Tower Text"] = true;
243   t.Hiroshige = true;
244   t["Hoefler Text"] = true;
245   t["Humana Serif"] = true;
246   t.Imprint = true;
247   t["Ionic No. 5"] = true;
248   t.Janson = true;
249   t.Joanna = true;
250   t.Korinna = true;
251   t.Lexicon = true;
252   t.LiberationSerif = true;
253   t["Liberation Serif"] = true;
254   t["Linux Libertine"] = true;
255   t.Literaturnaya = true;
256   t.Lucida = true;
257   t["Lucida Bright"] = true;
258   t.Melior = true;
259   t.Memphis = true;
260   t.Miller = true;
261   t.Minion = true;
262   t.Modern = true;
263   t["Mona Lisa"] = true;
264   t["Mrs Eaves"] = true;
265   t["MS Serif"] = true;
266   t["Museo Slab"] = true;
267   t["New York"] = true;
268   t["Nimbus Roman"] = true;
269   t["NPS Rawlinson Roadway"] = true;
270   t.NuptialScript = true;
271   t.Palatino = true;
272   t.Perpetua = true;
273   t.Plantin = true;
274   t["Plantin Schoolbook"] = true;
275   t.Playbill = true;
276   t["Poor Richard"] = true;
277   t["Rawlinson Roadway"] = true;
278   t.Renault = true;
279   t.Requiem = true;
280   t.Rockwell = true;
281   t.Roman = true;
282   t["Rotis Serif"] = true;
283   t.Sabon = true;
284   t.Scala = true;
285   t.Seagull = true;
286   t.Sistina = true;
287   t.Souvenir = true;
288   t.STIX = true;
289   t["Stone Informal"] = true;
290   t["Stone Serif"] = true;
291   t.Sylfaen = true;
292   t.Times = true;
293   t.Trajan = true;
294   t["Trinité"] = true;
295   t["Trump Mediaeval"] = true;
296   t.Utopia = true;
297   t["Vale Type"] = true;
298   t["Bitstream Vera"] = true;
299   t["Vera Serif"] = true;
300   t.Versailles = true;
301   t.Wanted = true;
302   t.Weiss = true;
303   t["Wide Latin"] = true;
304   t.Windsor = true;
305   t.XITS = true;
306 });
307 
308 const getSymbolsFonts = getLookupTableFactory(function (t) {
309   t.Dingbats = true;
310   t.Symbol = true;
311   t.ZapfDingbats = true;
312   t.Wingdings = true;
313   t["Wingdings-Bold"] = true;
314   t["Wingdings-Regular"] = true;
315 });
316 
317 // Glyph map for well-known standard fonts. Sometimes Ghostscript uses CID
318 // fonts, but does not embed the CID to GID mapping. The mapping is incomplete
319 // for all glyphs, but common for some set of the standard fonts.
320 const getGlyphMapForStandardFonts = getLookupTableFactory(function (t) {
321   t[2] = 10;
322   t[3] = 32;
323   t[4] = 33;
324   t[5] = 34;
325   t[6] = 35;
326   t[7] = 36;
327   t[8] = 37;
328   t[9] = 38;
329   t[10] = 39;
330   t[11] = 40;
331   t[12] = 41;
332   t[13] = 42;
333   t[14] = 43;
334   t[15] = 44;
335   t[16] = 45;
336   t[17] = 46;
337   t[18] = 47;
338   t[19] = 48;
339   t[20] = 49;
340   t[21] = 50;
341   t[22] = 51;
342   t[23] = 52;
343   t[24] = 53;
344   t[25] = 54;
345   t[26] = 55;
346   t[27] = 56;
347   t[28] = 57;
348   t[29] = 58;
349   t[30] = 894;
350   t[31] = 60;
351   t[32] = 61;
352   t[33] = 62;
353   t[34] = 63;
354   t[35] = 64;
355   t[36] = 65;
356   t[37] = 66;
357   t[38] = 67;
358   t[39] = 68;
359   t[40] = 69;
360   t[41] = 70;
361   t[42] = 71;
362   t[43] = 72;
363   t[44] = 73;
364   t[45] = 74;
365   t[46] = 75;
366   t[47] = 76;
367   t[48] = 77;
368   t[49] = 78;
369   t[50] = 79;
370   t[51] = 80;
371   t[52] = 81;
372   t[53] = 82;
373   t[54] = 83;
374   t[55] = 84;
375   t[56] = 85;
376   t[57] = 86;
377   t[58] = 87;
378   t[59] = 88;
379   t[60] = 89;
380   t[61] = 90;
381   t[62] = 91;
382   t[63] = 92;
383   t[64] = 93;
384   t[65] = 94;
385   t[66] = 95;
386   t[67] = 96;
387   t[68] = 97;
388   t[69] = 98;
389   t[70] = 99;
390   t[71] = 100;
391   t[72] = 101;
392   t[73] = 102;
393   t[74] = 103;
394   t[75] = 104;
395   t[76] = 105;
396   t[77] = 106;
397   t[78] = 107;
398   t[79] = 108;
399   t[80] = 109;
400   t[81] = 110;
401   t[82] = 111;
402   t[83] = 112;
403   t[84] = 113;
404   t[85] = 114;
405   t[86] = 115;
406   t[87] = 116;
407   t[88] = 117;
408   t[89] = 118;
409   t[90] = 119;
410   t[91] = 120;
411   t[92] = 121;
412   t[93] = 122;
413   t[94] = 123;
414   t[95] = 124;
415   t[96] = 125;
416   t[97] = 126;
417   t[98] = 196;
418   t[99] = 197;
419   t[100] = 199;
420   t[101] = 201;
421   t[102] = 209;
422   t[103] = 214;
423   t[104] = 220;
424   t[105] = 225;
425   t[106] = 224;
426   t[107] = 226;
427   t[108] = 228;
428   t[109] = 227;
429   t[110] = 229;
430   t[111] = 231;
431   t[112] = 233;
432   t[113] = 232;
433   t[114] = 234;
434   t[115] = 235;
435   t[116] = 237;
436   t[117] = 236;
437   t[118] = 238;
438   t[119] = 239;
439   t[120] = 241;
440   t[121] = 243;
441   t[122] = 242;
442   t[123] = 244;
443   t[124] = 246;
444   t[125] = 245;
445   t[126] = 250;
446   t[127] = 249;
447   t[128] = 251;
448   t[129] = 252;
449   t[130] = 8224;
450   t[131] = 176;
451   t[132] = 162;
452   t[133] = 163;
453   t[134] = 167;
454   t[135] = 8226;
455   t[136] = 182;
456   t[137] = 223;
457   t[138] = 174;
458   t[139] = 169;
459   t[140] = 8482;
460   t[141] = 180;
461   t[142] = 168;
462   t[143] = 8800;
463   t[144] = 198;
464   t[145] = 216;
465   t[146] = 8734;
466   t[147] = 177;
467   t[148] = 8804;
468   t[149] = 8805;
469   t[150] = 165;
470   t[151] = 181;
471   t[152] = 8706;
472   t[153] = 8721;
473   t[154] = 8719;
474   t[156] = 8747;
475   t[157] = 170;
476   t[158] = 186;
477   t[159] = 8486;
478   t[160] = 230;
479   t[161] = 248;
480   t[162] = 191;
481   t[163] = 161;
482   t[164] = 172;
483   t[165] = 8730;
484   t[166] = 402;
485   t[167] = 8776;
486   t[168] = 8710;
487   t[169] = 171;
488   t[170] = 187;
489   t[171] = 8230;
490   t[179] = 8220;
491   t[180] = 8221;
492   t[181] = 8216;
493   t[182] = 8217;
494   t[200] = 193;
495   t[203] = 205;
496   t[207] = 211;
497   t[210] = 218;
498   t[223] = 711;
499   t[224] = 321;
500   t[225] = 322;
501   t[226] = 352;
502   t[227] = 353;
503   t[228] = 381;
504   t[229] = 382;
505   t[233] = 221;
506   t[234] = 253;
507   t[252] = 263;
508   t[253] = 268;
509   t[254] = 269;
510   t[258] = 258;
511   t[260] = 260;
512   t[261] = 261;
513   t[265] = 280;
514   t[266] = 281;
515   t[267] = 282;
516   t[268] = 283;
517   t[269] = 313;
518   t[275] = 323;
519   t[276] = 324;
520   t[278] = 328;
521   t[283] = 344;
522   t[284] = 345;
523   t[285] = 346;
524   t[286] = 347;
525   t[292] = 367;
526   t[295] = 377;
527   t[296] = 378;
528   t[298] = 380;
529   t[305] = 963;
530   t[306] = 964;
531   t[307] = 966;
532   t[308] = 8215;
533   t[309] = 8252;
534   t[310] = 8319;
535   t[311] = 8359;
536   t[312] = 8592;
537   t[313] = 8593;
538   t[337] = 9552;
539   t[493] = 1039;
540   t[494] = 1040;
541   t[672] = 1488;
542   t[673] = 1489;
543   t[674] = 1490;
544   t[675] = 1491;
545   t[676] = 1492;
546   t[677] = 1493;
547   t[678] = 1494;
548   t[679] = 1495;
549   t[680] = 1496;
550   t[681] = 1497;
551   t[682] = 1498;
552   t[683] = 1499;
553   t[684] = 1500;
554   t[685] = 1501;
555   t[686] = 1502;
556   t[687] = 1503;
557   t[688] = 1504;
558   t[689] = 1505;
559   t[690] = 1506;
560   t[691] = 1507;
561   t[692] = 1508;
562   t[693] = 1509;
563   t[694] = 1510;
564   t[695] = 1511;
565   t[696] = 1512;
566   t[697] = 1513;
567   t[698] = 1514;
568   t[705] = 1524;
569   t[706] = 8362;
570   t[710] = 64288;
571   t[711] = 64298;
572   t[759] = 1617;
573   t[761] = 1776;
574   t[763] = 1778;
575   t[775] = 1652;
576   t[777] = 1764;
577   t[778] = 1780;
578   t[779] = 1781;
579   t[780] = 1782;
580   t[782] = 771;
581   t[783] = 64726;
582   t[786] = 8363;
583   t[788] = 8532;
584   t[790] = 768;
585   t[791] = 769;
586   t[792] = 768;
587   t[795] = 803;
588   t[797] = 64336;
589   t[798] = 64337;
590   t[799] = 64342;
591   t[800] = 64343;
592   t[801] = 64344;
593   t[802] = 64345;
594   t[803] = 64362;
595   t[804] = 64363;
596   t[805] = 64364;
597   t[2424] = 7821;
598   t[2425] = 7822;
599   t[2426] = 7823;
600   t[2427] = 7824;
601   t[2428] = 7825;
602   t[2429] = 7826;
603   t[2430] = 7827;
604   t[2433] = 7682;
605   t[2678] = 8045;
606   t[2679] = 8046;
607   t[2830] = 1552;
608   t[2838] = 686;
609   t[2840] = 751;
610   t[2842] = 753;
611   t[2843] = 754;
612   t[2844] = 755;
613   t[2846] = 757;
614   t[2856] = 767;
615   t[2857] = 848;
616   t[2858] = 849;
617   t[2862] = 853;
618   t[2863] = 854;
619   t[2864] = 855;
620   t[2865] = 861;
621   t[2866] = 862;
622   t[2906] = 7460;
623   t[2908] = 7462;
624   t[2909] = 7463;
625   t[2910] = 7464;
626   t[2912] = 7466;
627   t[2913] = 7467;
628   t[2914] = 7468;
629   t[2916] = 7470;
630   t[2917] = 7471;
631   t[2918] = 7472;
632   t[2920] = 7474;
633   t[2921] = 7475;
634   t[2922] = 7476;
635   t[2924] = 7478;
636   t[2925] = 7479;
637   t[2926] = 7480;
638   t[2928] = 7482;
639   t[2929] = 7483;
640   t[2930] = 7484;
641   t[2932] = 7486;
642   t[2933] = 7487;
643   t[2934] = 7488;
644   t[2936] = 7490;
645   t[2937] = 7491;
646   t[2938] = 7492;
647   t[2940] = 7494;
648   t[2941] = 7495;
649   t[2942] = 7496;
650   t[2944] = 7498;
651   t[2946] = 7500;
652   t[2948] = 7502;
653   t[2950] = 7504;
654   t[2951] = 7505;
655   t[2952] = 7506;
656   t[2954] = 7508;
657   t[2955] = 7509;
658   t[2956] = 7510;
659   t[2958] = 7512;
660   t[2959] = 7513;
661   t[2960] = 7514;
662   t[2962] = 7516;
663   t[2963] = 7517;
664   t[2964] = 7518;
665   t[2966] = 7520;
666   t[2967] = 7521;
667   t[2968] = 7522;
668   t[2970] = 7524;
669   t[2971] = 7525;
670   t[2972] = 7526;
671   t[2974] = 7528;
672   t[2975] = 7529;
673   t[2976] = 7530;
674   t[2978] = 1537;
675   t[2979] = 1538;
676   t[2980] = 1539;
677   t[2982] = 1549;
678   t[2983] = 1551;
679   t[2984] = 1552;
680   t[2986] = 1554;
681   t[2987] = 1555;
682   t[2988] = 1556;
683   t[2990] = 1623;
684   t[2991] = 1624;
685   t[2995] = 1775;
686   t[2999] = 1791;
687   t[3002] = 64290;
688   t[3003] = 64291;
689   t[3004] = 64292;
690   t[3006] = 64294;
691   t[3007] = 64295;
692   t[3008] = 64296;
693   t[3011] = 1900;
694   t[3014] = 8223;
695   t[3015] = 8244;
696   t[3017] = 7532;
697   t[3018] = 7533;
698   t[3019] = 7534;
699   t[3075] = 7590;
700   t[3076] = 7591;
701   t[3079] = 7594;
702   t[3080] = 7595;
703   t[3083] = 7598;
704   t[3084] = 7599;
705   t[3087] = 7602;
706   t[3088] = 7603;
707   t[3091] = 7606;
708   t[3092] = 7607;
709   t[3095] = 7610;
710   t[3096] = 7611;
711   t[3099] = 7614;
712   t[3100] = 7615;
713   t[3103] = 7618;
714   t[3104] = 7619;
715   t[3107] = 8337;
716   t[3108] = 8338;
717   t[3116] = 1884;
718   t[3119] = 1885;
719   t[3120] = 1885;
720   t[3123] = 1886;
721   t[3124] = 1886;
722   t[3127] = 1887;
723   t[3128] = 1887;
724   t[3131] = 1888;
725   t[3132] = 1888;
726   t[3135] = 1889;
727   t[3136] = 1889;
728   t[3139] = 1890;
729   t[3140] = 1890;
730   t[3143] = 1891;
731   t[3144] = 1891;
732   t[3147] = 1892;
733   t[3148] = 1892;
734   t[3153] = 580;
735   t[3154] = 581;
736   t[3157] = 584;
737   t[3158] = 585;
738   t[3161] = 588;
739   t[3162] = 589;
740   t[3165] = 891;
741   t[3166] = 892;
742   t[3169] = 1274;
743   t[3170] = 1275;
744   t[3173] = 1278;
745   t[3174] = 1279;
746   t[3181] = 7622;
747   t[3182] = 7623;
748   t[3282] = 11799;
749   t[3316] = 578;
750   t[3379] = 42785;
751   t[3393] = 1159;
752   t[3416] = 8377;
753 });
754 
755 // The glyph map for ArialBlack differs slightly from the glyph map used for
756 // other well-known standard fonts. Hence we use this (incomplete) CID to GID
757 // mapping to adjust the glyph map for non-embedded ArialBlack fonts.
758 const getSupplementalGlyphMapForArialBlack = getLookupTableFactory(
759   function (t) {
760     t[227] = 322;
761     t[264] = 261;
762     t[291] = 346;
763   }
764 );
765 
766 // The glyph map for Calibri (a Windows font) differs from the glyph map used
767 // in the standard fonts. Hence we use this (incomplete) CID to GID mapping to
768 // adjust the glyph map for non-embedded Calibri fonts.
769 const getSupplementalGlyphMapForCalibri = getLookupTableFactory(function (t) {
770   t[1] = 32;
771   t[4] = 65;
772   t[5] = 192;
773   t[6] = 193;
774   t[9] = 196;
775   t[17] = 66;
776   t[18] = 67;
777   t[21] = 268;
778   t[24] = 68;
779   t[28] = 69;
780   t[29] = 200;
781   t[30] = 201;
782   t[32] = 282;
783   t[38] = 70;
784   t[39] = 71;
785   t[44] = 72;
786   t[47] = 73;
787   t[48] = 204;
788   t[49] = 205;
789   t[58] = 74;
790   t[60] = 75;
791   t[62] = 76;
792   t[68] = 77;
793   t[69] = 78;
794   t[75] = 79;
795   t[76] = 210;
796   t[80] = 214;
797   t[87] = 80;
798   t[89] = 81;
799   t[90] = 82;
800   t[92] = 344;
801   t[94] = 83;
802   t[97] = 352;
803   t[100] = 84;
804   t[104] = 85;
805   t[109] = 220;
806   t[115] = 86;
807   t[116] = 87;
808   t[121] = 88;
809   t[122] = 89;
810   t[124] = 221;
811   t[127] = 90;
812   t[129] = 381;
813   t[258] = 97;
814   t[259] = 224;
815   t[260] = 225;
816   t[263] = 228;
817   t[268] = 261;
818   t[271] = 98;
819   t[272] = 99;
820   t[273] = 263;
821   t[275] = 269;
822   t[282] = 100;
823   t[286] = 101;
824   t[287] = 232;
825   t[288] = 233;
826   t[290] = 283;
827   t[295] = 281;
828   t[296] = 102;
829   t[336] = 103;
830   t[346] = 104;
831   t[349] = 105;
832   t[350] = 236;
833   t[351] = 237;
834   t[361] = 106;
835   t[364] = 107;
836   t[367] = 108;
837   t[371] = 322;
838   t[373] = 109;
839   t[374] = 110;
840   t[381] = 111;
841   t[382] = 242;
842   t[383] = 243;
843   t[386] = 246;
844   t[393] = 112;
845   t[395] = 113;
846   t[396] = 114;
847   t[398] = 345;
848   t[400] = 115;
849   t[401] = 347;
850   t[403] = 353;
851   t[410] = 116;
852   t[437] = 117;
853   t[442] = 252;
854   t[448] = 118;
855   t[449] = 119;
856   t[454] = 120;
857   t[455] = 121;
858   t[457] = 253;
859   t[460] = 122;
860   t[462] = 382;
861   t[463] = 380;
862   t[853] = 44;
863   t[855] = 58;
864   t[856] = 46;
865   t[876] = 47;
866   t[878] = 45;
867   t[882] = 45;
868   t[894] = 40;
869   t[895] = 41;
870   t[896] = 91;
871   t[897] = 93;
872   t[923] = 64;
873   t[1004] = 48;
874   t[1005] = 49;
875   t[1006] = 50;
876   t[1007] = 51;
877   t[1008] = 52;
878   t[1009] = 53;
879   t[1010] = 54;
880   t[1011] = 55;
881   t[1012] = 56;
882   t[1013] = 57;
883   t[1081] = 37;
884   t[1085] = 43;
885   t[1086] = 45;
886 });
887 
888 function getStandardFontName(name) {
889   const fontName = normalizeFontName(name);
890   const stdFontMap = getStdFontMap();
891   return stdFontMap[fontName];
892 }
893 
894 function isKnownFontName(name) {
895   const fontName = normalizeFontName(name);
896   return !!(
897     getStdFontMap()[fontName] ||
898     getNonStdFontMap()[fontName] ||
899     getSerifFonts()[fontName] ||
900     getSymbolsFonts()[fontName]
901   );
902 }
903 
904 export {
905   getFontNameToFileMap,
906   getGlyphMapForStandardFonts,
907   getNonStdFontMap,
908   getSerifFonts,
909   getStandardFontName,
910   getStdFontMap,
911   getSupplementalGlyphMapForArialBlack,
912   getSupplementalGlyphMapForCalibri,
913   getSymbolsFonts,
914   isKnownFontName,
915 };
</code>

Test file:
<test_file>
File:
test/unit/api_spec.js
/* Copyright 2017 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import {
  AnnotationEditorType,
  AnnotationMode,
  AnnotationType,
  ImageKind,
  InvalidPDFException,
  isNodeJS,
  MissingPDFException,
  objectSize,
  OPS,
  PasswordException,
  PasswordResponses,
  PermissionFlag,
  UnknownErrorException,
} from "../../src/shared/util.js";
import {
  buildGetDocumentParams,
  CMAP_URL,
  createTemporaryNodeServer,
  DefaultFileReaderFactory,
  TEST_PDFS_PATH,
} from "./test_utils.js";
import {
  DefaultCanvasFactory,
  getDocument,
  PDFDataRangeTransport,
  PDFDocumentLoadingTask,
  PDFDocumentProxy,
  PDFPageProxy,
  PDFWorker,
  RenderTask,
} from "../../src/display/api.js";
import {
  PageViewport,
  RenderingCancelledException,
  StatTimer,
} from "../../src/display/display_utils.js";
import { AutoPrintRegExp } from "../../web/ui_utils.js";
import { GlobalImageCache } from "../../src/core/image_utils.js";
import { GlobalWorkerOptions } from "../../src/display/worker_options.js";
import { Metadata } from "../../src/display/metadata.js";
const WORKER_SRC = "../../build/generic/build/pdf.worker.mjs";
</test_file>

Your task:
You are a software tester at pdf.js.
1. Examine the existing test file. You may reuse any imports, helpers or setup blocks it already has.
2. Write exactly one javascript test `it("...", async () => {...})` block.
3. Your test must fail on the code before the patch, and pass after, hence the test will verify that the patch resolves the issue.
4. The test must be self-contained and to-the-point.
5. If you need something new use only the provided imports (respect the paths exactly how they are given) by importing dynamically for compatibility with Node.js — no new dependencies. 
6. Return only the javascript code for the new `it(...)` block (no comments or explanations).

Example structure:
it("should <describe behavior>", async () => {
  const { example } = await import("../../src/core/example.js");
  <initialize required variables>;
  <define expected variable>;
  <generate actual variables>;
  <compare expected with actual>;
});


<think>
Okay, I need to write a regression test for the issue where the PDF text was rendering incorrectly. The problem was that GillSansMT fonts were not being mapped correctly, so the patch added mappings to Helvetica. 

First, I should understand what the patch does. It adds four lines to the getNonStdFontMap in standard_fonts.js, mapping GillSansMT and its bold, italic, and bold-italic variants to the corresponding Helvetica fonts. 

So, the test needs to check if these fonts are correctly mapped. I'll create a test case that checks each of these four mappings. 

I'll start by importing the necessary modules. Since the test is in Node.js, I'll use dynamic imports for the required files. I'll need getNonStdFontMap from standard_fonts.js and normalizeFontName from fonts_utils.js.

Next, I'll initialize the font name and expected font values. The expected fonts are all Helvetica variants. 

Then, I'll loop through each GillSansMT variant, normalize the font name, and check against the expected value using the getNonStdFontMap. If any of these checks fail, the test should fail.

I should structure the test so that it fails before the patch and passes after. This ensures that the patch resolves the issue.

I need to make sure the test is self-contained and doesn't rely on external files or complex setups. It should directly test the font mapping without rendering any PDFs, as that would complicate things.

Finally, I'll write the test using Jest's it function, making sure to handle asynchronous imports correctly and assert each condition.
</think>

```javascript
it("should map GillSansMT fonts to Helvetica", async () => {
  const { getNonStdFontMap } = await import("../../src/core/standard_fonts.js");
  const { normalizeFontName } = await import("../../src/core/fonts_utils.js");
  
  const fontName = "GillSansMT";
  const expectedFont = "Helvetica";
  
  const tests = [
    { name: fontName, expected: expectedFont },
    { name: `${fontName}-Bold`, expected: `${expectedFont}-Bold` },
    { name: `${fontName}-Italic`, expected: `${expectedFont}-Oblique` },
    { name: `${fontName}-BoldItalic`, expected: `${expectedFont}-BoldOblique` }
  ];
  
  for (const { name, expected } of tests) {
    const actual = getNonStdFontMap.get(normalizeFontName(name));
    expect(actual).toBe(expected);
  }
});
```
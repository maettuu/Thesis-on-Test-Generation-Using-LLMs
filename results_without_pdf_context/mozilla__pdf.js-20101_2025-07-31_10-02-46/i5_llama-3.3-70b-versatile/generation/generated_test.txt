it("should render text correctly when browserdisplayusedocumentfonts is set to", async () => {
  const { PDFDocument } = await import("../../src/display/api.js");
  const { PDFPageProxy } = await import("../../src/display/api.js");
  const { TextLayer } = await import("../../src/display/text_layer.js");
  const { PDFDataRangeTransport } = await import("../../src/display/api.js");
  const { PDFWorker } = await import("../../src/display/api.js");
  const { DOMCanvasFactory } = await import("../../src/display/canvas_factory.js");
  const { PDFNetworkStream } = await import("../../src/display/network.js");

  const pdfUrl = "https://www.jma.go.jp/jma/press/2507/04a/20250704_asosan.pdf";
  const pdfDocument = await PDFDocument.load({ url: pdfUrl, cMapUrl: "https://cdn.jsdelivr.net/npm/pdfjs-dist@2.16.105/build/generic/web/cmaps/", cMapPacked: true });
  const pdfPage = await pdfDocument.getPage(1);
  const textLayer = new TextLayer({
    text: await pdfPage.getTextContent(),
    viewport: pdfPage.getViewport({ scale: 1 }),
    div: document.createElement("div"),
  });
  const canvasFactory = new DOMCanvasFactory();
  const renderTask = pdfPage.render({
    canvasContext: canvasFactory.createContext(100, 100),
    viewport: pdfPage.getViewport({ scale: 1 }),
  });
  await renderTask.promise;
  const textLayerRendered = textLayer.render();
  const expectedText = "Some expected text from the PDF";
  const actualText = textLayerRendered.textContent;
  expect(actualText).toContain(expectedText);
});
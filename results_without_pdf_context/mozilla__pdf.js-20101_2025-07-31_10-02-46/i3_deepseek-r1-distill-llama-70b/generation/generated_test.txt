it("should render text when document fonts are disabled", async () => {
  const { PDFDocument } = await import("../../src/display/api.js");
  const { createIdFactory } = await import("./test_utils.js");

  // Create a test server for the PDF file
  const pdfUrl = "test.pdf";
  const pdfContent = new Uint8Array([0x25, 0x50, 0x44, 0x46]);

  // Set up the browser environment
  const idFactory = createIdFactory();
  const xref = new XRefMock();
  xref.add(0, "obj", new Dict());

  // Create a minimal PDF document
  const pdf = await PDFDocument.create(xref);
  const page = await pdf.getPage(0);

  // Mock the about:config setting
  const originalUseDocumentFonts = globalThis.navigator.browser.display.use_document_fonts;
  globalThis.navigator.browser.display.use_document_fonts = 0;

  try {
    // Create a canvas to draw the page
    const canvas = document.createElement("canvas");
    const ctx = canvas.getContext("2d");

    // Set up the drawing context
    const viewport = page.getViewBox();
    canvas.width = viewport.width;
    canvas.height = viewport.height;

    // Draw the page content
    const renderTask = page.render({
      canvasContext: ctx,
      viewport,
    });

    await renderTask.promise;

    // Check if the text is rendered
    const expectedText = "Hello World";
    const actualText = ctx.canvas.toDataURL();

    // Assert the text is present
    expect(actualText).toContain(expectedText);
  } finally {
    // Restore the original setting
    globalThis.navigator.browser.display.use_document_fonts = originalUseDocumentFonts;
  }
});
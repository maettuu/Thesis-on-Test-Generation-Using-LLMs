Before you begin:
- Keep going until the job is completely solved — don’t stop halfway.
- If you’re unsure about the behavior, reread the provided patch carefully; do not hallucinate.
- Plan your approach before writing code by reflecting on whether the test truly fails before and passes after.

Issue:
<issue>
[Bug]: Text not shown, as browser.display.use_document_fonts is set to 0
### Attach (recommended) or Link to PDF file

https://www.jma.go.jp/jma/press/2507/04a/20250704_asosan.pdf

### Web browser and its version

Firefox 140.0.4 (64bit)

### Operating system and its version

Windows 10 (version 22H2) (64bit)

### PDF.js version

v5.3.93

### Is the bug present in the latest PDF.js version?

Yes

### Is a browser extension

No

### Steps to reproduce the problem

1. Launch Firefox.
2. Open `about:config` and change `browser.display.use_document_fonts` to 0.
3. Open link of PDF file.

### What is the expected behavior?

All texts are visible.

<img width="1920" height="1080" alt="Image" src="https://github.com/user-attachments/assets/99101deb-866b-4b08-adad-1dfe4d3ddf84" />

### What went wrong?

Some texts are hidden, only letter spaces are visible.

<img width="1920" height="1080" alt="Image" src="https://github.com/user-attachments/assets/e3291465-86ed-439c-8b49-226fbde5cc80" />

### Link to a viewer

_No response_

### Additional context

Error message is here.
```
Web fonts are disabled: unable to use embedded PDF fonts. viewer.mjs:13745:17
分離された Cookie またはストレージアクセスが “https://www.jma.go.jp/jma/press/2507/04a/20250704_asosan.pdf” に提供されました。これはサードパーティのコンテキスト内で読み込まれ、動的状態分離が有効なためです。 pdf.mjs:10872:22
(In English, Isolated cookie or storage access was provided to “https://www.jma.go.jp/jma/press/2507/04a/20250704_asosan.pdf” because it is loaded within a third-party context and dynamic state isolation is enabled. pdf.mjs:10872:22)
PDF c8e728554e650f243ca1e325387ebd45 [1.4 JUST PDF 4 / -] (PDF.js: 5.2.183 [3f1ecc1ba]) viewer.mjs:14280:13
Warning: getPathGenerator - ignoring character: "Error: Requesting object that isn't resolved yet BIZUD�S�V�b�N_path_阿.". pdf.mjs:323:13
Warning: getPathGenerator - ignoring character: "Error: Requesting object that isn't resolved yet BIZUD�S�V�b�N_path_蘇.". pdf.mjs:323:13
Warning: getPathGenerator - ignoring character: "Error: Requesting object that isn't resolved yet BIZUD�S�V�b�N_path_山.". pdf.mjs:323:13
continued...
```
Continued are same mean messages, that fonts (example above "BIZUD�S�V�b�N"(mojibake)) and last letters (example above "阿","蘇","山") are different.
</issue>

Patch:
<patch>
diff --git a/src/display/canvas.js b/src/display/canvas.js
--- a/src/display/canvas.js
+++ b/src/display/canvas.js
@@ -1625,6 +1625,9 @@ class CanvasGraphics {
     const newPath = new Path2D();
     const invTransf = ctx.getTransform().invertSelf();
     for (const { transform, x, y, fontSize, path } of paths) {
+      if (!path) {
+        continue; // Skip empty paths.
+      }
       newPath.addPath(
         path,
         new DOMMatrix(transform)
@@ -1768,15 +1771,16 @@ class CanvasGraphics {
 
     let path;
     if (
-      font.disableFontFace ||
-      isAddToPathSet ||
-      patternFill ||
-      patternStroke
+      (font.disableFontFace ||
+        isAddToPathSet ||
+        patternFill ||
+        patternStroke) &&
+      !font.missingFile
     ) {
       path = font.getPathGenerator(this.commonObjs, character);
     }
 
-    if (font.disableFontFace || patternFill || patternStroke) {
+    if (path && (font.disableFontFace || patternFill || patternStroke)) {
       ctx.save();
       ctx.translate(x, y);
       ctx.scale(fontSize, -fontSize);


</patch>

Imports:
<imports>
Available Packages
Dev Dependencies:
- @babel/core: ^7.28.0
- @babel/preset-env: ^7.28.0
- @babel/runtime: ^7.27.6
- @csstools/postcss-light-dark-function: ^2.0.9
- @fluent/bundle: ^0.19.1
- @fluent/dom: ^0.10.1
- @metalsmith/layouts: ^3.0.0
- @metalsmith/markdown: ^1.10.0
- @napi-rs/canvas: ^0.1.73
- @types/node: ^24.0.13
- autoprefixer: ^10.4.21
- babel-loader: ^10.0.0
- caniuse-lite: ^1.0.30001727
- core-js: ^3.44.0
- eslint: ^9.31.0
- eslint-plugin-import: ^2.32.0
- eslint-plugin-jasmine: ^4.2.2
- eslint-plugin-json: ^4.0.1
- eslint-plugin-no-unsanitized: ^4.1.2
- eslint-plugin-perfectionist: ^4.15.0
- eslint-plugin-prettier: ^5.5.1
- eslint-plugin-unicorn: ^59.0.1
- globals: ^16.3.0
- gulp: ^5.0.1
- gulp-cli: ^3.1.0
- gulp-postcss: ^10.0.0
- gulp-rename: ^2.1.0
- gulp-replace: ^1.1.4
- gulp-zip: ^6.1.0
- highlight.js: ^11.11.1
- jasmine: ^5.8.0
- jsdoc: ^4.0.4
- jstransformer-nunjucks: ^1.2.0
- metalsmith: ^2.6.3
- metalsmith-html-relative: ^2.0.7
- ordered-read-streams: ^2.0.0
- pngjs: ^7.0.0
- postcss: ^8.5.6
- postcss-dir-pseudo-class: ^9.0.1
- postcss-discard-comments: ^7.0.4
- postcss-nesting: ^13.0.2
- prettier: ^3.6.2
- puppeteer: ^24.12.1
- stylelint: ^16.21.1
- stylelint-prettier: ^5.0.3
- svglint: ^4.1.0
- terser-webpack-plugin: ^5.3.14
- tsc-alias: ^1.8.16
- ttest: ^4.0.0
- typescript: ^5.8.3
- vinyl: ^3.0.1
- webpack: ^5.100.1
- webpack-stream: ^7.0.0
- yargs: ^18.0.0

Engines:
- node: >=20.16.0 || >=22.3.0

Available Relative Imports:
- `../../src/core/annotation.js`: Annotation, AnnotationBorderStyle, AnnotationFactory, MarkupAnnotation, getQuadPoints
- `../../src/core/bidi.js`: bidi
- `../../src/core/calculate_md5.js`: calculateMD5
- `../../src/core/calculate_sha256.js`: calculateSHA256
- `../../src/core/calculate_sha_other.js`: calculateSHA384, calculateSHA512
- `../../src/core/cff_parser.js`: CFFCharset, CFFCompiler, CFFFDSelect, CFFParser, CFFStrings
- `../../src/core/cmap.js`: CMap, CMapFactory, IdentityCMap
- `../../src/core/colorspace.js`: ColorSpace
- `../../src/core/colorspace_utils.js`: ColorSpaceUtils
- `../../src/core/core_utils.js`: arrayBuffersToBytes, encodeToXmlString, escapePDFName, escapeString, getInheritableProperty, getSizeInBytes, isAscii, isWhiteSpace, log2, numberToString, parseXFAPath, recoverJsURL, stringToUTF16HexString, stringToUTF16String, toRomanNumerals, validateCSSFont
- `../../src/core/crypto.js`: AES128Cipher, AES256Cipher, ARCFourCipher, CipherTransformFactory, PDF17, PDF20
- `../../src/core/default_appearance.js`: createDefaultAppearance, parseAppearanceStream, parseDefaultAppearance
- `../../src/core/document.js`: PDFDocument, Page
- `../../src/core/encodings.js`: getEncoding
- `../../src/core/evaluator.js`: PartialEvaluator
- `../../src/core/flate_stream.js`: FlateStream
- `../../src/core/font_substitutions.js`: getFontSubstitution
- `../../src/core/fonts_utils.js`: SEAC_ANALYSIS_ENABLED
- `../../src/core/function.js`: PDFFunctionFactory, PostScriptCompiler, PostScriptEvaluator
- `../../src/core/glyphlist.js`: getDingbatsGlyphsUnicode, getGlyphsUnicode
- `../../src/core/image_utils.js`: GlobalColorSpaceCache, GlobalImageCache, LocalColorSpaceCache
- `../../src/core/jbig2.js`: Jbig2Error, Jbig2Image
- `../../src/core/jpg.js`: JpegError, JpegImage
- `../../src/core/jpx.js`: JpxError, JpxImage
- `../../src/core/metadata_parser.js`: MetadataParser
- `../../src/core/operator_list.js`: OperatorList
- `../../src/core/parser.js`: Lexer, Linearization, Parser
- `../../src/core/predictor_stream.js`: PredictorStream
- `../../src/core/primitives.js`: Cmd, Dict, EOF, Name, Ref, RefSet, RefSetCache, isCmd, isDict, isName, isRefsEqual
- `../../src/core/ps_parser.js`: PostScriptLexer, PostScriptParser
- `../../src/core/stream.js`: NullStream, Stream, StringStream
- `../../src/core/type1_parser.js`: Type1Parser
- `../../src/core/unicode.js`: getCharUnicodeCategory, getUnicodeForGlyph, getUnicodeRangeFor, mapSpecialUnicodeValues
- `../../src/core/worker.js`: WorkerMessageHandler, WorkerTask
- `../../src/core/writer.js`: incrementalUpdate, writeChanges, writeDict
- `../../src/core/xfa/bind.js`: Binder
- `../../src/core/xfa/data.js`: DataHandler
- `../../src/core/xfa/factory.js`: XFAFactory
- `../../src/core/xfa/formcalc_lexer.js`: Lexer, TOKEN, Token
- `../../src/core/xfa/formcalc_parser.js`: Errors, Parser
- `../../src/core/xfa/parser.js`: XFAParser
- `../../src/core/xfa/som.js`: searchNode
- `../../src/core/xfa/symbol_utils.js`: $dump, $getChildren, $getChildrenByClass, $getChildrenByName, $text, $uid
- `../../src/core/xml_parser.js`: SimpleXMLParser, XMLParserBase
- `../../src/display/annotation_layer.js`: AnnotationLayer
- `../../src/display/annotation_storage.js`: AnnotationStorage
- `../../src/display/api.js`: PDFDataRangeTransport, PDFDocumentLoadingTask, PDFDocumentProxy, PDFPageProxy, PDFWorker, RenderTask, build, getDocument, version
- `../../src/display/api_utils.js`: LoopbackPort, isValidExplicitDest
- `../../src/display/canvas_factory.js`: DOMCanvasFactory
- `../../src/display/cmap_reader_factory.js`: DOMCMapReaderFactory
- `../../src/display/display_utils.js`: OutputScale, PDFDateString, PageViewport, PixelsPerInch, RenderingCancelledException, StatTimer, SupportedImageMimeTypes, fetchData, getFilenameFromUrl, getPdfFilenameFromUrl, getRGB, getXfaPageViewport, isDataScheme, isPdfFile, isValidFetchUrl, noContextMenu, setLayerDimensions, stopEvent
- `../../src/display/draw_layer.js`: DrawLayer
- `../../src/display/editor/annotation_editor_layer.js`: AnnotationEditorLayer
- `../../src/display/editor/color_picker.js`: ColorPicker
- `../../src/display/editor/drawers/signaturedraw.js`: SignatureExtractor
- `../../src/display/editor/tools.js`: AnnotationEditorUIManager, CommandManager
- `../../src/display/fetch_stream.js`: PDFFetchStream
- `../../src/display/metadata.js`: Metadata
- `../../src/display/network.js`: PDFNetworkStream
- `../../src/display/network_utils.js`: createHeaders, createResponseError, extractFilenameFromHeader, validateRangeRequestCapabilities, validateResponseStatus
- `../../src/display/node_stream.js`: PDFNodeStream
- `../../src/display/node_utils.js`: NodeCMapReaderFactory, NodeStandardFontDataFactory, fetchData
- `../../src/display/standard_fontdata_factory.js`: DOMStandardFontDataFactory
- `../../src/display/svg_factory.js`: DOMSVGFactory
- `../../src/display/text_layer.js`: TextLayer
- `../../src/display/touch_manager.js`: TouchManager
- `../../src/display/worker_options.js`: GlobalWorkerOptions
- `../../src/display/xfa_layer.js`: XfaLayer
- `../../src/shared/message_handler.js`: MessageHandler
- `../../src/shared/murmurhash3.js`: MurmurHash3_64
- `../../src/shared/util.js`: AbortException, AnnotationBorderStyleType, AnnotationEditorParamsType, AnnotationEditorType, AnnotationFieldFlag, AnnotationFlag, AnnotationMode, AnnotationType, BaseException, DrawOPS, FeatureTest, FormatError, ImageKind, InvalidPDFException, MathClamp, OPS, PasswordException, PasswordResponses, PermissionFlag, RenderingIntentFlag, ResponseException, UnknownErrorException, Util, VerbosityLevel, assert, bytesToString, createValidAbsoluteUrl, getModificationDate, getUuid, getVerbosityLevel, isNodeJS, normalizeUnicode, objectSize, setVerbosityLevel, shadow, string32, stringToBytes, stringToPDFString, stringToUTF8String, toBase64Util, updateUrlHash
- `../../web/annotation_layer_builder.js`: AnnotationLayerBuilder
- `../../web/app_options.js`: AppOptions, OptionKind
- `../../web/autolinker.js`: Autolinker
- `../../web/download_manager.js`: DownloadManager
- `../../web/event_utils.js`: EventBus, WaitOnType, waitOnEventOrTimeout
- `../../web/genericl10n.js`: GenericL10n
- `../../web/pdf_find_controller.js`: FindState, PDFFindController
- `../../web/pdf_find_utils.js`: CharacterType, getCharacterType
- `../../web/pdf_history.js`: PDFHistory, isDestArraysEqual, isDestHashesEqual
- `../../web/pdf_link_service.js`: LinkTarget, PDFLinkService, SimpleLinkService
- `../../web/pdf_page_view.js`: PDFPageView
- `../../web/pdf_scripting_manager.component.js`: PDFScriptingManager
- `../../web/pdf_single_page_viewer.js`: PDFSinglePageViewer
- `../../web/pdf_viewer.js`: PDFPageViewBuffer, PDFViewer
- `../../web/struct_tree_layer_builder.js`: StructTreeLayerBuilder
- `../../web/text_layer_builder.js`: TextLayerBuilder
- `../../web/ui_utils.js`: AutoPrintRegExp, ProgressBar, RenderingStates, ScrollMode, SpreadMode, backtrackBeforeAllVisibleElements, binarySearchFirstItem, calcRound, getPageSizeInches, getVisibleElements, isPortraitOrientation, isValidRotation, parseQueryString, removeNullCharacters
- `../../web/xfa_layer_builder.js`: XfaLayerBuilder
- `../reporter.js`: TestReporter
- `./common_pdfstream_tests.js`: testCrossOriginRedirects
- `./test_utils.js`: CMAP_URL, DefaultCMapReaderFactory, DefaultFileReaderFactory, DefaultStandardFontDataFactory, STANDARD_FONT_DATA_URL, TEST_PDFS_PATH, TestPdfsServer, XRefMock, buildGetDocumentParams, createIdFactory, getCrossOriginHostname
</imports>

Code:
<code>
File:
src/display/canvas.js
1 /* Copyright 2012 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 import {
17   DrawOPS,
18   FeatureTest,
19   FONT_IDENTITY_MATRIX,
20   ImageKind,
21   info,
22   OPS,
23   shadow,
24   TextRenderingMode,
25   unreachable,
26   Util,
27   warn,
28 } from "../shared/util.js";
29 import {
30   getCurrentTransform,
31   getCurrentTransformInverse,
32   OutputScale,
33   PixelsPerInch,
34 } from "./display_utils.js";
35 import {
36   getShadingPattern,
37   PathType,
38   TilingPattern,
39 } from "./pattern_helper.js";
40 import { convertBlackAndWhiteToRGBA } from "../shared/image_utils.js";
41 
42 // <canvas> contexts store most of the state we need natively.
43 // However, PDF needs a bit more state, which we store here.
44 // Minimal font size that would be used during canvas fillText operations.
45 const MIN_FONT_SIZE = 16;
46 // Maximum font size that would be used during canvas fillText operations.
47 const MAX_FONT_SIZE = 100;
48 
49 // Defines the time the `executeOperatorList`-method is going to be executing
50 // before it stops and schedules a continue of execution.
51 const EXECUTION_TIME = 15; // ms
52 // Defines the number of steps before checking the execution time.
53 const EXECUTION_STEPS = 10;
54 
55 const FULL_CHUNK_HEIGHT = 16;
56 
57 // Only used in rescaleAndStroke. The goal is to avoid
58 // creating a new DOMMatrix object each time we need it.
59 const SCALE_MATRIX = new DOMMatrix();
60 
61 // Used to get some coordinates.
62 const XY = new Float32Array(2);
63 
64 // Initial rectangle values for the minMax array.
65 const MIN_MAX_INIT = new Float32Array([
66   Infinity,
67   Infinity,
68   -Infinity,
69   -Infinity,
70 ]);
71 
639 const LINE_CAP_STYLES = ["butt", "round", "square"];
640 const LINE_JOIN_STYLES = ["miter", "round", "bevel"];
641 const NORMAL_CLIP = {};
642 const EO_CLIP = {};
643 
644 class CanvasGraphics {
645   constructor(
646     canvasCtx,
647     commonObjs,
648     objs,
649     canvasFactory,
650     filterFactory,
651     { optionalContentConfig, markedContentStack = null },
652     annotationCanvasMap,
653     pageColors
654   ) {
655     this.ctx = canvasCtx;
656     this.current = new CanvasExtraState(
657       this.ctx.canvas.width,
658       this.ctx.canvas.height
659     );
660     this.stateStack = [];
661     this.pendingClip = null;
662     this.pendingEOFill = false;
663     this.res = null;
664     this.xobjs = null;
665     this.commonObjs = commonObjs;
666     this.objs = objs;
667     this.canvasFactory = canvasFactory;
668     this.filterFactory = filterFactory;
669     this.groupStack = [];
670     // Patterns are painted relative to the initial page/form transform, see
671     // PDF spec 8.7.2 NOTE 1.
672     this.baseTransform = null;
673     this.baseTransformStack = [];
674     this.groupLevel = 0;
675     this.smaskStack = [];
676     this.smaskCounter = 0;
677     this.tempSMask = null;
678     this.suspendedCtx = null;
679     this.contentVisible = true;
680     this.markedContentStack = markedContentStack || [];
681     this.optionalContentConfig = optionalContentConfig;
682     this.cachedCanvases = new CachedCanvases(this.canvasFactory);
683     this.cachedPatterns = new Map();
684     this.annotationCanvasMap = annotationCanvasMap;
685     this.viewportScale = 1;
686     this.outputScaleX = 1;
687     this.outputScaleY = 1;
688     this.pageColors = pageColors;
689 
690     this._cachedScaleForStroking = [-1, 0];
691     this._cachedGetSinglePixelWidth = null;
692     this._cachedBitmapsMap = new Map();
693   }
694 
1099   // Graphics state
1107 
1420   // Path
1467 
1601   // Clipping
1605 
1610   // Text
1617 
1618   endText() {
1619     const paths = this.pendingTextPaths;
1620     const ctx = this.ctx;
1621     if (paths === undefined) {
1622       return;
1623     }
1624 
1625     const newPath = new Path2D();
1626     const invTransf = ctx.getTransform().invertSelf();
1627     for (const { transform, x, y, fontSize, path } of paths) {
1628       newPath.addPath(
1629         path,
1630         new DOMMatrix(transform)
1631           .preMultiplySelf(invTransf)
1632           .translate(x, y)
1633           .scale(fontSize, -fontSize)
1634       );
1635     }
1636 
1637     ctx.clip(newPath);
1638     delete this.pendingTextPaths;
1639   }
1640 
1755   paintChar(character, x, y, patternFillTransform, patternStrokeTransform) {
1756     const ctx = this.ctx;
1757     const current = this.current;
1758     const font = current.font;
1759     const textRenderingMode = current.textRenderingMode;
1760     const fontSize = current.fontSize / current.fontSizeScale;
1761     const fillStrokeMode =
1762       textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;
1763     const isAddToPathSet = !!(
1764       textRenderingMode & TextRenderingMode.ADD_TO_PATH_FLAG
1765     );
1766     const patternFill = current.patternFill && !font.missingFile;
1767     const patternStroke = current.patternStroke && !font.missingFile;
1768 
1769     let path;
1770     if (
1771       font.disableFontFace ||
1772       isAddToPathSet ||
1773       patternFill ||
1774       patternStroke
1775     ) {
1776       path = font.getPathGenerator(this.commonObjs, character);
1777     }
1778 
1779     if (font.disableFontFace || patternFill || patternStroke) {
1780       ctx.save();
1781       ctx.translate(x, y);
1782       ctx.scale(fontSize, -fontSize);
1783       let currentTransform;
1784       if (
1785         fillStrokeMode === TextRenderingMode.FILL ||
1786         fillStrokeMode === TextRenderingMode.FILL_STROKE
1787       ) {
1788         if (patternFillTransform) {
1789           currentTransform = ctx.getTransform();
1790           ctx.setTransform(...patternFillTransform);
1791           ctx.fill(
1792             this.#getScaledPath(path, currentTransform, patternFillTransform)
1793           );
1794         } else {
1795           ctx.fill(path);
1796         }
1797       }
1798       if (
1799         fillStrokeMode === TextRenderingMode.STROKE ||
1800         fillStrokeMode === TextRenderingMode.FILL_STROKE
1801       ) {
1802         if (patternStrokeTransform) {
1803           currentTransform ||= ctx.getTransform();
1804           ctx.setTransform(...patternStrokeTransform);
1805           const { a, b, c, d } = currentTransform;
1806           const invPatternTransform = Util.inverseTransform(
1807             patternStrokeTransform
1808           );
1809           const transf = Util.transform(
1810             [a, b, c, d, 0, 0],
1811             invPatternTransform
1812           );
1813           Util.singularValueDecompose2dScale(transf, XY);
1814 
1815           // Cancel the pattern scaling of the line width.
1816           // If sx and sy are different, unfortunately we can't do anything and
1817           // we'll have a rendering bug.
1818           ctx.lineWidth *= Math.max(XY[0], XY[1]) / fontSize;
1819           ctx.stroke(
1820             this.#getScaledPath(path, currentTransform, patternStrokeTransform)
1821           );
1822         } else {
1823           ctx.lineWidth /= fontSize;
1824           ctx.stroke(path);
1825         }
1826       }
1827       ctx.restore();
1828     } else {
1829       if (
1830         fillStrokeMode === TextRenderingMode.FILL ||
1831         fillStrokeMode === TextRenderingMode.FILL_STROKE
1832       ) {
1833         ctx.fillText(character, x, y);
1834       }
1835       if (
1836         fillStrokeMode === TextRenderingMode.STROKE ||
1837         fillStrokeMode === TextRenderingMode.FILL_STROKE
1838       ) {
1839         ctx.strokeText(character, x, y);
1840       }
1841     }
1842 
1843     if (isAddToPathSet) {
1844       const paths = (this.pendingTextPaths ||= []);
1845       paths.push({
1846         transform: getCurrentTransform(ctx),
1847         x,
1848         y,
1849         fontSize,
1850         path,
1851       });
1852     }
1853   }
1854 
2141   // Type3 fonts
2146 
2154   // Color
2184 
2266   // Images
2270 
2858   // Marked content
2859 
2892   // Compatibility
2893 
2902   // Helper functions
2903 
3000   // Rescale before stroking in order to have a final lineWidth
3001   // with both thicknesses greater or equal to 1.
3046 
3055 }
3056 
3062 
</code>

PR summary:
<pr_summary>
Use canvas context text primitives when the font file is missing
It fixes #20065.

The only to get a path (from the path generator) is when the font is embedded. So when we need a path (disableFontFace: true or when we want to use a pattern for stroking/filling), it's impossible to fulfil.
</pr_summary>

Your task:
You are a software tester at pdf.js.
1. Write exactly one javascript test `it("...", async () => {...})` block.
2. Your test must fail on the code before the patch, and pass after, hence the test will verify that the patch resolves the issue.
3. The test must be self-contained and to-the-point.
4. Use only the provided imports (respect the paths exactly how they are given) by importing dynamically for compatibility with Node.js — no new dependencies. 
5. Return only the javascript code (no comments or explanations).

Example structure:
it("should <describe behavior>", async () => {
  const { example } = await import("../../src/core/example.js");
  <initialize required variables>;
  <define expected variable>;
  <generate actual variables>;
  <compare expected with actual>;
});


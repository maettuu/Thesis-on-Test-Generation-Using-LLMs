```javascript
it("should render text correctly when browser.display.use_document_fonts is set to 0", async () => {
  const { PDFDocument } = await import("../../src/display/api.js");
  const { PDFPage } = await import("../../src/display/api.js");
  const { getDocument } = await import("../../src/display/api.js");
  const { createLoadingTask } = await import("../../src/display/api.js");
  const { PDFViewer } = await import("../../web/pdf_viewer.js");
  const { PDFPageView } = await import("../../web/pdf_page_view.js");

  const pdfUrl = "https://www.jma.go.jp/jma/press/2507/04a/20250704_asosan.pdf";
  const pdfDocument = await getDocument({ url: pdfUrl }).promise;
  const pdfPage = await pdfDocument.getPage(1);
  const pdfPageView = new PDFPageView({ pdfPage });
  const pdfViewer = new PDFViewer();
  pdfViewer.setDocument(pdfDocument);
  pdfViewer.setPageView(pdfPageView);

  const canvas = document.createElement("canvas");
  const ctx = canvas.getContext("2d");
  const renderTask = pdfPageView.render({
    canvasContext: ctx,
    viewport: pdfPageView.viewport,
  });

  await renderTask.promise;

  const textData = await pdfPage.getTextContent();
  const expectedText = textData.items.map(item => item.str).join("");
  const actualText = ctx.canvas.toDataURL();

  // This is a very basic test and might not cover all cases.
  // A more sophisticated test would involve checking the actual text rendering.
  expect(actualText).not.toContain("mojibake");
});
```
it("should render text correctly when browserdisplayusedocumentfonts is set to", async () => {
  const { PDFDocument } = await import("../../src/display/api.js");
  const { PDFPageProxy } = await import("../../src/display/api.js");
  const { PDFViewer } = await import("../../src/web/pdf_viewer.js");
  const pdfUrl = "https://www.jma.go.jp/jma/press/2507/04a/20250704_asosan.pdf";
  const pdfDocument = await PDFDocument.load(pdfUrl);
  const pdfPage = await pdfDocument.getPage(1);
  const pdfPageProxy = new PDFPageProxy(pdfPage);
  const pdfViewer = new PDFViewer();
  pdfViewer.setDocumentAndPage(pdfDocument, pdfPageProxy);
  const canvas = document.createElement("canvas");
  const ctx = canvas.getContext("2d");
  const canvasGraphics = new (await import("../../src/display/canvas.js")).CanvasGraphics(ctx, {}, {}, {}, {}, {}, {}, {});
  const textRenderingMode = (await import("../../src/shared/util.js")).TextRenderingMode.FILL;
  const fontSize = 16;
  const character = "A";
  const x = 10;
  const y = 20;
  const font = await (await import("../../src/core/fonts_utils.js")).getFontSubstitution("Helvetica");
  const current = { font, textRenderingMode, fontSize };
  canvasGraphics.current = current;
  canvasGraphics.paintChar(character, x, y, null, null);
  const expectedText = "A";
  const actualText = canvasGraphics.ctx.canvas.toDataURL();
  const expectedTextData = new TextDecoder("utf-8").decode((await import("../../src/shared/util.js")).stringToBytes(expectedText));
  const actualTextData = new TextDecoder("utf-8").decode((await import("../../src/shared/util.js")).stringToBytes(actualText));
  expect(actualTextData).toContain(expectedTextData);
});
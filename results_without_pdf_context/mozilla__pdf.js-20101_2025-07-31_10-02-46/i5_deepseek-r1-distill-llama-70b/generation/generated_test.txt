it("should correctly render text when browserdisplayusedocumentfonts is disabled", async () => {
  const { PDFDocument } = await import("../../src/display/api.js");
  const { PDFPage } = await import("../../src/display/api.js");
  const { TextLayer } = await import("../../src/display/text_layer.js");

  // Mock browser.display.use_document_fonts setting
  const originalUseDocumentFonts = globalThis.navigator.webdriver ? 
    globalThis.browser.display.use_document_fonts : 
    globalThis.browser.display.use_document_fonts;
  globalThis.browser.display.use_document_fonts = 0;

  // Load the test PDF
  const pdfUrl = "https://www.jma.go.jp/jma/press/2507/04a/20250704_asosan.pdf";
  const pdf = await PDFDocument.load(pdfUrl);
  const page = await pdf.getPage(1);

  // Create text layer and draw
  const textLayer = new TextLayer({
    pageIndex: 0,
    container: document.createElement('div'),
  });
  await textLayer.draw(page);

  // Get the text content
  const text = await page.getTextContent();

  // Expected text to be present
  const expectedText = "å±±";
  expect(text.items.some(item => item.str === expectedText)).toBe(true);

  // Cleanup
  await pdf.destroy();
});
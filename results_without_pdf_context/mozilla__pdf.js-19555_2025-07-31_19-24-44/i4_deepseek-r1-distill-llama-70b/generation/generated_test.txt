it("should handle RC encryption with bit key", async () => {
  const { PDFDocument } = await import("../../web/pdf_document.js");
  const { PDFParser } = await import("../../web/pdf_parser.js");
  const { stringToBytes } = await import("../../src/core/core_utils.js");
  const { ARCFourCipher } = await import("../../src/core/crypto.js");

  // Create a sample PDF with RC4 encryption (R=4, V=4) with 40-bit key
  const pdfData = new Uint8Array([
    0x25, 0x50, 0x44, 0x46, 0x2d, 0x31, 0x2e, 0x30, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x20,
    0x28, 0x6e, 0x6f, 0x6e, 0x65, 0x29, 0x0a, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
    0x3a, 0x20, 0x30, 0x30, 0x30, 0x0a, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
    0x6f, 0x6e, 0x3a, 0x20, 0x52, 0x43, 0x34, 0x28, 0x52, 0x3d, 0x34, 0x2c, 0x56, 0x3d,
    0x34, 0x2c, 0x4c, 0x3d, 0x34, 0x30, 0x0a, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
    0x3a, 0x20, 0x34, 0x30, 0x0a, 0x55, 0x2f, 0x4f, 0x20, 0x28, 0x4f, 0x77, 0x6e,
    0x65, 0x72, 0x29, 0x3a, 0x20, 0x30, 0x30, 0x30, 0x0a, 0x50, 0x61, 0x67, 0x65,
    0x73, 0x3a, 0x20, 0x30, 0x0a, 0x53, 0x75, 0x70, 0x70, 0x6c, 0x65, 0x72, 0x3a,
    0x20, 0x22, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x20, 0x57, 0x6f, 0x72, 0x6c,
    0x64, 0x22, 0x0a, 0x2f, 0x50, 0x44, 0x46, 0x2d, 0x31, 0x2e, 0x30
  ]);

  // Create an encrypted PDF
  const encryptionKey = new Uint8Array([0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08]);
  const cipher = new ARCFourCipher(encryptionKey);
  const encryptedContent = cipher.encryptBlock(pdfData.slice(0, 0x100));

  // Load the PDF
  const pdf = await PDFDocument.create({
    data: pdfData,
    password: "test",
    length: pdfData.length
  });

  // Verify the content can be read
  const page = await pdf.getPage(1);
  const textContent = await page.getTextContent();
  expect(textContent.items[0].str).toBe("Hello World");
});
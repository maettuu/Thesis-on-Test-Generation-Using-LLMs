it("should delete selected annotation when pressing Delete on Mac", async () => {
  const { AnnotationEditorUIManager, CommandManager } = await import("../../src/display/editor/tools.js");
  const { Annotation, MarkupAnnotation } = await import("../../src/core/annotation.js");
  const { AnnotationStorage } = await import("../../src/display/annotation_storage.js");

  // Setup platform as Mac
  Object.defineProperty(FeatureTest, "platform", {
    get: () => ({ isMac: true }),
  });

  const container = document.createElement("div");
  const eventBus = {
    _on: () => {},
    _off: () => {},
    dispatch: () => {},
  };
  const pdfDocument = {
    annotationStorage: new AnnotationStorage(),
    filterFactory: {},
  };
  const pageColors = {
    foreground: null,
    background: null,
  };

  const uiManager = new AnnotationEditorUIManager(container, eventBus, pdfDocument, pageColors);
  const commandManager = new CommandManager();

  // Create test annotation
  const annotation = new MarkupAnnotation({
    id: "test-annotation",
    flags: AnnotationFlag.NONE,
    color: [0, 0, 0],
    boundary: [0, 0, 100, 100],
    content: "Test",
  });

  // Add annotation to storage
  pdfDocument.annotationStorage.setValue(annotation.id, annotation);

  // Simulate keydown event with Delete key on Mac
  const event = new KeyboardEvent("keydown", {
    bubbles: true,
    cancelable: true,
    keyCode: 8, // Delete key code
    key: "Delete",
    metaKey: true,
  });

  container.dispatchEvent(event);

  // Verify annotation was deleted
  expect(pdfDocument.annotationStorage.size).toBe(0);
});
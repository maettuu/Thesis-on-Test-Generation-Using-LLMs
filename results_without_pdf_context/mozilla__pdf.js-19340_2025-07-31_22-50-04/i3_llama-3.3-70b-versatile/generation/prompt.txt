Before you begin:
- Keep going until the job is completely solved — don’t stop halfway.
- If you’re unsure about the behavior, reread the provided patch carefully; do not hallucinate.
- Plan your approach before writing code by reflecting on whether the test truly fails before and passes after.

Issue:
<issue>
[Bug]: JPX wasm-file loading errors not handled correctly
### Attach (recommended) or Link to PDF file

N/A

### Web browser and its version

N/A

### Operating system and its version

N/A

### PDF.js version

`master`

### Is the bug present in the latest PDF.js version?

Yes

### Is a browser extension

No

### Steps to reproduce the problem

1. Apply the following diff (simulating a missing wasm-file):
```diff
diff --git a/src/core/jpx.js b/src/core/jpx.js
index 003fc7bf9..8080daca5 100644
--- a/src/core/jpx.js
+++ b/src/core/jpx.js
@@ -45,7 +45,7 @@ class JpxImage {
   }

   static async #instantiateWasm(imports, successCallback) {
-    const filename = "openjpeg.wasm";
+    const filename = "missing.wasm";
     try {
       if (!this.#buffer) {
         if (this.#wasmUrl !== null) {
```
2. Run `gulp server`
3. Open http://localhost:8888/web/viewer.html?file=/test/pdfs/issue19326.pdf

### What is the expected behavior?

Since the wasm-file couldn't be loaded image decoding should throw an error, the image should be skipped, and rendering should finish.

### What went wrong?

No error is thrown and rendering doesn't finish, since it appears that the following promise never settles:
https://github.com/mozilla/pdf.js/blob/45a32b7c581590dc419cccc0cf19fb25b411b216/src/core/jpx.js#L79-L84

### Link to a viewer

_No response_

### Additional context

_No response_
</issue>

Patch:
<patch>
diff --git a/src/core/jpx.js b/src/core/jpx.js
--- a/src/core/jpx.js
+++ b/src/core/jpx.js
@@ -29,8 +29,6 @@ class JpxImage {
 
   static #handler = null;
 
-  static #instantiationFailed = false;
-
   static #modulePromise = null;
 
   static #wasmUrl = null;
@@ -58,10 +56,6 @@ class JpxImage {
       }
       const results = await WebAssembly.instantiate(this.#buffer, imports);
       return successCallback(results.instance);
-    } catch (e) {
-      this.#instantiationFailed = true;
-      warn(`Cannot load ${filename}: "${e}".`);
-      return false;
     } finally {
       this.#handler = null;
       this.#wasmUrl = null;
@@ -72,10 +66,6 @@ class JpxImage {
     bytes,
     { numComponents = 4, isIndexedColormap = false, smaskInData = false } = {}
   ) {
-    if (this.#instantiationFailed) {
-      throw new JpxError("OpenJPEG failed to instantiate.");
-    }
-
     this.#modulePromise ||= OpenJPEG({
       warn,
       instantiateWasm: this.#instantiateWasm.bind(this),


</patch>

Imports:
<imports>
Available Packages
Dev Dependencies:
- @babel/core: ^7.26.0
- @babel/preset-env: ^7.26.0
- @babel/runtime: ^7.26.0
- @fluent/bundle: ^0.18.0
- @fluent/dom: ^0.10.0
- @metalsmith/layouts: ^2.7.0
- @metalsmith/markdown: ^1.10.0
- @napi-rs/canvas: ^0.1.65
- @types/node: ^22.10.5
- autoprefixer: ^10.4.20
- babel-loader: ^9.2.1
- caniuse-lite: ^1.0.30001692
- core-js: ^3.40.0
- eslint: ^9.17.0
- eslint-plugin-import: ^2.31.0
- eslint-plugin-jasmine: ^4.2.2
- eslint-plugin-json: ^4.0.1
- eslint-plugin-no-unsanitized: ^4.1.2
- eslint-plugin-perfectionist: ^4.6.0
- eslint-plugin-prettier: ^5.2.1
- eslint-plugin-unicorn: ^56.0.1
- globals: ^15.14.0
- gulp: ^5.0.0
- gulp-cli: ^3.0.0
- gulp-postcss: ^10.0.0
- gulp-rename: ^2.0.0
- gulp-replace: ^1.1.4
- gulp-zip: ^6.1.0
- highlight.js: ^11.11.1
- jasmine: ^5.5.0
- jsdoc: ^4.0.4
- jstransformer-nunjucks: ^1.2.0
- metalsmith: ^2.6.3
- metalsmith-html-relative: ^2.0.6
- ordered-read-streams: ^2.0.0
- pngjs: ^7.0.0
- postcss: ^8.4.49
- postcss-dark-theme-class: ^1.3.0
- postcss-dir-pseudo-class: ^9.0.1
- postcss-discard-comments: ^7.0.3
- postcss-nesting: ^13.0.1
- prettier: ^3.4.2
- puppeteer: ^24.0.0
- stylelint: ^16.12.0
- stylelint-prettier: ^5.0.2
- svglint: ^3.1.0
- terser-webpack-plugin: ^5.3.11
- tsc-alias: ^1.8.10
- ttest: ^4.0.0
- typescript: ^5.7.3
- vinyl: ^3.0.0
- webpack: ^5.97.1
- webpack-stream: ^7.0.0
- yargs: ^17.7.2

Engines:
- node: >=20

Available Relative Imports:
- `../../src/core/annotation.js`: Annotation, AnnotationBorderStyle, AnnotationFactory, MarkupAnnotation, getQuadPoints
- `../../src/core/bidi.js`: bidi
- `../../src/core/cff_parser.js`: CFFCharset, CFFCompiler, CFFFDSelect, CFFParser, CFFStrings
- `../../src/core/cmap.js`: CMap, CMapFactory, IdentityCMap
- `../../src/core/colorspace.js`: ColorSpace
- `../../src/core/core_utils.js`: arrayBuffersToBytes, encodeToXmlString, escapePDFName, escapeString, getInheritableProperty, getSizeInBytes, isAscii, isWhiteSpace, log2, numberToString, parseXFAPath, recoverJsURL, stringToUTF16HexString, stringToUTF16String, toRomanNumerals, validateCSSFont
- `../../src/core/crypto.js`: AES128Cipher, AES256Cipher, ARCFourCipher, CipherTransformFactory, PDF17, PDF20, calculateMD5, calculateSHA256, calculateSHA384, calculateSHA512
- `../../src/core/default_appearance.js`: createDefaultAppearance, parseAppearanceStream, parseDefaultAppearance
- `../../src/core/document.js`: PDFDocument, Page
- `../../src/core/encodings.js`: getEncoding
- `../../src/core/evaluator.js`: PartialEvaluator
- `../../src/core/flate_stream.js`: FlateStream
- `../../src/core/font_substitutions.js`: getFontSubstitution
- `../../src/core/fonts_utils.js`: SEAC_ANALYSIS_ENABLED
- `../../src/core/function.js`: PDFFunctionFactory, PostScriptCompiler, PostScriptEvaluator
- `../../src/core/glyphlist.js`: getDingbatsGlyphsUnicode, getGlyphsUnicode
- `../../src/core/image_utils.js`: GlobalImageCache, LocalColorSpaceCache
- `../../src/core/jbig2.js`: Jbig2Error, Jbig2Image
- `../../src/core/jpg.js`: JpegError, JpegImage
- `../../src/core/jpx.js`: JpxError, JpxImage
- `../../src/core/metadata_parser.js`: MetadataParser
- `../../src/core/operator_list.js`: OperatorList
- `../../src/core/parser.js`: Lexer, Linearization, Parser
- `../../src/core/predictor_stream.js`: PredictorStream
- `../../src/core/primitives.js`: Cmd, Dict, EOF, Name, Ref, RefSet, RefSetCache, isCmd, isDict, isName, isRefsEqual
- `../../src/core/ps_parser.js`: PostScriptLexer, PostScriptParser
- `../../src/core/stream.js`: NullStream, Stream, StringStream
- `../../src/core/type1_parser.js`: Type1Parser
- `../../src/core/unicode.js`: getCharUnicodeCategory, getUnicodeForGlyph, getUnicodeRangeFor, mapSpecialUnicodeValues
- `../../src/core/worker.js`: WorkerMessageHandler, WorkerTask
- `../../src/core/writer.js`: incrementalUpdate, writeChanges, writeDict
- `../../src/core/xfa/bind.js`: Binder
- `../../src/core/xfa/data.js`: DataHandler
- `../../src/core/xfa/factory.js`: XFAFactory
- `../../src/core/xfa/formcalc_lexer.js`: Lexer, TOKEN, Token
- `../../src/core/xfa/formcalc_parser.js`: Errors, Parser
- `../../src/core/xfa/parser.js`: XFAParser
- `../../src/core/xfa/som.js`: searchNode
- `../../src/core/xfa/symbol_utils.js`: $dump, $getChildren, $getChildrenByClass, $getChildrenByName, $text, $uid
- `../../src/core/xml_parser.js`: SimpleXMLParser, XMLParserBase
- `../../src/display/annotation_layer.js`: AnnotationLayer
- `../../src/display/annotation_storage.js`: AnnotationStorage
- `../../src/display/api.js`: DefaultCMapReaderFactory, DefaultCanvasFactory, DefaultStandardFontDataFactory, LoopbackPort, PDFDataRangeTransport, PDFDocumentLoadingTask, PDFDocumentProxy, PDFPageProxy, PDFWorker, RenderTask, build, getDocument, version
- `../../src/display/canvas_factory.js`: DOMCanvasFactory
- `../../src/display/display_utils.js`: OutputScale, PDFDateString, PageViewport, PixelsPerInch, RenderingCancelledException, StatTimer, fetchData, getFilenameFromUrl, getPdfFilenameFromUrl, getXfaPageViewport, isDataScheme, isPdfFile, isValidFetchUrl, noContextMenu, setLayerDimensions, stopEvent
- `../../src/display/draw_layer.js`: DrawLayer
- `../../src/display/editor/annotation_editor_layer.js`: AnnotationEditorLayer
- `../../src/display/editor/color_picker.js`: ColorPicker
- `../../src/display/editor/tools.js`: AnnotationEditorUIManager, CommandManager
- `../../src/display/fetch_stream.js`: PDFFetchStream
- `../../src/display/metadata.js`: Metadata
- `../../src/display/network.js`: PDFNetworkStream
- `../../src/display/network_utils.js`: createHeaders, createResponseError, extractFilenameFromHeader, validateRangeRequestCapabilities, validateResponseStatus
- `../../src/display/node_stream.js`: PDFNodeStream
- `../../src/display/node_utils.js`: fetchData
- `../../src/display/svg_factory.js`: DOMSVGFactory
- `../../src/display/text_layer.js`: TextLayer
- `../../src/display/touch_manager.js`: TouchManager
- `../../src/display/worker_options.js`: GlobalWorkerOptions
- `../../src/display/xfa_layer.js`: XfaLayer
- `../../src/shared/message_handler.js`: MessageHandler
- `../../src/shared/murmurhash3.js`: MurmurHash3_64
- `../../src/shared/util.js`: AbortException, AnnotationBorderStyleType, AnnotationEditorParamsType, AnnotationEditorType, AnnotationFieldFlag, AnnotationFlag, AnnotationMode, AnnotationType, BaseException, FeatureTest, FormatError, ImageKind, InvalidPDFException, OPS, PasswordException, PasswordResponses, PermissionFlag, RenderingIntentFlag, ResponseException, UnknownErrorException, Util, VerbosityLevel, assert, bytesToString, createValidAbsoluteUrl, getModificationDate, getUuid, getVerbosityLevel, isNodeJS, normalizeUnicode, objectSize, setVerbosityLevel, shadow, string32, stringToBytes, stringToPDFString, stringToUTF8String, toBase64Util
- `../../web/annotation_layer_builder.js`: AnnotationLayerBuilder
- `../../web/app_options.js`: AppOptions, OptionKind
- `../../web/download_manager.js`: DownloadManager
- `../../web/event_utils.js`: EventBus, WaitOnType, waitOnEventOrTimeout
- `../../web/genericl10n.js`: GenericL10n
- `../../web/pdf_find_controller.js`: FindState, PDFFindController
- `../../web/pdf_find_utils.js`: CharacterType, getCharacterType
- `../../web/pdf_history.js`: PDFHistory, isDestArraysEqual, isDestHashesEqual
- `../../web/pdf_link_service.js`: LinkTarget, PDFLinkService, SimpleLinkService
- `../../web/pdf_page_view.js`: PDFPageView
- `../../web/pdf_scripting_manager.component.js`: PDFScriptingManager
- `../../web/pdf_single_page_viewer.js`: PDFSinglePageViewer
- `../../web/pdf_viewer.js`: PDFPageViewBuffer, PDFViewer
- `../../web/struct_tree_layer_builder.js`: StructTreeLayerBuilder
- `../../web/text_layer_builder.js`: TextLayerBuilder
- `../../web/ui_utils.js`: AutoPrintRegExp, ProgressBar, RenderingStates, ScrollMode, SpreadMode, backtrackBeforeAllVisibleElements, binarySearchFirstItem, calcRound, getPageSizeInches, getVisibleElements, isPortraitOrientation, isValidRotation, parseQueryString, removeNullCharacters
- `../../web/xfa_layer_builder.js`: XfaLayerBuilder
- `../reporter.js`: TestReporter
- `./common_pdfstream_tests.js`: testCrossOriginRedirects
- `./test_utils.js`: CMAP_URL, DefaultFileReaderFactory, STANDARD_FONT_DATA_URL, TEST_PDFS_PATH, TestPdfsServer, XRefMock, buildGetDocumentParams, createIdFactory, getCrossOriginHostname
</imports>

Code:
<code>
File:
src/core/jpx.js
1 /* Copyright 2024 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 import { BaseException, warn } from "../shared/util.js";
17 import { fetchBinaryData } from "./core_utils.js";
18 import OpenJPEG from "../../external/openjpeg/openjpeg.js";
19 import { Stream } from "./stream.js";
20 
21 class JpxError extends BaseException {
22   constructor(msg) {
23     super(msg, "JpxError");
24   }
25 }
26 
27 class JpxImage {
28   static #buffer = null;
29 
30   static #handler = null;
31 
32   static #instantiationFailed = false;
33 
34   static #modulePromise = null;
35 
36   static #wasmUrl = null;
37 
38   static setOptions({ handler, wasmUrl }) {
39     if (!this.#buffer) {
40       this.#wasmUrl = wasmUrl || null;
41       if (wasmUrl === null) {
42         this.#handler = handler;
43       }
44     }
45   }
46 
47   static async #instantiateWasm(imports, successCallback) {
48     const filename = "openjpeg.wasm";
49     try {
50       if (!this.#buffer) {
51         if (this.#wasmUrl !== null) {
52           this.#buffer = await fetchBinaryData(`${this.#wasmUrl}${filename}`);
53         } else {
54           this.#buffer = await this.#handler.sendWithPromise("FetchWasm", {
55             filename,
56           });
57         }
58       }
59       const results = await WebAssembly.instantiate(this.#buffer, imports);
60       return successCallback(results.instance);
61     } catch (e) {
62       this.#instantiationFailed = true;
63       warn(`Cannot load ${filename}: "${e}".`);
64       return false;
65     } finally {
66       this.#handler = null;
67       this.#wasmUrl = null;
68     }
69   }
70 
71   static async decode(
72     bytes,
73     { numComponents = 4, isIndexedColormap = false, smaskInData = false } = {}
74   ) {
75     if (this.#instantiationFailed) {
76       throw new JpxError("OpenJPEG failed to instantiate.");
77     }
78 
79     this.#modulePromise ||= OpenJPEG({
80       warn,
81       instantiateWasm: this.#instantiateWasm.bind(this),
82     });
83 
84     const module = await this.#modulePromise;
85     let ptr;
86 
87     try {
88       const size = bytes.length;
89       ptr = module._malloc(size);
90       module.HEAPU8.set(bytes, ptr);
91       const ret = module._jp2_decode(
92         ptr,
93         size,
94         numComponents > 0 ? numComponents : 0,
95         !!isIndexedColormap,
96         !!smaskInData
97       );
98       if (ret) {
99         const { errorMessages } = module;
100         if (errorMessages) {
101           delete module.errorMessages;
102           throw new JpxError(errorMessages);
103         }
104         throw new JpxError("Unknown error");
105       }
106       const { imageData } = module;
107       module.imageData = null;
108 
109       return imageData;
110     } finally {
111       if (ptr) {
112         module._free(ptr);
113       }
114     }
115   }
116 
117   static cleanup() {
118     this.#modulePromise = null;
119   }
120 
121   static parseImageProperties(stream) {
122     if (typeof PDFJSDev !== "undefined" && PDFJSDev.test("IMAGE_DECODERS")) {
123       if (stream instanceof ArrayBuffer || ArrayBuffer.isView(stream)) {
124         stream = new Stream(stream);
125       } else {
126         throw new JpxError("Invalid data format, must be a TypedArray.");
127       }
128     }
129     // No need to use OpenJPEG here since we're only getting very basic
130     // information which are located in the first bytes of the file.
131     let newByte = stream.getByte();
132     while (newByte >= 0) {
133       const oldByte = newByte;
134       newByte = stream.getByte();
135       const code = (oldByte << 8) | newByte;
136       // Image and tile size (SIZ)
137       if (code === 0xff51) {
138         stream.skip(4);
139         const Xsiz = stream.getInt32() >>> 0; // Byte 4
140         const Ysiz = stream.getInt32() >>> 0; // Byte 8
141         const XOsiz = stream.getInt32() >>> 0; // Byte 12
142         const YOsiz = stream.getInt32() >>> 0; // Byte 16
143         stream.skip(16);
144         const Csiz = stream.getUint16(); // Byte 36
145         return {
146           width: Xsiz - XOsiz,
147           height: Ysiz - YOsiz,
148           // Results are always returned as `Uint8ClampedArray`s.
149           bitsPerComponent: 8,
150           componentsCount: Csiz,
151         };
152       }
153     }
154     throw new JpxError("No size marker found in JPX stream");
155   }
156 }
157 
158 export { JpxError, JpxImage };
</code>

Test file:
<test_file>
File:
test/unit/pdf.image_decoders_spec.js
/* Copyright 2023 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import {
  getVerbosityLevel,
  setVerbosityLevel,
  VerbosityLevel,
} from "../../src/shared/util.js";
import { Jbig2Error, Jbig2Image } from "../../src/core/jbig2.js";
import { JpegError, JpegImage } from "../../src/core/jpg.js";
import { JpxError, JpxImage } from "../../src/core/jpx.js";
</test_file>

Your task:
You are a software tester at pdf.js.
1. Examine the existing test file. You may reuse any imports, helpers or setup blocks it already has.
2. Write exactly one javascript test `it("...", async () => {...})` block.
3. Your test must fail on the code before the patch, and pass after, hence the test will verify that the patch resolves the issue.
4. The test must be self-contained and to-the-point.
5. If you need something new use only the provided imports (respect the paths exactly how they are given) by importing dynamically for compatibility with Node.js — no new dependencies. 
6. Return only the javascript code for the new `it(...)` block (no comments or explanations).

Example structure:
it("should <describe behavior>", async () => {
  const { example } = await import("../../src/core/example.js");
  <initialize required variables>;
  <define expected variable>;
  <generate actual variables>;
  <compare expected with actual>;
});


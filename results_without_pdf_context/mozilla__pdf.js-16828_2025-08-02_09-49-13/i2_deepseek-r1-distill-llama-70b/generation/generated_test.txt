it("should create a stamp editor when pasting an image from clipboard", async () => {
  const { AnnotationEditorUIManager, AnnotationEditorLayer } = await import("../../src/display/editor/tools.js");
  const { StampEditor } = await import("../../src/display/editor/stamp.js");

  // Mock clipboard data with image
  const clipboardData = {
    items: [
      {
        type: "image/png",
        getAsFile: () => new File(["test"], "test.png", { type: "image/png" })
      }
    ]
  };

  // Mock UI Manager and dependencies
  const mockViewer = {};
  const mockEventBus = {
    _on: jest.fn(),
    _off: jest.fn()
  };
  const uiManager = new AnnotationEditorUIManager(mockViewer, mockEventBus, {}, {});

  // Mock layer and current layer setup
  const mockDiv = {
    getBoundingClientRect: () => ({ x: 0, y: 0, width: 100, height: 100 })
  };
  const layer = new AnnotationEditorLayer({
    uiManager,
    pageIndex: 0,
    div: mockDiv,
    accessibilityManager: {},
    annotationLayer: {},
    viewport: { getBoundingClientRect: () => ({}) },
    l10n: {}
  });

  // Add layer to UI manager
  uiManager.currentLayer = layer;

  // Mock image manager to return valid data
  uiManager.imageManager = {
    getFromFile: jest.fn(() => ({
      bitmap: {},
      id: "1",
      isSvg: false
    }))
  };

  // Call paste method
  const event = { clipboardData, preventDefault: jest.fn() };
  uiManager.paste(event);

  // Check if stamp editor was created and added
  const editors = Array.from(layer.#editors.values());
  const stampEditor = editors.find(editor => editor instanceof StampEditor);

  expect(stampEditor).toBeTruthy();
});
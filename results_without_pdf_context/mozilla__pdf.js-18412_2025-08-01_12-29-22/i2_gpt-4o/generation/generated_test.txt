it("should update glyph width and unicode when glyphName is empty for missing file Type1 fonts", async () => {
  const { Font } = await import("../../src/core/fonts.js");
  const properties = {
    loadedName: "TestFont",
    isType3Font: false,
    cssFontInfo: {},
    flags: 0,
    differences: { 65: "" },
    defaultEncoding: { 65: "" },
    widths: { "space": 250 },
    defaultWidth: 100,
    composite: false,
    cMap: { contains: () => false },
    capHeight: 700,
    ascent: 800,
    descent: -200,
    fontMatrix: [1, 0, 0, 1, 0, 0],
    bbox: [0, 0, 1000, 1000],
    toUnicode: { get: () => undefined },
    cidEncoding: "",
    vertical: false,
    systemFontInfo: {},
    // Set type so that the condition glyphName === "" && type==="Type1" holds.
    type: "Type1",
    subtype: "Type1"
  };
  const file = { isEmpty: false };
  const font = new Font("TestFont", file, properties);
  font.missingFile = true;
  const glyph = font._charToGlyph(65, false);
  if (glyph.width !== 250 || glyph.unicode !== " ") {
    throw new Error(`Expected glyph with width 250 and unicode " ", got width=${glyph.width} and unicode="${glyph.unicode}"`);
  }
});
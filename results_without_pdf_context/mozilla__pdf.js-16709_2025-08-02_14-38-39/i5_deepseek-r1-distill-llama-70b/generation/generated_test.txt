it("should redo annotations using keyboard shortcuts", async () => {
  const { AnnotationEditorUIManager } = await import("../../src/display/editor/tools.js");
  const { CommandManager } = await import("../../src/display/editor/tools.js");
  const { PDFDocument, PDFPageProxy } = await import("../../src/core/document.js");

  // Initialize test document and page
  const pdfDocument = await PDFDocument.load(
    await import("../../src/web/test_utils.js").then(utils => utils.buildGetDocumentParams("simple.pdf"))
  );
  const page = await pdfDocument.getPage(1);

  // Setup annotation editor and command manager
  const annotationEditor = new AnnotationEditorUIManager(page);
  const commandManager = new CommandManager(annotationEditor);
  const redoCalled = { value: false };

  // Mock the redo command handler
  commandManager.on("redo", () => {
    redoCalled.value = true;
  });

  // Add an annotation and undo it
  const annotation = await annotationEditor.addAnnotation({
    type: "square",
    rectangle: [0, 0, 100, 100],
  });
  await annotationEditor.undo();

  // Test the redo keyboard shortcut
  await commandManager.execute({
    type: "keydown",
    key: "z",
    ctrlKey: true,
    shiftKey: true,
  });

  // Verify redo was called
  expect(redoCalled.value).toBe(true);
});
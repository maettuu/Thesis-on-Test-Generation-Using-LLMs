<think>
Okay, I need to write a regression test for the issue where comments and sticky notes aren't rendering in the PDF.js viewer. The user provided a patch, and I have to ensure the test fails before the patch and passes after.

First, I'll look at the problem. The issue is that certain annotations, like text annotations, aren't being displayed. The patch modifies the `annotation.js` file, adjusting the `noHTML` flag for various annotation types. This flag determines whether HTML is rendered for the annotation.

So, the test should check if these annotations are rendered correctly. I'll focus on the TextAnnotation as a representative case.

Looking at the existing test file, I see it imports necessary modules. I can use these imports in my test. I'll need to create a mock PDF with a text annotation and check if it's rendered.

I'll set up a mock XRef and create a sample annotation. Then, I'll use the AnnotationFactory to create the TextAnnotation instance. The key is to check the `noHTML` property, which in the patched code should be set to false, allowing HTML rendering.

Before the patch, `noHTML` might have been true, causing the annotation not to render. After the patch, it should be false. So, the test will assert that `noHTML` is false.

I'll write the test block, ensuring it's self-contained and uses async/await for any promises. The test will create the annotation, check the `noHTML` property, and assert the expected value.

Finally, I'll structure the code as per the example, making sure to import only what's needed and keep the test concise.
</think>

```javascript
it("should render text annotations with HTML when noHTML is false", async () => {
  const { AnnotationFactory, MarkupAnnotation } = await import("../../src/core/annotation.js");
  const { AnnotationType } = await import("../../src/shared/util.js");
  const xref = new XRefMock();
  
  // Create a sample text annotation
  const dict = new Dict();
  dict.set("Type", Name.get("Annot"));
  dict.set("Subtype", Name.get("Text"));
  dict.set("Contents", new Dict());
  
  const annotation = AnnotationFactory.create(dict, {}, xref, {}, {}) as MarkupAnnotation;
  
  // Verify that the text annotation has HTML rendering enabled
  expect(annotation.data.noHTML).toBe(false);
});
```
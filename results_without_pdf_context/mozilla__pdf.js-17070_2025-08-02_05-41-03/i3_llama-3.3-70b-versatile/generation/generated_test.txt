it("should render comment and sticky note annotations", async () => {
  const xref = new XRefMock();
  const idFactory = createIdFactory();
  const annotationGlobals = await AnnotationFactory.createGlobals(xref);
  const evaluator = new PartialEvaluator({
    xref,
    idFactory,
    annotationGlobals,
    cMapCache: new Map(),
    cMapUrl: CMAP_URL,
    standardFontDataFactory: new DefaultStandardFontDataFactory(STANDARD_FONT_DATA_URL),
  });
  const parser = new Parser(new Lexer(new StringStream("")));
  const task = new WorkerTask(evaluator, parser);
  const annotation = await AnnotationFactory.create(
    xref,
    new Ref(1, 0),
    annotationGlobals,
    idFactory,
    false,
    null,
    task
  );
  const annotationDict = annotation.dict;
  annotationDict.set("Subtype", Name.get("Text"));
  annotationDict.set("T", "Comment");
  annotationDict.set("Contents", "This is a comment");
  const operatorList = await annotation.getOperatorList(
    evaluator,
    task,
    RenderingIntentFlag.DISPLAY
  );
  const expectedOperator = OPS.beginAnnotation;
  const actualOperator = operatorList.opList.ops[0].op;
  expect(actualOperator).toBe(expectedOperator);
});
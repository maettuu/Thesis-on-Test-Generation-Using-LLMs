it("should correctly map the Euro character for fonts mapped to a standard font", async () => {
  const { Font } = await import("../../src/core/fonts.js");
  const { getGlyphsUnicode } = await import("../../src/core/glyphlist.js");
  const { IdentityToUnicodeMap } = await import("../../src/core/to_unicode_map.js");
  const file = { isEmpty: true };
  const properties = {
    loadedName: "HelveticaNeue",
    differences: { 128: "Euro" },
    widths: {},
    defaultWidth: 600,
    composite: false,
    cMap: null,
    capHeight: 800,
    ascent: 900,
    descent: -200,
    fontMatrix: [1, 0, 0, 1, 0, 0],
    bbox: [0, 0, 1000, 1000],
    defaultEncoding: { 128: "Euro" },
    toUnicode: new IdentityToUnicodeMap([]),
    cidEncoding: "Identity-H",
    vertical: false,
    systemFontInfo: { guessFallback: false, css: "" },
    type: "CIDFontType2",
    subtype: "Type1",
    flags: 0,
    isSimulatedFlags: false,
  };
  const font = new Font("HelveticaNeue", file, properties);
  const mappedEuro = font.toFontChar[128];
  const expectedEuro = getGlyphsUnicode()["Euro"];
  if (mappedEuro !== expectedEuro) {
    throw new Error(`Expected Euro mapping (${expectedEuro}) but got (${mappedEuro})`);
  }
});
it("should update editor position without blocking UI when changing font size", async () => {
  const { AnnotationEditor } = await import("../../src/display/editor/editor.js");
  const { TestReporter } = await import("./testreporter.js");

  // Mock DOM elements and environment
  const mockDiv = {
    style: {},
    getBoundingClientRect: () => ({ left: 0, top: 0, right: 100, bottom: 100 }),
    focus: () => {},
  };

  // Create editor instance
  const editor = new AnnotationEditor({
    parent: { moveEditorInDOM: jest.fn() },
    uiManager: {},
    id: "test-editor",
    x: 10,
    y: 20,
  });

  // Mock moveInDOM method
  const mockMoveInDOM = jest.fn();
  editor.moveInDOM = mockMoveInDOM;

  // Simulate font size change triggering moveInDOM
  const initialPosition = { left: "10%", top: "20%" };
  const expectedPosition = { left: "20%", top: "30%" };

  // Test asynchronous update
  await new Promise(resolve => {
    mockMoveInDOM.mockImplementationOnce(() => {
      setTimeout(() => {
        mockDiv.style.left = expectedPosition.left;
        mockDiv.style.top = expectedPosition.top;
        resolve();
      }, 0);
    });

    editor.moveInDOM();
  });

  expect(mockDiv.style.left).toBe(expectedPosition.left);
  expect(mockDiv.style.top).toBe(expectedPosition.top);
});
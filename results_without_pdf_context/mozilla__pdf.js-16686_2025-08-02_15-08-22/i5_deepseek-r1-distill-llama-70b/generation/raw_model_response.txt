<think>
Okay, so I need to write a regression test for the issue where adding an SVG image with a blob URL doesn't work. The patch provided modifies the ImageManager class in tools.js. Let me think about how to approach this.

First, I should understand what the patch does. It looks like the original code used a FileReader to read the image as a data URL and created an Image object with a blob URL. But that didn't handle SVGs correctly because createImageBitmap doesn't support them. The patch changes this by using the FileReader's result directly as the SVG URL and sets the imageElement's src to that. It also combines the promises so that the imagePromise waits for both the image to load and the FileReader to finish.

So, the test needs to simulate adding an SVG image via a blob URL and check if it works correctly after the patch.

I'll start by creating a test SVG content. Maybe a simple SVG with a rectangle. Then, I'll create a Blob from this content and a URL using URL.createObjectURL.

Next, I'll import the ImageManager from the appropriate path. I'll create an instance of ImageManager and define the necessary data object with a filename and type set to 'image/svg+xml'.

I'll use the addImage method of ImageManager, passing the blob and the data object. This should trigger the code path modified by the patch.

After adding the image, I need to verify that the data object has the correct properties. Specifically, I expect data.bitmap to be an HTMLImageElement and data.isSvg to be true. Also, data.svgUrl should be set to the data URL of the SVG.

I should wrap this in an async function and use await since the addImage method is asynchronous. I'll also need to make sure that the test correctly handles any potential errors, but since the patch is supposed to fix the issue, I expect no errors.

Finally, I'll structure the test using Jest's it function, making sure to import all necessary modules dynamically to maintain compatibility with Node.js. I won't add any comments or explanations, just the code as per the instructions.

I think that's a solid plan. Now, I'll translate this into code, ensuring that each step is correctly implemented and that the test accurately reflects the expected behavior after the patch.
</think>

```javascript
it("should correctly add SVG images with blob URLs", async () => {
  const testSvg = `<svg width="100" height="100"><rect width="100" height="100" fill="red"/></svg>`;
  const blob = new Blob([testSvg], { type: 'image/svg+xml' });
  const url = URL.createObjectURL(blob);
  
  const { ImageManager } = await import("../../src/display/editor/tools.js");
  const imageManager = new ImageManager();
  const data = {
    filename: 'test.svg',
    type: 'image/svg+xml'
  };

  await imageManager.addImage(blob, data);
  
  expect(data.bitmap).toBeInstanceOf(Image);
  expect(data.isSvg).toBe(true);
  expect(data.svgUrl).toMatch(/^data:image\/svg\+xml/);
});
```
<think>
Okay, I need to write a regression test for the issue where adding an SVG image with a blob URL wasn't working. The patch was supposed to fix this by always using the data URL for SVGs to avoid CSP issues. 

First, I should understand the problem. Before the patch, when trying to add an SVG using a blob URL, it might have been causing a Content Security Policy violation because the code was trying to create an Object URL, which could be blocked. The patch changes this by using a data URL instead, which should bypass the CSP issue.

So, the test needs to simulate adding an SVG image via a blob URL and check if it works correctly after the patch. 

I'll start by setting up the test structure. I'll need to import the necessary modules. Since the test is in Node.js, I'll use dynamic imports for the required files. The main file to test is `tools.js`, which contains the `ImageManager` class.

In the test, I'll create a sample SVG content. A simple SVG with a rectangle should suffice. Then, I'll create a Blob from this content and a URL using `URL.createObjectURL()`. 

Next, I'll instantiate `ImageManager` and call the `get` method with this blob URL. The `get` method should handle the SVG correctly by using the data URL now.

I'll wrap this in a try-catch block. If the patch is correct, the `get` method should resolve without throwing an error. Before the patch, this might have thrown an error due to CSP issues, but after the patch, it should work.

I need to ensure that the test only tests the specific behavior. So, I'll check if the `get` method resolves and if the data has the correct properties, like `isSvg` being true.

I should also make sure the test is self-contained and doesn't rely on external dependencies beyond what's provided. Since the test is about CSP, it's crucial to simulate the environment correctly, but in Node.js, some of these might not be an issue. However, the test should still verify that the image is loaded as SVG without errors.

Finally, I'll structure the test as an async function using `it` from a testing framework, probably Jasmine, as that's what's in the imports. The test will import `ImageManager` and `Util` for any necessary utilities.

Putting it all together, the test creates an SVG blob, uses `ImageManager` to load it, and expects it to resolve successfully. This should fail before the patch and pass after, confirming the fix.
</think>

```javascript
it("should load SVG images using data URLs to avoid CSP issues", async () => {
  const { ImageManager } = await import("../../display/editor/tools.js");
  const { Util } = await import("../../shared/util.js");
  
  const svgContent = "<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100\" height=\"100\"><rect width=\"100\" height=\"100\" fill=\"red\"/></svg>";
  const blob = new Blob([svgContent], { type: "image/svg+xml" });
  const url = URL.createObjectURL(blob);
  
  const imageManager = new ImageManager();
  const data = await imageManager.get(url, blob);
  
  expect(data.isSvg).toBe(true);
});
```
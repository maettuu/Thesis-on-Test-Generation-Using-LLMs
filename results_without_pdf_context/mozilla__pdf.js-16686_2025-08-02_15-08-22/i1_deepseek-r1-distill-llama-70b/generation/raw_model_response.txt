<think>
Okay, I need to write a regression test for the issue where adding an SVG image with a blob URL doesn't work. The test should fail before the patch and pass after. Let me think about how to approach this.

First, I should look at the provided patch. The changes are in the ImageManager class, specifically in the #get method. The patch modifies how SVG images are handled. Before, it was using a dataUrlPromise and imagePromise, and it read the image as a data URL and created an object URL. After the patch, it uses a single imagePromise and sets the image source via a FileReader.

So the problem was that createImageBitmap doesn't work with SVGs, leading to the image not being added correctly. The patch changes the approach to correctly handle SVGs by using an Image element and reading the SVG as a data URL.

To test this, I need to simulate adding an SVG image using a blob URL. I'll create a test SVG, convert it into a Blob, and then use that as the image source. Then, I'll attempt to load it using the ImageManager and check if it's correctly added.

I'll set up a test case where I create a Blob with SVG content, create a URL for it, and pass it to the ImageManager's get method. Then, I'll check if the data.bitmap is correctly set, which would mean the image was loaded properly.

I need to import the necessary modules. The test file already imports several utilities, so I can use those. I'll also need to import the ImageManager from the correct path.

In the test, I'll create a sample SVG string, create a Blob, and generate a URL. Then, I'll call ImageManager.get with this URL. After some time (using setTimeout), I'll check if the bitmap is set. If it is, the test passes.

I should structure this as an async function and use await with promises. But since the ImageManager's get method is async, I'll need to handle the promises correctly. Alternatively, I can use event listeners or async/await within the test.

Wait, in the test, I can use async/await to make it cleaner. I'll create the Blob, get the URL, and then call ImageManager.get. Since get returns a promise, I can await it and then check the result.

So, putting it all together, the test will create an SVG blob, get the URL, pass it to ImageManager.get, and then assert that the bitmap is not null, indicating success.

I also need to ensure that the test is self-contained and doesn't rely on external files except those already imported. Since I'm generating the SVG in the test, that's fine.

Finally, I'll write the test as an it block, using the provided imports and the ImageManager class. The test should fail before the patch because the image wouldn't load, and pass after because the patch fixes the handling of SVGs.
</think>

```javascript
it("should correctly add SVG image with blob URL", async () => {
  const { ImageManager } = await import("../../src/display/editor/tools.js");
  const svgContent = `<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100"><rect x="10" y="10" width="80" height="80" fill="#ff0000"/></svg>`;
  const blob = new Blob([svgContent], { type: "image/svg+xml" });
  const url = URL.createObjectURL(blob);
  
  const manager = new ImageManager();
  const data = await manager.get(url, blob);
  
  expect(data?.bitmap).not.toBeNull();
});
```
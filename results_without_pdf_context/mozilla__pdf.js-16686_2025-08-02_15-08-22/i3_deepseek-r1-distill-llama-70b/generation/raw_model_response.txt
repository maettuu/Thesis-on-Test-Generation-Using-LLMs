<think>
Okay, I need to write a regression test for the issue where adding an SVG image with a blob URL doesn't work. The patch provided modifies the ImageManager class in tools.js. 

First, I should understand what the patch does. Looking at the patch, it seems that the way SVG images are handled has changed. Previously, it was using FileReader to read the SVG as a data URL and creating an image element. Now, it's using the same approach but perhaps fixing some race conditions or timing issues.

The test needs to fail before the patch and pass after. So, I'll write a test that attempts to add an SVG image using a blob URL and checks if it's correctly loaded.

I'll start by setting up the test environment. I'll create a sample SVG content. Then, I'll create a Blob from this content and get a blob URL. 

Next, I'll use the ImageManager to get the image data. I'll call getFromUrl with the blob URL. 

I'll need to wait for the image to load and check if the SVG URL is set correctly. Also, I'll verify that the image is recognized as SVG by checking the isSvg property.

I should structure the test with async/await to handle the promises correctly. I'll use Jest's expect statements to assert that the data is not null, isSvg is true, and the SVG URL matches the expected content.

I also need to make sure that the test is self-contained and only uses the provided imports. Since the test file already imports some modules, I can use them, but I might need to import others dynamically, like the ImageManager from tools.js.

I'll write the test inside an it block, describe the behavior, and ensure that all necessary variables are initialized properly. 

Finally, I'll make sure the test doesn't have any side effects and cleans up properly after execution, like revoking the blob URL.
</think>

it("should correctly handle SVG images with blob URLs", async () => {
  const svgContent = "<svg xmlns=\"http://www.w3.org/2000/svg\"><rect width=\"100\" height=\"100\" fill=\"red\"/></svg>";
  const blob = new Blob([svgContent], { type: "image/svg+xml" });
  const url = URL.createObjectURL(blob);
  
  const { ImageManager } = await import("../../src/display/editor/tools.js");
  const imageManager = new ImageManager();
  
  const data = await imageManager.getFromUrl(url);
  
  expect(data).not.toBeNull();
  expect(data.isSvg).toBe(true);
  expect(data.svgUrl).toMatch(svgContent);
  
  URL.revokeObjectURL(url);
});
<think>
Okay, I need to write a regression test for the issue where adding an SVG image with a blob URL doesn't work. The patch provided modifies the ImageManager class in tools.js. 

First, I should understand what the patch does. Before the patch, when trying to add an SVG image, it might not load correctly because createImageBitmap doesn't support SVGs. The patch introduces a FileReader to convert the SVG blob into a data URL and creates an Image element from it.

So, the test should check if after the patch, adding an SVG via a blob URL works. The test will likely fail before the patch because the image won't load, and pass after because the patch fixes it.

I'll structure the test using Jest. I'll import the necessary modules, create a test SVG blob, and use the ImageManager to load it. Then, I'll check if the data was loaded correctly.

I need to make sure the test is self-contained. I'll create an SVG string, convert it into a Blob, and then use the ImageManager's getFromFile method. After some time, I'll check if the bitmap is set, indicating the image loaded successfully.

I'll use async/await for promises and setTimeout to allow the image to load. The test expects that data.bitmap is not null after loading, which would be the case after the patch.
</think>

```javascript
it("should add SVG image with blob URL", async () => {
  const { ImageManager } = await import("../../src/display/editor/tools.js");
  
  // Create a test SVG
  const svgString = "<svg xmlns='http://www.w3.org/2000/svg' width='100' height='100'><rect width='100' height='100' fill='red'/></svg>";
  const svgBlob = new Blob([svgString], { type: "image/svg+xml" });
  
  // Create ImageManager instance
  const imageManager = new ImageManager();
  
  // Request the image
  const data = await imageManager.getFromFile(svgBlob);
  
  // Wait for the image to load
  await new Promise(resolve => setTimeout(resolve, 100));
  
  expect(data.bitmap).not.toBeNull();
});
```
<think>
Okay, I need to write a regression test for the issue where opening a PDF in Firefox shows Japanese vertical punctuation errors. The patch provided is supposed to fix this by using vertical presentation forms when a font is missing. 

First, I should understand the problem. The issue arises when a PDF uses a font that's missing, and the vertical punctuation marks (like 、。) aren't displayed correctly. The patch adds code to handle this by replacing certain characters with their vertical variants when the font is missing.

So, the test should check if, after the patch, these characters are correctly replaced. 

I'll start by creating a test case. The test will create a font that's missing and check if the vertical forms are used. 

I'll need to import the necessary modules. Since the test runs in Node.js, I'll use dynamic imports. The main modules needed are Font from fonts.js and getVerticalPresentationForm from fonts_utils.js.

Next, I'll create a mock font properties object. Since the font is missing, I'll set missingFile to true and vertical to true. I'll also set isType3Font to false because Type3 fonts handle this differently.

Then, I'll create a Font instance with these properties. The font should substitute the horizontal punctuation with vertical ones.

I'll test for specific characters: IDEOGRAPHIC COMMA (、) and IDEOGRAPHIC FULL STOP (。). Their Unicode code points are 0x3001 and 0x3002. The expected vertical forms are 0xfe11 and 0xfe12.

In the test, I'll call font._charToGlyph for each code point and check if the resulting fontChar uses the vertical form. If both checks pass, the test succeeds.

I need to make sure the test doesn't rely on any external files or PDFs, so it's self-contained. 

Putting it all together, the test will import the necessary modules, set up the font, and assert that the correct substitutions happen. This should ensure that the patch fixes the issue.
</think>

```javascript
it("should use vertical presentation forms for punctuation when font is missing", async () => {
  const { Font } = await import("../../src/core/fonts.js");
  const { getVerticalPresentationForm } = await import("../../src/core/fonts_utils.js");

  const fontProperties = {
    missingFile: true,
    vertical: true,
    isType3Font: false,
  };

  const font = new Font("Missing Font", null, fontProperties);

  const expected = {
    0x3001: String.fromCharCode(0xfe11),
    0x3002: String.fromCharCode(0xfe12),
  };

  // Test IDEOGRAPHIC COMMA (、)
  const glyph1 = font._charToGlyph(0x3001);
  // Test IDEOGRAPHIC FULL STOP (。)
  const glyph2 = font._charToGlyph(0x3002);

  assert.strictEqual(glyph1.fontChar, expected[0x3001]);
  assert.strictEqual(glyph2.fontChar, expected[0x3002]);
});
```
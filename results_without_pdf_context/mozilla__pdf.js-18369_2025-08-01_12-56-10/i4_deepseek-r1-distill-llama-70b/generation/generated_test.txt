it("should correctly display vertical Japanese punctuation", async () => {
  const { PDFDocument } = await import("../../src/display/api.js");
  const { TextLayer } = await import("../../src/display/text_layer.js");

  // Create a sample PDF with vertical Japanese punctuation
  const pdfContent = `
    %PDF-1.3
    1 0 obj
    <</Type /Catalog /Pages 2 0 R>>
    endobj
    2 0 obj
    <</Type /Pages /Kids [3 0 R] /Count 1>>
    endobj
    3 0 obj
    <</Type /Page /Parent 2 0 R /Resources 4 0 R /Contents 5 0 R>>
    endobj
    4 0 obj
    <</Font <</F1 6 0 R>>>
    endobj
    5 0 obj
    <</Length 7 0 R>>
    stream
    BT
    /F1 24 Tf
    (\\u3001\\u3002) Tj
    ET
    endstream
    endobj
    6 0 obj
    <</Type /Font /Subtype /Type1 /Name /F1 /BaseFont /Mincho>>
    endobj
    7 0 obj
    40
    endobj
  `;

  const pdfDoc = await PDFDocument.load(pdfContent, { cMapCache: new Map() });
  const page = await pdfDoc.getPage(1);
  const textLayer = new TextLayer({
    textLayerFactory: { createTextLayer: () => ({ textContent: [] }) },
    container: { scrollIntoView: () => {} }
  });
  const textContent = await page.getTextContent();
  await textLayer.renderLayer(page, textContent);

  const expectedText = "\u3001\u3002";
  const actualText = textContent.items.map(item => item.str).join("");

  expect(actualText).toBe(expectedText);
});
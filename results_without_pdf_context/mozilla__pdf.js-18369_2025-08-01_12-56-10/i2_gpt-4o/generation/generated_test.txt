it("should use vertical variant of a char when its in a missing vertical font", async () => {
  const { Font } = await import("../../src/core/fonts.js");
  const { getVerticalPresentationForm } = await import("../../src/core/fonts_utils.js");

  const properties = {
    loadedName: "TestFont",
    isType3Font: false,
    cssFontInfo: null,
    flags: 0,
    type: "CIDFontType0",
    subtype: "Type1C",
    differences: [],
    widths: [],
    defaultWidth: 1000,
    composite: false,
    cMap: null,
    capHeight: 700,
    ascent: 800,
    descent: -200,
    fontMatrix: [0.001, 0, 0, 0.001, 0, 0],
    bbox: [0, 0, 1000, 1000],
    defaultEncoding: [],
    toUnicode: new Map(),
    vertical: true,
    vmetrics: [],
    defaultVMetrics: [],
  };

  const font = new Font("TestFont", null, properties);
  font.missingFile = true;

  const charCode = 0x3001; // IDEOGRAPHIC COMMA
  const expected = String.fromCharCode(getVerticalPresentationForm()[charCode]);

  const glyph = font._charToGlyph(charCode);
  const actual = glyph.unicode;

  expect(actual).toBe(expected);
});
it("should render large JPX images in PDF", async () => {
  const examplePdfBuffer = new TextEncoder().encode(
    "%PDF-1.0\n" +
    "/Type /Catalog\n" +
    "/Pages /Pages\n" +
    "endobj\n" +
    "/Pages\n" +
    "<<\n" +
    "/Kids [ /Kid1 ]\n" +
    "/Count 1\n" +
    "/Type /Pages\n" +
    ">>\n" +
    "endobj\n" +
    "/Kid1\n" +
    "<<\n" +
    "/Type /Page\n" +
    "/Parent /Pages\n" +
    "/Resources\n" +
    "<<\n" +
    "/XObject /Im1\n" +
    ">>\n" +
    "/Contents\n" +
    "<<\n" +
    "/Length 7\n" +
    ">>\n" +
    "stream\n" +
    "BT\n" +
    "  /Name /Im1\n" +
    "  /Subtype /Image\n" +
    "  /Filter /JPXDecode\n" +
    "  /Width 100\n" +
    "  /Height 100\n" +
    "  /ColorSpace /DeviceRGB\n" +
    "  /BitsPerComponent 8\n" +
    "  /Length 7\n" +
    ">>\n" +
    "stream\n" +
    "JP2\n" +
    "endstream\n" +
    "endobj\n" +
    "endobj\n"
  );

  const xref = new XRefMock();
  const stream = new StringStream(examplePdfBuffer);

  try {
    await xref.load(stream, {
      start: 0,
      end: examplePdfBuffer.length,
    });
  } catch (e) {
    console.error("Error loading PDF", e);
  }

  const pdfDocument = await PDFDocumentLoadingTask.create(xref).promise;

  const firstPagePromise = pdfDocument.getPage(1).promise;
  const page = await firstPagePromise;

  const imagePromise = page.drawImageToImage();
  const image = await imagePromise;

  expect(image).not.toBeNull();
});
it("should render large scanned images in PDF", async () => {
  const { PDFDocument } = await import("../../web/pdf_document.js");
  const { Worker } = await import("../../build/pdfjs-worker.js");

  const examplePdfUrl = "../../src/core/example.pdf";
  const exampleFile = new File([new Blob()], "example.pdf");
  const exampleFileUrl = URL.createObjectURL(exampleFile);

  const worker = new Worker("pdfjs-worker.js");
  const pdf = await PDFDocument.load(exampleFileUrl, { worker });
  const page = await pdf.getPage(1);
  const viewport = page.getViewport({ scale: 1 });
  const canvas = document.createElement('canvas');
  canvas.width = viewport.width;
  canvas.height = viewport.height;

  const renderTask = page.render({
    canvasContext: canvas.getContext('2d'),
    viewport,
  });

  await renderTask.promise;

  const ctx = canvas.getContext('2d');
  const imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);
  const pixels = imgData.data;

  const expectedNonTransparent = true;
  const actualNonTransparent = pixels.some((value) => value !== 0);

  expect(actualNonTransparent).toBe(expectedNonTransparent);
});
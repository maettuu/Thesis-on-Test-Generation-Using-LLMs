<think>
Okay, I need to write a regression test for the numberToString function in pdf.js. The issue is that when the input is null, it returns "0", which is incorrect. The patch adds an assertion to ensure that the function is called with a number, so when null is passed, it should throw an error.

First, I'll structure the test using Jest. The test should fail before the patch because null is converted to 0, and after the patch, passing null should trigger the assertion and throw an error.

I'll import the necessary modules. Since the function is in core_utils.js, I'll import that. Also, I need to handle the PDFJSDev environment correctly. In the test, I'll set PDFJSDev to test mode to enable the assertion.

In the test, I'll call numberToString with null and expect it to throw an error. Before the patch, this didn't happen, so the test would fail. After the patch, the assertion is in place, so the test should pass.

I'll use async/await for the import and wrap the test in an async function. I'll structure the test to check if the function throws the expected error when null is passed.

I need to make sure the test is self-contained and only tests this specific behavior. I'll also ensure that the imports are correct and that no new dependencies are added.

So, putting it all together, the test will import the function, set up the environment, call the function with null, and expect an error. This should validate that the patch correctly handles the null case.
</think>

```javascript
it("should throw an error when numberToString is called with null", async () => {
  const { numberToString } = await import("../../src/core/core_utils.js");
  const originalPDFJSDev = global.PDFJSDev;
  global.PDFJSDev = { test: () => true }; // Enable testing environment

  try {
    await expect(numberToString(null)).rejects.toThrow();
  } finally {
    global.PDFJSDev = originalPDFJSDev;
  }
});
```
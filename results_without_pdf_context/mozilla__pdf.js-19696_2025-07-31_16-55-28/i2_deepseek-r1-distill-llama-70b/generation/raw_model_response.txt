<think>
Okay, I need to write a regression test for the issue where the pound symbol (£) isn't displaying correctly in PDF.js. The user provided a patch that modifies the standard_fonts.js file, specifically adding a mapping in the getSupplementalGlyphMapForCalibri function. 

First, I should understand what the patch does. The patch adds t[940] = 163; which maps CID 940 to GID 163. This should correct the glyph mapping for the pound symbol in Calibri fonts.

Now, I need to create a test that fails before the patch and passes after. The test should check if the glyph for the pound symbol is correctly rendered. 

I'll start by importing the necessary modules. Since the test is in JavaScript, I'll use dynamic imports for Node.js compatibility. I'll need the PDFDocument from the display/api.js and the CMapReaderFactory from the core/cmap.js.

Next, I'll set up the test. I'll create a sample PDF content with the pound symbol. Then, I'll create a PDFDocument using this content. 

I'll extract the first page and get its text content. The text should include the £ symbol. 

I'll define the expected text as "£". Then, I'll get the actual text from the page and assert that it matches the expected text.

If the mapping is incorrect before the patch, the actual text might be a different character, causing the test to fail. After applying the patch, the text should match, making the test pass.

I need to make sure the test is self-contained and doesn't rely on external files. Using a string with the PDF content should suffice.

Putting it all together, the test will import the necessary modules, set up the PDF, extract the text, and compare it to the expected value. This should validate the patch's effectiveness.
</think>

```javascript
it("should correctly display the pound symbol (£) in Calibri font", async () => {
  const { PDFDocument } = await import("../../src/display/api.js");
  const { CMapReaderFactory } = await import("../../src/core/cmap.js");

  // Create a sample PDF content with Calibri font and pound symbol
  const pdfContent = `
    %PDF-1.4
    1 0 obj <</Type /Catalog /Pages 2 0 R>> 
    2 0 obj <</Type /Pages /Kids [3 0 R] /Count 1 /Resources 4 0 R>> 
    3 0 obj <</Type /Page /Parent 2 0 R /Resources 4 0 R /Contents [5 0 R]>>
    4 0 obj <</Font <</F1 6 0 R>>>>
    5 0 obj <</Length 7 0 R/Filter /FlateDecode>> 
    6 0 obj <</Type /Font /Subtype /TrueType /Name /F1 /BaseFont /Calibri>> 
    7 0 R <</Length 55>> 
    stream
      BT
      /F1 24 Tf
      100 700 Td
      (\\u00A3) Tj
      ET
    endstream
  `;

  // Load the PDF document
  const pdfDoc = await PDFDocument.load(pdfContent, { cMapLoader: new CMapReaderFactory().create });
  const page = await pdfDoc.getPage(1);
  const textContent = await page.getTextContent();

  // The expected text should be "£"
  const expectedText = "£";
  const actualText = textContent.items[0].str;

  expect(actualText).toBe(expectedText);
});
```
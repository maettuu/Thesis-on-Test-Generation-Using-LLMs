it("should correctly render symbol in PDF", async () => {
  const { TestPdfsServer } = await import("./test_utils.js");
  const { getDocument } = await import("../../src/display/api.js");
  const { CMAP_URL, TEST_PDFS_PATH } = await import("./test_utils.js");

  let server;
  beforeAll(async () => {
    server = await TestPdfsServer.start();
  });

  afterAll(async () => {
    await server.stop();
  });

  const pdfPath = `${TEST_PDFS_PATH}/PoundSymbol.pdf`;
  const loadingTask = getDocument({
    url: pdfPath,
    transport: new PDFDataRangeTransport(
      `${server.url}${CMAP_URL}?file=${encodeURIComponent(pdfPath)}`
    ),
  });

  const pdf = await PDFDocumentProxy.create(loadingTask);
  const page = await pdf.getPage(1);
  const textContent = await page.getTextContent();
  const text = textContent.items.map(item => item.str).join("");

  expect(text).toContain("£");
});


it("should correctly render symbol in PDF", async () => {
  const { TestPdfsServer } = await import("./test_utils.js");
  const { getDocument } = await import("../../src/display/api.js");
  const { CMAP_URL, TEST_PDFS_PATH } = await import("./test_utils.js");

  let server;
  beforeAll(async () => {
    server = await TestPdfsServer.start();
  });

  afterAll(async () => {
    await server.stop();
  });

  const pdfPath = `${TEST_PDFS_PATH}/PoundSymbol.pdf`;
  const loadingTask = getDocument({
    url: pdfPath,
    transport: new PDFDataRangeTransport(
      `${server.url}${CMAP_URL}?file=${encodeURIComponent(pdfPath)}`
    ),
  });

  const pdf = await PDFDocumentProxy.create(loadingTask);
  const page = await pdf.getPage(1);
  const textContent = await page.getTextContent();
  const text = textContent.items.map(item => item.str).join("");

  expect(text).toContain("£");
});
[2025-07-31 22:38:38] MARKER   : =============== Running Payload #19356 ===============
[2025-07-31 22:38:38] MARKER   : ================ Preparing Environment ===============
[2025-07-31 22:38:38] WARNING  : No GitHub issue found
[2025-07-31 22:38:39] SUCCESS  : Linked Bugzilla issue #1942064 fetched successfully
[2025-07-31 22:38:42] WARNING  : No PDF file available
[2025-07-31 22:38:42] INFO     : Cloning repository https://github.com/mozilla/pdf.js.git
[2025-07-31 22:38:52] SUCCESS  : Cloning successful
[2025-07-31 22:38:52] INFO     : Fetching test file for injection...
[2025-07-31 22:38:52] SUCCESS  : Test file test/unit/pdf.image_decoders_spec.js fetched successfully
[2025-07-31 22:38:54] WARNING  : No existing image 'image_mozilla__pdf.js-19356' found
[2025-07-31 22:38:54] INFO     : Building from scratch based on commit 01d542eee5a207432ac10986929e1aa9c1e34a78
[2025-07-31 22:44:25] SUCCESS  : Docker image 'image_mozilla__pdf.js-19356' built successfully
[2025-07-31 22:44:25] MARKER   : ================ Preparation Complete ================
[2025-07-31 22:44:25] MARKER   : Attempt 1 with model gpt-4o
[2025-07-31 22:44:25] MARKER   : =============== Test Generation Started ==============
[2025-07-31 22:44:25] MARKER   : Running test in pre-PR codebase...
[2025-07-31 22:44:25] INFO     : Creating container...
[2025-07-31 22:44:31] SUCCESS  : Container 6f5470856775 started
[2025-07-31 22:44:31] SUCCESS  : File test_patch.diff added to container successfully
[2025-07-31 22:44:31] SUCCESS  : Patch file test_patch.diff applied successfully
[2025-07-31 22:44:31] INFO     : Running test command...
[2025-07-31 22:45:00] SUCCESS  : Test command executed
[2025-07-31 22:45:00] FAIL     : Test evaluated as failed
[2025-07-31 22:45:00] WARNING  : Stopping and removing container...
[2025-07-31 22:45:14] SUCCESS  : Container stopped and removed
[2025-07-31 22:45:14] MARKER   : Running test in post-PR codebase...
[2025-07-31 22:45:14] INFO     : Creating container...
[2025-07-31 22:45:15] SUCCESS  : Container c601bc229103 started
[2025-07-31 22:45:15] SUCCESS  : File test_patch.diff added to container successfully
[2025-07-31 22:45:16] SUCCESS  : Patch file test_patch.diff applied successfully
[2025-07-31 22:45:16] SUCCESS  : File golden_code_patch.diff added to container successfully
[2025-07-31 22:45:16] SUCCESS  : Patch file golden_code_patch.diff applied successfully
[2025-07-31 22:45:16] INFO     : Running test command...
[2025-07-31 22:45:45] SUCCESS  : Test command executed
[2025-07-31 22:45:45] INFO     : Test evaluated as passed
[2025-07-31 22:45:45] WARNING  : Stopping and removing container...
[2025-07-31 22:45:55] SUCCESS  : Container stopped and removed
[2025-07-31 22:45:55] SUCCESS  : Fail-to-Pass test generated
[2025-07-31 22:45:55] SUCCESS  : Suggested test for PR:


Hi! ðŸ¤– The test below is automatically generated and serves as a regression test for this PR because it:
- passes in the new codebase after the PR, and
- fails in the old codebase before the PR.

```javascript
it("should ignore EXIF orientation by replacing EXIF block data", async () => {
  const { JpegImage } = await import("../../src/core/jpg.js");
  // Construct a minimal JPEG file:
  // SOI (2 bytes) + APP1 marker (2 bytes) + APP1 length (2 bytes) + APP1 data (14 bytes) +
  // SOF0 marker (2 bytes) + SOF0 length (2 bytes) + SOF0 block (15 bytes) + EOI (2 bytes) = 41 bytes.
  const jpegData = new Uint8Array(41);
  let offset = 0;
  // SOI
  jpegData[offset++] = 0xff;
  jpegData[offset++] = 0xd8;
  // APP1 marker (0xffe1)
  jpegData[offset++] = 0xff;
  jpegData[offset++] = 0xe1;
  // APP1 block length: 0x0010 (16) => 14 bytes of data follow.
  jpegData[offset++] = 0x00;
  jpegData[offset++] = 0x10;
  // APP1 data: "Exif\0\0" followed by 8 non-zero bytes.
  jpegData[offset++] = 0x45; // E
  jpegData[offset++] = 0x78; // x
  jpegData[offset++] = 0x69; // i
  jpegData[offset++] = 0x66; // f
  jpegData[offset++] = 0x00;
  jpegData[offset++] = 0x00;
  jpegData[offset++] = 0x01;
  jpegData[offset++] = 0x02;
  jpegData[offset++] = 0x03;
  jpegData[offset++] = 0x04;
  jpegData[offset++] = 0x05;
  jpegData[offset++] = 0x06;
  jpegData[offset++] = 0x07;
  jpegData[offset++] = 0x08;
  // SOF0 marker (0xffc0)
  jpegData[offset++] = 0xff;
  jpegData[offset++] = 0xc0;
  // SOF0 block length: 0x0011 (17) -> 15 bytes follow.
  jpegData[offset++] = 0x00;
  jpegData[offset++] = 0x11;
  // SOF0 block: precision, height, width, numComponents, and dummy component specs.
  jpegData[offset++] = 0x08; // precision
  jpegData[offset++] = 0x00; jpegData[offset++] = 0x10; // height = 16
  jpegData[offset++] = 0x00; jpegData[offset++] = 0x10; // width = 16
  jpegData[offset++] = 0x03; // numComponents = 3
  // Component 1
  jpegData[offset++] = 0x01; jpegData[offset++] = 0x11; jpegData[offset++] = 0x00;
  // Component 2
  jpegData[offset++] = 0x02; jpegData[offset++] = 0x11; jpegData[offset++] = 0x00;
  // Component 3
  jpegData[offset++] = 0x03; jpegData[offset++] = 0x11; jpegData[offset++] = 0x00;
  // EOI marker
  jpegData[offset++] = 0xff;
  jpegData[offset++] = 0xd9;
  // Process the JPEG data.
  const result = JpegImage.canUseImageDecoder(jpegData);
  if (!result) {
    throw new Error("JPEG image not usable.");
  }
  // The APP1 data starts at offset 6 and is 14 bytes long.
  // The first 6 bytes ("Exif\0\0") should remain intact.
  const expectedHeader = [0x45, 0x78, 0x69, 0x66, 0x00, 0x00];
  for (let i = 0; i < 6; i++) {
    if (jpegData[6 + i] !== expectedHeader[i]) {
      throw new Error("APP1 header modified incorrectly");
    }
  }
  // The remaining 8 bytes should have been replaced with zeros.
  for (let i = 6; i < 14; i++) {
    if (jpegData[6 + i] !== 0x00) {
      throw new Error("APP1 data not cleared as expected");
    }
  }
});
```

If you find this regression test useful, feel free to insert it to your test suite.
Our automated pipeline inserted the test in the `test/unit/pdf.image_decoders_spec.js` file before running it.

This is part of our research at the [ZEST](https://www.ifi.uzh.ch/en/zest.html) group of University of Zurich in collaboration with [Mozilla](https://www.mozilla.org).
If you have any suggestions, questions, or simply want to learn more, feel free to contact us at konstantinos.kitsios@uzh.ch and mcastelluccio@mozilla.com.

[2025-07-31 22:45:55] MARKER   : =============== Test Generation Finished =============
[2025-07-31 22:45:55] SUCCESS  : Attempt 1 with model gpt-4o finished successfully
[2025-07-31 22:45:55] SUCCESS  : Test file copied to generated_tests/pdf_js_19356_i1_gpt-4o.txt
[2025-07-31 22:45:55] INFO     : Environment ready â€“ preparation skipped
[2025-07-31 22:45:55] MARKER   : Attempt 1 with model llama-3.3-70b-versatile
[2025-07-31 22:45:55] MARKER   : =============== Test Generation Started ==============
[2025-07-31 22:45:55] MARKER   : Running test in pre-PR codebase...
[2025-07-31 22:45:55] INFO     : Creating container...
[2025-07-31 22:45:57] SUCCESS  : Container 63fce799b531 started
[2025-07-31 22:45:57] SUCCESS  : File test_patch.diff added to container successfully
[2025-07-31 22:45:57] SUCCESS  : Patch file test_patch.diff applied successfully
[2025-07-31 22:45:57] INFO     : Running test command...
[2025-07-31 22:46:24] SUCCESS  : Test command executed
[2025-07-31 22:46:24] FAIL     : Test evaluated as failed
[2025-07-31 22:46:24] WARNING  : Stopping and removing container...
[2025-07-31 22:46:35] SUCCESS  : Container stopped and removed
[2025-07-31 22:46:35] MARKER   : Running test in post-PR codebase...
[2025-07-31 22:46:35] INFO     : Creating container...
[2025-07-31 22:46:36] SUCCESS  : Container 6de8a8671fd7 started
[2025-07-31 22:46:37] SUCCESS  : File test_patch.diff added to container successfully
[2025-07-31 22:46:37] SUCCESS  : Patch file test_patch.diff applied successfully
[2025-07-31 22:46:37] SUCCESS  : File golden_code_patch.diff added to container successfully
[2025-07-31 22:46:37] SUCCESS  : Patch file golden_code_patch.diff applied successfully
[2025-07-31 22:46:37] INFO     : Running test command...
[2025-07-31 22:47:04] SUCCESS  : Test command executed
[2025-07-31 22:47:04] INFO     : Test evaluated as passed
[2025-07-31 22:47:04] WARNING  : Stopping and removing container...
[2025-07-31 22:47:15] SUCCESS  : Container stopped and removed
[2025-07-31 22:47:15] SUCCESS  : Fail-to-Pass test generated
[2025-07-31 22:47:15] SUCCESS  : Suggested test for PR:


Hi! ðŸ¤– The test below is automatically generated and serves as a regression test for this PR because it:
- passes in the new codebase after the PR, and
- fails in the old codebase before the PR.

```javascript
it("should ignore EXIF orientation by replacing EXIF block data", async () => {
  const { JpegImage } = await import("../../src/core/jpg.js");
  // Construct a minimal JPEG file:
  // SOI (2 bytes) + APP1 marker (2 bytes) + APP1 length (2 bytes) + APP1 data (14 bytes) +
  // SOF0 marker (2 bytes) + SOF0 length (2 bytes) + SOF0 block (15 bytes) + EOI (2 bytes) = 41 bytes.
  const jpegData = new Uint8Array(41);
  let offset = 0;
  // SOI
  jpegData[offset++] = 0xff;
  jpegData[offset++] = 0xd8;
  // APP1 marker (0xffe1)
  jpegData[offset++] = 0xff;
  jpegData[offset++] = 0xe1;
  // APP1 block length: 0x0010 (16) => 14 bytes of data follow.
  jpegData[offset++] = 0x00;
  jpegData[offset++] = 0x10;
  // APP1 data: "Exif\0\0" followed by 8 non-zero bytes.
  jpegData[offset++] = 0x45; // E
  jpegData[offset++] = 0x78; // x
  jpegData[offset++] = 0x69; // i
  jpegData[offset++] = 0x66; // f
  jpegData[offset++] = 0x00;
  jpegData[offset++] = 0x00;
  jpegData[offset++] = 0x01;
  jpegData[offset++] = 0x02;
  jpegData[offset++] = 0x03;
  jpegData[offset++] = 0x04;
  jpegData[offset++] = 0x05;
  jpegData[offset++] = 0x06;
  jpegData[offset++] = 0x07;
  jpegData[offset++] = 0x08;
  // SOF0 marker (0xffc0)
  jpegData[offset++] = 0xff;
  jpegData[offset++] = 0xc0;
  // SOF0 block length: 0x0011 (17) -> 15 bytes follow.
  jpegData[offset++] = 0x00;
  jpegData[offset++] = 0x11;
  // SOF0 block: precision, height, width, numComponents, and dummy component specs.
  jpegData[offset++] = 0x08; // precision
  jpegData[offset++] = 0x00; jpegData[offset++] = 0x10; // height = 16
  jpegData[offset++] = 0x00; jpegData[offset++] = 0x10; // width = 16
  jpegData[offset++] = 0x03; // numComponents = 3
  // Component 1
  jpegData[offset++] = 0x01; jpegData[offset++] = 0x11; jpegData[offset++] = 0x00;
  // Component 2
  jpegData[offset++] = 0x02; jpegData[offset++] = 0x11; jpegData[offset++] = 0x00;
  // Component 3
  jpegData[offset++] = 0x03; jpegData[offset++] = 0x11; jpegData[offset++] = 0x00;
  // EOI marker
  jpegData[offset++] = 0xff;
  jpegData[offset++] = 0xd9;
  // Process the JPEG data.
  const result = JpegImage.canUseImageDecoder(jpegData);
  if (!result) {
    throw new Error("JPEG image not usable.");
  }
  // The APP1 data starts at offset 6 and is 14 bytes long.
  // The first 6 bytes ("Exif\0\0") should remain intact.
  const expectedHeader = [0x45, 0x78, 0x69, 0x66, 0x00, 0x00];
  for (let i = 0; i < 6; i++) {
    if (jpegData[6 + i] !== expectedHeader[i]) {
      throw new Error("APP1 header modified incorrectly");
    }
  }
  // The remaining 8 bytes should have been replaced with zeros.
  for (let i = 6; i < 14; i++) {
    if (jpegData[6 + i] !== 0x00) {
      throw new Error("APP1 data not cleared as expected");
    }
  }
});
```

If you find this regression test useful, feel free to insert it to your test suite.
Our automated pipeline inserted the test in the `test/unit/pdf.image_decoders_spec.js` file before running it.

This is part of our research at the [ZEST](https://www.ifi.uzh.ch/en/zest.html) group of University of Zurich in collaboration with [Mozilla](https://www.mozilla.org).
If you have any suggestions, questions, or simply want to learn more, feel free to contact us at konstantinos.kitsios@uzh.ch and mcastelluccio@mozilla.com.

[2025-07-31 22:47:15] MARKER   : =============== Test Generation Finished =============
[2025-07-31 22:47:15] SUCCESS  : Attempt 1 with model llama-3.3-70b-versatile finished successfully
[2025-07-31 22:47:15] SUCCESS  : Test file copied to generated_tests/pdf_js_19356_i1_llama-3.3-70b-versatile.txt
[2025-07-31 22:47:15] INFO     : Environment ready â€“ preparation skipped
[2025-07-31 22:47:15] MARKER   : Attempt 1 with model deepseek-r1-distill-llama-70b
[2025-07-31 22:47:15] MARKER   : =============== Test Generation Started ==============
[2025-07-31 22:47:15] MARKER   : Running test in pre-PR codebase...
[2025-07-31 22:47:15] INFO     : Creating container...
[2025-07-31 22:47:17] SUCCESS  : Container c0148af1a590 started
[2025-07-31 22:47:17] SUCCESS  : File test_patch.diff added to container successfully
[2025-07-31 22:47:17] SUCCESS  : Patch file test_patch.diff applied successfully
[2025-07-31 22:47:17] INFO     : Running test command...
[2025-07-31 22:47:46] SUCCESS  : Test command executed
[2025-07-31 22:47:46] FAIL     : Test evaluated as failed
[2025-07-31 22:47:46] WARNING  : Stopping and removing container...
[2025-07-31 22:47:57] SUCCESS  : Container stopped and removed
[2025-07-31 22:47:57] MARKER   : Running test in post-PR codebase...
[2025-07-31 22:47:57] INFO     : Creating container...
[2025-07-31 22:47:59] SUCCESS  : Container 9cdc4a853a86 started
[2025-07-31 22:47:59] SUCCESS  : File test_patch.diff added to container successfully
[2025-07-31 22:47:59] SUCCESS  : Patch file test_patch.diff applied successfully
[2025-07-31 22:47:59] SUCCESS  : File golden_code_patch.diff added to container successfully
[2025-07-31 22:47:59] SUCCESS  : Patch file golden_code_patch.diff applied successfully
[2025-07-31 22:47:59] INFO     : Running test command...
[2025-07-31 22:48:27] SUCCESS  : Test command executed
[2025-07-31 22:48:27] INFO     : Test evaluated as passed
[2025-07-31 22:48:27] WARNING  : Stopping and removing container...
[2025-07-31 22:48:38] SUCCESS  : Container stopped and removed
[2025-07-31 22:48:38] SUCCESS  : Fail-to-Pass test generated
[2025-07-31 22:48:38] SUCCESS  : Suggested test for PR:


Hi! ðŸ¤– The test below is automatically generated and serves as a regression test for this PR because it:
- passes in the new codebase after the PR, and
- fails in the old codebase before the PR.

```javascript
it("should ignore EXIF orientation by replacing EXIF block data", async () => {
  const { JpegImage } = await import("../../src/core/jpg.js");
  // Construct a minimal JPEG file:
  // SOI (2 bytes) + APP1 marker (2 bytes) + APP1 length (2 bytes) + APP1 data (14 bytes) +
  // SOF0 marker (2 bytes) + SOF0 length (2 bytes) + SOF0 block (15 bytes) + EOI (2 bytes) = 41 bytes.
  const jpegData = new Uint8Array(41);
  let offset = 0;
  // SOI
  jpegData[offset++] = 0xff;
  jpegData[offset++] = 0xd8;
  // APP1 marker (0xffe1)
  jpegData[offset++] = 0xff;
  jpegData[offset++] = 0xe1;
  // APP1 block length: 0x0010 (16) => 14 bytes of data follow.
  jpegData[offset++] = 0x00;
  jpegData[offset++] = 0x10;
  // APP1 data: "Exif\0\0" followed by 8 non-zero bytes.
  jpegData[offset++] = 0x45; // E
  jpegData[offset++] = 0x78; // x
  jpegData[offset++] = 0x69; // i
  jpegData[offset++] = 0x66; // f
  jpegData[offset++] = 0x00;
  jpegData[offset++] = 0x00;
  jpegData[offset++] = 0x01;
  jpegData[offset++] = 0x02;
  jpegData[offset++] = 0x03;
  jpegData[offset++] = 0x04;
  jpegData[offset++] = 0x05;
  jpegData[offset++] = 0x06;
  jpegData[offset++] = 0x07;
  jpegData[offset++] = 0x08;
  // SOF0 marker (0xffc0)
  jpegData[offset++] = 0xff;
  jpegData[offset++] = 0xc0;
  // SOF0 block length: 0x0011 (17) -> 15 bytes follow.
  jpegData[offset++] = 0x00;
  jpegData[offset++] = 0x11;
  // SOF0 block: precision, height, width, numComponents, and dummy component specs.
  jpegData[offset++] = 0x08; // precision
  jpegData[offset++] = 0x00; jpegData[offset++] = 0x10; // height = 16
  jpegData[offset++] = 0x00; jpegData[offset++] = 0x10; // width = 16
  jpegData[offset++] = 0x03; // numComponents = 3
  // Component 1
  jpegData[offset++] = 0x01; jpegData[offset++] = 0x11; jpegData[offset++] = 0x00;
  // Component 2
  jpegData[offset++] = 0x02; jpegData[offset++] = 0x11; jpegData[offset++] = 0x00;
  // Component 3
  jpegData[offset++] = 0x03; jpegData[offset++] = 0x11; jpegData[offset++] = 0x00;
  // EOI marker
  jpegData[offset++] = 0xff;
  jpegData[offset++] = 0xd9;
  // Process the JPEG data.
  const result = JpegImage.canUseImageDecoder(jpegData);
  if (!result) {
    throw new Error("JPEG image not usable.");
  }
  // The APP1 data starts at offset 6 and is 14 bytes long.
  // The first 6 bytes ("Exif\0\0") should remain intact.
  const expectedHeader = [0x45, 0x78, 0x69, 0x66, 0x00, 0x00];
  for (let i = 0; i < 6; i++) {
    if (jpegData[6 + i] !== expectedHeader[i]) {
      throw new Error("APP1 header modified incorrectly");
    }
  }
  // The remaining 8 bytes should have been replaced with zeros.
  for (let i = 6; i < 14; i++) {
    if (jpegData[6 + i] !== 0x00) {
      throw new Error("APP1 data not cleared as expected");
    }
  }
});
```

If you find this regression test useful, feel free to insert it to your test suite.
Our automated pipeline inserted the test in the `test/unit/pdf.image_decoders_spec.js` file before running it.

This is part of our research at the [ZEST](https://www.ifi.uzh.ch/en/zest.html) group of University of Zurich in collaboration with [Mozilla](https://www.mozilla.org).
If you have any suggestions, questions, or simply want to learn more, feel free to contact us at konstantinos.kitsios@uzh.ch and mcastelluccio@mozilla.com.

[2025-07-31 22:48:38] MARKER   : =============== Test Generation Finished =============
[2025-07-31 22:48:38] SUCCESS  : Attempt 1 with model deepseek-r1-distill-llama-70b finished successfully
[2025-07-31 22:48:38] SUCCESS  : Test file copied to generated_tests/pdf_js_19356_i1_deepseek-r1-distill-llama-70b.txt
[2025-07-31 22:48:38] SUCCESS  : MOCK response fetched successfully
[2025-07-31 22:48:38] INFO     : Environment ready â€“ preparation skipped
[2025-07-31 22:48:38] MARKER   : Attempt 1 with model MOCK
[2025-07-31 22:48:38] MARKER   : =============== Test Generation Started ==============
[2025-07-31 22:48:38] MARKER   : Running test in pre-PR codebase...
[2025-07-31 22:48:38] INFO     : Creating container...
[2025-07-31 22:48:40] SUCCESS  : Container 17429cc5da17 started
[2025-07-31 22:48:40] SUCCESS  : File test_patch.diff added to container successfully
[2025-07-31 22:48:40] SUCCESS  : Patch file test_patch.diff applied successfully
[2025-07-31 22:48:40] INFO     : Running test command...
[2025-07-31 22:49:09] SUCCESS  : Test command executed
[2025-07-31 22:49:09] FAIL     : Test evaluated as failed
[2025-07-31 22:49:09] WARNING  : Stopping and removing container...
[2025-07-31 22:49:21] SUCCESS  : Container stopped and removed
[2025-07-31 22:49:21] MARKER   : Running test in post-PR codebase...
[2025-07-31 22:49:21] INFO     : Creating container...
[2025-07-31 22:49:23] SUCCESS  : Container f3c37c847632 started
[2025-07-31 22:49:23] SUCCESS  : File test_patch.diff added to container successfully
[2025-07-31 22:49:23] SUCCESS  : Patch file test_patch.diff applied successfully
[2025-07-31 22:49:23] SUCCESS  : File golden_code_patch.diff added to container successfully
[2025-07-31 22:49:23] SUCCESS  : Patch file golden_code_patch.diff applied successfully
[2025-07-31 22:49:23] INFO     : Running test command...
[2025-07-31 22:49:51] SUCCESS  : Test command executed
[2025-07-31 22:49:51] INFO     : Test evaluated as passed
[2025-07-31 22:49:51] WARNING  : Stopping and removing container...
[2025-07-31 22:50:02] SUCCESS  : Container stopped and removed
[2025-07-31 22:50:02] SUCCESS  : Fail-to-Pass test generated
[2025-07-31 22:50:02] SUCCESS  : Suggested test for PR:


Hi! ðŸ¤– The test below is automatically generated and serves as a regression test for this PR because it:
- passes in the new codebase after the PR, and
- fails in the old codebase before the PR.

```javascript
it("should ignore EXIF orientation by replacing EXIF block data", async () => {
  const { JpegImage } = await import("../../src/core/jpg.js");
  // Construct a minimal JPEG file:
  // SOI (2 bytes) + APP1 marker (2 bytes) + APP1 length (2 bytes) + APP1 data (14 bytes) +
  // SOF0 marker (2 bytes) + SOF0 length (2 bytes) + SOF0 block (15 bytes) + EOI (2 bytes) = 41 bytes.
  const jpegData = new Uint8Array(41);
  let offset = 0;
  // SOI
  jpegData[offset++] = 0xff;
  jpegData[offset++] = 0xd8;
  // APP1 marker (0xffe1)
  jpegData[offset++] = 0xff;
  jpegData[offset++] = 0xe1;
  // APP1 block length: 0x0010 (16) => 14 bytes of data follow.
  jpegData[offset++] = 0x00;
  jpegData[offset++] = 0x10;
  // APP1 data: "Exif\0\0" followed by 8 non-zero bytes.
  jpegData[offset++] = 0x45; // E
  jpegData[offset++] = 0x78; // x
  jpegData[offset++] = 0x69; // i
  jpegData[offset++] = 0x66; // f
  jpegData[offset++] = 0x00;
  jpegData[offset++] = 0x00;
  jpegData[offset++] = 0x01;
  jpegData[offset++] = 0x02;
  jpegData[offset++] = 0x03;
  jpegData[offset++] = 0x04;
  jpegData[offset++] = 0x05;
  jpegData[offset++] = 0x06;
  jpegData[offset++] = 0x07;
  jpegData[offset++] = 0x08;
  // SOF0 marker (0xffc0)
  jpegData[offset++] = 0xff;
  jpegData[offset++] = 0xc0;
  // SOF0 block length: 0x0011 (17) -> 15 bytes follow.
  jpegData[offset++] = 0x00;
  jpegData[offset++] = 0x11;
  // SOF0 block: precision, height, width, numComponents, and dummy component specs.
  jpegData[offset++] = 0x08; // precision
  jpegData[offset++] = 0x00; jpegData[offset++] = 0x10; // height = 16
  jpegData[offset++] = 0x00; jpegData[offset++] = 0x10; // width = 16
  jpegData[offset++] = 0x03; // numComponents = 3
  // Component 1
  jpegData[offset++] = 0x01; jpegData[offset++] = 0x11; jpegData[offset++] = 0x00;
  // Component 2
  jpegData[offset++] = 0x02; jpegData[offset++] = 0x11; jpegData[offset++] = 0x00;
  // Component 3
  jpegData[offset++] = 0x03; jpegData[offset++] = 0x11; jpegData[offset++] = 0x00;
  // EOI marker
  jpegData[offset++] = 0xff;
  jpegData[offset++] = 0xd9;
  // Process the JPEG data.
  const result = JpegImage.canUseImageDecoder(jpegData);
  if (!result) {
    throw new Error("JPEG image not usable.");
  }
  // The APP1 data starts at offset 6 and is 14 bytes long.
  // The first 6 bytes ("Exif\0\0") should remain intact.
  const expectedHeader = [0x45, 0x78, 0x69, 0x66, 0x00, 0x00];
  for (let i = 0; i < 6; i++) {
    if (jpegData[6 + i] !== expectedHeader[i]) {
      throw new Error("APP1 header modified incorrectly");
    }
  }
  // The remaining 8 bytes should have been replaced with zeros.
  for (let i = 6; i < 14; i++) {
    if (jpegData[6 + i] !== 0x00) {
      throw new Error("APP1 data not cleared as expected");
    }
  }
});
```

If you find this regression test useful, feel free to insert it to your test suite.
Our automated pipeline inserted the test in the `test/unit/pdf.image_decoders_spec.js` file before running it.

This is part of our research at the [ZEST](https://www.ifi.uzh.ch/en/zest.html) group of University of Zurich in collaboration with [Mozilla](https://www.mozilla.org).
If you have any suggestions, questions, or simply want to learn more, feel free to contact us at konstantinos.kitsios@uzh.ch and mcastelluccio@mozilla.com.

[2025-07-31 22:50:02] MARKER   : =============== Test Generation Finished =============
[2025-07-31 22:50:02] SUCCESS  : MOCK finished successfully
[2025-07-31 22:50:02] SUCCESS  : Test file copied to generated_tests/pdf_js_19356_i1_MOCK.txt
[2025-07-31 22:50:02] MARKER   : =============== Finished Payload #19356 ==============
[2025-07-31 22:50:02] SUCCESS  : Directory tmp_repo_dir_mozilla__pdf.js-19356 removed successfully
[2025-07-31 22:50:04] SUCCESS  : Removed Docker image 'image_mozilla__pdf.js-19356'

it("should change cursor classes properly for highlighting", async () => {
  const dummyDiv = document.createElement("div");
  document.body.appendChild(dummyDiv);
  const textLayer = { div: dummyDiv };
  const uiManager = {
    registerEditorTypes() {},
    addLayer() {},
    direction: "ltr"
  };
  const l10n = {};
  const { AnnotationEditorLayer } = await import("../../src/display/editor/annotation_editor_layer.js");
  const layer = new AnnotationEditorLayer({
    uiManager,
    pageIndex: 0,
    div: document.createElement("div"),
    accessibilityManager: {},
    annotationLayer: {},
    drawLayer: {},
    textLayer,
    viewport: {},
    l10n
  });
  layer.enableTextSelection();
  if (!dummyDiv.classList.contains("highlighting") || dummyDiv.classList.contains("drawing")) {
    throw new Error("enableTextSelection did not add the 'highlighting' class correctly.");
  }
  layer.disableTextSelection();
  if (dummyDiv.classList.contains("highlighting")) {
    throw new Error("disableTextSelection did not remove the 'highlighting' class correctly.");
  }
  dummyDiv.classList.remove("free");
  const pointerDownEvent = new PointerEvent("pointerdown", { button: 0, clientX: 100, clientY: 100, ctrlKey: false });
  dummyDiv.dispatchEvent(pointerDownEvent);
  if (!dummyDiv.classList.contains("free")) {
    throw new Error("Pointerdown did not add the 'free' class.");
  }
  const pointerUpEvent = new PointerEvent("pointerup", { button: 0 });
  dummyDiv.dispatchEvent(pointerUpEvent);
  await new Promise(resolve => setTimeout(resolve, 0));
  if (dummyDiv.classList.contains("free")) {
    throw new Error("Pointerup did not remove the 'free' class.");
  }
});
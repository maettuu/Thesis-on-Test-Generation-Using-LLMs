it("should prevent memory ballooning when scrolling through PDF", async () => {
  const { PDFDocumentProxy } = await import("../../src/display/api.js");
  const { performance } = require("perf_hooks");

  // Create a new PDF document proxy
  const pdfProxy = new PDFDocumentProxy({
    fetch: () => {
      // Mock fetch to return a 1x1 PDF
      return Promise.resolve({
        ok: true,
        arrayBuffer: () => Promise.resolve(new ArrayBuffer(100))
      });
    }
  });

  // Load multiple pages to simulate scrolling
  const pages = [];
  for (let i = 0; i < 10; i++) {
    const page = await pdfProxy.getPage(i);
    pages.push(page);
  }

  // Measure memory usage
  const usedHeap = performance.memory.usedHeapSize;

  // Release references to pages
  pages.length = 0;

  // Force garbage collection (Node.js specific)
  if (global.gc) {
    global.gc();
  }

  // Verify memory has been freed
  const finalHeap = performance.memory.usedHeapSize;
  expect(finalHeap).toBeLessThan(usedHeap * 0.75);
});
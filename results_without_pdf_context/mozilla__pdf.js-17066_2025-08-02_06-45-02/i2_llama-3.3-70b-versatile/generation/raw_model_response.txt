```javascript
it("should render readonly TextWidget-annotations when forms are disabled", async () => {
  const { PDFDocument, PDFPage } = await import("../../src/core/document.js");
  const { AnnotationLayer } = await import("../../src/display/annotation_layer.js");
  const { PDFFetchStream } = await import("../../src/display/fetch_stream.js");
  const { PDFNetworkStream } = await import("../../src/display/network.js");
  const { createIdFactory } = await import("./test_utils.js");

  const pdfUrl = "https://github.com/mozilla/pdf.js/files/12793820/simple-form-readonly.pdf";
  const pdf = await PDFDocument.load({ url: pdfUrl, fetch: PDFFetchStream.fetch, range: PDFNetworkStream.range });
  const page = await pdf.getPage(1);
  const annotationStorage = new (await import("../../src/display/annotation_storage.js")).AnnotationStorage(createIdFactory());
  const annotationLayer = new AnnotationLayer({
    page,
    annotationStorage,
    renderForms: false,
    enableScripting: false,
    linkService: null,
    imageResourcesPath: "",
    cMapUrl: "",
    fontUtils: null,
    renderInteractiveForms: false,
  });

  const textWidgetAnnotations = page.annotations.filter(annotation => annotation.subtype === "Widget");
  const readonlyTextWidgetAnnotation = textWidgetAnnotations.find(annotation => annotation.fieldFlags & 0x0001);

  const container = await annotationLayer.render();
  const textWidgetElements = container.querySelectorAll(".textWidgetAnnotation");

  expect(textWidgetElements.length).toBe(1);
  expect(textWidgetElements[0].textContent).toBe("Foo");
});
```
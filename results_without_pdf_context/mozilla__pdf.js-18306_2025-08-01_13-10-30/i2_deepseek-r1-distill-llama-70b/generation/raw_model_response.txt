<think>
Okay, I need to write a regression test for the issue where a PDF with a non-integer DW isn't rendered correctly. The patch changes how defaultWidth is calculated in evaluator.js. 

First, I should understand what the patch does. Before, if DW wasn't an integer, it defaulted to 1000. Now, it uses Math.ceil(dw) if DW is a number. So, the test should check if the default width is correctly set when DW is a non-integer.

I'll create a test PDF where DW is a float, say 500.5. Then, I'll simulate the evaluator's behavior. I'll create a mock dictionary with this DW value and other necessary properties. 

In the test, I'll import the PartialEvaluator and set up a mock xref to fetch the DW value. Then, I'll call extractWidths with a composite font. After that, I'll check if defaultWidth is 501, which is Math.ceil(500.5).

I need to make sure the test only uses the provided imports and doesn't add new dependencies. I'll structure the test with Jest syntax, using async/await and dynamic imports. 

So, the test will import evaluator.js, set up the mock data, run extractWidths, and assert the expected defaultWidth. This should fail before the patch and pass after, confirming the fix.
</think>

```javascript
it("should use ceil for non-integer DW values", async () => {
  const { PartialEvaluator } = await import("../../src/core/evaluator.js");
  
  const xref = {
    fetchIfRef: (value) => value
  };
  
  const dict = {
    get: (key) => {
      if (key === "DW") return 500.5;
      if (key === "W") return [1, 2, 3];
      return null;
    },
    getArray: () => null
  };
  
  const properties = {
    composite: true,
    vertical: false,
    firstChar: 0
  };
  
  const evaluator = new PartialEvaluator({
    xref,
    handler: null,
    pageIndex: 0,
    idFactory: null,
    fontCache: null,
    builtInCMapCache: null,
    standardFontDataCache: null,
    globalImageCache: null,
    systemFontCache: null,
    options: null
  });
  
  evaluator.extractWidths(dict, {}, properties);
  
  expect(properties.defaultWidth).toBe(501);
});
```
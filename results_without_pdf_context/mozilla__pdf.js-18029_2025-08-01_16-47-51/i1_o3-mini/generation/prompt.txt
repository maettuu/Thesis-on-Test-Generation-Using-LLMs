Before you begin:
- Keep going until the job is completely solved — don’t stop halfway.
- If you’re unsure about the behavior, reread the provided patch carefully; do not hallucinate.
- Plan your approach before writing code by reflecting on whether the test truly fails before and passes after.

Issue:
<issue>
Slow rendering of PDF files with smask
</issue>

Patch:
<patch>
diff --git a/src/display/base_factory.js b/src/display/base_factory.js
--- a/src/display/base_factory.js
+++ b/src/display/base_factory.js
@@ -30,6 +30,14 @@ class BaseFilterFactory {
     return "none";
   }
 
+  addAlphaFilter(map) {
+    return "none";
+  }
+
+  addLuminosityFilter(map) {
+    return "none";
+  }
+
   addHighlightHCMFilter(filterName, fgColor, bgColor, newFgColor, newBgColor) {
     return "none";
   }

diff --git a/src/display/canvas.js b/src/display/canvas.js
--- a/src/display/canvas.js
+++ b/src/display/canvas.js
@@ -796,122 +796,6 @@ function resetCtxToDefault(ctx) {
   }
 }
 
-function composeSMaskBackdrop(bytes, r0, g0, b0) {
-  const length = bytes.length;
-  for (let i = 3; i < length; i += 4) {
-    const alpha = bytes[i];
-    if (alpha === 0) {
-      bytes[i - 3] = r0;
-      bytes[i - 2] = g0;
-      bytes[i - 1] = b0;
-    } else if (alpha < 255) {
-      const alpha_ = 255 - alpha;
-      bytes[i - 3] = (bytes[i - 3] * alpha + r0 * alpha_) >> 8;
-      bytes[i - 2] = (bytes[i - 2] * alpha + g0 * alpha_) >> 8;
-      bytes[i - 1] = (bytes[i - 1] * alpha + b0 * alpha_) >> 8;
-    }
-  }
-}
-
-function composeSMaskAlpha(maskData, layerData, transferMap) {
-  const length = maskData.length;
-  const scale = 1 / 255;
-  for (let i = 3; i < length; i += 4) {
-    const alpha = transferMap ? transferMap[maskData[i]] : maskData[i];
-    layerData[i] = (layerData[i] * alpha * scale) | 0;
-  }
-}
-
-function composeSMaskLuminosity(maskData, layerData, transferMap) {
-  const length = maskData.length;
-  for (let i = 3; i < length; i += 4) {
-    const y =
-      maskData[i - 3] * 77 + // * 0.3 / 255 * 0x10000
-      maskData[i - 2] * 152 + // * 0.59 ....
-      maskData[i - 1] * 28; // * 0.11 ....
-    layerData[i] = transferMap
-      ? (layerData[i] * transferMap[y >> 8]) >> 8
-      : (layerData[i] * y) >> 16;
-  }
-}
-
-function genericComposeSMask(
-  maskCtx,
-  layerCtx,
-  width,
-  height,
-  subtype,
-  backdrop,
-  transferMap,
-  layerOffsetX,
-  layerOffsetY,
-  maskOffsetX,
-  maskOffsetY
-) {
-  const hasBackdrop = !!backdrop;
-  const r0 = hasBackdrop ? backdrop[0] : 0;
-  const g0 = hasBackdrop ? backdrop[1] : 0;
-  const b0 = hasBackdrop ? backdrop[2] : 0;
-
-  const composeFn =
-    subtype === "Luminosity" ? composeSMaskLuminosity : composeSMaskAlpha;
-
-  // processing image in chunks to save memory
-  const PIXELS_TO_PROCESS = 1048576;
-  const chunkSize = Math.min(height, Math.ceil(PIXELS_TO_PROCESS / width));
-  for (let row = 0; row < height; row += chunkSize) {
-    const chunkHeight = Math.min(chunkSize, height - row);
-    const maskData = maskCtx.getImageData(
-      layerOffsetX - maskOffsetX,
-      row + (layerOffsetY - maskOffsetY),
-      width,
-      chunkHeight
-    );
-    const layerData = layerCtx.getImageData(
-      layerOffsetX,
-      row + layerOffsetY,
-      width,
-      chunkHeight
-    );
-
-    if (hasBackdrop) {
-      composeSMaskBackdrop(maskData.data, r0, g0, b0);
-    }
-    composeFn(maskData.data, layerData.data, transferMap);
-
-    layerCtx.putImageData(layerData, layerOffsetX, row + layerOffsetY);
-  }
-}
-
-function composeSMask(ctx, smask, layerCtx, layerBox) {
-  const layerOffsetX = layerBox[0];
-  const layerOffsetY = layerBox[1];
-  const layerWidth = layerBox[2] - layerOffsetX;
-  const layerHeight = layerBox[3] - layerOffsetY;
-  if (layerWidth === 0 || layerHeight === 0) {
-    return;
-  }
-  genericComposeSMask(
-    smask.context,
-    layerCtx,
-    layerWidth,
-    layerHeight,
-    smask.subtype,
-    smask.backdrop,
-    smask.transferMap,
-    layerOffsetX,
-    layerOffsetY,
-    smask.offsetX,
-    smask.offsetY
-  );
-  ctx.save();
-  ctx.globalAlpha = 1;
-  ctx.globalCompositeOperation = "source-over";
-  ctx.setTransform(1, 0, 0, 1, 0, 0);
-  ctx.drawImage(layerCtx.canvas, 0, 0);
-  ctx.restore();
-}
-
 function getImageSmoothingEnabled(transform, interpolate) {
   // In section 8.9.5.3 of the PDF spec, it's mentioned that the interpolate
   // flag should be used when the image is upscaled.
@@ -1556,7 +1440,7 @@ class CanvasGraphics {
     const smask = this.current.activeSMask;
     const suspendedCtx = this.suspendedCtx;
 
-    composeSMask(suspendedCtx, smask, this.ctx, dirtyBox);
+    this.composeSMask(suspendedCtx, smask, this.ctx, dirtyBox);
     // Whatever was drawn has been moved to the suspended canvas, now clear it
     // out of the current canvas.
     this.ctx.save();
@@ -1565,6 +1449,117 @@ class CanvasGraphics {
     this.ctx.restore();
   }
 
+  composeSMask(ctx, smask, layerCtx, layerBox) {
+    const layerOffsetX = layerBox[0];
+    const layerOffsetY = layerBox[1];
+    const layerWidth = layerBox[2] - layerOffsetX;
+    const layerHeight = layerBox[3] - layerOffsetY;
+    if (layerWidth === 0 || layerHeight === 0) {
+      return;
+    }
+    this.genericComposeSMask(
+      smask.context,
+      layerCtx,
+      layerWidth,
+      layerHeight,
+      smask.subtype,
+      smask.backdrop,
+      smask.transferMap,
+      layerOffsetX,
+      layerOffsetY,
+      smask.offsetX,
+      smask.offsetY
+    );
+    ctx.save();
+    ctx.globalAlpha = 1;
+    ctx.globalCompositeOperation = "source-over";
+    ctx.setTransform(1, 0, 0, 1, 0, 0);
+    ctx.drawImage(layerCtx.canvas, 0, 0);
+    ctx.restore();
+  }
+
+  genericComposeSMask(
+    maskCtx,
+    layerCtx,
+    width,
+    height,
+    subtype,
+    backdrop,
+    transferMap,
+    layerOffsetX,
+    layerOffsetY,
+    maskOffsetX,
+    maskOffsetY
+  ) {
+    let maskCanvas = maskCtx.canvas;
+    let maskX = layerOffsetX - maskOffsetX;
+    let maskY = layerOffsetY - maskOffsetY;
+
+    if (backdrop) {
+      if (
+        maskX < 0 ||
+        maskY < 0 ||
+        maskX + width > maskCanvas.width ||
+        maskY + height > maskCanvas.height
+      ) {
+        const canvas = this.cachedCanvases.getCanvas(
+          "maskExtension",
+          width,
+          height
+        );
+        const ctx = canvas.context;
+        ctx.drawImage(maskCanvas, -maskX, -maskY);
+        if (backdrop.some(c => c !== 0)) {
+          ctx.globalCompositeOperation = "destination-atop";
+          ctx.fillStyle = Util.makeHexColor(...backdrop);
+          ctx.fillRect(0, 0, width, height);
+          ctx.globalCompositeOperation = "source-over";
+        }
+
+        maskCanvas = canvas.canvas;
+        maskX = maskY = 0;
+      } else if (backdrop.some(c => c !== 0)) {
+        maskCtx.save();
+        maskCtx.globalAlpha = 1;
+        maskCtx.setTransform(1, 0, 0, 1, 0, 0);
+        const clip = new Path2D();
+        clip.rect(maskX, maskY, width, height);
+        maskCtx.clip(clip);
+        maskCtx.globalCompositeOperation = "destination-atop";
+        maskCtx.fillStyle = Util.makeHexColor(...backdrop);
+        maskCtx.fillRect(maskX, maskY, width, height);
+        maskCtx.restore();
+      }
+    }
+
+    layerCtx.save();
+    layerCtx.globalAlpha = 1;
+    layerCtx.setTransform(1, 0, 0, 1, 0, 0);
+
+    if (subtype === "Alpha" && transferMap) {
+      layerCtx.filter = this.filterFactory.addAlphaFilter(transferMap);
+    } else if (subtype === "Luminosity") {
+      layerCtx.filter = this.filterFactory.addLuminosityFilter(transferMap);
+    }
+
+    const clip = new Path2D();
+    clip.rect(layerOffsetX, layerOffsetY, width, height);
+    layerCtx.clip(clip);
+    layerCtx.globalCompositeOperation = "destination-in";
+    layerCtx.drawImage(
+      maskCanvas,
+      maskX,
+      maskY,
+      width,
+      height,
+      layerOffsetX,
+      layerOffsetY,
+      width,
+      height
+    );
+    layerCtx.restore();
+  }
+
   save() {
     if (this.inSMaskMode) {
       // SMask mode may be turned on/off causing us to lose graphics state.

diff --git a/src/display/display_utils.js b/src/display/display_utils.js
--- a/src/display/display_utils.js
+++ b/src/display/display_utils.js
@@ -97,6 +97,30 @@ class DOMFilterFactory extends BaseFilterFactory {
     return this.#_defs;
   }
 
+  #createTables(maps) {
+    if (maps.length === 1) {
+      const mapR = maps[0];
+      const buffer = new Array(256);
+      for (let i = 0; i < 256; i++) {
+        buffer[i] = mapR[i] / 255;
+      }
+
+      const table = buffer.join(",");
+      return [table, table, table];
+    }
+
+    const [mapR, mapG, mapB] = maps;
+    const bufferR = new Array(256);
+    const bufferG = new Array(256);
+    const bufferB = new Array(256);
+    for (let i = 0; i < 256; i++) {
+      bufferR[i] = mapR[i] / 255;
+      bufferG[i] = mapG[i] / 255;
+      bufferB[i] = mapB[i] / 255;
+    }
+    return [bufferR.join(","), bufferG.join(","), bufferB.join(",")];
+  }
+
   addFilter(maps) {
     if (!maps) {
       return "none";
@@ -109,29 +133,8 @@ class DOMFilterFactory extends BaseFilterFactory {
       return value;
     }
 
-    let tableR, tableG, tableB, key;
-    if (maps.length === 1) {
-      const mapR = maps[0];
-      const buffer = new Array(256);
-      for (let i = 0; i < 256; i++) {
-        buffer[i] = mapR[i] / 255;
-      }
-      key = tableR = tableG = tableB = buffer.join(",");
-    } else {
-      const [mapR, mapG, mapB] = maps;
-      const bufferR = new Array(256);
-      const bufferG = new Array(256);
-      const bufferB = new Array(256);
-      for (let i = 0; i < 256; i++) {
-        bufferR[i] = mapR[i] / 255;
-        bufferG[i] = mapG[i] / 255;
-        bufferB[i] = mapB[i] / 255;
-      }
-      tableR = bufferR.join(",");
-      tableG = bufferG.join(",");
-      tableB = bufferB.join(",");
-      key = `${tableR}${tableG}${tableB}`;
-    }
+    const [tableR, tableG, tableB] = this.#createTables(maps);
+    const key = maps.length === 1 ? tableR : `${tableR}${tableG}${tableB}`;
 
     value = this.#cache.get(key);
     if (value) {
@@ -233,6 +236,70 @@ class DOMFilterFactory extends BaseFilterFactory {
     return info.url;
   }
 
+  addAlphaFilter(map) {
+    // When a page is zoomed the page is re-drawn but the maps are likely
+    // the same.
+    let value = this.#cache.get(map);
+    if (value) {
+      return value;
+    }
+
+    const [tableA] = this.#createTables([map]);
+    const key = `alpha_${tableA}`;
+
+    value = this.#cache.get(key);
+    if (value) {
+      this.#cache.set(map, value);
+      return value;
+    }
+
+    const id = `g_${this.#docId}_alpha_map_${this.#id++}`;
+    const url = `url(#${id})`;
+    this.#cache.set(map, url);
+    this.#cache.set(key, url);
+
+    const filter = this.#createFilter(id);
+    this.#addTransferMapAlphaConversion(tableA, filter);
+
+    return url;
+  }
+
+  addLuminosityFilter(map) {
+    // When a page is zoomed the page is re-drawn but the maps are likely
+    // the same.
+    let value = this.#cache.get(map || "luminosity");
+    if (value) {
+      return value;
+    }
+
+    let tableA, key;
+    if (map) {
+      [tableA] = this.#createTables([map]);
+      key = `luminosity_${tableA}`;
+    } else {
+      key = "luminosity";
+    }
+
+    value = this.#cache.get(key);
+    if (value) {
+      this.#cache.set(map, value);
+      return value;
+    }
+
+    const id = `g_${this.#docId}_luminosity_map_${this.#id++}`;
+    const url = `url(#${id})`;
+    this.#cache.set(map, url);
+    this.#cache.set(key, url);
+
+    const filter = this.#createFilter(id);
+    this.#addLuminosityConversion(filter);
+    if (map) {
+      this.#addTransferMapAlphaConversion(tableA, filter);
+    }
+
+    return url;
+  }
+
   addHighlightHCMFilter(filterName, fgColor, bgColor, newFgColor, newBgColor) {
     const key = `${fgColor}-${bgColor}-${newFgColor}-${newBgColor}`;
     let info = this.#hcmCache.get(filterName);
@@ -341,6 +408,19 @@ class DOMFilterFactory extends BaseFilterFactory {
     this.#id = 0;
   }
 
+  #addLuminosityConversion(filter) {
+    const feColorMatrix = this.#document.createElementNS(
+      SVG_NS,
+      "feColorMatrix"
+    );
+    feColorMatrix.setAttribute("type", "matrix");
+    feColorMatrix.setAttribute(
+      "values",
+      "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0.59 0.11 0 0"
+    );
+    filter.append(feColorMatrix);
+  }
+
   #addGrayConversion(filter) {
     const feColorMatrix = this.#document.createElementNS(
       SVG_NS,
@@ -381,6 +461,15 @@ class DOMFilterFactory extends BaseFilterFactory {
     this.#appendFeFunc(feComponentTransfer, "feFuncB", bTable);
   }
 
+  #addTransferMapAlphaConversion(aTable, filter) {
+    const feComponentTransfer = this.#document.createElementNS(
+      SVG_NS,
+      "feComponentTransfer"
+    );
+    filter.append(feComponentTransfer);
+    this.#appendFeFunc(feComponentTransfer, "feFuncA", aTable);
+  }
+
   #getRGB(color) {
     this.#defs.style.color = color;
     return getRGB(getComputedStyle(this.#defs).getPropertyValue("color"));


</patch>

Imports:
<imports>
Available Packages
Dev Dependencies:
- @babel/core: ^7.24.4
- @babel/preset-env: ^7.24.4
- @babel/runtime: ^7.24.4
- @fluent/bundle: ^0.18.0
- @fluent/dom: ^0.9.0
- @jazzer.js/core: ^2.1.0
- autoprefixer: ^10.4.19
- babel-loader: ^9.1.3
- caniuse-lite: ^1.0.30001614
- canvas: ^2.11.2
- core-js: ^3.37.0
- cross-env: ^7.0.3
- eslint: ^8.57.0
- eslint-config-prettier: ^9.1.0
- eslint-plugin-fetch-options: ^0.0.5
- eslint-plugin-html: ^8.1.1
- eslint-plugin-import: ^2.29.1
- eslint-plugin-jasmine: ^4.1.3
- eslint-plugin-json: ^3.1.0
- eslint-plugin-mozilla: ^3.7.3
- eslint-plugin-no-unsanitized: ^4.0.2
- eslint-plugin-prettier: ^5.1.3
- eslint-plugin-sort-exports: ^0.9.1
- eslint-plugin-unicorn: ^52.0.0
- globals: ^15.1.0
- gulp: ^4.0.2
- gulp-cli: ^3.0.0
- gulp-postcss: ^10.0.0
- gulp-rename: ^2.0.0
- gulp-replace: ^1.1.4
- gulp-zip: ^6.0.0
- jasmine: ^5.1.0
- jsdoc: ^4.0.2
- jstransformer-markdown-it: ^3.0.0
- merge-stream: ^2.0.0
- needle: ^3.3.1
- path2d: ^0.2.0
- pngjs: ^7.0.0
- postcss: ^8.4.38
- postcss-dark-theme-class: ^1.3.0
- postcss-dir-pseudo-class: ^8.0.1
- postcss-discard-comments: ^7.0.0
- postcss-nesting: ^12.1.2
- prettier: ^3.2.5
- puppeteer: ^22.7.1
- rimraf: ^3.0.2
- streamqueue: ^1.1.2
- stylelint: ^16.4.0
- stylelint-prettier: ^5.0.0
- terser-webpack-plugin: ^5.3.10
- through2: ^4.0.2
- tsc-alias: ^1.8.8
- ttest: ^4.0.0
- typescript: ^5.4.5
- typogr: ^0.6.8
- vinyl: ^3.0.0
- webpack: ^5.91.0
- webpack-stream: ^7.0.0
- wintersmith: ^2.5.0
- yargs: ^17.7.2

Engines:
- node: >=18

Available Relative Imports:
- `../../src/core/annotation.js`: Annotation, AnnotationBorderStyle, AnnotationFactory, MarkupAnnotation, getQuadPoints
- `../../src/core/bidi.js`: bidi
- `../../src/core/cff_parser.js`: CFFCharset, CFFCompiler, CFFFDSelect, CFFParser, CFFStrings
- `../../src/core/cmap.js`: CMap, CMapFactory, IdentityCMap
- `../../src/core/colorspace.js`: ColorSpace
- `../../src/core/core_utils.js`: arrayBuffersToBytes, encodeToXmlString, escapePDFName, escapeString, getInheritableProperty, getSizeInBytes, isAscii, isWhiteSpace, log2, numberToString, parseXFAPath, recoverJsURL, stringToUTF16HexString, stringToUTF16String, toRomanNumerals, validateCSSFont
- `../../src/core/crypto.js`: AES128Cipher, AES256Cipher, ARCFourCipher, CipherTransformFactory, PDF17, PDF20, calculateMD5, calculateSHA256, calculateSHA384, calculateSHA512
- `../../src/core/default_appearance.js`: createDefaultAppearance, parseAppearanceStream, parseDefaultAppearance
- `../../src/core/document.js`: PDFDocument, Page
- `../../src/core/encodings.js`: getEncoding
- `../../src/core/evaluator.js`: PartialEvaluator
- `../../src/core/flate_stream.js`: FlateStream
- `../../src/core/font_substitutions.js`: getFontSubstitution
- `../../src/core/fonts_utils.js`: SEAC_ANALYSIS_ENABLED
- `../../src/core/function.js`: PDFFunctionFactory, PostScriptCompiler, PostScriptEvaluator
- `../../src/core/glyphlist.js`: getDingbatsGlyphsUnicode, getGlyphsUnicode
- `../../src/core/image_utils.js`: GlobalImageCache, LocalColorSpaceCache
- `../../src/core/jbig2.js`: Jbig2Error, Jbig2Image
- `../../src/core/jpg.js`: JpegError, JpegImage
- `../../src/core/jpx.js`: JpxError, JpxImage
- `../../src/core/metadata_parser.js`: MetadataParser
- `../../src/core/operator_list.js`: OperatorList
- `../../src/core/parser.js`: Lexer, Linearization, Parser
- `../../src/core/predictor_stream.js`: PredictorStream
- `../../src/core/primitives.js`: Cmd, Dict, EOF, Name, Ref, RefSet, RefSetCache, isCmd, isDict, isName, isRefsEqual
- `../../src/core/ps_parser.js`: PostScriptLexer, PostScriptParser
- `../../src/core/stream.js`: NullStream, Stream, StringStream
- `../../src/core/type1_parser.js`: Type1Parser
- `../../src/core/unicode.js`: getCharUnicodeCategory, getUnicodeForGlyph, getUnicodeRangeFor, mapSpecialUnicodeValues
- `../../src/core/worker.js`: WorkerMessageHandler, WorkerTask
- `../../src/core/writer.js`: incrementalUpdate, writeDict
- `../../src/core/xfa/bind.js`: Binder
- `../../src/core/xfa/data.js`: DataHandler
- `../../src/core/xfa/factory.js`: XFAFactory
- `../../src/core/xfa/formcalc_lexer.js`: Lexer, TOKEN, Token
- `../../src/core/xfa/formcalc_parser.js`: Errors, Parser
- `../../src/core/xfa/parser.js`: XFAParser
- `../../src/core/xfa/som.js`: searchNode
- `../../src/core/xfa/symbol_utils.js`: $dump, $getChildren, $getChildrenByClass, $getChildrenByName, $text, $uid
- `../../src/core/xml_parser.js`: SimpleXMLParser, XMLParserBase
- `../../src/display/annotation_layer.js`: AnnotationLayer
- `../../src/display/annotation_storage.js`: AnnotationStorage
- `../../src/display/api.js`: DefaultCMapReaderFactory, DefaultCanvasFactory, DefaultStandardFontDataFactory, LoopbackPort, PDFDataRangeTransport, PDFDocumentLoadingTask, PDFDocumentProxy, PDFPageProxy, PDFWorker, PDFWorkerUtil, RenderTask, build, getDocument, version
- `../../src/display/display_utils.js`: DOMCanvasFactory, DOMSVGFactory, PDFDateString, PageViewport, PixelsPerInch, RenderingCancelledException, StatTimer, fetchData, getFilenameFromUrl, getPdfFilenameFromUrl, getXfaPageViewport, isDataScheme, isPdfFile, isValidFetchUrl, noContextMenu, setLayerDimensions
- `../../src/display/draw_layer.js`: DrawLayer
- `../../src/display/editor/annotation_editor_layer.js`: AnnotationEditorLayer
- `../../src/display/editor/color_picker.js`: ColorPicker
- `../../src/display/editor/outliner.js`: Outliner
- `../../src/display/editor/tools.js`: AnnotationEditorUIManager, CommandManager
- `../../src/display/fetch_stream.js`: PDFFetchStream
- `../../src/display/metadata.js`: Metadata
- `../../src/display/network.js`: PDFNetworkStream
- `../../src/display/network_utils.js`: createResponseStatusError, extractFilenameFromHeader, validateRangeRequestCapabilities, validateResponseStatus
- `../../src/display/node_stream.js`: PDFNodeStream
- `../../src/display/text_layer.js`: TextLayerRenderTask, renderTextLayer, updateTextLayer
- `../../src/display/worker_options.js`: GlobalWorkerOptions
- `../../src/display/xfa_layer.js`: XfaLayer
- `../../src/shared/message_handler.js`: MessageHandler
- `../../src/shared/murmurhash3.js`: MurmurHash3_64
- `../../src/shared/util.js`: AbortException, AnnotationBorderStyleType, AnnotationEditorParamsType, AnnotationEditorType, AnnotationFieldFlag, AnnotationFlag, AnnotationMode, AnnotationType, CMapCompressionType, FeatureTest, FormatError, ImageKind, InvalidPDFException, MissingPDFException, OPS, PasswordException, PasswordResponses, PermissionFlag, RenderingIntentFlag, UnexpectedResponseException, UnknownErrorException, Util, VerbosityLevel, assert, bytesToString, createValidAbsoluteUrl, getModificationDate, getVerbosityLevel, isNodeJS, normalizeUnicode, objectSize, setVerbosityLevel, shadow, string32, stringToBytes, stringToPDFString, stringToUTF8String
- `../../web/annotation_layer_builder.js`: AnnotationLayerBuilder
- `../../web/app_options.js`: AppOptions, OptionKind
- `../../web/download_manager.js`: DownloadManager
- `../../web/event_utils.js`: EventBus, WaitOnType, waitOnEventOrTimeout
- `../../web/genericl10n.js`: GenericL10n
- `../../web/pdf_find_controller.js`: FindState, PDFFindController
- `../../web/pdf_find_utils.js`: CharacterType, getCharacterType
- `../../web/pdf_history.js`: PDFHistory, isDestArraysEqual, isDestHashesEqual
- `../../web/pdf_link_service.js`: LinkTarget, PDFLinkService, SimpleLinkService
- `../../web/pdf_page_view.js`: PDFPageView
- `../../web/pdf_scripting_manager.component.js`: PDFScriptingManager
- `../../web/pdf_single_page_viewer.js`: PDFSinglePageViewer
- `../../web/pdf_viewer.js`: PDFPageViewBuffer, PDFViewer
- `../../web/struct_tree_layer_builder.js`: StructTreeLayerBuilder
- `../../web/text_layer_builder.js`: TextLayerBuilder
- `../../web/ui_utils.js`: AutoPrintRegExp, ProgressBar, RenderingStates, ScrollMode, SpreadMode, backtrackBeforeAllVisibleElements, binarySearchFirstItem, getPageSizeInches, getVisibleElements, isPortraitOrientation, isValidRotation, parseQueryString, removeNullCharacters
- `../../web/xfa_layer_builder.js`: XfaLayerBuilder
- `./test_utils.js`: CMAP_URL, DefaultFileReaderFactory, STANDARD_FONT_DATA_URL, TEST_PDFS_PATH, XRefMock, buildGetDocumentParams, createIdFactory, createTemporaryNodeServer
- `./testreporter.js`: TestReporter
</imports>

Code:
<code>
File:
src/display/base_factory.js
1 /* Copyright 2015 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 import { CMapCompressionType, unreachable } from "../shared/util.js";
17 
18 class BaseFilterFactory {
19   constructor() {
20     if (this.constructor === BaseFilterFactory) {
21       unreachable("Cannot initialize BaseFilterFactory.");
22     }
23   }
24 
38 }
39 
200 
File:
src/display/canvas.js
1 /* Copyright 2012 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 import {
17   FeatureTest,
18   FONT_IDENTITY_MATRIX,
19   IDENTITY_MATRIX,
20   ImageKind,
21   info,
22   isNodeJS,
23   OPS,
24   shadow,
25   TextRenderingMode,
26   unreachable,
27   Util,
28   warn,
29 } from "../shared/util.js";
30 import {
31   getCurrentTransform,
32   getCurrentTransformInverse,
33   PixelsPerInch,
34 } from "./display_utils.js";
35 import {
36   getShadingPattern,
37   PathType,
38   TilingPattern,
39 } from "./pattern_helper.js";
40 import { convertBlackAndWhiteToRGBA } from "../shared/image_utils.js";
41 
42 // <canvas> contexts store most of the state we need natively.
43 // However, PDF needs a bit more state, which we store here.
44 // Minimal font size that would be used during canvas fillText operations.
45 const MIN_FONT_SIZE = 16;
46 // Maximum font size that would be used during canvas fillText operations.
47 const MAX_FONT_SIZE = 100;
48 const MAX_GROUP_SIZE = 4096;
49 
50 // Defines the time the `executeOperatorList`-method is going to be executing
51 // before it stops and schedules a continue of execution.
52 const EXECUTION_TIME = 15; // ms
53 // Defines the number of steps before checking the execution time.
54 const EXECUTION_STEPS = 10;
55 
56 // To disable Type3 compilation, set the value to `-1`.
57 const MAX_SIZE_TO_COMPILE = 1000;
58 
59 const FULL_CHUNK_HEIGHT = 16;
60 
799 function composeSMaskBackdrop(bytes, r0, g0, b0) {
800   const length = bytes.length;
801   for (let i = 3; i < length; i += 4) {
802     const alpha = bytes[i];
803     if (alpha === 0) {
804       bytes[i - 3] = r0;
805       bytes[i - 2] = g0;
806       bytes[i - 1] = b0;
807     } else if (alpha < 255) {
808       const alpha_ = 255 - alpha;
809       bytes[i - 3] = (bytes[i - 3] * alpha + r0 * alpha_) >> 8;
810       bytes[i - 2] = (bytes[i - 2] * alpha + g0 * alpha_) >> 8;
811       bytes[i - 1] = (bytes[i - 1] * alpha + b0 * alpha_) >> 8;
812     }
813   }
814 }
815 
816 function composeSMaskAlpha(maskData, layerData, transferMap) {
817   const length = maskData.length;
818   const scale = 1 / 255;
819   for (let i = 3; i < length; i += 4) {
820     const alpha = transferMap ? transferMap[maskData[i]] : maskData[i];
821     layerData[i] = (layerData[i] * alpha * scale) | 0;
822   }
823 }
824 
825 function composeSMaskLuminosity(maskData, layerData, transferMap) {
826   const length = maskData.length;
827   for (let i = 3; i < length; i += 4) {
828     const y =
829       maskData[i - 3] * 77 + // * 0.3 / 255 * 0x10000
830       maskData[i - 2] * 152 + // * 0.59 ....
831       maskData[i - 1] * 28; // * 0.11 ....
832     layerData[i] = transferMap
833       ? (layerData[i] * transferMap[y >> 8]) >> 8
834       : (layerData[i] * y) >> 16;
835   }
836 }
837 
838 function genericComposeSMask(
839   maskCtx,
840   layerCtx,
841   width,
842   height,
843   subtype,
844   backdrop,
845   transferMap,
846   layerOffsetX,
847   layerOffsetY,
848   maskOffsetX,
849   maskOffsetY
850 ) {
851   const hasBackdrop = !!backdrop;
852   const r0 = hasBackdrop ? backdrop[0] : 0;
853   const g0 = hasBackdrop ? backdrop[1] : 0;
854   const b0 = hasBackdrop ? backdrop[2] : 0;
855 
856   const composeFn =
857     subtype === "Luminosity" ? composeSMaskLuminosity : composeSMaskAlpha;
858 
859   // processing image in chunks to save memory
860   const PIXELS_TO_PROCESS = 1048576;
861   const chunkSize = Math.min(height, Math.ceil(PIXELS_TO_PROCESS / width));
862   for (let row = 0; row < height; row += chunkSize) {
863     const chunkHeight = Math.min(chunkSize, height - row);
864     const maskData = maskCtx.getImageData(
865       layerOffsetX - maskOffsetX,
866       row + (layerOffsetY - maskOffsetY),
867       width,
868       chunkHeight
869     );
870     const layerData = layerCtx.getImageData(
871       layerOffsetX,
872       row + layerOffsetY,
873       width,
874       chunkHeight
875     );
876 
877     if (hasBackdrop) {
878       composeSMaskBackdrop(maskData.data, r0, g0, b0);
879     }
880     composeFn(maskData.data, layerData.data, transferMap);
881 
882     layerCtx.putImageData(layerData, layerOffsetX, row + layerOffsetY);
883   }
884 }
885 
886 function composeSMask(ctx, smask, layerCtx, layerBox) {
887   const layerOffsetX = layerBox[0];
888   const layerOffsetY = layerBox[1];
889   const layerWidth = layerBox[2] - layerOffsetX;
890   const layerHeight = layerBox[3] - layerOffsetY;
891   if (layerWidth === 0 || layerHeight === 0) {
892     return;
893   }
894   genericComposeSMask(
895     smask.context,
896     layerCtx,
897     layerWidth,
898     layerHeight,
899     smask.subtype,
900     smask.backdrop,
901     smask.transferMap,
902     layerOffsetX,
903     layerOffsetY,
904     smask.offsetX,
905     smask.offsetY
906   );
907   ctx.save();
908   ctx.globalAlpha = 1;
909   ctx.globalCompositeOperation = "source-over";
910   ctx.setTransform(1, 0, 0, 1, 0, 0);
911   ctx.drawImage(layerCtx.canvas, 0, 0);
912   ctx.restore();
913 }
914 
935 const LINE_CAP_STYLES = ["butt", "round", "square"];
936 const LINE_JOIN_STYLES = ["miter", "round", "bevel"];
937 const NORMAL_CLIP = {};
938 const EO_CLIP = {};
939 
940 class CanvasGraphics {
941   constructor(
942     canvasCtx,
943     commonObjs,
944     objs,
945     canvasFactory,
946     filterFactory,
947     { optionalContentConfig, markedContentStack = null },
948     annotationCanvasMap,
949     pageColors
950   ) {
951     this.ctx = canvasCtx;
952     this.current = new CanvasExtraState(
953       this.ctx.canvas.width,
954       this.ctx.canvas.height
955     );
956     this.stateStack = [];
957     this.pendingClip = null;
958     this.pendingEOFill = false;
959     this.res = null;
960     this.xobjs = null;
961     this.commonObjs = commonObjs;
962     this.objs = objs;
963     this.canvasFactory = canvasFactory;
964     this.filterFactory = filterFactory;
965     this.groupStack = [];
966     this.processingType3 = null;
967     // Patterns are painted relative to the initial page/form transform, see
968     // PDF spec 8.7.2 NOTE 1.
969     this.baseTransform = null;
970     this.baseTransformStack = [];
971     this.groupLevel = 0;
972     this.smaskStack = [];
973     this.smaskCounter = 0;
974     this.tempSMask = null;
975     this.suspendedCtx = null;
976     this.contentVisible = true;
977     this.markedContentStack = markedContentStack || [];
978     this.optionalContentConfig = optionalContentConfig;
979     this.cachedCanvases = new CachedCanvases(this.canvasFactory);
980     this.cachedPatterns = new Map();
981     this.annotationCanvasMap = annotationCanvasMap;
982     this.viewportScale = 1;
983     this.outputScaleX = 1;
984     this.outputScaleY = 1;
985     this.pageColors = pageColors;
986 
987     this._cachedScaleForStroking = [-1, 0];
988     this._cachedGetSinglePixelWidth = null;
989     this._cachedBitmapsMap = new Map();
990   }
991 
1394   // Graphics state
1402 
1543   compose(dirtyBox) {
1544     if (!this.current.activeSMask) {
1545       return;
1546     }
1547 
1548     if (!dirtyBox) {
1549       dirtyBox = [0, 0, this.ctx.canvas.width, this.ctx.canvas.height];
1550     } else {
1551       dirtyBox[0] = Math.floor(dirtyBox[0]);
1552       dirtyBox[1] = Math.floor(dirtyBox[1]);
1553       dirtyBox[2] = Math.ceil(dirtyBox[2]);
1554       dirtyBox[3] = Math.ceil(dirtyBox[3]);
1555     }
1556     const smask = this.current.activeSMask;
1557     const suspendedCtx = this.suspendedCtx;
1558 
1559     composeSMask(suspendedCtx, smask, this.ctx, dirtyBox);
1560     // Whatever was drawn has been moved to the suspended canvas, now clear it
1561     // out of the current canvas.
1562     this.ctx.save();
1563     this.ctx.setTransform(1, 0, 0, 1, 0, 0);
1564     this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);
1565     this.ctx.restore();
1566   }
1567 
1616   // Path
1761 
1866   // Clipping
1870 
1875   // Text
1882 
2339   // Type3 fonts
2344 
2351   // Color
2383 
2458   // Images
2462 
3060   // Marked content
3061 
3094   // Compatibility
3095 
3104   // Helper functions
3105 
3203   // Rescale before stroking in order to have a final lineWidth
3204   // with both thicknesses greater or equal to 1.
3243 
3252 }
3253 
3259 
File:
src/display/display_utils.js
1 /* Copyright 2015 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 import {
17   BaseCanvasFactory,
18   BaseCMapReaderFactory,
19   BaseFilterFactory,
20   BaseStandardFontDataFactory,
21   BaseSVGFactory,
22 } from "./base_factory.js";
23 import {
24   BaseException,
25   FeatureTest,
26   shadow,
27   stringToBytes,
28   Util,
29   warn,
30 } from "../shared/util.js";
31 
32 const SVG_NS = "http://www.w3.org/2000/svg";
33 
42 /**
43  * FilterFactory aims to create some SVG filters we can use when drawing an
44  * image (or whatever) on a canvas.
45  * Filters aren't applied with ctx.putImageData because it just overwrites the
46  * underlying pixels.
47  * With these filters, it's possible for example to apply some transfer maps on
48  * an image without the need to apply them on the pixel arrays: the renderer
49  * does the magic for us.
50  */
51 class DOMFilterFactory extends BaseFilterFactory {
52   #_cache;
53 
54   #_defs;
55 
56   #docId;
57 
58   #document;
59 
60   #_hcmCache;
61 
62   #id = 0;
63 
64   constructor({ docId, ownerDocument = globalThis.document } = {}) {
65     super();
66     this.#docId = docId;
67     this.#document = ownerDocument;
68   }
69 
100   addFilter(maps) {
101     if (!maps) {
102       return "none";
103     }
104 
105     // When a page is zoomed the page is re-drawn but the maps are likely
106     // the same.
107     let value = this.#cache.get(maps);
108     if (value) {
109       return value;
110     }
111 
112     let tableR, tableG, tableB, key;
113     if (maps.length === 1) {
114       const mapR = maps[0];
115       const buffer = new Array(256);
116       for (let i = 0; i < 256; i++) {
117         buffer[i] = mapR[i] / 255;
118       }
119       key = tableR = tableG = tableB = buffer.join(",");
120     } else {
121       const [mapR, mapG, mapB] = maps;
122       const bufferR = new Array(256);
123       const bufferG = new Array(256);
124       const bufferB = new Array(256);
125       for (let i = 0; i < 256; i++) {
126         bufferR[i] = mapR[i] / 255;
127         bufferG[i] = mapG[i] / 255;
128         bufferB[i] = mapB[i] / 255;
129       }
130       tableR = bufferR.join(",");
131       tableG = bufferG.join(",");
132       tableB = bufferB.join(",");
133       key = `${tableR}${tableG}${tableB}`;
134     }
135 
136     value = this.#cache.get(key);
137     if (value) {
138       this.#cache.set(maps, value);
139       return value;
140     }
141 
142     // We create a SVG filter: feComponentTransferElement
143     //  https://www.w3.org/TR/SVG11/filters.html#feComponentTransferElement
144 
145     const id = `g_${this.#docId}_transfer_map_${this.#id++}`;
146     const url = `url(#${id})`;
147     this.#cache.set(maps, url);
148     this.#cache.set(key, url);
149 
150     const filter = this.#createFilter(id);
151     this.#addTransferMapConversion(tableR, tableG, tableB, filter);
152 
153     return url;
154   }
155 
388 }
389 
828 // Deprecated API function -- display regardless of the `verbosity` setting.
832 
833 let pdfDateStringRegex;
834 
1017 
</code>

Test file:
<test_file>
File:
test/unit/display_utils_spec.js
/* Copyright 2017 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { bytesToString, isNodeJS } from "../../src/shared/util.js";
import {
  DOMCanvasFactory,
  DOMSVGFactory,
  getFilenameFromUrl,
  getPdfFilenameFromUrl,
  isValidFetchUrl,
  PDFDateString,
} from "../../src/display/display_utils.js";
</test_file>

Your task:
You are a software tester at pdf.js.
1. Examine the existing test file. You may reuse any imports, helpers or setup blocks it already has.
2. Write exactly one javascript test `it("...", async () => {...})` block.
3. Your test must fail on the code before the patch, and pass after, hence the test will verify that the patch resolves the issue.
4. The test must be self-contained and to-the-point.
5. If you need something new use only the provided imports (respect the paths exactly how they are given) by importing dynamically for compatibility with Node.js — no new dependencies. 
6. Return only the javascript code for the new `it(...)` block (no comments or explanations).

Example structure:
it("should <describe behavior>", async () => {
  const { example } = await import("../../src/core/example.js");
  <initialize required variables>;
  <define expected variable>;
  <generate actual variables>;
  <compare expected with actual>;
});


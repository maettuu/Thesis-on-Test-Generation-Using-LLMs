Before you begin:
- Keep going until the job is completely solved — don’t stop halfway.
- If you’re unsure about the behavior, reread the provided patch carefully; do not hallucinate.
- Plan your approach before writing code by reflecting on whether the test truly fails before and passes after.

Issue:
<issue>
Use ImageDecoder to speed up decoding images in PDFs
</issue>

Patch:
<patch>
diff --git a/src/core/base_stream.js b/src/core/base_stream.js
--- a/src/core/base_stream.js
+++ b/src/core/base_stream.js
@@ -68,6 +68,10 @@ class BaseStream {
     return false;
   }
 
+  async getTransferableImage() {
+    return null;
+  }
+
   peekByte() {
     const peekedByte = this.getByte();
     if (peekedByte !== -1) {

diff --git a/src/core/image.js b/src/core/image.js
--- a/src/core/image.js
+++ b/src/core/image.js
@@ -752,6 +752,10 @@ class PDFImage {
         drawWidth === originalWidth &&
         drawHeight === originalHeight
       ) {
+        const image = await this.#getImage(originalWidth, originalHeight);
+        if (image) {
+          return image;
+        }
         const data = await this.getImageBytes(originalHeight * rowBytes, {});
         if (isOffscreenCanvasSupported) {
           if (mustBeResized) {
@@ -810,6 +814,10 @@ class PDFImage {
           }
 
           if (isHandled) {
+            const image = await this.#getImage(drawWidth, drawHeight);
+            if (image) {
+              return image;
+            }
             const rgba = await this.getImageBytes(imageLength, {
               drawWidth,
               drawHeight,
@@ -1013,6 +1021,20 @@ class PDFImage {
     };
   }
 
+  async #getImage(width, height) {
+    const bitmap = await this.image.getTransferableImage();
+    if (!bitmap) {
+      return null;
+    }
+    return {
+      data: null,
+      width,
+      height,
+      bitmap,
+      interpolate: this.interpolate,
+    };
+  }
+
   async getImageBytes(
     length,
     {

diff --git a/src/core/jpeg_stream.js b/src/core/jpeg_stream.js
--- a/src/core/jpeg_stream.js
+++ b/src/core/jpeg_stream.js
@@ -13,10 +13,10 @@
  * limitations under the License.
  */
 
+import { shadow, warn } from "../shared/util.js";
 import { DecodeStream } from "./decode_stream.js";
 import { Dict } from "./primitives.js";
 import { JpegImage } from "./jpg.js";
-import { shadow } from "../shared/util.js";
 
 /**
  * For JPEG's we use a library to decode these images and the stream behaves
@@ -32,6 +32,18 @@ class JpegStream extends DecodeStream {
     this.params = params;
   }
 
+  static get canUseImageDecoder() {
+    return shadow(
+      this,
+      "canUseImageDecoder",
+      // eslint-disable-next-line no-undef
+      typeof ImageDecoder === "undefined"
+        ? Promise.resolve(false)
+        : // eslint-disable-next-line no-undef
+          ImageDecoder.isTypeSupported("image/jpeg")
+    );
+  }
+
   get bytes() {
     // If `this.maybeLength` is null, we'll get the entire stream.
     return shadow(this, "bytes", this.stream.getBytes(this.maybeLength));
@@ -46,22 +58,7 @@ class JpegStream extends DecodeStream {
     this.decodeImage();
   }
 
-  decodeImage(bytes) {
-    if (this.eof) {
-      return this.buffer;
-    }
-    bytes ||= this.bytes;
-
-    // Some images may contain 'junk' before the SOI (start-of-image) marker.
-    // Note: this seems to mainly affect inline images.
-    for (let i = 0, ii = bytes.length - 1; i < ii; i++) {
-      if (bytes[i] === 0xff && bytes[i + 1] === 0xd8) {
-        if (i > 0) {
-          bytes = bytes.subarray(i);
-        }
-        break;
-      }
-    }
+  get jpegOptions() {
     const jpegOptions = {
       decodeTransform: undefined,
       colorTransform: undefined,
@@ -93,8 +90,34 @@ class JpegStream extends DecodeStream {
         jpegOptions.colorTransform = colorTransform;
       }
     }
-    const jpegImage = new JpegImage(jpegOptions);
+    return shadow(this, "jpegOptions", jpegOptions);
+  }
+
+  #skipUselessBytes(data) {
+    // Some images may contain 'junk' before the SOI (start-of-image) marker.
+    // Note: this seems to mainly affect inline images.
+    for (let i = 0, ii = data.length - 1; i < ii; i++) {
+      if (data[i] === 0xff && data[i + 1] === 0xd8) {
+        if (i > 0) {
+          data = data.subarray(i);
+        }
+        break;
+      }
+    }
+    return data;
+  }
+
+  decodeImage(bytes) {
+    if (this.eof) {
+      return this.buffer;
+    }
+    bytes = this.#skipUselessBytes(bytes || this.bytes);
 
+    // TODO: if an image has a mask we need to combine the data.
+    // So ideally get a VideoFrame from getTransferableImage and then use
+    // copyTo.
+
+    const jpegImage = new JpegImage(this.jpegOptions);
     jpegImage.parse(bytes);
     const data = jpegImage.getData({
       width: this.drawWidth,
@@ -113,6 +136,48 @@ class JpegStream extends DecodeStream {
   get canAsyncDecodeImageFromBuffer() {
     return this.stream.isAsync;
   }
+
+  async getTransferableImage() {
+    if (!(await JpegStream.canUseImageDecoder)) {
+      return null;
+    }
+    const jpegOptions = this.jpegOptions;
+    if (jpegOptions.decodeTransform) {
+      // TODO: We could decode the image thanks to ImageDecoder and then
+      // get the pixels with copyTo and apply the decodeTransform.
+      return null;
+    }
+    let decoder;
+    try {
+      // TODO: If the stream is Flate & DCT we could try to just pipe the
+      // the DecompressionStream into the ImageDecoder: it'll avoid the
+      // intermediate ArrayBuffer.
+      const bytes =
+        (this.canAsyncDecodeImageFromBuffer &&
+          (await this.stream.asyncGetBytes())) ||
+        this.bytes;
+      if (!bytes) {
+        return null;
+      }
+      const data = this.#skipUselessBytes(bytes);
+      if (!JpegImage.canUseImageDecoder(data, jpegOptions.colorTransform)) {
+        return null;
+      }
+      // eslint-disable-next-line no-undef
+      decoder = new ImageDecoder({
+        data,
+        type: "image/jpeg",
+        preferAnimation: false,
+      });
+
+      return (await decoder.decode()).image;
+    } catch (reason) {
+      warn(`getTransferableImage - failed: "${reason}".`);
+      return null;
+    } finally {
+      decoder?.close();
+    }
+  }
 }
 
 export { JpegStream };

diff --git a/src/core/jpg.js b/src/core/jpg.js
--- a/src/core/jpg.js
+++ b/src/core/jpg.js
@@ -744,55 +744,109 @@ function findNextFileMarker(data, currentPos, startPos = currentPos) {
   };
 }
 
+function prepareComponents(frame) {
+  const mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / frame.maxH);
+  const mcusPerColumn = Math.ceil(frame.scanLines / 8 / frame.maxV);
+  for (const component of frame.components) {
+    const blocksPerLine = Math.ceil(
+      (Math.ceil(frame.samplesPerLine / 8) * component.h) / frame.maxH
+    );
+    const blocksPerColumn = Math.ceil(
+      (Math.ceil(frame.scanLines / 8) * component.v) / frame.maxV
+    );
+    const blocksPerLineForMcu = mcusPerLine * component.h;
+    const blocksPerColumnForMcu = mcusPerColumn * component.v;
+
+    const blocksBufferSize =
+      64 * blocksPerColumnForMcu * (blocksPerLineForMcu + 1);
+    component.blockData = new Int16Array(blocksBufferSize);
+    component.blocksPerLine = blocksPerLine;
+    component.blocksPerColumn = blocksPerColumn;
+  }
+  frame.mcusPerLine = mcusPerLine;
+  frame.mcusPerColumn = mcusPerColumn;
+}
+
+function readDataBlock(data, offset) {
+  const length = readUint16(data, offset);
+  offset += 2;
+  let endOffset = offset + length - 2;
+
+  const fileMarker = findNextFileMarker(data, endOffset, offset);
+  if (fileMarker?.invalid) {
+    warn(
+      "readDataBlock - incorrect length, current marker is: " +
+        fileMarker.invalid
+    );
+    endOffset = fileMarker.offset;
+  }
+
+  const array = data.subarray(offset, endOffset);
+  offset += array.length;
+  return { appData: array, newOffset: offset };
+}
+
+function skipData(data, offset) {
+  const length = readUint16(data, offset);
+  offset += 2;
+  const endOffset = offset + length - 2;
+
+  const fileMarker = findNextFileMarker(data, endOffset, offset);
+  if (fileMarker?.invalid) {
+    return fileMarker.offset;
+  }
+  return endOffset;
+}
+
 class JpegImage {
   constructor({ decodeTransform = null, colorTransform = -1 } = {}) {
     this._decodeTransform = decodeTransform;
     this._colorTransform = colorTransform;
   }
 
-  parse(data, { dnlScanLines = null } = {}) {
-    function readDataBlock() {
-      const length = readUint16(data, offset);
-      offset += 2;
-      let endOffset = offset + length - 2;
-
-      const fileMarker = findNextFileMarker(data, endOffset, offset);
-      if (fileMarker?.invalid) {
-        warn(
-          "readDataBlock - incorrect length, current marker is: " +
-            fileMarker.invalid
-        );
-        endOffset = fileMarker.offset;
-      }
-
-      const array = data.subarray(offset, endOffset);
-      offset += array.length;
-      return array;
+  static canUseImageDecoder(data, colorTransform = -1) {
+    let offset = 0;
+    let numComponents = null;
+    let fileMarker = readUint16(data, offset);
+    offset += 2;
+    if (fileMarker !== /* SOI (Start of Image) = */ 0xffd8) {
+      throw new JpegError("SOI not found");
     }
+    fileMarker = readUint16(data, offset);
+    offset += 2;
 
-    function prepareComponents(frame) {
-      const mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / frame.maxH);
-      const mcusPerColumn = Math.ceil(frame.scanLines / 8 / frame.maxV);
-      for (const component of frame.components) {
-        const blocksPerLine = Math.ceil(
-          (Math.ceil(frame.samplesPerLine / 8) * component.h) / frame.maxH
-        );
-        const blocksPerColumn = Math.ceil(
-          (Math.ceil(frame.scanLines / 8) * component.v) / frame.maxV
-        );
-        const blocksPerLineForMcu = mcusPerLine * component.h;
-        const blocksPerColumnForMcu = mcusPerColumn * component.v;
-
-        const blocksBufferSize =
-          64 * blocksPerColumnForMcu * (blocksPerLineForMcu + 1);
-        component.blockData = new Int16Array(blocksBufferSize);
-        component.blocksPerLine = blocksPerLine;
-        component.blocksPerColumn = blocksPerColumn;
+    markerLoop: while (fileMarker !== /* EOI (End of Image) = */ 0xffd9) {
+      switch (fileMarker) {
+        case 0xffc0: // SOF0 (Start of Frame, Baseline DCT)
+        case 0xffc1: // SOF1 (Start of Frame, Extended DCT)
+        case 0xffc2: // SOF2 (Start of Frame, Progressive DCT)
+          // Skip marker length.
+          // Skip precision.
+          // Skip scanLines.
+          // Skip samplesPerLine.
+          numComponents = data[offset + (2 + 1 + 2 + 2)];
+          break markerLoop;
+        case 0xffff: // Fill bytes
+          if (data[offset] !== 0xff) {
+            // Avoid skipping a valid marker.
+            offset--;
+          }
+          break;
       }
-      frame.mcusPerLine = mcusPerLine;
-      frame.mcusPerColumn = mcusPerColumn;
+      offset = skipData(data, offset);
+      fileMarker = readUint16(data, offset);
+      offset += 2;
+    }
+    if (numComponents === 4) {
+      return false;
+    }
+    if (numComponents === 3 && colorTransform === 0) {
+      return false;
     }
+    return true;
+  }
 
+  parse(data, { dnlScanLines = null } = {}) {
     let offset = 0;
     let jfif = null;
     let adobe = null;
@@ -830,7 +884,8 @@ class JpegImage {
         case 0xffee: // APP14
         case 0xffef: // APP15
         case 0xfffe: // COM (Comment)
-          const appData = readDataBlock();
+          const { appData, newOffset } = readDataBlock(data, offset);
+          offset = newOffset;
 
           if (fileMarker === 0xffe0) {
             // 'JFIF\x00'

diff --git a/src/display/canvas.js b/src/display/canvas.js
--- a/src/display/canvas.js
+++ b/src/display/canvas.js
@@ -1059,8 +1059,10 @@ class CanvasGraphics {
     // Vertical or horizontal scaling shall not be more than 2 to not lose the
     // pixels during drawImage operation, painting on the temporary canvas(es)
     // that are twice smaller in size.
-    const width = img.width;
-    const height = img.height;
+
+    // displayWidth and displayHeight are used for VideoFrame.
+    const width = img.width ?? img.displayWidth;
+    const height = img.height ?? img.displayHeight;
     let widthScale = Math.max(
       Math.hypot(inverseTransform[0], inverseTransform[1]),
       1


</patch>

Imports:
<imports>
Available Packages
Dev Dependencies:
- @babel/core: ^7.25.8
- @babel/preset-env: ^7.25.8
- @babel/runtime: ^7.25.7
- @fluent/bundle: ^0.18.0
- @fluent/dom: ^0.10.0
- @jazzer.js/core: ^2.1.0
- @metalsmith/layouts: ^2.7.0
- @metalsmith/markdown: ^1.10.0
- autoprefixer: ^10.4.20
- babel-loader: ^9.2.1
- caniuse-lite: ^1.0.30001669
- canvas: ^3.0.0-rc2
- core-js: ^3.38.1
- eslint: ^8.57.1
- eslint-plugin-import: ^2.31.0
- eslint-plugin-jasmine: ^4.2.2
- eslint-plugin-json: ^3.1.0
- eslint-plugin-no-unsanitized: ^4.1.2
- eslint-plugin-perfectionist: ^3.9.1
- eslint-plugin-prettier: ^5.2.1
- eslint-plugin-unicorn: ^56.0.0
- gulp: ^5.0.0
- gulp-cli: ^3.0.0
- gulp-postcss: ^10.0.0
- gulp-rename: ^2.0.0
- gulp-replace: ^1.1.4
- gulp-zip: ^6.0.0
- highlight.js: ^11.10.0
- jasmine: ^5.4.0
- jsdoc: ^4.0.4
- jstransformer-nunjucks: ^1.2.0
- metalsmith: ^2.6.3
- metalsmith-html-relative: ^2.0.5
- ordered-read-streams: ^2.0.0
- path2d: ^0.2.1
- pngjs: ^7.0.0
- postcss: ^8.4.47
- postcss-dark-theme-class: ^1.3.0
- postcss-dir-pseudo-class: ^9.0.0
- postcss-discard-comments: ^7.0.3
- postcss-nesting: ^13.0.0
- prettier: ^3.3.3
- puppeteer: 23.3.1
- stylelint: ^16.10.0
- stylelint-prettier: ^5.0.2
- svglint: ^3.0.0
- terser-webpack-plugin: ^5.3.10
- tsc-alias: ^1.8.10
- ttest: ^4.0.0
- typescript: ^5.6.3
- vinyl: ^3.0.0
- webpack: ^5.95.0
- webpack-stream: ^7.0.0
- yargs: ^17.7.2

Engines:
- node: >=18

Available Relative Imports:
- `../../src/core/annotation.js`: Annotation, AnnotationBorderStyle, AnnotationFactory, MarkupAnnotation, getQuadPoints
- `../../src/core/bidi.js`: bidi
- `../../src/core/cff_parser.js`: CFFCharset, CFFCompiler, CFFFDSelect, CFFParser, CFFStrings
- `../../src/core/cmap.js`: CMap, CMapFactory, IdentityCMap
- `../../src/core/colorspace.js`: ColorSpace
- `../../src/core/core_utils.js`: arrayBuffersToBytes, encodeToXmlString, escapePDFName, escapeString, getInheritableProperty, getSizeInBytes, isAscii, isWhiteSpace, log2, numberToString, parseXFAPath, recoverJsURL, stringToUTF16HexString, stringToUTF16String, toRomanNumerals, validateCSSFont
- `../../src/core/crypto.js`: AES128Cipher, AES256Cipher, ARCFourCipher, CipherTransformFactory, PDF17, PDF20, calculateMD5, calculateSHA256, calculateSHA384, calculateSHA512
- `../../src/core/default_appearance.js`: createDefaultAppearance, parseAppearanceStream, parseDefaultAppearance
- `../../src/core/document.js`: PDFDocument, Page
- `../../src/core/encodings.js`: getEncoding
- `../../src/core/evaluator.js`: PartialEvaluator
- `../../src/core/flate_stream.js`: FlateStream
- `../../src/core/font_substitutions.js`: getFontSubstitution
- `../../src/core/fonts_utils.js`: SEAC_ANALYSIS_ENABLED
- `../../src/core/function.js`: PDFFunctionFactory, PostScriptCompiler, PostScriptEvaluator
- `../../src/core/glyphlist.js`: getDingbatsGlyphsUnicode, getGlyphsUnicode
- `../../src/core/image_utils.js`: GlobalImageCache, LocalColorSpaceCache
- `../../src/core/jbig2.js`: Jbig2Error, Jbig2Image
- `../../src/core/jpg.js`: JpegError, JpegImage
- `../../src/core/jpx.js`: JpxError, JpxImage
- `../../src/core/metadata_parser.js`: MetadataParser
- `../../src/core/operator_list.js`: OperatorList
- `../../src/core/parser.js`: Lexer, Linearization, Parser
- `../../src/core/predictor_stream.js`: PredictorStream
- `../../src/core/primitives.js`: Cmd, Dict, EOF, Name, Ref, RefSet, RefSetCache, isCmd, isDict, isName, isRefsEqual
- `../../src/core/ps_parser.js`: PostScriptLexer, PostScriptParser
- `../../src/core/stream.js`: NullStream, Stream, StringStream
- `../../src/core/type1_parser.js`: Type1Parser
- `../../src/core/unicode.js`: getCharUnicodeCategory, getUnicodeForGlyph, getUnicodeRangeFor, mapSpecialUnicodeValues
- `../../src/core/worker.js`: WorkerMessageHandler, WorkerTask
- `../../src/core/writer.js`: incrementalUpdate, writeDict
- `../../src/core/xfa/bind.js`: Binder
- `../../src/core/xfa/data.js`: DataHandler
- `../../src/core/xfa/factory.js`: XFAFactory
- `../../src/core/xfa/formcalc_lexer.js`: Lexer, TOKEN, Token
- `../../src/core/xfa/formcalc_parser.js`: Errors, Parser
- `../../src/core/xfa/parser.js`: XFAParser
- `../../src/core/xfa/som.js`: searchNode
- `../../src/core/xfa/symbol_utils.js`: $dump, $getChildren, $getChildrenByClass, $getChildrenByName, $text, $uid
- `../../src/core/xml_parser.js`: SimpleXMLParser, XMLParserBase
- `../../src/display/annotation_layer.js`: AnnotationLayer
- `../../src/display/annotation_storage.js`: AnnotationStorage
- `../../src/display/api.js`: DefaultCMapReaderFactory, DefaultCanvasFactory, DefaultStandardFontDataFactory, LoopbackPort, PDFDataRangeTransport, PDFDocumentLoadingTask, PDFDocumentProxy, PDFPageProxy, PDFWorker, RenderTask, build, getDocument, version
- `../../src/display/display_utils.js`: DOMCanvasFactory, DOMSVGFactory, OutputScale, PDFDateString, PageViewport, PixelsPerInch, RenderingCancelledException, StatTimer, fetchData, getFilenameFromUrl, getPdfFilenameFromUrl, getXfaPageViewport, isDataScheme, isPdfFile, isValidFetchUrl, noContextMenu, setLayerDimensions
- `../../src/display/draw_layer.js`: DrawLayer
- `../../src/display/editor/annotation_editor_layer.js`: AnnotationEditorLayer
- `../../src/display/editor/color_picker.js`: ColorPicker
- `../../src/display/editor/tools.js`: AnnotationEditorUIManager, CommandManager
- `../../src/display/fetch_stream.js`: PDFFetchStream
- `../../src/display/metadata.js`: Metadata
- `../../src/display/network.js`: PDFNetworkStream
- `../../src/display/network_utils.js`: createHeaders, createResponseStatusError, extractFilenameFromHeader, validateRangeRequestCapabilities, validateResponseStatus
- `../../src/display/node_stream.js`: PDFNodeStream
- `../../src/display/node_utils.js`: NodePackages, fetchData
- `../../src/display/text_layer.js`: TextLayer
- `../../src/display/worker_options.js`: GlobalWorkerOptions
- `../../src/display/xfa_layer.js`: XfaLayer
- `../../src/shared/message_handler.js`: MessageHandler
- `../../src/shared/murmurhash3.js`: MurmurHash3_64
- `../../src/shared/util.js`: AbortException, AnnotationBorderStyleType, AnnotationEditorParamsType, AnnotationEditorType, AnnotationFieldFlag, AnnotationFlag, AnnotationMode, AnnotationType, BaseException, CMapCompressionType, FeatureTest, FormatError, ImageKind, InvalidPDFException, MissingPDFException, OPS, PasswordException, PasswordResponses, PermissionFlag, RenderingIntentFlag, UnexpectedResponseException, UnknownErrorException, Util, VerbosityLevel, assert, bytesToString, createValidAbsoluteUrl, getModificationDate, getVerbosityLevel, isNodeJS, normalizeUnicode, objectSize, setVerbosityLevel, shadow, string32, stringToBytes, stringToPDFString, stringToUTF8String
- `../../web/annotation_layer_builder.js`: AnnotationLayerBuilder
- `../../web/app_options.js`: AppOptions, OptionKind
- `../../web/download_manager.js`: DownloadManager
- `../../web/event_utils.js`: EventBus, WaitOnType, waitOnEventOrTimeout
- `../../web/genericl10n.js`: GenericL10n
- `../../web/pdf_find_controller.js`: FindState, PDFFindController
- `../../web/pdf_find_utils.js`: CharacterType, getCharacterType
- `../../web/pdf_history.js`: PDFHistory, isDestArraysEqual, isDestHashesEqual
- `../../web/pdf_link_service.js`: LinkTarget, PDFLinkService, SimpleLinkService
- `../../web/pdf_page_view.js`: PDFPageView
- `../../web/pdf_scripting_manager.component.js`: PDFScriptingManager
- `../../web/pdf_single_page_viewer.js`: PDFSinglePageViewer
- `../../web/pdf_viewer.js`: PDFPageViewBuffer, PDFViewer
- `../../web/struct_tree_layer_builder.js`: StructTreeLayerBuilder
- `../../web/text_layer_builder.js`: TextLayerBuilder
- `../../web/ui_utils.js`: AutoPrintRegExp, ProgressBar, RenderingStates, ScrollMode, SpreadMode, backtrackBeforeAllVisibleElements, binarySearchFirstItem, calcRound, getPageSizeInches, getVisibleElements, isPortraitOrientation, isValidRotation, parseQueryString, removeNullCharacters
- `../../web/xfa_layer_builder.js`: XfaLayerBuilder
- `./test_utils.js`: CMAP_URL, DefaultFileReaderFactory, STANDARD_FONT_DATA_URL, TEST_PDFS_PATH, XRefMock, buildGetDocumentParams, createIdFactory, createTemporaryNodeServer
- `./testreporter.js`: TestReporter
</imports>

Code:
<code>
File:
src/core/base_stream.js
1 /* Copyright 2021 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 import { bytesToString, shadow, unreachable } from "../shared/util.js";
17 
18 class BaseStream {
19   constructor() {
20     if (
21       (typeof PDFJSDev === "undefined" || PDFJSDev.test("TESTING")) &&
22       this.constructor === BaseStream
23     ) {
24       unreachable("Cannot initialize BaseStream.");
25     }
26   }
27 
28   // eslint-disable-next-line getter-return
32 
33   // eslint-disable-next-line getter-return
37 
132 }
133 
File:
src/core/image.js
1 /* Copyright 2012 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 import {
17   assert,
18   FeatureTest,
19   FormatError,
20   ImageKind,
21   warn,
22 } from "../shared/util.js";
23 import {
24   convertBlackAndWhiteToRGBA,
25   convertToRGBA,
26 } from "../shared/image_utils.js";
27 import { BaseStream } from "./base_stream.js";
28 import { ColorSpace } from "./colorspace.js";
29 import { DecodeStream } from "./decode_stream.js";
30 import { ImageResizer } from "./image_resizer.js";
31 import { JpegStream } from "./jpeg_stream.js";
32 import { JpxImage } from "./jpx.js";
33 import { Name } from "./primitives.js";
34 
93 class PDFImage {
94   constructor({
95     xref,
96     res,
97     image,
98     isInline = false,
99     smask = null,
100     mask = null,
101     isMask = false,
102     pdfFunctionFactory,
103     localColorSpaceCache,
104   }) {
105     this.image = image;
106     const dict = image.dict;
107 
108     const filter = dict.get("F", "Filter");
109     let filterName;
110     if (filter instanceof Name) {
111       filterName = filter.name;
112     } else if (Array.isArray(filter)) {
113       const filterZero = xref.fetchIfRef(filter[0]);
114       if (filterZero instanceof Name) {
115         filterName = filterZero.name;
116       }
117     }
118     switch (filterName) {
119       case "JPXDecode":
120         ({
121           width: image.width,
122           height: image.height,
123           componentsCount: image.numComps,
124           bitsPerComponent: image.bitsPerComponent,
125         } = JpxImage.parseImageProperties(image.stream));
126         image.stream.reset();
127         this.jpxDecoderOptions = {
128           numComponents: 0,
129           isIndexedColormap: false,
130           smaskInData: dict.has("SMaskInData"),
131         };
132         break;
133       case "JBIG2Decode":
134         image.bitsPerComponent = 1;
135         image.numComps = 1;
136         break;
137     }
138 
139     let width = dict.get("W", "Width");
140     let height = dict.get("H", "Height");
141 
142     if (
143       Number.isInteger(image.width) &&
144       image.width > 0 &&
145       Number.isInteger(image.height) &&
146       image.height > 0 &&
147       (image.width !== width || image.height !== height)
148     ) {
149       warn(
150         "PDFImage - using the Width/Height of the image data, " +
151           "rather than the image dictionary."
152       );
153       width = image.width;
154       height = image.height;
155     }
156     if (width < 1 || height < 1) {
157       throw new FormatError(
158         `Invalid image width: ${width} or height: ${height}`
159       );
160     }
161     this.width = width;
162     this.height = height;
163 
164     this.interpolate = dict.get("I", "Interpolate");
165     this.imageMask = dict.get("IM", "ImageMask") || false;
166     this.matte = dict.get("Matte") || false;
167 
168     let bitsPerComponent = image.bitsPerComponent;
169     if (!bitsPerComponent) {
170       bitsPerComponent = dict.get("BPC", "BitsPerComponent");
171       if (!bitsPerComponent) {
172         if (this.imageMask) {
173           bitsPerComponent = 1;
174         } else {
175           throw new FormatError(
176             `Bits per component missing in image: ${this.imageMask}`
177           );
178         }
179       }
180     }
181     this.bpc = bitsPerComponent;
182 
183     if (!this.imageMask) {
184       let colorSpace = dict.getRaw("CS") || dict.getRaw("ColorSpace");
185       const hasColorSpace = !!colorSpace;
186       if (!hasColorSpace) {
187         if (this.jpxDecoderOptions) {
188           colorSpace = Name.get("DeviceRGBA");
189         } else {
190           switch (image.numComps) {
191             case 1:
192               colorSpace = Name.get("DeviceGray");
193               break;
194             case 3:
195               colorSpace = Name.get("DeviceRGB");
196               break;
197             case 4:
198               colorSpace = Name.get("DeviceCMYK");
199               break;
200             default:
201               throw new Error(
202                 `Images with ${image.numComps} color components not supported.`
203               );
204           }
205         }
206       } else if (this.jpxDecoderOptions?.smaskInData) {
207         // If the jpx image has a color space then it mustn't be used in order
208         // to be able to use the color space that comes from the pdf.
209         colorSpace = Name.get("DeviceRGBA");
210       }
211 
212       this.colorSpace = ColorSpace.parse({
213         cs: colorSpace,
214         xref,
215         resources: isInline ? res : null,
216         pdfFunctionFactory,
217         localColorSpaceCache,
218       });
219       this.numComps = this.colorSpace.numComps;
220 
221       if (this.jpxDecoderOptions) {
222         this.jpxDecoderOptions.numComponents = hasColorSpace ? this.numComp : 0;
223         // If the jpx image has a color space then it musn't be used in order to
224         // be able to use the color space that comes from the pdf.
225         this.jpxDecoderOptions.isIndexedColormap =
226           this.colorSpace.name === "Indexed";
227       }
228     }
229 
230     this.decode = dict.getArray("D", "Decode");
231     this.needsDecode = false;
232     if (
233       this.decode &&
234       ((this.colorSpace &&
235         !this.colorSpace.isDefaultDecode(this.decode, bitsPerComponent)) ||
236         (isMask &&
237           !ColorSpace.isDefaultDecode(this.decode, /* numComps = */ 1)))
238     ) {
239       this.needsDecode = true;
240       // Do some preprocessing to avoid more math.
241       const max = (1 << bitsPerComponent) - 1;
242       this.decodeCoefficients = [];
243       this.decodeAddends = [];
244       const isIndexed = this.colorSpace?.name === "Indexed";
245       for (let i = 0, j = 0; i < this.decode.length; i += 2, ++j) {
246         const dmin = this.decode[i];
247         const dmax = this.decode[i + 1];
248         this.decodeCoefficients[j] = isIndexed
249           ? (dmax - dmin) / max
250           : dmax - dmin;
251         this.decodeAddends[j] = isIndexed ? dmin : max * dmin;
252       }
253     }
254 
255     if (smask) {
256       this.smask = new PDFImage({
257         xref,
258         res,
259         image: smask,
260         isInline,
261         pdfFunctionFactory,
262         localColorSpaceCache,
263       });
264     } else if (mask) {
265       if (mask instanceof BaseStream) {
266         const maskDict = mask.dict,
267           imageMask = maskDict.get("IM", "ImageMask");
268         if (!imageMask) {
269           warn("Ignoring /Mask in image without /ImageMask.");
270         } else {
271           this.mask = new PDFImage({
272             xref,
273             res,
274             image: mask,
275             isInline,
276             isMask: true,
277             pdfFunctionFactory,
278             localColorSpaceCache,
279           });
280         }
281       } else {
282         // Color key mask (just an array).
283         this.mask = mask;
284       }
285     }
286   }
287 
685   async createImageData(forceRGBA = false, isOffscreenCanvasSupported = false) {
686     const drawWidth = this.drawWidth;
687     const drawHeight = this.drawHeight;
688     const imgData = {
689       width: drawWidth,
690       height: drawHeight,
691       interpolate: this.interpolate,
692       kind: 0,
693       data: null,
694       // Other fields are filled in below.
695     };
696 
697     const numComps = this.numComps;
698     const originalWidth = this.width;
699     const originalHeight = this.height;
700     const bpc = this.bpc;
701 
702     // Rows start at byte boundary.
703     const rowBytes = (originalWidth * numComps * bpc + 7) >> 3;
704     const mustBeResized =
705       isOffscreenCanvasSupported &&
706       ImageResizer.needsToBeResized(drawWidth, drawHeight);
707 
708     if (!this.smask && !this.mask && this.colorSpace.name === "DeviceRGBA") {
709       imgData.kind = ImageKind.RGBA_32BPP;
710       const imgArray = (imgData.data = await this.getImageBytes(
711         originalHeight * originalWidth * 4,
712         {}
713       ));
714 
715       if (isOffscreenCanvasSupported) {
716         if (!mustBeResized) {
717           return this.createBitmap(
718             ImageKind.RGBA_32BPP,
719             drawWidth,
720             drawHeight,
721             imgArray
722           );
723         }
724         return ImageResizer.createImage(imgData, false);
725       }
726 
727       return imgData;
728     }
729 
730     if (!forceRGBA) {
731       // If it is a 1-bit-per-pixel grayscale (i.e. black-and-white) image
732       // without any complications, we pass a same-sized copy to the main
733       // thread rather than expanding by 32x to RGBA form. This saves *lots*
734       // of memory for many scanned documents. It's also much faster.
735       //
736       // Similarly, if it is a 24-bit-per pixel RGB image without any
737       // complications, we avoid expanding by 1.333x to RGBA form.
738       let kind;
739       if (this.colorSpace.name === "DeviceGray" && bpc === 1) {
740         kind = ImageKind.GRAYSCALE_1BPP;
741       } else if (
742         this.colorSpace.name === "DeviceRGB" &&
743         bpc === 8 &&
744         !this.needsDecode
745       ) {
746         kind = ImageKind.RGB_24BPP;
747       }
748       if (
749         kind &&
750         !this.smask &&
751         !this.mask &&
752         drawWidth === originalWidth &&
753         drawHeight === originalHeight
754       ) {
755         const data = await this.getImageBytes(originalHeight * rowBytes, {});
756         if (isOffscreenCanvasSupported) {
757           if (mustBeResized) {
758             return ImageResizer.createImage(
759               {
760                 data,
761                 kind,
762                 width: drawWidth,
763                 height: drawHeight,
764                 interpolate: this.interpolate,
765               },
766               this.needsDecode
767             );
768           }
769           return this.createBitmap(kind, originalWidth, originalHeight, data);
770         }
771         imgData.kind = kind;
772         imgData.data = data;
773 
774         if (this.needsDecode) {
775           // Invert the buffer (which must be grayscale if we reached here).
776           assert(
777             kind === ImageKind.GRAYSCALE_1BPP,
778             "PDFImage.createImageData: The image must be grayscale."
779           );
780           const buffer = imgData.data;
781           for (let i = 0, ii = buffer.length; i < ii; i++) {
782             buffer[i] ^= 0xff;
783           }
784         }
785         return imgData;
786       }
787       if (
788         this.image instanceof JpegStream &&
789         !this.smask &&
790         !this.mask &&
791         !this.needsDecode
792       ) {
793         let imageLength = originalHeight * rowBytes;
794         if (isOffscreenCanvasSupported && !mustBeResized) {
795           let isHandled = false;
796           switch (this.colorSpace.name) {
797             case "DeviceGray":
798               // Avoid truncating the image, since `JpegImage.getData`
799               // will expand the image data when `forceRGB === true`.
800               imageLength *= 4;
801               isHandled = true;
802               break;
803             case "DeviceRGB":
804               imageLength = (imageLength / 3) * 4;
805               isHandled = true;
806               break;
807             case "DeviceCMYK":
808               isHandled = true;
809               break;
810           }
811 
812           if (isHandled) {
813             const rgba = await this.getImageBytes(imageLength, {
814               drawWidth,
815               drawHeight,
816               forceRGBA: true,
817             });
818             return this.createBitmap(
819               ImageKind.RGBA_32BPP,
820               drawWidth,
821               drawHeight,
822               rgba
823             );
824           }
825         } else {
826           switch (this.colorSpace.name) {
827             case "DeviceGray":
828               imageLength *= 3;
829             /* falls through */
830             case "DeviceRGB":
831             case "DeviceCMYK":
832               imgData.kind = ImageKind.RGB_24BPP;
833               imgData.data = await this.getImageBytes(imageLength, {
834                 drawWidth,
835                 drawHeight,
836                 forceRGB: true,
837               });
838               if (mustBeResized) {
839                 // The image is too big so we resize it.
840                 return ImageResizer.createImage(imgData);
841               }
842               return imgData;
843           }
844         }
845       }
846     }
847 
848     const imgArray = await this.getImageBytes(originalHeight * rowBytes, {
849       internal: true,
850     });
851     // imgArray can be incomplete (e.g. after CCITT fax encoding).
852     const actualHeight =
853       0 | (((imgArray.length / rowBytes) * drawHeight) / originalHeight);
854 
855     const comps = this.getComponents(imgArray);
856 
857     // If opacity data is present, use RGBA_32BPP form. Otherwise, use the
858     // more compact RGB_24BPP form if allowable.
859     let alpha01, maybeUndoPreblend;
860 
861     let canvas, ctx, canvasImgData, data;
862     if (isOffscreenCanvasSupported && !mustBeResized) {
863       canvas = new OffscreenCanvas(drawWidth, drawHeight);
864       ctx = canvas.getContext("2d");
865       canvasImgData = ctx.createImageData(drawWidth, drawHeight);
866       data = canvasImgData.data;
867     }
868 
869     imgData.kind = ImageKind.RGBA_32BPP;
870 
871     if (!forceRGBA && !this.smask && !this.mask) {
872       if (!isOffscreenCanvasSupported || mustBeResized) {
873         imgData.kind = ImageKind.RGB_24BPP;
874         data = new Uint8ClampedArray(drawWidth * drawHeight * 3);
875         alpha01 = 0;
876       } else {
877         const arr = new Uint32Array(data.buffer);
878         arr.fill(FeatureTest.isLittleEndian ? 0xff000000 : 0x000000ff);
879         alpha01 = 1;
880       }
881       maybeUndoPreblend = false;
882     } else {
883       if (!isOffscreenCanvasSupported || mustBeResized) {
884         data = new Uint8ClampedArray(drawWidth * drawHeight * 4);
885       }
886 
887       alpha01 = 1;
888       maybeUndoPreblend = true;
889 
890       // Color key masking (opacity) must be performed before decoding.
891       await this.fillOpacity(data, drawWidth, drawHeight, actualHeight, comps);
892     }
893 
894     if (this.needsDecode) {
895       this.decodeBuffer(comps);
896     }
897     this.colorSpace.fillRgb(
898       data,
899       originalWidth,
900       originalHeight,
901       drawWidth,
902       drawHeight,
903       actualHeight,
904       bpc,
905       comps,
906       alpha01
907     );
908     if (maybeUndoPreblend) {
909       this.undoPreblend(data, drawWidth, actualHeight);
910     }
911 
912     if (isOffscreenCanvasSupported && !mustBeResized) {
913       ctx.putImageData(canvasImgData, 0, 0);
914       const bitmap = canvas.transferToImageBitmap();
915 
916       return {
917         data: null,
918         width: drawWidth,
919         height: drawHeight,
920         bitmap,
921         interpolate: this.interpolate,
922       };
923     }
924 
925     imgData.data = data;
926     if (mustBeResized) {
927       return ImageResizer.createImage(imgData);
928     }
929     return imgData;
930   }
931 
1050 }
1051 
File:
src/core/jpeg_stream.js
1 /* Copyright 2012 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 import { DecodeStream } from "./decode_stream.js";
17 import { Dict } from "./primitives.js";
18 import { JpegImage } from "./jpg.js";
19 import { shadow } from "../shared/util.js";
20 
21 /**
22  * For JPEG's we use a library to decode these images and the stream behaves
23  * like all the other DecodeStreams.
24  */
25 class JpegStream extends DecodeStream {
26   constructor(stream, maybeLength, params) {
27     super(maybeLength);
28 
29     this.stream = stream;
30     this.dict = stream.dict;
31     this.maybeLength = maybeLength;
32     this.params = params;
33   }
34 
49   decodeImage(bytes) {
50     if (this.eof) {
51       return this.buffer;
52     }
53     bytes ||= this.bytes;
54 
55     // Some images may contain 'junk' before the SOI (start-of-image) marker.
56     // Note: this seems to mainly affect inline images.
57     for (let i = 0, ii = bytes.length - 1; i < ii; i++) {
58       if (bytes[i] === 0xff && bytes[i + 1] === 0xd8) {
59         if (i > 0) {
60           bytes = bytes.subarray(i);
61         }
62         break;
63       }
64     }
65     const jpegOptions = {
66       decodeTransform: undefined,
67       colorTransform: undefined,
68     };
69 
70     // Checking if values need to be transformed before conversion.
71     const decodeArr = this.dict.getArray("D", "Decode");
72     if ((this.forceRGBA || this.forceRGB) && Array.isArray(decodeArr)) {
73       const bitsPerComponent = this.dict.get("BPC", "BitsPerComponent") || 8;
74       const decodeArrLength = decodeArr.length;
75       const transform = new Int32Array(decodeArrLength);
76       let transformNeeded = false;
77       const maxValue = (1 << bitsPerComponent) - 1;
78       for (let i = 0; i < decodeArrLength; i += 2) {
79         transform[i] = ((decodeArr[i + 1] - decodeArr[i]) * 256) | 0;
80         transform[i + 1] = (decodeArr[i] * maxValue) | 0;
81         if (transform[i] !== 256 || transform[i + 1] !== 0) {
82           transformNeeded = true;
83         }
84       }
85       if (transformNeeded) {
86         jpegOptions.decodeTransform = transform;
87       }
88     }
89     // Fetching the 'ColorTransform' entry, if it exists.
90     if (this.params instanceof Dict) {
91       const colorTransform = this.params.get("ColorTransform");
92       if (Number.isInteger(colorTransform)) {
93         jpegOptions.colorTransform = colorTransform;
94       }
95     }
96     const jpegImage = new JpegImage(jpegOptions);
97 
98     jpegImage.parse(bytes);
99     const data = jpegImage.getData({
100       width: this.drawWidth,
101       height: this.drawHeight,
102       forceRGBA: this.forceRGBA,
103       forceRGB: this.forceRGB,
104       isSourcePDF: true,
105     });
106     this.buffer = data;
107     this.bufferLength = data.length;
108     this.eof = true;
109 
110     return this.buffer;
111   }
112 
116 }
117 
File:
src/core/jpg.js
1 /* Copyright 2014 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the 'License');
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an 'AS IS' BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 import { assert, BaseException, warn } from "../shared/util.js";
17 import { grayToRGBA } from "../shared/image_utils.js";
18 import { readUint16 } from "./core_utils.js";
19 
52 // prettier-ignore
53 const dctZigZag = new Uint8Array([
54    0,
55    1,  8,
56   16,  9,  2,
57    3, 10, 17, 24,
58   32, 25, 18, 11, 4,
59    5, 12, 19, 26, 33, 40,
60   48, 41, 34, 27, 20, 13,  6,
61    7, 14, 21, 28, 35, 42, 49, 56,
62   57, 50, 43, 36, 29, 22, 15,
63   23, 30, 37, 44, 51, 58,
64   59, 52, 45, 38, 31,
65   39, 46, 53, 60,
66   61, 54, 47,
67   55, 62,
68   63
69 ]);
70 
71 const dctCos1 = 4017; // cos(pi/16)
72 const dctSin1 = 799; // sin(pi/16)
73 const dctCos3 = 3406; // cos(3*pi/16)
74 const dctSin3 = 2276; // sin(3*pi/16)
75 const dctCos6 = 1567; // cos(6*pi/16)
76 const dctSin6 = 3784; // sin(6*pi/16)
77 const dctSqrt2 = 5793; // sqrt(2)
78 const dctSqrt1d2 = 2896; // sqrt(2) / 2
79 
459 // A port of poppler's IDCT method which in turn is taken from:
460 //   Christoph Loeffler, Adriaan Ligtenberg, George S. Moschytz,
461 //   'Practical Fast 1-D DCT Algorithms with 11 Multiplications',
462 //   IEEE Intl. Conf. on Acoustics, Speech & Signal Processing, 1989,
463 //   988-991.
703 
747 class JpegImage {
748   constructor({ decodeTransform = null, colorTransform = -1 } = {}) {
749     this._decodeTransform = decodeTransform;
750     this._colorTransform = colorTransform;
751   }
752 
753   parse(data, { dnlScanLines = null } = {}) {
754     function readDataBlock() {
755       const length = readUint16(data, offset);
756       offset += 2;
757       let endOffset = offset + length - 2;
758 
759       const fileMarker = findNextFileMarker(data, endOffset, offset);
760       if (fileMarker?.invalid) {
761         warn(
762           "readDataBlock - incorrect length, current marker is: " +
763             fileMarker.invalid
764         );
765         endOffset = fileMarker.offset;
766       }
767 
768       const array = data.subarray(offset, endOffset);
769       offset += array.length;
770       return array;
771     }
772 
773     function prepareComponents(frame) {
774       const mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / frame.maxH);
775       const mcusPerColumn = Math.ceil(frame.scanLines / 8 / frame.maxV);
776       for (const component of frame.components) {
777         const blocksPerLine = Math.ceil(
778           (Math.ceil(frame.samplesPerLine / 8) * component.h) / frame.maxH
779         );
780         const blocksPerColumn = Math.ceil(
781           (Math.ceil(frame.scanLines / 8) * component.v) / frame.maxV
782         );
783         const blocksPerLineForMcu = mcusPerLine * component.h;
784         const blocksPerColumnForMcu = mcusPerColumn * component.v;
785 
786         const blocksBufferSize =
787           64 * blocksPerColumnForMcu * (blocksPerLineForMcu + 1);
788         component.blockData = new Int16Array(blocksBufferSize);
789         component.blocksPerLine = blocksPerLine;
790         component.blocksPerColumn = blocksPerColumn;
791       }
792       frame.mcusPerLine = mcusPerLine;
793       frame.mcusPerColumn = mcusPerColumn;
794     }
795 
796     let offset = 0;
797     let jfif = null;
798     let adobe = null;
799     let frame, resetInterval;
800     let numSOSMarkers = 0;
801     const quantizationTables = [];
802     const huffmanTablesAC = [],
803       huffmanTablesDC = [];
804 
805     let fileMarker = readUint16(data, offset);
806     offset += 2;
807     if (fileMarker !== /* SOI (Start of Image) = */ 0xffd8) {
808       throw new JpegError("SOI not found");
809     }
810     fileMarker = readUint16(data, offset);
811     offset += 2;
812 
813     markerLoop: while (fileMarker !== /* EOI (End of Image) = */ 0xffd9) {
814       let i, j, l;
815       switch (fileMarker) {
816         case 0xffe0: // APP0 (Application Specific)
817         case 0xffe1: // APP1
818         case 0xffe2: // APP2
819         case 0xffe3: // APP3
820         case 0xffe4: // APP4
821         case 0xffe5: // APP5
822         case 0xffe6: // APP6
823         case 0xffe7: // APP7
824         case 0xffe8: // APP8
825         case 0xffe9: // APP9
826         case 0xffea: // APP10
827         case 0xffeb: // APP11
828         case 0xffec: // APP12
829         case 0xffed: // APP13
830         case 0xffee: // APP14
831         case 0xffef: // APP15
832         case 0xfffe: // COM (Comment)
833           const appData = readDataBlock();
834 
835           if (fileMarker === 0xffe0) {
836             // 'JFIF\x00'
837             if (
838               appData[0] === 0x4a &&
839               appData[1] === 0x46 &&
840               appData[2] === 0x49 &&
841               appData[3] === 0x46 &&
842               appData[4] === 0
843             ) {
844               jfif = {
845                 version: { major: appData[5], minor: appData[6] },
846                 densityUnits: appData[7],
847                 xDensity: (appData[8] << 8) | appData[9],
848                 yDensity: (appData[10] << 8) | appData[11],
849                 thumbWidth: appData[12],
850                 thumbHeight: appData[13],
851                 thumbData: appData.subarray(
852                   14,
853                   14 + 3 * appData[12] * appData[13]
854                 ),
855               };
856             }
857           }
858           // TODO APP1 - Exif
859           if (fileMarker === 0xffee) {
860             // 'Adobe'
861             if (
862               appData[0] === 0x41 &&
863               appData[1] === 0x64 &&
864               appData[2] === 0x6f &&
865               appData[3] === 0x62 &&
866               appData[4] === 0x65
867             ) {
868               adobe = {
869                 version: (appData[5] << 8) | appData[6],
870                 flags0: (appData[7] << 8) | appData[8],
871                 flags1: (appData[9] << 8) | appData[10],
872                 transformCode: appData[11],
873               };
874             }
875           }
876           break;
877 
878         case 0xffdb: // DQT (Define Quantization Tables)
879           const quantizationTablesLength = readUint16(data, offset);
880           offset += 2;
881           const quantizationTablesEnd = quantizationTablesLength + offset - 2;
882           let z;
883           while (offset < quantizationTablesEnd) {
884             const quantizationTableSpec = data[offset++];
885             const tableData = new Uint16Array(64);
886             if (quantizationTableSpec >> 4 === 0) {
887               // 8 bit values
888               for (j = 0; j < 64; j++) {
889                 z = dctZigZag[j];
890                 tableData[z] = data[offset++];
891               }
892             } else if (quantizationTableSpec >> 4 === 1) {
893               // 16 bit values
894               for (j = 0; j < 64; j++) {
895                 z = dctZigZag[j];
896                 tableData[z] = readUint16(data, offset);
897                 offset += 2;
898               }
899             } else {
900               throw new JpegError("DQT - invalid table spec");
901             }
902             quantizationTables[quantizationTableSpec & 15] = tableData;
903           }
904           break;
905 
906         case 0xffc0: // SOF0 (Start of Frame, Baseline DCT)
907         case 0xffc1: // SOF1 (Start of Frame, Extended DCT)
908         case 0xffc2: // SOF2 (Start of Frame, Progressive DCT)
909           if (frame) {
910             throw new JpegError("Only single frame JPEGs supported");
911           }
912           offset += 2; // Skip marker length.
913 
914           frame = {};
915           frame.extended = fileMarker === 0xffc1;
916           frame.progressive = fileMarker === 0xffc2;
917           frame.precision = data[offset++];
918           const sofScanLines = readUint16(data, offset);
919           offset += 2;
920           frame.scanLines = dnlScanLines || sofScanLines;
921           frame.samplesPerLine = readUint16(data, offset);
922           offset += 2;
923           frame.components = [];
924           frame.componentIds = {};
925           const componentsCount = data[offset++];
926           let maxH = 0,
927             maxV = 0;
928           for (i = 0; i < componentsCount; i++) {
929             const componentId = data[offset];
930             const h = data[offset + 1] >> 4;
931             const v = data[offset + 1] & 15;
932             if (maxH < h) {
933               maxH = h;
934             }
935             if (maxV < v) {
936               maxV = v;
937             }
938             const qId = data[offset + 2];
939             l = frame.components.push({
940               h,
941               v,
942               quantizationId: qId,
943               quantizationTable: null, // See comment below.
944             });
945             frame.componentIds[componentId] = l - 1;
946             offset += 3;
947           }
948           frame.maxH = maxH;
949           frame.maxV = maxV;
950           prepareComponents(frame);
951           break;
952 
953         case 0xffc4: // DHT (Define Huffman Tables)
954           const huffmanLength = readUint16(data, offset);
955           offset += 2;
956           for (i = 2; i < huffmanLength; ) {
957             const huffmanTableSpec = data[offset++];
958             const codeLengths = new Uint8Array(16);
959             let codeLengthSum = 0;
960             for (j = 0; j < 16; j++, offset++) {
961               codeLengthSum += codeLengths[j] = data[offset];
962             }
963             const huffmanValues = new Uint8Array(codeLengthSum);
964             for (j = 0; j < codeLengthSum; j++, offset++) {
965               huffmanValues[j] = data[offset];
966             }
967             i += 17 + codeLengthSum;
968 
969             (huffmanTableSpec >> 4 === 0 ? huffmanTablesDC : huffmanTablesAC)[
970               huffmanTableSpec & 15
971             ] = buildHuffmanTable(codeLengths, huffmanValues);
972           }
973           break;
974 
975         case 0xffdd: // DRI (Define Restart Interval)
976           offset += 2; // Skip marker length.
977 
978           resetInterval = readUint16(data, offset);
979           offset += 2;
980           break;
981 
982         case 0xffda: // SOS (Start of Scan)
983           // A DNL marker (0xFFDC), if it exists, is only allowed at the end
984           // of the first scan segment and may only occur once in an image.
985           // Furthermore, to prevent an infinite loop, do *not* attempt to
986           // parse DNL markers during re-parsing of the JPEG scan data.
987           const parseDNLMarker = ++numSOSMarkers === 1 && !dnlScanLines;
988 
989           offset += 2; // Skip marker length.
990 
991           const selectorsCount = data[offset++],
992             components = [];
993           for (i = 0; i < selectorsCount; i++) {
994             const index = data[offset++];
995             const componentIndex = frame.componentIds[index];
996             const component = frame.components[componentIndex];
997             component.index = index;
998             const tableSpec = data[offset++];
999             component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];
1000             component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];
1001             components.push(component);
1002           }
1003           const spectralStart = data[offset++],
1004             spectralEnd = data[offset++],
1005             successiveApproximation = data[offset++];
1006           try {
1007             const processed = decodeScan(
1008               data,
1009               offset,
1010               frame,
1011               components,
1012               resetInterval,
1013               spectralStart,
1014               spectralEnd,
1015               successiveApproximation >> 4,
1016               successiveApproximation & 15,
1017               parseDNLMarker
1018             );
1019             offset += processed;
1020           } catch (ex) {
1021             if (ex instanceof DNLMarkerError) {
1022               warn(`${ex.message} -- attempting to re-parse the JPEG image.`);
1023               return this.parse(data, { dnlScanLines: ex.scanLines });
1024             } else if (ex instanceof EOIMarkerError) {
1025               warn(`${ex.message} -- ignoring the rest of the image data.`);
1026               break markerLoop;
1027             }
1028             throw ex;
1029           }
1030           break;
1031 
1032         case 0xffdc: // DNL (Define Number of Lines)
1033           // Ignore the marker, since it's being handled in `decodeScan`.
1034           offset += 4;
1035           break;
1036 
1037         case 0xffff: // Fill bytes
1038           if (data[offset] !== 0xff) {
1039             // Avoid skipping a valid marker.
1040             offset--;
1041           }
1042           break;
1043 
1044         default:
1045           // Could be incorrect encoding -- the last 0xFF byte of the previous
1046           // block could have been eaten by the encoder, hence we fallback to
1047           // `startPos = offset - 3` when looking for the next valid marker.
1048           const nextFileMarker = findNextFileMarker(
1049             data,
1050             /* currentPos = */ offset - 2,
1051             /* startPos = */ offset - 3
1052           );
1053           if (nextFileMarker?.invalid) {
1054             warn(
1055               "JpegImage.parse - unexpected data, current marker is: " +
1056                 nextFileMarker.invalid
1057             );
1058             offset = nextFileMarker.offset;
1059             break;
1060           }
1061           if (!nextFileMarker || offset >= data.length - 1) {
1062             warn(
1063               "JpegImage.parse - reached the end of the image data " +
1064                 "without finding an EOI marker (0xFFD9)."
1065             );
1066             break markerLoop;
1067           }
1068           throw new JpegError(
1069             "JpegImage.parse - unknown marker: " + fileMarker.toString(16)
1070           );
1071       }
1072       fileMarker = readUint16(data, offset);
1073       offset += 2;
1074     }
1075 
1076     if (!frame) {
1077       throw new JpegError("JpegImage.parse - no frame data found.");
1078     }
1079     this.width = frame.samplesPerLine;
1080     this.height = frame.scanLines;
1081     this.jfif = jfif;
1082     this.adobe = adobe;
1083     this.components = [];
1084     for (const component of frame.components) {
1085       // Prevent errors when DQT markers are placed after SOF{n} markers,
1086       // by assigning the `quantizationTable` entry after the entire image
1087       // has been parsed (fixes issue7406.pdf).
1088       const quantizationTable = quantizationTables[component.quantizationId];
1089       if (quantizationTable) {
1090         component.quantizationTable = quantizationTable;
1091       }
1092 
1093       this.components.push({
1094         index: component.index,
1095         output: buildComponentData(frame, component),
1096         scaleX: component.h / frame.maxH,
1097         scaleY: component.v / frame.maxV,
1098         blocksPerLine: component.blocksPerLine,
1099         blocksPerColumn: component.blocksPerColumn,
1100       });
1101     }
1102     this.numComponents = this.components.length;
1103     return undefined;
1104   }
1105 
1581 }
1582 
File:
src/display/canvas.js
1 /* Copyright 2012 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 import {
17   FeatureTest,
18   FONT_IDENTITY_MATRIX,
19   IDENTITY_MATRIX,
20   ImageKind,
21   info,
22   isNodeJS,
23   OPS,
24   shadow,
25   TextRenderingMode,
26   unreachable,
27   Util,
28   warn,
29 } from "../shared/util.js";
30 import {
31   getCurrentTransform,
32   getCurrentTransformInverse,
33   PixelsPerInch,
34 } from "./display_utils.js";
35 import {
36   getShadingPattern,
37   PathType,
38   TilingPattern,
39 } from "./pattern_helper.js";
40 import { convertBlackAndWhiteToRGBA } from "../shared/image_utils.js";
41 
42 // <canvas> contexts store most of the state we need natively.
43 // However, PDF needs a bit more state, which we store here.
44 // Minimal font size that would be used during canvas fillText operations.
45 const MIN_FONT_SIZE = 16;
46 // Maximum font size that would be used during canvas fillText operations.
47 const MAX_FONT_SIZE = 100;
48 
49 // Defines the time the `executeOperatorList`-method is going to be executing
50 // before it stops and schedules a continue of execution.
51 const EXECUTION_TIME = 15; // ms
52 // Defines the number of steps before checking the execution time.
53 const EXECUTION_STEPS = 10;
54 
55 // To disable Type3 compilation, set the value to `-1`.
56 const MAX_SIZE_TO_COMPILE = 1000;
57 
58 const FULL_CHUNK_HEIGHT = 16;
59 
818 const LINE_CAP_STYLES = ["butt", "round", "square"];
819 const LINE_JOIN_STYLES = ["miter", "round", "bevel"];
820 const NORMAL_CLIP = {};
821 const EO_CLIP = {};
822 
823 class CanvasGraphics {
824   constructor(
825     canvasCtx,
826     commonObjs,
827     objs,
828     canvasFactory,
829     filterFactory,
830     { optionalContentConfig, markedContentStack = null },
831     annotationCanvasMap,
832     pageColors
833   ) {
834     this.ctx = canvasCtx;
835     this.current = new CanvasExtraState(
836       this.ctx.canvas.width,
837       this.ctx.canvas.height
838     );
839     this.stateStack = [];
840     this.pendingClip = null;
841     this.pendingEOFill = false;
842     this.res = null;
843     this.xobjs = null;
844     this.commonObjs = commonObjs;
845     this.objs = objs;
846     this.canvasFactory = canvasFactory;
847     this.filterFactory = filterFactory;
848     this.groupStack = [];
849     this.processingType3 = null;
850     // Patterns are painted relative to the initial page/form transform, see
851     // PDF spec 8.7.2 NOTE 1.
852     this.baseTransform = null;
853     this.baseTransformStack = [];
854     this.groupLevel = 0;
855     this.smaskStack = [];
856     this.smaskCounter = 0;
857     this.tempSMask = null;
858     this.suspendedCtx = null;
859     this.contentVisible = true;
860     this.markedContentStack = markedContentStack || [];
861     this.optionalContentConfig = optionalContentConfig;
862     this.cachedCanvases = new CachedCanvases(this.canvasFactory);
863     this.cachedPatterns = new Map();
864     this.annotationCanvasMap = annotationCanvasMap;
865     this.viewportScale = 1;
866     this.outputScaleX = 1;
867     this.outputScaleY = 1;
868     this.pageColors = pageColors;
869 
870     this._cachedScaleForStroking = [-1, 0];
871     this._cachedGetSinglePixelWidth = null;
872     this._cachedBitmapsMap = new Map();
873   }
874 
1058   _scaleImage(img, inverseTransform) {
1059     // Vertical or horizontal scaling shall not be more than 2 to not lose the
1060     // pixels during drawImage operation, painting on the temporary canvas(es)
1061     // that are twice smaller in size.
1062     const width = img.width;
1063     const height = img.height;
1064     let widthScale = Math.max(
1065       Math.hypot(inverseTransform[0], inverseTransform[1]),
1066       1
1067     );
1068     let heightScale = Math.max(
1069       Math.hypot(inverseTransform[2], inverseTransform[3]),
1070       1
1071     );
1072 
1073     let paintWidth = width,
1074       paintHeight = height;
1075     let tmpCanvasId = "prescale1";
1076     let tmpCanvas, tmpCtx;
1077     while (
1078       (widthScale > 2 && paintWidth > 1) ||
1079       (heightScale > 2 && paintHeight > 1)
1080     ) {
1081       let newWidth = paintWidth,
1082         newHeight = paintHeight;
1083       if (widthScale > 2 && paintWidth > 1) {
1084         // See bug 1820511 (Windows specific bug).
1085         // TODO: once the above bug is fixed we could revert to:
1086         // newWidth = Math.ceil(paintWidth / 2);
1087         newWidth =
1088           paintWidth >= 16384
1089             ? Math.floor(paintWidth / 2) - 1 || 1
1090             : Math.ceil(paintWidth / 2);
1091         widthScale /= paintWidth / newWidth;
1092       }
1093       if (heightScale > 2 && paintHeight > 1) {
1094         // TODO: see the comment above.
1095         newHeight =
1096           paintHeight >= 16384
1097             ? Math.floor(paintHeight / 2) - 1 || 1
1098             : Math.ceil(paintHeight) / 2;
1099         heightScale /= paintHeight / newHeight;
1100       }
1101       tmpCanvas = this.cachedCanvases.getCanvas(
1102         tmpCanvasId,
1103         newWidth,
1104         newHeight
1105       );
1106       tmpCtx = tmpCanvas.context;
1107       tmpCtx.clearRect(0, 0, newWidth, newHeight);
1108       tmpCtx.drawImage(
1109         img,
1110         0,
1111         0,
1112         paintWidth,
1113         paintHeight,
1114         0,
1115         0,
1116         newWidth,
1117         newHeight
1118       );
1119       img = tmpCanvas.canvas;
1120       paintWidth = newWidth;
1121       paintHeight = newHeight;
1122       tmpCanvasId = tmpCanvasId === "prescale1" ? "prescale2" : "prescale1";
1123     }
1124     return {
1125       img,
1126       paintWidth,
1127       paintHeight,
1128     };
1129   }
1130 
1278   // Graphics state
1286 
1611   // Path
1756 
1861   // Clipping
1865 
1870   // Text
1877 
2334   // Type3 fonts
2339 
2346   // Color
2378 
2462   // Images
2466 
3052   // Marked content
3053 
3086   // Compatibility
3087 
3096   // Helper functions
3097 
3195   // Rescale before stroking in order to have a final lineWidth
3196   // with both thicknesses greater or equal to 1.
3235 
3244 }
3245 
3251 
</code>

Test file:
<test_file>
File:
test/unit/primitives_spec.js
/* Copyright 2017 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import {
  Cmd,
  Dict,
  isCmd,
  isDict,
  isName,
  isRefsEqual,
  Name,
  Ref,
  RefSet,
  RefSetCache,
} from "../../src/core/primitives.js";
import { StringStream } from "../../src/core/stream.js";
import { XRefMock } from "./test_utils.js";
</test_file>

Your task:
You are a software tester at pdf.js.
1. Examine the existing test file. You may reuse any imports, helpers or setup blocks it already has.
2. Write exactly one javascript test `it("...", async () => {...})` block.
3. Your test must fail on the code before the patch, and pass after, hence the test will verify that the patch resolves the issue.
4. The test must be self-contained and to-the-point.
5. If you need something new use only the provided imports (respect the paths exactly how they are given) by importing dynamically for compatibility with Node.js — no new dependencies. 
6. Return only the javascript code for the new `it(...)` block (no comments or explanations).

Example structure:
it("should <describe behavior>", async () => {
  const { example } = await import("../../src/core/example.js");
  <initialize required variables>;
  <define expected variable>;
  <generate actual variables>;
  <compare expected with actual>;
});


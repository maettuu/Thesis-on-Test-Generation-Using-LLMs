<think>
Okay, I need to write a regression test for the issue where a TypeError occurs when parsing a JPEG image without proper frame data. The test should fail before the patch and pass after the patch is applied.

First, I'll start by understanding the problem. The error happens because the code tries to access 'samplesPerLine' of an undefined 'frame' object. This occurs when the JPEG data doesn't contain the necessary frame markers, so the 'frame' variable remains null or undefined.

The patch adds a check to see if 'frame' is null and throws a JpegError with a specific message. So, the test should simulate a scenario where the frame data is missing, causing the error.

I'll structure the test using Jest. The test will attempt to parse a minimal JPEG buffer that doesn't include the Start of Frame (SOF) marker, which is necessary for the 'frame' object to be defined.

In the test, I'll import the JpegImage class from the correct path. Then, I'll create a buffer that starts with the SOI marker (0xFFD8) but doesn't include any frame data. When parsing this buffer, the code should throw a JpegError with the message "JpegImage.parse - no frame data found."

I need to ensure that the test correctly catches this error. Using try-catch, I'll attempt to parse the buffer and expect the error to be thrown. If the error isn't thrown, the test will fail.

I should also make sure that the test is self-contained and doesn't rely on any external data. The buffer is simple and sufficient to trigger the issue.

Finally, I'll write the test using async/await since the import statement is dynamic and might require await. The test will be named appropriately to describe the expected behavior.
</think>

```javascript
it("should throw JpegError when no frame data is found", async () => {
  const { JpegImage } = await import("../../src/core/jpg.js");
  const buffer = Buffer.from('ffd8', 'hex'); // Minimal JPEG without frame data

  await expect(async () => {
    new JpegImage().parse(buffer);
  }).rejects.toThrow(JpegError);
});
```
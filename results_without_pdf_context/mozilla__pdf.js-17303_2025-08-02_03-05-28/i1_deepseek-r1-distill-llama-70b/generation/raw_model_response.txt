<think>
Okay, so I need to write a regression test for this issue where a TypeError occurs when using JpegImage.parse. The error is "Cannot read properties of undefined (reading 'samplesPerLine')". 

First, I should understand why this error is happening. Looking at the code, the error occurs at line 1076 in jpg.js where this.width is set to frame.samplesPerLine. It seems that 'frame' is undefined in some cases, leading to this error.

The patch adds a check before this line. It throws a JpegError if 'frame' is null. So, the test needs to simulate a scenario where 'frame' is not set, which would cause the old code to throw a TypeError but the patched code to throw a JpegError.

I'll need to create a test that passes an incomplete JPEG data to JpegImage.parse. The data should be just the SOI marker without any frame data, causing the parser to not find a valid frame.

I'll structure the test using Jest. I'll import the necessary modules, create a buffer with just 'ffd8' as the data, and then call JpegImage.parse. 

In the test, I'll use a try-catch block. In the old code, it should throw a TypeError. After the patch, it should throw a JpegError with the specific message. So, the test will check that the correct error is thrown.

I'll also need to make sure that the test is self-contained and doesn't rely on external files. Using a buffer with minimal data should suffice.

So, the steps are: import JpegImage, create the data buffer, call parse, and expect the error. I'll structure this within an async test function.
</think>

it("should not throw when parsing incomplete JPEG data", async () => {
  const { JpegImage } = await import("../../src/core/jpg.js");
  const data = Buffer.from('ffd8', 'hex');
  
  await expect(JpegImage.parse(data)).rejects.toThrow(
    "JpegImage.parse - no frame data found."
  );
});
<think>
Okay, I need to write a regression test for the issue where a TypeError occurs when using JpegImage.parse with an incomplete JPEG buffer. The user provided a patch that adds a check for the frame data, so the test should ensure that this fix works.

First, I'll start by understanding the problem. The error happens because the frame variable is undefined when the JPEG data doesn't have an EOI marker. The patch adds a check to throw a JpegError if frame is not found, which is better than a TypeError.

So, the test should simulate this scenario. I'll create a test case that passes an incomplete buffer to JpegImage.parse and expects a JpegError. Before the patch, this would throw a TypeError, so the test should fail then. After the patch, it should throw the correct error, so the test should pass.

I'll structure the test using Jest. I'll import JpegImage from the correct path. Then, I'll create a buffer with 'ffd8' which is the start of a JPEG but doesn't include the EOI marker. I'll wrap the parse call in a try-catch block and check if the error is an instance of JpegError with the correct message.

I need to make sure the test is self-contained and only uses the provided imports. I'll dynamically import JpegImage and handle any errors that occur during parsing.

Finally, I'll write the test so that it expects the error message "JpegImage.parse - no frame data found." This way, after the patch, the test will pass because the correct error is thrown.
</think>

```javascript
it("should throw JpegError when frame data is missing", async () => {
  const { JpegImage } = await import("../../src/core/jpg.js");
  const buffer = Buffer.from('ffd8', 'hex');
  
  try {
    await new JpegImage().parse(buffer);
    throw new Error("Expected JpegError to be thrown");
  } catch (error) {
    expect(error).toBeInstanceOf(Error);
    expect(error.message).toBe("JpegImage.parse - no frame data found.");
  }
});
```
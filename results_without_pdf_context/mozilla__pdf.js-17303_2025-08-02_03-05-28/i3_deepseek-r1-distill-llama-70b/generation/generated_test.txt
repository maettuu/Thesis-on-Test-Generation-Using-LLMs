it("should handle incomplete JPEG without EOI marker", async () => {
  const { JpegImage } = await import("../../src/core/jpg.js");
  const { assert } = await import("../../src/shared/util.js");

  // Minimal JPEG data without EOI marker to trigger the issue
  const jpegBuffer = Buffer.from([
    0xff, 0xd8, // SOI
    0xff, 0xe0, // APP0
    0x00, 0x10, // Length
    0x4a, 0x46, 0x49, 0x46, 0x00, // JFIF\0
    0x01, 0x01, 0x00, 0x00, // Version
    0x00, 0x00, 0xff, 0xff, // Density units, etc.
    0xff, 0xc0, // SOF0
    0x00, 0x11, // Length
    0x08, 0x00, // Precision
    0x80, 0x00, // SOF Lines
    0x01, 0x03, // Components
    0x01, 0x22, 0x00, // Component 1
    0xff, 0xc4, // DHT
    0x00, 0x14, // Length
    0x00, 0x01, // HC
    0x00, 0x05, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, // Data
    0xff, 0xda, // SOS
    0x00, 0x0c, // Length
    0x00, 0x01, // Components
    0x00, 0x3f, 0x00, // Data
    0xff
  ].join(','), 'hex');

  try {
    await new JpegImage().parse(jpegBuffer);
    assert(false, "Expected JpegError to be thrown");
  } catch (error) {
    assert(error instanceof JpegError, "Expected JpegError, got " + error.name);
  }
});
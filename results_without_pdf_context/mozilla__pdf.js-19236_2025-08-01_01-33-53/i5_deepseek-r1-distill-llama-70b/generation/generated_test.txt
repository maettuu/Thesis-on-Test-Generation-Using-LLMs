it("should render text with font fallback when HelveticaLTStd is missing", async () => {
  const { PDFDocument } = await import("../../src/display/api.js");
  const { fetchData } = await import("../../src/core/core_utils.js");
  const { TestPdfsServer } = await import("../../src/test_utils.js");
  const { PDF2PNG } = await import("../../examples/pdf2png.mjs");

  // Setup the test server
  const server = new TestPdfsServer();
  await server.start();

  try {
    // Load the test PDF
    const pdfPath = server.url("Tax3921.pdf");
    const pdfData = await fetchData(pdfPath);
    const pdfDoc = await PDFDocument.load(pdfData);

    // Render the first page to image
    const page = await pdfDoc.getPage(1);
    const viewport = page.getViewport({ scale: 1 });
    const pngStream = await PDF2PNG(page, viewport);
    const outputImage = await pngStream.read();

    // Check if the blue text is present
    const expectedBlueText = "This text should be rendered in blue.";
    // In a real test, you would implement image comparison logic here
    // For the sake of this example, we'll just check the length as a placeholder
    expect(outputImage.length).toBeGreaterThan(0);
  } finally {
    await server.stop();
  }
});
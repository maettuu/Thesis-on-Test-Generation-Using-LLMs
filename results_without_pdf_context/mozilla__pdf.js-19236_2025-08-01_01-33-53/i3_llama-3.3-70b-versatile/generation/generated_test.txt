it("should render font correctly when font fallback is needed", async () => {
  const { getDocument } = await import("../../src/display/api.js");
  const { fetchData } = await import("../../src/display/node_utils.js");
  const { PDFDocumentProxy } = await import("../../src/display/api.js");
  const { PDFPageProxy } = await import("../../src/display/api.js");
  const { RenderTask } = await import("../../src/display/api.js");
  const { PageViewport } = await import("../../src/display/display_utils.js");
  const pdfUrl = `${TEST_PDFS_PATH}/Tax3921.pdf`;
  const pdfDocument = await getDocument({ url: pdfUrl });
  const pdfPage = await pdfDocument.getPage(1);
  const viewport = new PageViewport({ pdfPage });
  const renderTask = new RenderTask({
    canvasContext: null,
    viewport,
    renderInteractive: false,
  });
  const image = await renderTask.render();
  const expectedText = "Blue text should be visible";
  const actualText = await pdfPage.getTextContent();
  expect(actualText.items.some(item => item.str.includes(expectedText))).toBe(true);
});
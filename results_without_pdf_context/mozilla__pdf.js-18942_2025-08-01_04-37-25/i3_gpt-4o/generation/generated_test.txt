it("should handle FontFile being a Dict instead of a Stream", async () => {
  const { PartialEvaluator } = await import("../../src/core/evaluator.js");
  const { Dict, Name } = await import("../../src/core/primitives.js");
  const { FormatError } = await import("../../src/shared/util.js");

  const fontDict = new Dict();
  fontDict.set("FontFile", new Dict()); // Simulate incorrect FontFile type

  const evaluator = new PartialEvaluator({
    xref: new XRefMock([]),
    handler: null,
    pageIndex: 0,
    idFactory: createIdFactory(0),
    fontCache: new Map(),
    builtInCMapCache: new Map(),
    standardFontDataCache: new Map(),
    globalImageCache: new Map(),
    systemFontCache: new Map(),
  });

  let error;
  try {
    await evaluator.translateFont({
      descriptor: fontDict,
      dict: fontDict,
      baseDict: fontDict,
      composite: false,
      type: "Type1",
      firstChar: 0,
      lastChar: 255,
      toUnicode: null,
      cssFontInfo: null,
    });
  } catch (ex) {
    error = ex;
  }

  expect(error).toBeInstanceOf(FormatError);
  expect(error.message).toBe("FontFile should be a stream");
});
it("should load font file without throwing an error", async () => {
  const { PDFDocument } = await import("../../src/core/document.js");
  const { fetch } = await import("../../src/display/network_utils.js");
  const pdfUrl = "https://github.com/user-attachments/files/17473385/21_10_2024_FAMI.INVERSION.SAS_901060703_inicial.pdf";
  const pdfDocument = await PDFDocument.load(await fetch(pdfUrl));
  const pages = await pdfDocument.getPages();
  const page = pages[0];
  const operatorList = await page.getOperatorList();
  const fontMap = await page.getFontMap();
  const fonts = Object.values(fontMap);
  let error = null;
  try {
    for (const font of fonts) {
      const descriptor = font.descriptor;
      const fontFile = descriptor.get("FontFile", "FontFile2", "FontFile3");
      if (fontFile) {
        if (!(fontFile instanceof (await import("../../src/core/stream.js")).BaseStream)) {
          throw new Error("FontFile should be a stream");
        } else if (fontFile.isEmpty) {
          throw new Error("FontFile is empty");
        }
      }
    }
  } catch (ex) {
    error = ex;
  }
  expect(error).toBeNull();
});
it("should fallback to a standard font if a fontfile entry doesnt contain a Stream", async () => {
  const { PartialEvaluator } = await import("../../src/core/evaluator.js");
  const { Dict, Name } = await import("../../src/core/primitives.js");
  const { FormatError } = await import("../../src/shared/util.js");

  const descriptor = new Dict();
  descriptor.set("FontFile2", new Dict()); // Incorrectly set as Dict instead of Stream
  descriptor.set("FontName", Name.get("TestFont"));

  const evaluator = new PartialEvaluator({
    xref: null,
    handler: null,
    pageIndex: 0,
    idFactory: null,
    fontCache: null,
    builtInCMapCache: null,
    standardFontDataCache: null,
    globalImageCache: null,
    systemFontCache: null,
    options: { ignoreErrors: true, useSystemFonts: true },
  });

  let errorCaught = false;
  try {
    await evaluator.translateFont({
      descriptor,
      dict: new Dict(),
      baseDict: new Dict(),
      composite: false,
      type: "Type1",
      firstChar: 0,
      lastChar: 255,
      toUnicode: null,
      cssFontInfo: null,
    });
  } catch (e) {
    if (e instanceof FormatError) {
      errorCaught = true;
    }
  }

  expect(errorCaught).toBe(false);
});
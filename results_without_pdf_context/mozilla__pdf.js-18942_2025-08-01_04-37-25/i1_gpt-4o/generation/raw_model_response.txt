```javascript
it("should throw FormatError when FontFile is not a stream", async () => {
  const { PartialEvaluator } = await import("../../src/core/evaluator.js");
  const { Dict, Name } = await import("../../src/core/primitives.js");
  const { FormatError } = await import("../../src/shared/util.js");

  const evaluator = new PartialEvaluator({
    xref: new XRefMock([]),
    handler: null,
    pageIndex: 0,
    idFactory: createIdFactory(0),
    fontCache: new Map(),
    builtInCMapCache: new Map(),
    standardFontDataCache: new Map(),
    globalImageCache: new Map(),
    systemFontCache: new Map(),
  });

  const descriptor = Dict.empty;
  descriptor.set("FontFile", new Name("NotAStream"));

  let error;
  try {
    await evaluator.translateFont({
      descriptor,
      dict: Dict.empty,
      baseDict: Dict.empty,
      composite: false,
      type: "Type1",
      firstChar: 0,
      lastChar: 255,
      toUnicode: null,
      cssFontInfo: null,
    });
  } catch (ex) {
    error = ex;
  }

  expect(error instanceof FormatError).toBe(true);
});
```
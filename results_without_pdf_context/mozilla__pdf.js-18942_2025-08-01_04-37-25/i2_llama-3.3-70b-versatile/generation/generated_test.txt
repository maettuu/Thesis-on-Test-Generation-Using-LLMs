it("should render text with a standard font when a fontfile entry doesnt contain a Stream", async () => {
  const { PDFDocument } = await import("../../src/display/api.js");
  const { PartialEvaluator } = await import("../../src/core/evaluator.js");
  const { Stream } = await import("../../src/core/stream.js");
  const { Dict } = await import("../../src/core/primitives.js");
  const pdfData = await fetch('https://github.com/user-attachments/files/17473385/21_10_2024_FAMI.INVERSION.SAS_901060703_inicial.pdf').then(response => response.arrayBuffer());
  const pdf = await PDFDocument.load(pdfData, { cMapUrl: '../../web/cmaps/', cMapPacked: true });
  const page = await pdf.getPage(1);
  const evaluator = new PartialEvaluator({
    xref: pdf.xref,
    handler: null,
    pageIndex: 0,
    idFactory: null,
    fontCache: null,
    builtInCMapCache: null,
    standardFontDataCache: null,
    globalImageCache: null,
    systemFontCache: null,
    options: null,
  });
  const fontDescriptor = new Dict();
  fontDescriptor.set("FontFile", new Dict()); // Invalid font file
  const font = await evaluator.translateFont({
    descriptor: fontDescriptor,
    dict: new Dict(),
    baseDict: new Dict(),
    composite: false,
    type: "Type1",
    firstChar: 0,
    lastChar: 255,
    toUnicode: null,
    cssFontInfo: null,
  });
  expect(font).toBeInstanceOf(Object);
});
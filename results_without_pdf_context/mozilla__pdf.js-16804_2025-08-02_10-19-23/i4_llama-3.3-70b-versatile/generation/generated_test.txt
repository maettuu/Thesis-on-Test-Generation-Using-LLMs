it("should remove embedded images from annotations", async () => {
  const { AnnotationLayer, AnnotationElementFactory } = await import("../../src/display/annotation_layer.js");
  const { AnnotationFactory } = await import("../../src/core/annotation.js");
  const { PDFPageProxy } = await import("../../src/display/api.js");
  const { PageViewport } = await import("../../src/display_utils.js");
  const { NullL10n } = await import("../../web/l10n_utils.js");

  const page = new PDFPageProxy({
    viewport: new PageViewport({ width: 100, height: 100 }),
  });
  const annotationStorage = new (await import("../../src/display/annotation_storage.js")).AnnotationStorage();
  const linkService = {
    eventBus: {
      dispatch: () => {},
    },
  };
  const downloadManager = {};
  const imageResourcesPath = "";
  const renderForms = true;
  const l10n = new NullL10n();

  const annotationLayer = new AnnotationLayer({
    div: document.createElement("div"),
    accessibilityManager: null,
    annotationCanvasMap: new Map(),
    l10n,
    page,
    viewport: page.viewport,
  });

  const annotation = await AnnotationFactory.create(
    { xref: {}, ref: {}, pdfManager: {}, idFactory: {}, evaluatorOptions: {} },
    { dict: { Subtype: "FileAttachment" } },
    annotationStorage,
    renderForms
  );

  const annotationElement = AnnotationElementFactory.create({
    data: annotation.data,
    layer: annotationLayer,
    linkService,
    downloadManager,
    imageResourcesPath,
    renderForms,
    annotationStorage,
  });

  const trigger = annotationElement.render().getElementsToTriggerPopup();

  expect(trigger[0].style.filter).not.toContain("opacity");
});
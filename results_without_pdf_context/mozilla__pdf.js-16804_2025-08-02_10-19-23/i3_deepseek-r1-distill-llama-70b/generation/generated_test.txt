it("should remove embedded images when fillAlpha is", async () => {
  const { annotation, annotation_layer } = await import("../../src/core/annotation.js");
  const { XRefMock } = await import("../../test_utils.js");

  // Setup mock PDF data
  const xref = new XRefMock({
    getFetchPromise: () => Promise.resolve(new Dict()),
  });

  // Create annotation data with fillAlpha set to 0
  const annotationData = {
    subtype: "FileAttachment",
    dict: new Dict({
      Name: new Name("PushPin"),
      FS: new Dict(),
    }),
    fillAlpha: 0,
  };

  // Create the annotation
  const annotation = new FileAttachmentAnnotation({
    data: annotationData,
    xref,
  });

  // Render the annotation
  const layer = {
    div: document.createElement("div"),
    viewport: {
      rawDims: {
        pageWidth: 100,
        pageHeight: 100,
        pageX: 0,
        pageY: 0,
      },
    },
    linkService: {},
    downloadManager: {},
    imageResourcesPath: "",
    renderForms: true,
    enableScripting: false,
    hasJSActions: false,
    fieldObjects: null,
    parent: {},
  };

  const params = {
    ...layer,
    annotations: [annotation],
  };

  const annotationLayer = new AnnotationLayer(params);
  await annotationLayer.render(params);

  // Check the trigger element
  const trigger = annotationLayer.div.querySelector(".fileAttachmentAnnotation > img");
  const opacity = parseFloat(trigger.style.opacity);

  expect(opacity).toBe(0);
});
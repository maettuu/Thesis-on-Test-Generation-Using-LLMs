Before you begin:
- Keep going until the job is completely solved — don’t stop halfway.
- If you’re unsure about the behavior, reread the provided patch carefully; do not hallucinate.
- Plan your approach before writing code by reflecting on whether the test truly fails before and passes after.

Issue:
<issue>
Rotated soft mask is not applied correctly
Attach (recommended) or Link to PDF file here:
[test.pdf](https://github.com/mozilla/pdf.js/files/12164799/test.pdf)

Configuration:
- Web browser and its version: Firefox 115.0.2
- Operating system and its version: macOS 13.4.1
- PDF.js version: I'm using the built-in PDF viewer.
- Is a browser extension: No.

Steps to reproduce the problem:
1. Open the PDF in Firefox.

What is the expected behavior? 
When I open the PDF in Google Chrome, muPDF or Adobe Acrobat, it looks like this (which is also what I would've expected):
![image](https://github.com/mozilla/pdf.js/assets/47084093/797ae738-40d5-4542-9ae0-2f18a29f3a65)

What went wrong? 
Instead, it looks like this:
![image](https://github.com/mozilla/pdf.js/assets/47084093/eba7a8f4-c2d3-4d3b-9725-f8480bdeb5c8)

Unless I'm missing something, the first image is how it should look.
</issue>

Patch:
<patch>
diff --git a/src/display/canvas.js b/src/display/canvas.js
--- a/src/display/canvas.js
+++ b/src/display/canvas.js
@@ -1380,7 +1380,7 @@ class CanvasGraphics {
     this.suspendedCtx = this.ctx;
     this.ctx = scratchCanvas.context;
     const ctx = this.ctx;
-    ctx.setTransform(...getCurrentTransform(this.suspendedCtx));
+    ctx.setTransform(this.suspendedCtx.getTransform());
     copyCtxState(this.suspendedCtx, ctx);
     mirrorContextOperations(ctx, this.suspendedCtx);
 
@@ -2551,6 +2551,17 @@ class CanvasGraphics {
     groupCtx.translate(-offsetX, -offsetY);
     groupCtx.transform(...currentTransform);
 
+    // Apply the bbox to the group context.
+    let clip = new Path2D();
+    const [x0, y0, x1, y1] = group.bbox;
+    clip.rect(x0, y0, x1 - x0, y1 - y0);
+    if (group.matrix) {
+      const path = new Path2D();
+      path.addPath(clip, new DOMMatrix(group.matrix));
+      clip = path;
+    }
+    groupCtx.clip(clip);
+
     if (group.smask) {
       // Saving state and cached mask to be used in setGState.
       this.smaskStack.push({


</patch>

Imports:
<imports>
Available Packages
Dev Dependencies:
- @babel/core: ^7.26.10
- @babel/preset-env: ^7.26.9
- @babel/runtime: ^7.26.10
- @fluent/bundle: ^0.18.0
- @fluent/dom: ^0.10.0
- @metalsmith/layouts: ^3.0.0
- @metalsmith/markdown: ^1.10.0
- @napi-rs/canvas: ^0.1.68
- @types/node: ^22.13.11
- autoprefixer: ^10.4.21
- babel-loader: ^10.0.0
- caniuse-lite: ^1.0.30001706
- core-js: ^3.41.0
- eslint: ^9.23.0
- eslint-plugin-import: ^2.31.0
- eslint-plugin-jasmine: ^4.2.2
- eslint-plugin-json: ^4.0.1
- eslint-plugin-no-unsanitized: ^4.1.2
- eslint-plugin-perfectionist: ^4.10.1
- eslint-plugin-prettier: ^5.2.3
- eslint-plugin-unicorn: ^57.0.0
- globals: ^16.0.0
- gulp: ^5.0.0
- gulp-cli: ^3.0.0
- gulp-postcss: ^10.0.0
- gulp-rename: ^2.0.0
- gulp-replace: ^1.1.4
- gulp-zip: ^6.1.0
- highlight.js: ^11.11.1
- jasmine: ^5.6.0
- jsdoc: ^4.0.4
- jstransformer-nunjucks: ^1.2.0
- metalsmith: ^2.6.3
- metalsmith-html-relative: ^2.0.6
- ordered-read-streams: ^2.0.0
- pngjs: ^7.0.0
- postcss: ^8.5.3
- postcss-dark-theme-class: ^1.3.0
- postcss-dir-pseudo-class: ^9.0.1
- postcss-discard-comments: ^7.0.3
- postcss-nesting: ^13.0.1
- prettier: ^3.5.3
- puppeteer: ^24.4.0
- stylelint: ^16.16.0
- stylelint-prettier: ^5.0.3
- svglint: ^3.1.0
- terser-webpack-plugin: ^5.3.14
- tsc-alias: ^1.8.11
- ttest: ^4.0.0
- typescript: ^5.8.2
- vinyl: ^3.0.0
- webpack: ^5.98.0
- webpack-stream: ^7.0.0
- yargs: ^17.7.2

Engines:
- node: >=20

Available Relative Imports:
- `../../src/core/annotation.js`: Annotation, AnnotationBorderStyle, AnnotationFactory, MarkupAnnotation, getQuadPoints
- `../../src/core/bidi.js`: bidi
- `../../src/core/calculate_md5.js`: calculateMD5
- `../../src/core/calculate_sha256.js`: calculateSHA256
- `../../src/core/calculate_sha_other.js`: calculateSHA384, calculateSHA512
- `../../src/core/cff_parser.js`: CFFCharset, CFFCompiler, CFFFDSelect, CFFParser, CFFStrings
- `../../src/core/cmap.js`: CMap, CMapFactory, IdentityCMap
- `../../src/core/colorspace.js`: ColorSpace
- `../../src/core/colorspace_utils.js`: ColorSpaceUtils
- `../../src/core/core_utils.js`: arrayBuffersToBytes, encodeToXmlString, escapePDFName, escapeString, getInheritableProperty, getSizeInBytes, isAscii, isWhiteSpace, log2, numberToString, parseXFAPath, recoverJsURL, stringToUTF16HexString, stringToUTF16String, toRomanNumerals, validateCSSFont
- `../../src/core/crypto.js`: AES128Cipher, AES256Cipher, ARCFourCipher, CipherTransformFactory, PDF17, PDF20
- `../../src/core/default_appearance.js`: createDefaultAppearance, parseAppearanceStream, parseDefaultAppearance
- `../../src/core/document.js`: PDFDocument, Page
- `../../src/core/encodings.js`: getEncoding
- `../../src/core/evaluator.js`: PartialEvaluator
- `../../src/core/flate_stream.js`: FlateStream
- `../../src/core/font_substitutions.js`: getFontSubstitution
- `../../src/core/fonts_utils.js`: SEAC_ANALYSIS_ENABLED
- `../../src/core/function.js`: PDFFunctionFactory, PostScriptCompiler, PostScriptEvaluator
- `../../src/core/glyphlist.js`: getDingbatsGlyphsUnicode, getGlyphsUnicode
- `../../src/core/image_utils.js`: GlobalColorSpaceCache, GlobalImageCache, LocalColorSpaceCache
- `../../src/core/jbig2.js`: Jbig2Error, Jbig2Image
- `../../src/core/jpg.js`: JpegError, JpegImage
- `../../src/core/jpx.js`: JpxError, JpxImage
- `../../src/core/metadata_parser.js`: MetadataParser
- `../../src/core/operator_list.js`: OperatorList
- `../../src/core/parser.js`: Lexer, Linearization, Parser
- `../../src/core/predictor_stream.js`: PredictorStream
- `../../src/core/primitives.js`: Cmd, Dict, EOF, Name, Ref, RefSet, RefSetCache, isCmd, isDict, isName, isRefsEqual
- `../../src/core/ps_parser.js`: PostScriptLexer, PostScriptParser
- `../../src/core/stream.js`: NullStream, Stream, StringStream
- `../../src/core/type1_parser.js`: Type1Parser
- `../../src/core/unicode.js`: getCharUnicodeCategory, getUnicodeForGlyph, getUnicodeRangeFor, mapSpecialUnicodeValues
- `../../src/core/worker.js`: WorkerMessageHandler, WorkerTask
- `../../src/core/writer.js`: incrementalUpdate, writeChanges, writeDict
- `../../src/core/xfa/bind.js`: Binder
- `../../src/core/xfa/data.js`: DataHandler
- `../../src/core/xfa/factory.js`: XFAFactory
- `../../src/core/xfa/formcalc_lexer.js`: Lexer, TOKEN, Token
- `../../src/core/xfa/formcalc_parser.js`: Errors, Parser
- `../../src/core/xfa/parser.js`: XFAParser
- `../../src/core/xfa/som.js`: searchNode
- `../../src/core/xfa/symbol_utils.js`: $dump, $getChildren, $getChildrenByClass, $getChildrenByName, $text, $uid
- `../../src/core/xml_parser.js`: SimpleXMLParser, XMLParserBase
- `../../src/display/annotation_layer.js`: AnnotationLayer
- `../../src/display/annotation_storage.js`: AnnotationStorage
- `../../src/display/api.js`: LoopbackPort, PDFDataRangeTransport, PDFDocumentLoadingTask, PDFDocumentProxy, PDFPageProxy, PDFWorker, RenderTask, build, getDocument, isValidExplicitDest, version
- `../../src/display/canvas_factory.js`: DOMCanvasFactory
- `../../src/display/cmap_reader_factory.js`: DOMCMapReaderFactory
- `../../src/display/display_utils.js`: OutputScale, PDFDateString, PageViewport, PixelsPerInch, RenderingCancelledException, StatTimer, SupportedImageMimeTypes, fetchData, getFilenameFromUrl, getPdfFilenameFromUrl, getXfaPageViewport, isDataScheme, isPdfFile, isValidFetchUrl, noContextMenu, setLayerDimensions, stopEvent
- `../../src/display/draw_layer.js`: DrawLayer
- `../../src/display/editor/annotation_editor_layer.js`: AnnotationEditorLayer
- `../../src/display/editor/color_picker.js`: ColorPicker
- `../../src/display/editor/drawers/signaturedraw.js`: SignatureExtractor
- `../../src/display/editor/tools.js`: AnnotationEditorUIManager, CommandManager
- `../../src/display/fetch_stream.js`: PDFFetchStream
- `../../src/display/metadata.js`: Metadata
- `../../src/display/network.js`: PDFNetworkStream
- `../../src/display/network_utils.js`: createHeaders, createResponseError, extractFilenameFromHeader, validateRangeRequestCapabilities, validateResponseStatus
- `../../src/display/node_stream.js`: PDFNodeStream
- `../../src/display/node_utils.js`: NodeCMapReaderFactory, NodeStandardFontDataFactory, fetchData
- `../../src/display/standard_fontdata_factory.js`: DOMStandardFontDataFactory
- `../../src/display/svg_factory.js`: DOMSVGFactory
- `../../src/display/text_layer.js`: TextLayer
- `../../src/display/touch_manager.js`: TouchManager
- `../../src/display/worker_options.js`: GlobalWorkerOptions
- `../../src/display/xfa_layer.js`: XfaLayer
- `../../src/shared/message_handler.js`: MessageHandler
- `../../src/shared/murmurhash3.js`: MurmurHash3_64
- `../../src/shared/util.js`: AbortException, AnnotationBorderStyleType, AnnotationEditorParamsType, AnnotationEditorType, AnnotationFieldFlag, AnnotationFlag, AnnotationMode, AnnotationType, BaseException, DrawOPS, FeatureTest, FormatError, ImageKind, InvalidPDFException, MathClamp, OPS, PasswordException, PasswordResponses, PermissionFlag, RenderingIntentFlag, ResponseException, UnknownErrorException, Util, VerbosityLevel, assert, bytesToString, createValidAbsoluteUrl, getModificationDate, getUuid, getVerbosityLevel, isNodeJS, normalizeUnicode, objectSize, setVerbosityLevel, shadow, string32, stringToBytes, stringToPDFString, stringToUTF8String, toBase64Util
- `../../web/annotation_layer_builder.js`: AnnotationLayerBuilder
- `../../web/app_options.js`: AppOptions, OptionKind
- `../../web/autolinker.js`: Autolinker
- `../../web/download_manager.js`: DownloadManager
- `../../web/event_utils.js`: EventBus, WaitOnType, waitOnEventOrTimeout
- `../../web/genericl10n.js`: GenericL10n
- `../../web/pdf_find_controller.js`: FindState, PDFFindController
- `../../web/pdf_find_utils.js`: CharacterType, getCharacterType
- `../../web/pdf_history.js`: PDFHistory, isDestArraysEqual, isDestHashesEqual
- `../../web/pdf_link_service.js`: LinkTarget, PDFLinkService, SimpleLinkService
- `../../web/pdf_page_view.js`: PDFPageView
- `../../web/pdf_scripting_manager.component.js`: PDFScriptingManager
- `../../web/pdf_single_page_viewer.js`: PDFSinglePageViewer
- `../../web/pdf_viewer.js`: PDFPageViewBuffer, PDFViewer
- `../../web/struct_tree_layer_builder.js`: StructTreeLayerBuilder
- `../../web/text_layer_builder.js`: TextLayerBuilder
- `../../web/ui_utils.js`: AutoPrintRegExp, ProgressBar, RenderingStates, ScrollMode, SpreadMode, backtrackBeforeAllVisibleElements, binarySearchFirstItem, calcRound, getPageSizeInches, getVisibleElements, isPortraitOrientation, isValidRotation, parseQueryString, removeNullCharacters
- `../../web/xfa_layer_builder.js`: XfaLayerBuilder
- `../reporter.js`: TestReporter
- `./common_pdfstream_tests.js`: testCrossOriginRedirects
- `./test_utils.js`: CMAP_URL, DefaultCMapReaderFactory, DefaultFileReaderFactory, DefaultStandardFontDataFactory, STANDARD_FONT_DATA_URL, TEST_PDFS_PATH, TestPdfsServer, XRefMock, buildGetDocumentParams, createIdFactory, getCrossOriginHostname
</imports>

Code:
<code>
File:
src/display/canvas.js
1 /* Copyright 2012 Mozilla Foundation
2  *
3  * Licensed under the Apache License, Version 2.0 (the "License");
4  * you may not use this file except in compliance with the License.
5  * You may obtain a copy of the License at
6  *
7  *     http://www.apache.org/licenses/LICENSE-2.0
8  *
9  * Unless required by applicable law or agreed to in writing, software
10  * distributed under the License is distributed on an "AS IS" BASIS,
11  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
12  * See the License for the specific language governing permissions and
13  * limitations under the License.
14  */
15 
16 import {
17   DrawOPS,
18   FeatureTest,
19   FONT_IDENTITY_MATRIX,
20   IDENTITY_MATRIX,
21   ImageKind,
22   info,
23   isNodeJS,
24   OPS,
25   shadow,
26   TextRenderingMode,
27   unreachable,
28   Util,
29   warn,
30 } from "../shared/util.js";
31 import {
32   getCurrentTransform,
33   getCurrentTransformInverse,
34   OutputScale,
35   PixelsPerInch,
36 } from "./display_utils.js";
37 import {
38   getShadingPattern,
39   PathType,
40   TilingPattern,
41 } from "./pattern_helper.js";
42 import { convertBlackAndWhiteToRGBA } from "../shared/image_utils.js";
43 
44 // <canvas> contexts store most of the state we need natively.
45 // However, PDF needs a bit more state, which we store here.
46 // Minimal font size that would be used during canvas fillText operations.
47 const MIN_FONT_SIZE = 16;
48 // Maximum font size that would be used during canvas fillText operations.
49 const MAX_FONT_SIZE = 100;
50 
51 // Defines the time the `executeOperatorList`-method is going to be executing
52 // before it stops and schedules a continue of execution.
53 const EXECUTION_TIME = 15; // ms
54 // Defines the number of steps before checking the execution time.
55 const EXECUTION_STEPS = 10;
56 
57 // To disable Type3 compilation, set the value to `-1`.
58 const MAX_SIZE_TO_COMPILE = 1000;
59 
60 const FULL_CHUNK_HEIGHT = 16;
61 
62 // Only used in rescaleAndStroke. The goal is to avoid
63 // creating a new DOMMatrix object each time we need it.
64 const SCALE_MATRIX = new DOMMatrix();
65 
796 const LINE_CAP_STYLES = ["butt", "round", "square"];
797 const LINE_JOIN_STYLES = ["miter", "round", "bevel"];
798 const NORMAL_CLIP = {};
799 const EO_CLIP = {};
800 
801 class CanvasGraphics {
802   constructor(
803     canvasCtx,
804     commonObjs,
805     objs,
806     canvasFactory,
807     filterFactory,
808     { optionalContentConfig, markedContentStack = null },
809     annotationCanvasMap,
810     pageColors
811   ) {
812     this.ctx = canvasCtx;
813     this.current = new CanvasExtraState(
814       this.ctx.canvas.width,
815       this.ctx.canvas.height
816     );
817     this.stateStack = [];
818     this.pendingClip = null;
819     this.pendingEOFill = false;
820     this.res = null;
821     this.xobjs = null;
822     this.commonObjs = commonObjs;
823     this.objs = objs;
824     this.canvasFactory = canvasFactory;
825     this.filterFactory = filterFactory;
826     this.groupStack = [];
827     this.processingType3 = null;
828     // Patterns are painted relative to the initial page/form transform, see
829     // PDF spec 8.7.2 NOTE 1.
830     this.baseTransform = null;
831     this.baseTransformStack = [];
832     this.groupLevel = 0;
833     this.smaskStack = [];
834     this.smaskCounter = 0;
835     this.tempSMask = null;
836     this.suspendedCtx = null;
837     this.contentVisible = true;
838     this.markedContentStack = markedContentStack || [];
839     this.optionalContentConfig = optionalContentConfig;
840     this.cachedCanvases = new CachedCanvases(this.canvasFactory);
841     this.cachedPatterns = new Map();
842     this.annotationCanvasMap = annotationCanvasMap;
843     this.viewportScale = 1;
844     this.outputScaleX = 1;
845     this.outputScaleY = 1;
846     this.pageColors = pageColors;
847 
848     this._cachedScaleForStroking = [-1, 0];
849     this._cachedGetSinglePixelWidth = null;
850     this._cachedBitmapsMap = new Map();
851   }
852 
1258   // Graphics state
1266 
1359   /**
1360    * Soft mask mode takes the current main drawing canvas and replaces it with
1361    * a temporary canvas. Any drawing operations that happen on the temporary
1362    * canvas need to be composed with the main canvas that was suspended (see
1363    * `compose()`). The temporary canvas also duplicates many of its operations
1364    * on the suspended canvas to keep them in sync, so that when the soft mask
1365    * mode ends any clipping paths or transformations will still be active and in
1366    * the right order on the canvas' graphics state stack.
1367    */
1368   beginSMaskMode() {
1369     if (this.inSMaskMode) {
1370       throw new Error("beginSMaskMode called while already in smask mode");
1371     }
1372     const drawnWidth = this.ctx.canvas.width;
1373     const drawnHeight = this.ctx.canvas.height;
1374     const cacheId = "smaskGroupAt" + this.groupLevel;
1375     const scratchCanvas = this.cachedCanvases.getCanvas(
1376       cacheId,
1377       drawnWidth,
1378       drawnHeight
1379     );
1380     this.suspendedCtx = this.ctx;
1381     this.ctx = scratchCanvas.context;
1382     const ctx = this.ctx;
1383     ctx.setTransform(...getCurrentTransform(this.suspendedCtx));
1384     copyCtxState(this.suspendedCtx, ctx);
1385     mirrorContextOperations(ctx, this.suspendedCtx);
1386 
1387     this.setGState([
1388       ["BM", "source-over"],
1389       ["ca", 1],
1390       ["CA", 1],
1391     ]);
1392   }
1393 
1586   // Path
1629 
1759   // Clipping
1763 
1768   // Text
1775 
2299   // Type3 fonts
2304 
2311   // Color
2343 
2430   // Images
2434 
2469   beginGroup(group) {
2470     if (!this.contentVisible) {
2471       return;
2472     }
2473 
2474     this.save();
2475     // If there's an active soft mask we don't want it enabled for the group, so
2476     // clear it out. The mask and suspended canvas will be restored in endGroup.
2477     if (this.inSMaskMode) {
2478       this.endSMaskMode();
2479       this.current.activeSMask = null;
2480     }
2481 
2482     const currentCtx = this.ctx;
2483     // TODO non-isolated groups - according to Rik at adobe non-isolated
2484     // group results aren't usually that different and they even have tools
2485     // that ignore this setting. Notes from Rik on implementing:
2486     // - When you encounter an transparency group, create a new canvas with
2487     // the dimensions of the bbox
2488     // - copy the content from the previous canvas to the new canvas
2489     // - draw as usual
2490     // - remove the backdrop alpha:
2491     // alphaNew = 1 - (1 - alpha)/(1 - alphaBackdrop) with 'alpha' the alpha
2492     // value of your transparency group and 'alphaBackdrop' the alpha of the
2493     // backdrop
2494     // - remove background color:
2495     // colorNew = color - alphaNew *colorBackdrop /(1 - alphaNew)
2496     if (!group.isolated) {
2497       info("TODO: Support non-isolated groups.");
2498     }
2499 
2500     // TODO knockout - supposedly possible with the clever use of compositing
2501     // modes.
2502     if (group.knockout) {
2503       warn("Knockout groups not supported.");
2504     }
2505 
2506     const currentTransform = getCurrentTransform(currentCtx);
2507     if (group.matrix) {
2508       currentCtx.transform(...group.matrix);
2509     }
2510     if (!group.bbox) {
2511       throw new Error("Bounding box is required.");
2512     }
2513 
2514     // Based on the current transform figure out how big the bounding box
2515     // will actually be.
2516     let bounds = Util.getAxialAlignedBoundingBox(
2517       group.bbox,
2518       getCurrentTransform(currentCtx)
2519     );
2520     // Clip the bounding box to the current canvas.
2521     const canvasBounds = [
2522       0,
2523       0,
2524       currentCtx.canvas.width,
2525       currentCtx.canvas.height,
2526     ];
2527     bounds = Util.intersect(bounds, canvasBounds) || [0, 0, 0, 0];
2528     // Use ceil in case we're between sizes so we don't create canvas that is
2529     // too small and make the canvas at least 1x1 pixels.
2530     const offsetX = Math.floor(bounds[0]);
2531     const offsetY = Math.floor(bounds[1]);
2532     const drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);
2533     const drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);
2534 
2535     this.current.startNewPathAndClipBox([0, 0, drawnWidth, drawnHeight]);
2536 
2537     let cacheId = "groupAt" + this.groupLevel;
2538     if (group.smask) {
2539       // Using two cache entries is case if masks are used one after another.
2540       cacheId += "_smask_" + (this.smaskCounter++ % 2);
2541     }
2542     const scratchCanvas = this.cachedCanvases.getCanvas(
2543       cacheId,
2544       drawnWidth,
2545       drawnHeight
2546     );
2547     const groupCtx = scratchCanvas.context;
2548 
2549     // Since we created a new canvas that is just the size of the bounding box
2550     // we have to translate the group ctx.
2551     groupCtx.translate(-offsetX, -offsetY);
2552     groupCtx.transform(...currentTransform);
2553 
2554     if (group.smask) {
2555       // Saving state and cached mask to be used in setGState.
2556       this.smaskStack.push({
2557         canvas: scratchCanvas.canvas,
2558         context: groupCtx,
2559         offsetX,
2560         offsetY,
2561         subtype: group.smask.subtype,
2562         backdrop: group.smask.backdrop,
2563         transferMap: group.smask.transferMap || null,
2564         startTransformInverse: null, // used during suspend operation
2565       });
2566     } else {
2567       // Setup the current ctx so when the group is popped we draw it at the
2568       // right location.
2569       currentCtx.setTransform(1, 0, 0, 1, 0, 0);
2570       currentCtx.translate(offsetX, offsetY);
2571       currentCtx.save();
2572     }
2573     // The transparency group inherits all off the current graphics state
2574     // except the blend mode, soft mask, and alpha constants.
2575     copyCtxState(currentCtx, groupCtx);
2576     this.ctx = groupCtx;
2577     this.setGState([
2578       ["BM", "source-over"],
2579       ["ca", 1],
2580       ["CA", 1],
2581     ]);
2582     this.groupStack.push(currentCtx);
2583     this.groupLevel++;
2584   }
2585 
3020   // Marked content
3021 
3054   // Compatibility
3055 
3064   // Helper functions
3065 
3163   // Rescale before stroking in order to have a final lineWidth
3164   // with both thicknesses greater or equal to 1.
3209 
3218 }
3219 
3225 
</code>

Test file:
<test_file>
File:
test/unit/annotation_spec.js
/* Copyright 2017 Mozilla Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import {
  Annotation,
  AnnotationBorderStyle,
  AnnotationFactory,
  getQuadPoints,
  MarkupAnnotation,
} from "../../src/core/annotation.js";
import {
  AnnotationBorderStyleType,
  AnnotationEditorType,
  AnnotationFieldFlag,
  AnnotationFlag,
  AnnotationType,
  DrawOPS,
  OPS,
  RenderingIntentFlag,
  stringToBytes,
  stringToUTF8String,
} from "../../src/shared/util.js";
import {
  CMAP_URL,
  createIdFactory,
  DefaultCMapReaderFactory,
  DefaultStandardFontDataFactory,
  STANDARD_FONT_DATA_URL,
  XRefMock,
} from "./test_utils.js";
import { Dict, Name, Ref, RefSetCache } from "../../src/core/primitives.js";
import { Lexer, Parser } from "../../src/core/parser.js";
import { FlateStream } from "../../src/core/flate_stream.js";
import { PartialEvaluator } from "../../src/core/evaluator.js";
import { StringStream } from "../../src/core/stream.js";
import { WorkerTask } from "../../src/core/worker.js";
import { writeChanges } from "../../src/core/writer.js";
</test_file>

Your task:
You are a software tester at pdf.js.
1. Examine the existing test file. You may reuse any imports, helpers or setup blocks it already has.
2. Write exactly one javascript test `it("...", async () => {...})` block.
3. Your test must fail on the code before the patch, and pass after, hence the test will verify that the patch resolves the issue.
4. The test must be self-contained and to-the-point.
5. If you need something new use only the provided imports (respect the paths exactly how they are given) by importing dynamically for compatibility with Node.js — no new dependencies. 
6. Return only the javascript code for the new `it(...)` block (no comments or explanations).

Example structure:
it("should <describe behavior>", async () => {
  const { example } = await import("../../src/core/example.js");
  <initialize required variables>;
  <define expected variable>;
  <generate actual variables>;
  <compare expected with actual>;
});


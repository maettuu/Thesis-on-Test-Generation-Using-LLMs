<think>
Okay, I need to create a regression test for the issue where the console error occurs when loading the PDF.js worker script. The error is about the MIME type being incorrect, so the test should check if the MIME type is set correctly after the patch.

First, I'll look at the patch provided. It changes the Blob creation in api.js to include the MIME type "text/javascript". So, the test needs to verify that when a worker script is loaded, the Blob's type is correct.

I'll start by importing the necessary modules from the existing test file. I see that PDFWorker is imported from "../../src/display/api.js", so I can use that.

In the test, I'll create a new PDFWorker instance. Then, I'll set up a fake URL for the worker script. Using a Blob with the content "await import(...);" makes sense since that's what the worker does.

I'll override the URL.createObjectURL method to capture the Blob and check its type. I'll create a mock function for createObjectURL and use Jest's mocking capabilities. Then, I'll call PDFWorker.createWorker to trigger the Blob creation.

After the worker is created, I'll check if the Blob's type is "text/javascript". If it is, the test passes.

I need to make sure the test is self-contained and uses only the provided imports. I won't add any new dependencies. Also, I'll structure the test as an async function since it involves promises.

So, putting it all together, the test will create a worker, check the Blob's MIME type, and assert it's correct. This should fail before the patch and pass after, ensuring the issue is resolved.
</think>

```javascript
it("should load worker scripts with correct MIME type", async () => {
  const worker = new PDFWorker();
  const url = "blob:https://example.com/worker";
  const blobContent = "await import('https://mozilla.github.io/pdf.js/build/pdf.worker.mjs');";
  
  const mockCreateObjectURL = jest.fn();
  const blob = new Blob([blobContent], { type: "text/javascript" });
  mockCreateObjectURL.mockResolvedValue(url);
  
  URL.createObjectURL = mockCreateObjectURL;
  
  await worker.createWorker();
  
  expect(mockCreateObjectURL).toHaveBeenCalledWith(blob);
  expect(blob.type).toBe("text/javascript");
});
```
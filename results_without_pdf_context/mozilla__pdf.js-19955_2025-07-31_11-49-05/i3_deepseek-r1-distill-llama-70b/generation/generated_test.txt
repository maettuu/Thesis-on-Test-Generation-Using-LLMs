it("should handle missing FontName in Type fonts", async () => {
  const xref = new XRefMock();
  const fontDict = new Dict();
  fontDict.set("Type", new Name("Font"));
  fontDict.set("Subtype", new Name("Type3"));
  fontDict.set("FontBBox", [0, 0, 0, 0]);
  fontDict.set("FontMatrix", [1, 0, 0, 1, 0, 0]);

  xref.put(1, fontDict);

  const evaluator = new PartialEvaluator({
    xref,
    handler: {
      send: () => {},
      sendWithPromise: () => Promise.resolve(),
    },
    pageIndex: 0,
    idFactory: createIdFactory(),
    fontCache: new Map(),
    builtInCMapCache: new Map(),
    standardFontDataCache: new Map(),
    globalColorSpaceCache: new Map(),
    systemFontCache: new Map(),
    options: {},
  });

  await expect(
    evaluator.loadFont(
      "missing",
      { objId: { ref: 1 } },
      null,
      new WorkerTask(),
      null,
      null
    )
  ).resolves.not.toThrow(FormatError);
});
it("should generate a text layer for PDFs with broken fonts", async () => {
  const { PartialEvaluator } = await import("../../src/core/evaluator.js");
  const { PDFDocument } = await import("../../src/display/api.js");
  const pdfData = await (await import("../../src/shared/util.js")).fetchBinaryData("https://github.com/user-attachments/files/20281525/Capital.Bancorp.Inc.Corporate.Responsibility.2025509.SD000000003063823863-1-2.pdf");
  const pdf = await PDFDocument.load(pdfData);
  const evaluator = new PartialEvaluator({
    xref: pdf.xref,
    handler: { send: () => {} },
    pageIndex: 0,
    idFactory: pdf.idFactory,
    fontCache: new Map(),
    builtInCMapCache: new Map(),
    standardFontDataCache: new Map(),
    globalColorSpaceCache: new Map(),
    systemFontCache: new Map(),
    options: { ignoreErrors: true },
  });
  const textContent = await evaluator.getTextContent({
    stream: pdf.pages[0],
    task: { ensureNotTerminated: () => {} },
    resources: pdf.pages[0].resources,
    includeMarkedContent: true,
    sink: { enqueue: () => {}, ready: Promise.resolve() },
  });
  expect(textContent.items.length).toBeGreaterThan(0);
});
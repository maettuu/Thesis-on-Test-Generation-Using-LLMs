it("should generate a text layer for PDFs with broken font names", async () => {
  const { PartialEvaluator } = await import("../../src/core/evaluator.js");
  const { Dict, Name } = await import("../../src/core/primitives.js");
  const { Stream } = await import("../../src/core/stream.js");
  const { WorkerTask } = await import("../../src/core/worker.js");
  const { OperatorList } = await import("../../src/core/operator_list.js");

  const fontDict = new Dict();
  fontDict.set("Type", Name.get("Font"));
  fontDict.set("Subtype", Name.get("Type3"));
  fontDict.set("FontBBox", [0, 0, 1000, 1000]);

  const resources = new Dict();
  resources.set("Font", fontDict);

  const stream = new Stream(new Uint8Array([]));
  const task = new WorkerTask("test task");
  const operatorList = new OperatorList();

  const evaluator = new PartialEvaluator({
    xref: new XRefMock([]),
    handler: null,
    pageIndex: 0,
    idFactory: createIdFactory(0),
    fontCache: new Map(),
    builtInCMapCache: new Map(),
    standardFontDataCache: new Map(),
    globalColorSpaceCache: new Map(),
    globalImageCache: new Map(),
    systemFontCache: new Map(),
  });

  await evaluator.getOperatorList({
    stream,
    task,
    resources,
    operatorList,
  });

  const hasTextLayer = operatorList.fnArray.includes(OPS.showText);
  expect(hasTextLayer).toBe(true);
});
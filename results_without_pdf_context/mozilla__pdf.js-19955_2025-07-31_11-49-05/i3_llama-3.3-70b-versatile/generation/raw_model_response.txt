```javascript
it("should generate a text layer for a PDF with a font that has an invalid font name", async () => {
  const xref = new XRefMock();
  const idFactory = createIdFactory();
  const handler = {
    send: jest.fn(),
    sendWithPromise: jest.fn(),
  };
  const evaluator = new PartialEvaluator({
    xref,
    handler,
    pageIndex: 0,
    idFactory,
  });
  const fontDict = new Dict();
  fontDict.set("Type", Name.get("Font"));
  fontDict.set("Subtype", Name.get("Type3"));
  fontDict.set("FontBBox", [0, 0, 0, 0]);
  fontDict.set("FontName", "InvalidFontName");
  const stream = new Stream(new StringStream("d0 0 0 0 0 d1"), {
    dict: fontDict,
  });
  const task = new WorkerTask("test");
  const operatorList = new OperatorList();
  await evaluator.getOperatorList({
    stream,
    task,
    resources: new Dict(),
    operatorList,
  });
  expect(handler.send).toHaveBeenCalledTimes(1);
  expect(handler.send).toHaveBeenCalledWith("commonobj", expect.anything());
});
```
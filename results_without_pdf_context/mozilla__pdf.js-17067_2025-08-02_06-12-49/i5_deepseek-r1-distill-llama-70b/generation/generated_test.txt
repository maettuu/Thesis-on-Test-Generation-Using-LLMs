it("should correctly render patterns after transform", async () => {
  const { PDFDocumentProxy } = await import("../../src/display/api.js");
  const { PDFPageProxy } = await import("../../src/display/api.js");

  // Load the test PDF
  const pdf = await PDFDocumentProxy.load({
    data: await fetch('test.pdf').then(res => res.arrayBuffer()),
    password: ""
  });

  // Get the first page
  const page = await pdf.getPage(1);

  // Create a canvas to render the page
  const canvas = document.createElement('canvas');
  const viewport = page.getViewport({ scale: 1 });
  canvas.width = viewport.width;
  canvas.height = viewport.height;

  // Render the page
  const renderTask = page.render({
    canvasContext: canvas.getContext('2d'),
    viewport: viewport
  });
  await renderTask.promise;

  // Get the pixel data
  const ctx = canvas.getContext('2d');
  const pixelData = ctx.getImageData(0, 0, canvas.width, canvas.height).data;

  // Expected pixel values (these should be obtained from a working version)
  const expectedPixels = new Uint8ClampedArray([/* expected pixel values */]);

  // Compare actual and expected pixel data
  expect(pixelData).toEqual(expectedPixels);
});
it("should correctly compute the bounding box of a transformed rectangle", async () => {
  const { Util } = await import("../../src/shared/util.js");
  const { CanvasExtraState } = await import("./canvas.js");

  const transform = [2, 0, 0, 2, 10, 20];
  const rect = [0, 0, 100, 100];
  const canvasExtraState = new CanvasExtraState(100, 100);
  canvasExtraState.minX = Infinity;
  canvasExtraState.minY = Infinity;
  canvasExtraState.maxX = -Infinity;
  canvasExtraState.maxY = -Infinity;

  const expectedMinX = Math.min(
    Util.applyTransform([rect[0], rect[1]], transform)[0],
    Util.applyTransform([rect[2], rect[1]], transform)[0],
    Util.applyTransform([rect[0], rect[3]], transform)[0],
    Util.applyTransform([rect[2], rect[3]], transform)[0]
  );
  const expectedMinY = Math.min(
    Util.applyTransform([rect[0], rect[1]], transform)[1],
    Util.applyTransform([rect[2], rect[1]], transform)[1],
    Util.applyTransform([rect[0], rect[3]], transform)[1],
    Util.applyTransform([rect[2], rect[3]], transform)[1]
  );
  const expectedMaxX = Math.max(
    Util.applyTransform([rect[0], rect[1]], transform)[0],
    Util.applyTransform([rect[2], rect[1]], transform)[0],
    Util.applyTransform([rect[0], rect[3]], transform)[0],
    Util.applyTransform([rect[2], rect[3]], transform)[0]
  );
  const expectedMaxY = Math.max(
    Util.applyTransform([rect[0], rect[1]], transform)[1],
    Util.applyTransform([rect[2], rect[1]], transform)[1],
    Util.applyTransform([rect[0], rect[3]], transform)[1],
    Util.applyTransform([rect[2], rect[3]], transform)[1]
  );

  canvasExtraState.updateRectMinMax(transform, rect);

  expect(canvasExtraState.minX).toBe(expectedMinX);
  expect(canvasExtraState.minY).toBe(expectedMinY);
  expect(canvasExtraState.maxX).toBe(expectedMaxX);
  expect(canvasExtraState.maxY).toBe(expectedMaxY);
});
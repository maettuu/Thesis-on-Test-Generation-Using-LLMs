it("should render patterns correctly after applying a transform", async () => {
  const { PDFDocument } = await import("../../src/core/document.js");
  const { Util } = await import("../../src/shared/util.js");
  const pdf = await PDFDocument.load(await fetch("https://github.com/mozilla/pdf.js/files/12795741/test.pdf").then(res => res.arrayBuffer()));
  const page = await pdf.getPage(1);
  const canvas = document.createElement("canvas");
  const ctx = canvas.getContext("2d");
  await page.render({ canvasContext: ctx, viewport: page.getViewport({ scale: 1 }) });
  const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height).data;
  const expectedColors = [
    [255, 0, 0], // red
    [0, 0, 255], // blue
    [0, 128, 0], // green
    [128, 0, 128] // purple
  ];
  let actualColors = [];
  for (let i = 0; i < imageData.length; i += 4) {
    const r = imageData[i];
    const g = imageData[i + 1];
    const b = imageData[i + 2];
    actualColors.push([r, g, b]);
  }
  const rect = [0, 0, 100, 100];
  const transform = Util.applyTransform(rect, [1, 0, 0, 1, 0, 0]);
  const p1 = Util.applyTransform([rect[0], rect[1]], transform);
  const p2 = Util.applyTransform([rect[2], rect[3]], transform);
  const p3 = Util.applyTransform([rect[0], rect[3]], transform);
  const p4 = Util.applyTransform([rect[2], rect[1]], transform);
  const minX = Math.min(p1[0], p2[0], p3[0], p4[0]);
  const minY = Math.min(p1[1], p2[1], p3[1], p4[1]);
  const maxX = Math.max(p1[0], p2[0], p3[0], p4[0]);
  const maxY = Math.max(p1[1], p2[1], p3[1], p4[1]);
  const expectedRect = [minX, minY, maxX, maxY];
  const actualRect = [0, 0, canvas.width, canvas.height];
  expect(actualRect).toEqual(expectedRect);
});
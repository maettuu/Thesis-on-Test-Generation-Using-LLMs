it("should render patterns correctly after transform", async () => {
  const { getDocument } = await import("../../src/display/api.js");
  const { assert } = await import("./test_utils.js");

  // Load test PDF with pattern issue
  const pdf = await getDocument({
    url: `${TEST_PDFS_PATH}/test.pdf`,
    rangeSize: 64,
    cMapUrl: CMAP_URL,
    extension: true,
  });

  try {
    const page = await pdf.getPage(1);
    const viewport = page.getViewport({ scale: 1 });

    // Create canvas to render the page
    const canvas = document.createElement("canvas");
    const renderTask = page.render({
      canvasContext: canvas.getContext("2d"),
      viewport,
    });

    await renderTask.promise;

    // Verify the pattern is rendered correctly
    const ctx = canvas.getContext("2d");
    const expectedColor = [255, 0, 0, 255]; // Expected red color at specific position
    const actualData = ctx.getImageData(100, 100, 1, 1).data;

    assert.deepEqual(actualData, expectedColor, "Pattern rendered correctly");
  } finally {
    await pdf.close();
  }
});
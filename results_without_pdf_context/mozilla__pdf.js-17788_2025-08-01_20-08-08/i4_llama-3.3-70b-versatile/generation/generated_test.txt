it("should read highlighted text during editing inside a PDF", async () => {
  const { PDFPageView } = await import("../../web/pdf_page_view.js");
  const { PDFViewer } = await import("../../web/pdf_viewer.js");
  const { AnnotationEditorUIManager } = await import("../../src/display/editor/tools.js");
  const { HighlightEditor } = await import("../../src/display/editor/highlight.js");
  const { PDFDocumentLoadingTask } = await import("../../src/display/api.js");

  const pdfDocument = await PDFDocumentLoadingTask.import(
    `${await import("../../web/test_utils.js").then(m => m.TEST_PDFS_PATH)}/highlight.pdf`,
    null
  );

  const viewer = new PDFViewer({
    container: document.createElement("div"),
    viewerCss: "",
  });

  const annotationEditorUIManager = new AnnotationEditorUIManager(
    viewer.container,
    viewer,
    null,
    null,
    pdfDocument,
    null,
    null,
    null
  );

  const pageView = new PDFPageView({
    container: viewer.container,
    annotationEditorUIManager,
    pdfPage: pdfDocument.pages[0],
    renderInteractiveForms: false,
    viewport: pdfDocument.pages[0].getViewport(1),
  });

  viewer._setPageView(pageView);

  const highlightEditor = new HighlightEditor({
    pageIndex: 0,
    boxes: [{ x: 0, y: 0, width: 1, height: 1 }],
    anchorNode: null,
    anchorOffset: 0,
    focusNode: null,
    focusOffset: 0,
  });

  annotationEditorUIManager.addEditor(highlightEditor);

  const text = "This is a highlighted text.";
  highlightEditor.#text = text;

  const div = highlightEditor.render();
  pageView.div.appendChild(div);

  const mark = div.querySelector("mark");
  const textNode = mark.querySelector("span");

  expect(textNode.textContent).toBe(text);
});
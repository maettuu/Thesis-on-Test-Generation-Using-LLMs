it("should read highlighted text during editing inside a PDF", async () => {
  const { PDFDocument, PDFPageProxy } = await import("../../src/display/api.js");
  const { DOMSVGFactory } = await import("../../src/display/display_utils.js");
  const { AnnotationEditorUIManager } = await import("../../src/display/editor/tools.js");
  const { HighlightEditor } = await import("../../src/display/editor/highlight.js");
  const pdfDocument = await PDFDocument.load(await fetch("path_to_test_pdf.pdf").then(response => response.arrayBuffer()));
  const pdfPage = await pdfDocument.getPage(1);
  const pdfPageProxy = new PDFPageProxy(pdfPage);
  const annotationEditorUIManager = new AnnotationEditorUIManager(null, null, null, null, pdfDocument, null, null, null);
  const highlightEditor = new HighlightEditor({ anchorNode: null, anchorOffset: 0, focusNode: null, focusOffset: 0, boxes: null, methodOfCreation: "" });
  const div = highlightEditor.render();
  const mark = div.querySelector("mark");
  const text = "Highlighted text";
  mark.append(document.createTextNode(text));
  const voiceOverText = await getVoiceOverText(div);
  expect(voiceOverText).toBe(text);
});

async function getVoiceOverText(element) {
  // This function should return the text that would be read by Voice Over
  // For the purpose of this test, we assume that the text is the text content of the mark element
  return element.querySelector("mark").textContent;
}
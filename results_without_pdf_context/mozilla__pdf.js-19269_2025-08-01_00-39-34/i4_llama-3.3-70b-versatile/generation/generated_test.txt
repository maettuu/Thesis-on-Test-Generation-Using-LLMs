it("should render top and bottom images in pdf file", async () => {
  const { PartialEvaluator } = await import("../../src/core/evaluator.js");
  const { OperatorList } = await import("../../src/core/operator_list.js");
  const evaluator = new PartialEvaluator({
    xref: {},
    handler: {},
    pageIndex: 0,
    idFactory: {},
    fontCache: {},
    builtInCMapCache: {},
    standardFontDataCache: {},
    globalImageCache: {},
    systemFontCache: {},
    options: {},
  });
  const operatorList = new OperatorList();
  const image = {
    dict: {
      Subtype: "Image",
      Width: 100,
      Height: 100,
      ColorSpace: "DeviceRGB",
      BitsPerComponent: 8,
      Filter: "DCTDecode",
    },
    getBytes: () => new Uint8Array(100 * 100 * 3),
  };
  const hasMask = true;
  evaluator.buildPaintImageXObject({
    resources: {},
    image,
    isInline: false,
    operatorList,
    cacheKey: "image",
    localImageCache: {},
    localColorSpaceCache: {},
  });
  const expectedOps = [
    "save",
    "setGState",
    ["SMask", false],
    "paintImageXObject",
    "restore",
  ];
  const actualOps = operatorList.getIR().fnArray;
  actualOps.push(...operatorList.getIR().argsArray.map((arg) => arg[0]));
  expect(actualOps).toEqual(expect.arrayContaining(expectedOps));
});
it("should display top and bottom images in the PDF file", async () => {
  const { PDFImage } = await import("../../src/core/image.js");
  const { OPS } = await import("../../src/shared/util.js");

  const xref = new XRefMock();
  const resources = Dict.empty;
  const imageDict = new Dict();
  imageDict.set("W", 100);
  imageDict.set("H", 100);
  imageDict.set("Subtype", Name.get("Image"));
  const imageStream = new Stream(new Uint8Array([0, 0, 0, 0]));
  imageStream.dict = imageDict;

  const operatorList = new OperatorList();
  const evaluator = new PartialEvaluator({
    xref,
    handler: null,
    pageIndex: 0,
    idFactory: createIdFactory(0),
    fontCache: null,
    builtInCMapCache: null,
    standardFontDataCache: null,
    globalImageCache: null,
    systemFontCache: null,
  });

  await evaluator.buildPaintImageXObject({
    resources,
    image: imageStream,
    operatorList,
    cacheKey: null,
    localImageCache: null,
    localColorSpaceCache: null,
  });

  const hasSaveOp = operatorList.fnArray.includes(OPS.save);
  const hasRestoreOp = operatorList.fnArray.includes(OPS.restore);
  expect(hasSaveOp).toBe(true);
  expect(hasRestoreOp).toBe(true);
});
it("should display top and bottom images in pdf file", async () => {
  const { PDFDocument } = await import("../../src/core/document.js");
  const { PDFPage } = await import("../../src/core/document.js");
  const { PartialEvaluator } = await import("../../src/core/evaluator.js");
  const { OperatorList } = await import("../../src/core/operator_list.js");
  const { PDFImage } = await import("../../src/core/image.js");

  const pdfDoc = await PDFDocument.load(await fetch("path_to_pdf_file.pdf").then(response => response.arrayBuffer()));
  const page = pdfDoc.getPage(1);
  const operatorList = new OperatorList();
  const evaluator = new PartialEvaluator({
    xref: pdfDoc.xref,
    handler: null,
    pageIndex: 0,
    idFactory: null,
    fontCache: null,
    builtInCMapCache: null,
    standardFontDataCache: null,
    globalImageCache: null,
    systemFontCache: null,
  });

  await evaluator.getOperatorList({
    stream: page.stream,
    task: null,
    resources: page.resources,
    operatorList,
    initialState: null,
    fallbackFontDict: null,
  });

  const expectedImages = 2; // assuming there are 2 images in the pdf file
  const actualImages = operatorList.fnArray.filter(fn => fn === "paintImageXObject" || fn === "paintInlineImageXObject").length;

  expect(actualImages).toBe(expectedImages);
});
it("should render PDF correctly with base href in Firefox", async () => {
  const { PDFDocument, PDFPageProxy } = await import("../../src/display/api.js");
  const { createIdFactory } = await import("./test_utils.js");
  const { PDFNetworkStream } = await import("../../src/display/network.js");
  const { createTemporaryNodeServer } = await import("./test_utils.js");

  const server = await createTemporaryNodeServer();
  const pdfUrl = server.url + "/test.pdf";
  const baseUrl = server.url;
  const idFactory = createIdFactory();

  const pdfDocument = await PDFDocument.load({ url: pdfUrl, cMapUrl: "", cMapPacked: true, pdfNetworkStream: new PDFNetworkStream(idFactory) });
  const pdfPage = await pdfDocument.getPage(1);

  const canvas = document.createElement("canvas");
  const ctx = canvas.getContext("2d");
  const renderTask = pdfPage.render({ canvasContext: ctx, viewport: pdfPage.getViewport({ scale: 1 }) });

  await renderTask.promise;

  const html = `<html><head><base href="${baseUrl}"/></head><body><canvas></canvas></body></html>`;
  const doc = new DOMParser().parseFromString(html, "text/html");
  const base = doc.querySelector("base");
  const canvasElement = doc.querySelector("canvas");

  const originalCreateElementNS = document.createElementNS;
  const originalGetElementById = document.getElementById;

  document.createElementNS = (namespace, name) => {
    if (name === "canvas") {
      return canvasElement;
    }
    return originalCreateElementNS.apply(document, [namespace, name]);
  };

  document.getElementById = (id) => {
    if (id === "pdfViewer") {
      return { getBoundingClientRect: () => ({ width: 100, height: 100 }) };
    }
    return originalGetElementById.apply(document, [id]);
  };

  const { DOMFilterFactory } = await import("../../src/display/display_utils.js");
  const filterFactory = new DOMFilterFactory({ document, baseUrl: base.href });

  const expectedUrl = `url(${baseUrl}#test)`;
  const actualUrl = filterFactory.#createUrl("test");

  await server.close();

  expect(actualUrl).toBe(expectedUrl);
});
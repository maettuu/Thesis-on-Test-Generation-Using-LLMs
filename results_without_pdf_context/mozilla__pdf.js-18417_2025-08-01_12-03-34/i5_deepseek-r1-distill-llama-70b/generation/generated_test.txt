it("should correctly generate filter URLs with base element", async () => {
  const { DOMFilterFactory } = await import("../../src/display/display_utils.js");
  const { PDFDocument } = await import("../../src/display/api.js");

  // Create a test PDF document
  const pdf = await PDFDocument.load(testreporter.fetchMock(test_utils.TEST_PDFS_PATH + "test.pdf"));

  // Create a page and get the first page
  const page = (await pdf.getPages()).get(0);

  // Mock document and baseURI to simulate <base> element
  const mockDocument = {
    URL: "http://example.com/viewer.html",
    baseURI: "http://example.com/viewer.html",
    createElement: () => ({})
  };

  // Create DOMFilterFactory with mocked document
  const factory = new DOMFilterFactory(mockDocument, pdf);

  // Generate filter URLs
  const filter1 = await factory.addFilter([{ component: 0, transfer: 1 }]);
  const filter2 = await factory.addFilter([{ component: 1, transfer: 0.5 }]);
  const filter3 = await factory.addLuminosityFilter(0.8);

  // Verify URLs are correctly prefixed with base URL
  expect(filter1.startsWith("http://example.com/viewer.html")).toBe(true);
  expect(filter2.startsWith("http://example.com/viewer.html")).toBe(true);
  expect(filter3.startsWith("http://example.com/viewer.html")).toBe(true);
});
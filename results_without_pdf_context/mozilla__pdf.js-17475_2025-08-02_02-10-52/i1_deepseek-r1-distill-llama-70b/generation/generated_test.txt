it("should correctly position highlights on cropped PDFs", async () => {
  const { PDFDocumentProxy, PDFPageProxy } = await import("../../src/display/api.js");
  const pdfData = new Uint8Array([/* base64 encoded PDF data */]);
  const pdf = await getDocument({
    data: pdfData,
    range: new PDFDataRangeTransport(),
    password: "",
  });
  const page = await pdf.getPage(0);

  // Simulate cropped PDF
  const cropRect = [100, 100, 300, 300]; // [x, y, width, height]
  const viewport = page.getViewport({ scale: 1 });
  const [pageWidth, pageHeight] = [viewport.width, viewport.height];

  const uiManager = new AnnotationEditorUIManager();
  const drawLayer = new DrawLayer();
  const highlightEditor = new HighlightEditor({
    color: "#fff066",
    opacity: 1,
    boxes: [{ x: 0.5, y: 0.5, width: 0.2, height: 0.2 }],
    pageIndex: 0,
    page,
  });

  highlightEditor.rotate(0);
  const serialized = highlightEditor.serialize();

  const expectedQuadPoints = [
    100 + (0.5 * pageWidth), 100 + (0.5 * pageHeight),
    100 + (0.5 * pageWidth), 100 + (0.5 * pageHeight),
    100 + (0.5 * pageWidth) + (0.2 * pageWidth), 100 + (0.5 * pageHeight),
    100 + (0.5 * pageWidth) + (0.2 * pageWidth), 100 + (0.5 * pageHeight) + (0.2 * pageHeight),
    100 + (0.5 * pageWidth), 100 + (0.5 * pageHeight) + (0.2 * pageHeight),
    100 + (0.5 * pageWidth), 100 + (0.5 * pageHeight) + (0.2 * pageHeight)
  ];

  expect(serialized.quadPoints).toEqual(expectedQuadPoints);
});
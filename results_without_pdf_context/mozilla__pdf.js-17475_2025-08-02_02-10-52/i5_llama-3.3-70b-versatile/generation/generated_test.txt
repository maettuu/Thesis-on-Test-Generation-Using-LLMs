it("should display highlight on cropped pdf when savingprinting", async () => {
  const { PDFDocument, PDFPageProxy } = await import("../../src/display/api.js");
  const { Util } = await import("../../src/shared/util.js");
  const { PDFWorker } = await import("../../src/display/api.js");

  const pdfDoc = await PDFDocument.load(await (await import("../../src/display/fetch_stream.js")).PDFFetchStream.fetch("path_to_cropped_pdf"));
  const page = await pdfDoc.getPage(1);
  const viewport = page.getViewport({ scale: 1 });
  const renderTask = page.render({
    viewport,
    intent: "print",
  });

  const highlightEditor = {
    pageDimensions: [viewport.width, viewport.height],
    #boxes: [{ x: 0.1, y: 0.1, width: 0.2, height: 0.2 }],
    #serializeBoxes: function(rect) {
      const [pageWidth, pageHeight] = this.pageDimensions;
      const boxes = this.#boxes;
      const quadPoints = new Array(boxes.length * 8);
      const [tx, ty] = rect;
      let i = 0;
      for (const { x, y, width, height } of boxes) {
        const sx = tx + x * pageWidth;
        const sy = ty + (1 - y - height) * pageHeight;
        quadPoints[i] = sx;
        quadPoints[i + 1] = sy;
        quadPoints[i + 2] = sx + width * pageWidth;
        quadPoints[i + 3] = sy;
        quadPoints[i + 4] = sx + width * pageWidth;
        quadPoints[i + 5] = sy + height * pageHeight;
        quadPoints[i + 6] = sx;
        quadPoints[i + 7] = sy + height * pageHeight;
        i += 8;
      }
      return quadPoints;
    },
  };

  const expectedQuadPoints = highlightEditor.#serializeBoxes([0, 0]);
  const actualQuadPoints = (await renderTask.promise).quadPoints;

  expect(actualQuadPoints).toEqual(expectedQuadPoints);
});
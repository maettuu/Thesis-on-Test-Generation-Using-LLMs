it("should correctly calculate highlight positions when PDF has a crop box", async () => {
  const { PDFDocument } = await import("../../src/core/pdf_document.js");
  const { PDFPage } = await import("../../src/core/pdf_page.js");
  const { AnnotationEditor } = await import("./editor.js");

  // Load a test PDF with crop box
  const pdf = await PDFDocument.load(await fetch("test.pdf").then(res => res.arrayBuffer()));
  const page = pdf.getPage(0);

  // Create highlight editor with test data
  const highlightEditor = new AnnotationEditor({
    pageIndex: 0,
    color: "#ff0000",
    opacity: 0.5,
    boxes: [{x: 0.1, y: 0.1, width: 0.2, height: 0.2}],
    pageDimensions: [page.getWidth(), page.getHeight()],
    uiManager: null
  });

  // Serialize the highlight data
  const serialized = highlightEditor.serialize();

  // The expected quadPoints should include the crop box offset
  const expectedQuadPoints = [100, 100, 200, 200, 150, 150, 250, 250];

  // After the patch, the quadPoints should match the expected values
  expect(serialized.quadPoints).toEqual(expectedQuadPoints);
});
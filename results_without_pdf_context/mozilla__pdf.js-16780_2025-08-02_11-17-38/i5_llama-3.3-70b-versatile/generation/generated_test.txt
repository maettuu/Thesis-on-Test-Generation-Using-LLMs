it("should resize SVG images horizontallyvertically in pdfjs", async () => {
  const { PDFDocument, PDFPage } = await import("../../src/core/document.js");
  const { AnnotationEditorUIManager, ImageManager } = await import("../../src/display/editor/tools.js");
  const { createIdFactory } = await import("./test_utils.js");

  const pdfDoc = await PDFDocument.load(await fetch("path_to_test_pdf_with_svg_image.pdf").then(res => res.arrayBuffer()));
  const page = pdfDoc.getPage(1);
  const imageManager = new ImageManager(createIdFactory());
  const annotationEditorUIManager = new AnnotationEditorUIManager();

  const svgImage = await imageManager.#get("svg_image", "data:image/svg+xml;charset=UTF-8,<svg viewBox=\"0 0 100 100\" width=\"100\" height=\"100\" xmlns=\"http://www.w3.org/2000/svg\"><rect width=\"100\" height=\"100\" style=\"fill:red;"/></svg>");
  const imageElement = new Image();
  imageElement.src = svgImage.svgUrl;

  const mustRemoveAspectRatioPromise = ImageManager._checkIfSVGFitsInCanvas();
  const url = await mustRemoveAspectRatioPromise ? `${svgImage.svgUrl}#svgView(preserveAspectRatio(none))` : svgImage.svgUrl;
  imageElement.src = url;

  const expectedWidth = 50;
  const expectedHeight = 50;
  imageElement.width = expectedWidth;
  imageElement.height = expectedHeight;

  const actualWidth = imageElement.width;
  const actualHeight = imageElement.height;

  expect(actualWidth).toBe(expectedWidth);
  expect(actualHeight).toBe(expectedHeight);
});
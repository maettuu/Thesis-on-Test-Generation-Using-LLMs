<think>
Okay, I need to write a regression test for the issue where SVG images couldn't be resized in pdf.js. The patch provided adds a method to check if SVGs fit the canvas and appends a URL parameter if needed. 

First, I'll look at the existing test file, annotation_spec.js. It imports necessary modules, so I can reuse those. I need to create a test that fails before the patch and passes after.

I'll start by importing the required modules. Since the test is about image resizing, I'll need to import ImageManager from the correct path. 

I'll set up a test case where an SVG image is added and then resized. The problem was that SVGs couldn't be resized, so after the patch, resizing should work correctly.

I'll create a test SVG image using a data URL. Then, I'll create an instance of ImageManager and fetch the image. 

Next, I'll simulate resizing by drawing the image on a canvas with a different height. I'll check if the image data matches the expected color after resizing. If the patch works, the image should resize without preserving the aspect ratio, changing the color as expected.

I'll write the test using Jest's async/await syntax. The test will fail before the patch because the aspect ratio isn't removed, so the image doesn't resize correctly. After the patch, the aspect ratio is removed, allowing proper resizing.

I need to ensure the test is self-contained and uses only the provided imports. I'll structure the test with the necessary setup, image creation, and assertion.
</think>

```javascript
it("should properly resize SVG images by removing aspect ratio preservation", async () => {
  const { ImageManager } = await import("../../src/display/editor/tools.js");
  const { Util } = await import("../../shared/util.js");
  
  // Create a test SVG image
  const svgData = `<svg viewBox="0 0 1 1" width="1" height="1" xmlns="http://www.w3.org/2000/svg">
    <rect width="1" height="1" style="fill:red;"/>
  </svg>`;
  const svgUrl = `data:image/svg+xml;base64,${Util.stringToBytes(svgData).toString('base64')}`;
  
  // Create ImageManager instance
  const imageManager = new ImageManager();
  
  // Fetch the image through ImageManager
  const image = await imageManager.get(svgUrl);
  
  // Create a canvas to test resizing
  const canvas = new OffscreenCanvas(1, 3);
  const ctx = canvas.getContext('2d');
  
  // Draw the image on the canvas with resizing
  ctx.drawImage(image.bitmap, 0, 0, 1, 1, 0, 0, 1, 3);
  
  // Check if the image was resized correctly (red color at bottom)
  const imageData = new Uint32Array(ctx.getImageData(0, 0, 1, 3).data.buffer);
  const expectedColor = 0; // Transparent or resized red
  
  expect(imageData[0]).toBe(expectedColor);
});
```
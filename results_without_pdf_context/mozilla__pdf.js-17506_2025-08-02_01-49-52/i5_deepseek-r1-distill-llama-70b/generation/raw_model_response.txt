<think>
Okay, so I need to write a regression test for the issue where highlighting images of text wasn't supported. The patch adds support for this, so the test should fail before the patch and pass after.

First, I'll start by understanding what the patch does. It introduces a FreeOutliner and FreeHighlightOutline classes, which handle the highlighting of text images. The test should simulate creating such a highlight and check if it's rendered correctly.

I'll use Jest for the test. I'll import the necessary modules like DrawLayer, AnnotationEditorLayer, and the Outliner. 

I'll set up a mock viewport with dimensions and scale. Then, I'll create instances of DrawLayer and AnnotationEditorLayer. 

Next, I'll simulate pointer events to start and end the highlighting. This involves creating a FreeOutliner and adding points to it. After adding points, I'll call parent.drawLayer.highlight to create the highlight.

I'll check if the highlight was successfully created by verifying that the id is not -1. Also, I'll ensure that the SVG path is not empty, indicating the highlight was rendered.

I need to make sure the test is self-contained and doesn't rely on external dependencies beyond the provided imports. I'll structure the test with async/await for the pointer events and use exact path imports as specified.

Finally, the test will assert that the highlightId is valid and the path exists, ensuring the functionality works after the patch.
</think>

```javascript
it("should support highlighting images of text", async () => {
  const { DrawLayer } = await import("../../src/display/draw_layer.js");
  const { AnnotationEditorLayer } = await import("../../src/display/editor/annotation_editor_layer.js");
  const { Outliner } = await import("../../src/display/editor/outliner.js");

  const viewport = {
    rawDims: { pageWidth: 1000, pageHeight: 1000 },
    scale: 1,
  };

  const drawLayer = new DrawLayer({ pageIndex: 0 });
  const parent = new AnnotationEditorLayer(viewport);

  const mockEvent = {
    target: {
      getBoundingClientRect: () => ({
        x: 0,
        y: 0,
        width: 1000,
        height: 1000,
      }),
    },
  };

  const outliner = new Outliner();
  outliner.add({ x: 100, y: 100 });
  outliner.add({ x: 200, y: 200 });

  const highlightId = parent.drawLayer.highlight(
    outliner,
    "#ff0000",
    0.5,
    true
  );

  expect(highlightId).not.toBe(-1);
  const path = parent.drawLayer.svg.querySelector(`[id="${highlightId}"] path`);
  expect(path.getAttribute("d")).toBeTruthy();
});
```
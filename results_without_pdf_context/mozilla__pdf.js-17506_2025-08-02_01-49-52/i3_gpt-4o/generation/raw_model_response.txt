```javascript
it("should support highlighting images of text in addition to text", async () => {
  const { HighlightEditor } = await import("../../src/display/editor/highlight.js");
  const { AnnotationEditorLayer } = await import("../../src/display/editor/annotation_editor_layer.js");
  const { DrawLayer } = await import("../../src/display/draw_layer.js");
  const { FeatureTest } = await import("../../src/shared/util.js");

  const uiManager = {
    getMode: () => AnnotationEditorType.HIGHLIGHT,
    addLayer: () => {},
    registerEditorTypes: () => {},
    updateToolbar: () => {},
    updateMode: () => {},
    getActive: () => null,
    setActiveEditor: () => {},
    addEditor: () => {},
    removeEditor: () => {},
    addToAnnotationStorage: () => {},
    commitOrRemove: () => {},
    getEditors: () => [],
    findParent: () => null,
    isDeletedAnnotationElement: () => false,
    removeDeletedAnnotationElement: () => {},
    addDeletedAnnotationElement: () => {},
    getId: () => "1",
    setSelected: () => {},
    toggleSelected: () => {},
    isSelected: () => false,
    unselect: () => {},
    highlightColors: new Map([["default", "#fff066"]]),
  };

  const viewport = {
    rotation: 0,
    rawDims: { pageWidth: 800, pageHeight: 600 },
  };

  const textLayerDiv = document.createElement("div");
  const textLayer = { div: textLayerDiv };

  const drawLayer = new DrawLayer({ pageIndex: 0 });
  const annotationEditorLayer = new AnnotationEditorLayer({
    uiManager,
    pageIndex: 0,
    div: document.createElement("div"),
    accessibilityManager: null,
    annotationLayer: null,
    drawLayer,
    textLayer,
    viewport,
    l10n: null,
  });

  const event = new PointerEvent("pointerdown", { clientX: 100, clientY: 100 });
  textLayerDiv.dispatchEvent(event);

  const highlightEditor = new HighlightEditor({
    parent: annotationEditorLayer,
    uiManager,
    color: "#fff066",
    opacity: 1,
    boxes: [{ x: 0.1, y: 0.1, width: 0.2, height: 0.2 }],
  });

  annotationEditorLayer.add(highlightEditor);

  const expected = true;
  const actual = highlightEditor.div.classList.contains("highlightEditor");

  expect(actual).toBe(expected);
});
```
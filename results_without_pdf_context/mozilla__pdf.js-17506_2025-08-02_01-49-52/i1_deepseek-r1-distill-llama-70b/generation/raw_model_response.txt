<think>
Okay, I need to write a regression test for the issue where highlighting images of text wasn't supported. The patch adds support for this, so the test should fail before the patch and pass after.

First, I'll look at the existing code. The test file already imports necessary modules, so I can use those. I need to create a test that checks if both text and image highlights are correctly handled.

I'll start by setting up a PDF document with a page that has both text and an image. Maybe using a sample file from the test data. Then, I'll simulate adding highlights on both elements.

I'll create a function to check if a highlight is correctly applied. It should return true if the highlight exists and is positioned correctly. I'll apply this function to both text and image elements.

I'll use the existing HighlightEditor and UIManager to create the highlights. After applying them, I'll check each one using the checkHighlight function.

I need to make sure the test is self-contained, so I'll include all necessary imports and setup within the test block. I'll also ensure that the test doesn't rely on any external state beyond what's provided.

Finally, I'll structure the test to fail before the patch and pass after, ensuring that both text and image highlights are correctly supported.
</think>

```javascript
it("should support highlighting both text and images", async () => {
  const { PDFDocument } = await import("../../src/core/pdf_document.js");
  const { getDocument } = await import("../../src/display/api.js");
  const { AnnotationEditorLayer } = await import("../../src/display/editor/annotation_editor_layer.js");
  const { HighlightEditor } = await import("../../src/display/editor/highlight.js");
  const { DOMSVGFactory } = await import("../../src/display/display_utils.js");
  const { shadow } = await import("../../src/shared/util.js");

  const pdf = await getDocument({
    data: new Uint8Array(await (await fetch("test.pdf")).arrayBuffer()),
    cMapLoader: () => Promise.resolve(new Uint8Array()),
  });

  const page = await pdf.getPage(1);
  const viewport = page.getViewport({ scale: 1 });
  const div = document.createElement("div");
  const uiManager = new (class {
    get mode() { return "highlight"; }
    get selectedAnnotation() { return null; }
    addLayer() {}
    unselectAll() {}
    registerEditorType() {}
  });

  const drawLayer = new DrawLayer({ pageIndex: 0 });
  drawLayer._svgFactory = new DOMSVGFactory();

  const editorLayer = new AnnotationEditorLayer({
    uiManager,
    pageIndex: 0,
    div,
    viewport,
    drawLayer,
    textLayer: null,
  });

  const highlightEditor = new HighlightEditor({
    color: "#ff0000",
    opacity: 0.5,
    parent: editorLayer,
  });

  const checkHighlight = (x, y, width, height) => {
    const highlight = editorLayer.drawLayer.highlight(
      { box: { x, y, width, height }, free: true },
      "#ff0000",
      0.5,
      true
    );
    return highlight && highlight.id;
  };

  const textHighlight = checkHighlight(0.1, 0.1, 0.2, 0.1);
  const imageHighlight = checkHighlight(0.3, 0.4, 0.2, 0.1);

  expect(textHighlight).toBeTruthy();
  expect(imageHighlight).toBeTruthy();
});
```
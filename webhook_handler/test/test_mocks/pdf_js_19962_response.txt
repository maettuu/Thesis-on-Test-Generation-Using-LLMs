it("should release memory using WeakRef when rendering is done", async function () {
  const { getDocument } = await import("../../src/display/api.js");
  const { PDFObjects } = await import("../../src/display/pdf_objects.js");

  const loadingTask = getDocument(buildGetDocumentParams("tracemonkey.pdf"));
  const pdfDocument = await loadingTask.promise;
  const pdfObjects = new PDFObjects();

  const page = await pdfDocument.getPage(1);
  const renderTask = page.render({ canvasContext: null, viewport: page.getViewport({ scale: 1.0 }) });

  await renderTask.promise;

  // Simulate moving objects to WeakRef after rendering
  const objId = "testObject";
  pdfObjects.resolve(objId, { data: "testData" });
  const weakRef = new WeakRef(pdfObjects.get(objId));

  // Force garbage collection (not guaranteed, but for testing purposes)
  global.gc && global.gc();

  // Check if the object is still accessible through WeakRef
  expect(weakRef.deref()).not.toBeNull();
});